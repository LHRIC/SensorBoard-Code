
SensorBoard-Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa78  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  0800ab38  0800ab38  0001ab38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad04  0800ad04  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800ad04  0800ad04  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ad04  0800ad04  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad04  0800ad04  0001ad04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad08  0800ad08  0001ad08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800ad0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ff0  2000000c  0800ad18  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ffc  0800ad18  00020ffc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016a81  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000332b  00000000  00000000  00036af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001628  00000000  00000000  00039e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001148  00000000  00000000  0003b450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a889  00000000  00000000  0003c598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016400  00000000  00000000  00056e21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097ddb  00000000  00000000  0006d221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005410  00000000  00000000  00104ffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0010a40c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800ab20 	.word	0x0800ab20

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800ab20 	.word	0x0800ab20

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_f2uiz>:
 8000418:	219e      	movs	r1, #158	; 0x9e
 800041a:	b510      	push	{r4, lr}
 800041c:	05c9      	lsls	r1, r1, #23
 800041e:	1c04      	adds	r4, r0, #0
 8000420:	f001 fd74 	bl	8001f0c <__aeabi_fcmpge>
 8000424:	2800      	cmp	r0, #0
 8000426:	d103      	bne.n	8000430 <__aeabi_f2uiz+0x18>
 8000428:	1c20      	adds	r0, r4, #0
 800042a:	f000 fb11 	bl	8000a50 <__aeabi_f2iz>
 800042e:	bd10      	pop	{r4, pc}
 8000430:	219e      	movs	r1, #158	; 0x9e
 8000432:	1c20      	adds	r0, r4, #0
 8000434:	05c9      	lsls	r1, r1, #23
 8000436:	f000 f96b 	bl	8000710 <__aeabi_fsub>
 800043a:	f000 fb09 	bl	8000a50 <__aeabi_f2iz>
 800043e:	2380      	movs	r3, #128	; 0x80
 8000440:	061b      	lsls	r3, r3, #24
 8000442:	469c      	mov	ip, r3
 8000444:	4460      	add	r0, ip
 8000446:	e7f2      	b.n	800042e <__aeabi_f2uiz+0x16>

08000448 <__aeabi_ul2d>:
 8000448:	b570      	push	{r4, r5, r6, lr}
 800044a:	0006      	movs	r6, r0
 800044c:	0008      	movs	r0, r1
 800044e:	f001 fc81 	bl	8001d54 <__aeabi_ui2d>
 8000452:	2200      	movs	r2, #0
 8000454:	4b06      	ldr	r3, [pc, #24]	; (8000470 <__aeabi_ul2d+0x28>)
 8000456:	f001 f9bb 	bl	80017d0 <__aeabi_dmul>
 800045a:	000d      	movs	r5, r1
 800045c:	0004      	movs	r4, r0
 800045e:	0030      	movs	r0, r6
 8000460:	f001 fc78 	bl	8001d54 <__aeabi_ui2d>
 8000464:	002b      	movs	r3, r5
 8000466:	0022      	movs	r2, r4
 8000468:	f000 fb64 	bl	8000b34 <__aeabi_dadd>
 800046c:	bd70      	pop	{r4, r5, r6, pc}
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	41f00000 	.word	0x41f00000

08000474 <__aeabi_fmul>:
 8000474:	0243      	lsls	r3, r0, #9
 8000476:	0a5b      	lsrs	r3, r3, #9
 8000478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800047a:	464f      	mov	r7, r9
 800047c:	4646      	mov	r6, r8
 800047e:	4699      	mov	r9, r3
 8000480:	46d6      	mov	lr, sl
 8000482:	0fc3      	lsrs	r3, r0, #31
 8000484:	0045      	lsls	r5, r0, #1
 8000486:	4698      	mov	r8, r3
 8000488:	b5c0      	push	{r6, r7, lr}
 800048a:	464b      	mov	r3, r9
 800048c:	1c0f      	adds	r7, r1, #0
 800048e:	0e2d      	lsrs	r5, r5, #24
 8000490:	d100      	bne.n	8000494 <__aeabi_fmul+0x20>
 8000492:	e0cb      	b.n	800062c <__aeabi_fmul+0x1b8>
 8000494:	2dff      	cmp	r5, #255	; 0xff
 8000496:	d100      	bne.n	800049a <__aeabi_fmul+0x26>
 8000498:	e0cf      	b.n	800063a <__aeabi_fmul+0x1c6>
 800049a:	2280      	movs	r2, #128	; 0x80
 800049c:	00db      	lsls	r3, r3, #3
 800049e:	04d2      	lsls	r2, r2, #19
 80004a0:	431a      	orrs	r2, r3
 80004a2:	2300      	movs	r3, #0
 80004a4:	4691      	mov	r9, r2
 80004a6:	2600      	movs	r6, #0
 80004a8:	469a      	mov	sl, r3
 80004aa:	3d7f      	subs	r5, #127	; 0x7f
 80004ac:	027c      	lsls	r4, r7, #9
 80004ae:	007b      	lsls	r3, r7, #1
 80004b0:	0a64      	lsrs	r4, r4, #9
 80004b2:	0e1b      	lsrs	r3, r3, #24
 80004b4:	0fff      	lsrs	r7, r7, #31
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d100      	bne.n	80004bc <__aeabi_fmul+0x48>
 80004ba:	e0a9      	b.n	8000610 <__aeabi_fmul+0x19c>
 80004bc:	2bff      	cmp	r3, #255	; 0xff
 80004be:	d011      	beq.n	80004e4 <__aeabi_fmul+0x70>
 80004c0:	2280      	movs	r2, #128	; 0x80
 80004c2:	00e4      	lsls	r4, r4, #3
 80004c4:	04d2      	lsls	r2, r2, #19
 80004c6:	4314      	orrs	r4, r2
 80004c8:	4642      	mov	r2, r8
 80004ca:	3b7f      	subs	r3, #127	; 0x7f
 80004cc:	195b      	adds	r3, r3, r5
 80004ce:	407a      	eors	r2, r7
 80004d0:	2000      	movs	r0, #0
 80004d2:	b2d2      	uxtb	r2, r2
 80004d4:	1c5d      	adds	r5, r3, #1
 80004d6:	2e0a      	cmp	r6, #10
 80004d8:	dd13      	ble.n	8000502 <__aeabi_fmul+0x8e>
 80004da:	003a      	movs	r2, r7
 80004dc:	2e0b      	cmp	r6, #11
 80004de:	d047      	beq.n	8000570 <__aeabi_fmul+0xfc>
 80004e0:	4647      	mov	r7, r8
 80004e2:	e03f      	b.n	8000564 <__aeabi_fmul+0xf0>
 80004e4:	002b      	movs	r3, r5
 80004e6:	33ff      	adds	r3, #255	; 0xff
 80004e8:	2c00      	cmp	r4, #0
 80004ea:	d11e      	bne.n	800052a <__aeabi_fmul+0xb6>
 80004ec:	2202      	movs	r2, #2
 80004ee:	4316      	orrs	r6, r2
 80004f0:	4642      	mov	r2, r8
 80004f2:	3501      	adds	r5, #1
 80004f4:	407a      	eors	r2, r7
 80004f6:	b2d2      	uxtb	r2, r2
 80004f8:	35ff      	adds	r5, #255	; 0xff
 80004fa:	2e0a      	cmp	r6, #10
 80004fc:	dd00      	ble.n	8000500 <__aeabi_fmul+0x8c>
 80004fe:	e0e4      	b.n	80006ca <__aeabi_fmul+0x256>
 8000500:	2002      	movs	r0, #2
 8000502:	2e02      	cmp	r6, #2
 8000504:	dc1c      	bgt.n	8000540 <__aeabi_fmul+0xcc>
 8000506:	3e01      	subs	r6, #1
 8000508:	2e01      	cmp	r6, #1
 800050a:	d842      	bhi.n	8000592 <__aeabi_fmul+0x11e>
 800050c:	2802      	cmp	r0, #2
 800050e:	d03d      	beq.n	800058c <__aeabi_fmul+0x118>
 8000510:	2801      	cmp	r0, #1
 8000512:	d166      	bne.n	80005e2 <__aeabi_fmul+0x16e>
 8000514:	2000      	movs	r0, #0
 8000516:	2100      	movs	r1, #0
 8000518:	05c0      	lsls	r0, r0, #23
 800051a:	4308      	orrs	r0, r1
 800051c:	07d2      	lsls	r2, r2, #31
 800051e:	4310      	orrs	r0, r2
 8000520:	bce0      	pop	{r5, r6, r7}
 8000522:	46ba      	mov	sl, r7
 8000524:	46b1      	mov	r9, r6
 8000526:	46a8      	mov	r8, r5
 8000528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800052a:	2203      	movs	r2, #3
 800052c:	4316      	orrs	r6, r2
 800052e:	4642      	mov	r2, r8
 8000530:	3501      	adds	r5, #1
 8000532:	407a      	eors	r2, r7
 8000534:	b2d2      	uxtb	r2, r2
 8000536:	35ff      	adds	r5, #255	; 0xff
 8000538:	2e0a      	cmp	r6, #10
 800053a:	dd00      	ble.n	800053e <__aeabi_fmul+0xca>
 800053c:	e0e4      	b.n	8000708 <__aeabi_fmul+0x294>
 800053e:	2003      	movs	r0, #3
 8000540:	2101      	movs	r1, #1
 8000542:	40b1      	lsls	r1, r6
 8000544:	26a6      	movs	r6, #166	; 0xa6
 8000546:	00f6      	lsls	r6, r6, #3
 8000548:	4231      	tst	r1, r6
 800054a:	d10a      	bne.n	8000562 <__aeabi_fmul+0xee>
 800054c:	2690      	movs	r6, #144	; 0x90
 800054e:	00b6      	lsls	r6, r6, #2
 8000550:	4231      	tst	r1, r6
 8000552:	d116      	bne.n	8000582 <__aeabi_fmul+0x10e>
 8000554:	3eb9      	subs	r6, #185	; 0xb9
 8000556:	3eff      	subs	r6, #255	; 0xff
 8000558:	420e      	tst	r6, r1
 800055a:	d01a      	beq.n	8000592 <__aeabi_fmul+0x11e>
 800055c:	46a1      	mov	r9, r4
 800055e:	4682      	mov	sl, r0
 8000560:	e000      	b.n	8000564 <__aeabi_fmul+0xf0>
 8000562:	0017      	movs	r7, r2
 8000564:	4653      	mov	r3, sl
 8000566:	003a      	movs	r2, r7
 8000568:	2b02      	cmp	r3, #2
 800056a:	d00f      	beq.n	800058c <__aeabi_fmul+0x118>
 800056c:	464c      	mov	r4, r9
 800056e:	4650      	mov	r0, sl
 8000570:	2803      	cmp	r0, #3
 8000572:	d1cd      	bne.n	8000510 <__aeabi_fmul+0x9c>
 8000574:	2180      	movs	r1, #128	; 0x80
 8000576:	03c9      	lsls	r1, r1, #15
 8000578:	4321      	orrs	r1, r4
 800057a:	0249      	lsls	r1, r1, #9
 800057c:	20ff      	movs	r0, #255	; 0xff
 800057e:	0a49      	lsrs	r1, r1, #9
 8000580:	e7ca      	b.n	8000518 <__aeabi_fmul+0xa4>
 8000582:	2180      	movs	r1, #128	; 0x80
 8000584:	2200      	movs	r2, #0
 8000586:	20ff      	movs	r0, #255	; 0xff
 8000588:	03c9      	lsls	r1, r1, #15
 800058a:	e7c5      	b.n	8000518 <__aeabi_fmul+0xa4>
 800058c:	20ff      	movs	r0, #255	; 0xff
 800058e:	2100      	movs	r1, #0
 8000590:	e7c2      	b.n	8000518 <__aeabi_fmul+0xa4>
 8000592:	0c20      	lsrs	r0, r4, #16
 8000594:	4649      	mov	r1, r9
 8000596:	0424      	lsls	r4, r4, #16
 8000598:	0c24      	lsrs	r4, r4, #16
 800059a:	0027      	movs	r7, r4
 800059c:	0c0e      	lsrs	r6, r1, #16
 800059e:	0409      	lsls	r1, r1, #16
 80005a0:	0c09      	lsrs	r1, r1, #16
 80005a2:	4374      	muls	r4, r6
 80005a4:	434f      	muls	r7, r1
 80005a6:	4346      	muls	r6, r0
 80005a8:	4348      	muls	r0, r1
 80005aa:	0c39      	lsrs	r1, r7, #16
 80005ac:	1900      	adds	r0, r0, r4
 80005ae:	1809      	adds	r1, r1, r0
 80005b0:	428c      	cmp	r4, r1
 80005b2:	d903      	bls.n	80005bc <__aeabi_fmul+0x148>
 80005b4:	2080      	movs	r0, #128	; 0x80
 80005b6:	0240      	lsls	r0, r0, #9
 80005b8:	4684      	mov	ip, r0
 80005ba:	4466      	add	r6, ip
 80005bc:	043f      	lsls	r7, r7, #16
 80005be:	0408      	lsls	r0, r1, #16
 80005c0:	0c3f      	lsrs	r7, r7, #16
 80005c2:	19c0      	adds	r0, r0, r7
 80005c4:	0184      	lsls	r4, r0, #6
 80005c6:	1e67      	subs	r7, r4, #1
 80005c8:	41bc      	sbcs	r4, r7
 80005ca:	0c09      	lsrs	r1, r1, #16
 80005cc:	0e80      	lsrs	r0, r0, #26
 80005ce:	1989      	adds	r1, r1, r6
 80005d0:	4304      	orrs	r4, r0
 80005d2:	0189      	lsls	r1, r1, #6
 80005d4:	430c      	orrs	r4, r1
 80005d6:	0109      	lsls	r1, r1, #4
 80005d8:	d571      	bpl.n	80006be <__aeabi_fmul+0x24a>
 80005da:	2301      	movs	r3, #1
 80005dc:	0861      	lsrs	r1, r4, #1
 80005de:	401c      	ands	r4, r3
 80005e0:	430c      	orrs	r4, r1
 80005e2:	002b      	movs	r3, r5
 80005e4:	337f      	adds	r3, #127	; 0x7f
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	dd51      	ble.n	800068e <__aeabi_fmul+0x21a>
 80005ea:	0761      	lsls	r1, r4, #29
 80005ec:	d004      	beq.n	80005f8 <__aeabi_fmul+0x184>
 80005ee:	210f      	movs	r1, #15
 80005f0:	4021      	ands	r1, r4
 80005f2:	2904      	cmp	r1, #4
 80005f4:	d000      	beq.n	80005f8 <__aeabi_fmul+0x184>
 80005f6:	3404      	adds	r4, #4
 80005f8:	0121      	lsls	r1, r4, #4
 80005fa:	d503      	bpl.n	8000604 <__aeabi_fmul+0x190>
 80005fc:	4b43      	ldr	r3, [pc, #268]	; (800070c <__aeabi_fmul+0x298>)
 80005fe:	401c      	ands	r4, r3
 8000600:	002b      	movs	r3, r5
 8000602:	3380      	adds	r3, #128	; 0x80
 8000604:	2bfe      	cmp	r3, #254	; 0xfe
 8000606:	dcc1      	bgt.n	800058c <__aeabi_fmul+0x118>
 8000608:	01a1      	lsls	r1, r4, #6
 800060a:	0a49      	lsrs	r1, r1, #9
 800060c:	b2d8      	uxtb	r0, r3
 800060e:	e783      	b.n	8000518 <__aeabi_fmul+0xa4>
 8000610:	2c00      	cmp	r4, #0
 8000612:	d12c      	bne.n	800066e <__aeabi_fmul+0x1fa>
 8000614:	2301      	movs	r3, #1
 8000616:	4642      	mov	r2, r8
 8000618:	431e      	orrs	r6, r3
 800061a:	002b      	movs	r3, r5
 800061c:	407a      	eors	r2, r7
 800061e:	2001      	movs	r0, #1
 8000620:	b2d2      	uxtb	r2, r2
 8000622:	1c5d      	adds	r5, r3, #1
 8000624:	2e0a      	cmp	r6, #10
 8000626:	dd00      	ble.n	800062a <__aeabi_fmul+0x1b6>
 8000628:	e757      	b.n	80004da <__aeabi_fmul+0x66>
 800062a:	e76a      	b.n	8000502 <__aeabi_fmul+0x8e>
 800062c:	2b00      	cmp	r3, #0
 800062e:	d110      	bne.n	8000652 <__aeabi_fmul+0x1de>
 8000630:	2301      	movs	r3, #1
 8000632:	2604      	movs	r6, #4
 8000634:	2500      	movs	r5, #0
 8000636:	469a      	mov	sl, r3
 8000638:	e738      	b.n	80004ac <__aeabi_fmul+0x38>
 800063a:	2b00      	cmp	r3, #0
 800063c:	d104      	bne.n	8000648 <__aeabi_fmul+0x1d4>
 800063e:	2302      	movs	r3, #2
 8000640:	2608      	movs	r6, #8
 8000642:	25ff      	movs	r5, #255	; 0xff
 8000644:	469a      	mov	sl, r3
 8000646:	e731      	b.n	80004ac <__aeabi_fmul+0x38>
 8000648:	2303      	movs	r3, #3
 800064a:	260c      	movs	r6, #12
 800064c:	25ff      	movs	r5, #255	; 0xff
 800064e:	469a      	mov	sl, r3
 8000650:	e72c      	b.n	80004ac <__aeabi_fmul+0x38>
 8000652:	4648      	mov	r0, r9
 8000654:	f001 fc64 	bl	8001f20 <__clzsi2>
 8000658:	464a      	mov	r2, r9
 800065a:	1f43      	subs	r3, r0, #5
 800065c:	2576      	movs	r5, #118	; 0x76
 800065e:	409a      	lsls	r2, r3
 8000660:	2300      	movs	r3, #0
 8000662:	426d      	negs	r5, r5
 8000664:	4691      	mov	r9, r2
 8000666:	2600      	movs	r6, #0
 8000668:	469a      	mov	sl, r3
 800066a:	1a2d      	subs	r5, r5, r0
 800066c:	e71e      	b.n	80004ac <__aeabi_fmul+0x38>
 800066e:	0020      	movs	r0, r4
 8000670:	f001 fc56 	bl	8001f20 <__clzsi2>
 8000674:	4642      	mov	r2, r8
 8000676:	1f43      	subs	r3, r0, #5
 8000678:	409c      	lsls	r4, r3
 800067a:	1a2b      	subs	r3, r5, r0
 800067c:	3b76      	subs	r3, #118	; 0x76
 800067e:	407a      	eors	r2, r7
 8000680:	2000      	movs	r0, #0
 8000682:	b2d2      	uxtb	r2, r2
 8000684:	1c5d      	adds	r5, r3, #1
 8000686:	2e0a      	cmp	r6, #10
 8000688:	dd00      	ble.n	800068c <__aeabi_fmul+0x218>
 800068a:	e726      	b.n	80004da <__aeabi_fmul+0x66>
 800068c:	e739      	b.n	8000502 <__aeabi_fmul+0x8e>
 800068e:	2101      	movs	r1, #1
 8000690:	1acb      	subs	r3, r1, r3
 8000692:	2b1b      	cmp	r3, #27
 8000694:	dd00      	ble.n	8000698 <__aeabi_fmul+0x224>
 8000696:	e73d      	b.n	8000514 <__aeabi_fmul+0xa0>
 8000698:	359e      	adds	r5, #158	; 0x9e
 800069a:	0021      	movs	r1, r4
 800069c:	40ac      	lsls	r4, r5
 800069e:	40d9      	lsrs	r1, r3
 80006a0:	1e63      	subs	r3, r4, #1
 80006a2:	419c      	sbcs	r4, r3
 80006a4:	4321      	orrs	r1, r4
 80006a6:	074b      	lsls	r3, r1, #29
 80006a8:	d004      	beq.n	80006b4 <__aeabi_fmul+0x240>
 80006aa:	230f      	movs	r3, #15
 80006ac:	400b      	ands	r3, r1
 80006ae:	2b04      	cmp	r3, #4
 80006b0:	d000      	beq.n	80006b4 <__aeabi_fmul+0x240>
 80006b2:	3104      	adds	r1, #4
 80006b4:	014b      	lsls	r3, r1, #5
 80006b6:	d504      	bpl.n	80006c2 <__aeabi_fmul+0x24e>
 80006b8:	2001      	movs	r0, #1
 80006ba:	2100      	movs	r1, #0
 80006bc:	e72c      	b.n	8000518 <__aeabi_fmul+0xa4>
 80006be:	001d      	movs	r5, r3
 80006c0:	e78f      	b.n	80005e2 <__aeabi_fmul+0x16e>
 80006c2:	0189      	lsls	r1, r1, #6
 80006c4:	2000      	movs	r0, #0
 80006c6:	0a49      	lsrs	r1, r1, #9
 80006c8:	e726      	b.n	8000518 <__aeabi_fmul+0xa4>
 80006ca:	2302      	movs	r3, #2
 80006cc:	2e0f      	cmp	r6, #15
 80006ce:	d10c      	bne.n	80006ea <__aeabi_fmul+0x276>
 80006d0:	2180      	movs	r1, #128	; 0x80
 80006d2:	464b      	mov	r3, r9
 80006d4:	03c9      	lsls	r1, r1, #15
 80006d6:	420b      	tst	r3, r1
 80006d8:	d00d      	beq.n	80006f6 <__aeabi_fmul+0x282>
 80006da:	420c      	tst	r4, r1
 80006dc:	d10b      	bne.n	80006f6 <__aeabi_fmul+0x282>
 80006de:	4321      	orrs	r1, r4
 80006e0:	0249      	lsls	r1, r1, #9
 80006e2:	003a      	movs	r2, r7
 80006e4:	20ff      	movs	r0, #255	; 0xff
 80006e6:	0a49      	lsrs	r1, r1, #9
 80006e8:	e716      	b.n	8000518 <__aeabi_fmul+0xa4>
 80006ea:	2e0b      	cmp	r6, #11
 80006ec:	d000      	beq.n	80006f0 <__aeabi_fmul+0x27c>
 80006ee:	e6f7      	b.n	80004e0 <__aeabi_fmul+0x6c>
 80006f0:	46a1      	mov	r9, r4
 80006f2:	469a      	mov	sl, r3
 80006f4:	e736      	b.n	8000564 <__aeabi_fmul+0xf0>
 80006f6:	2180      	movs	r1, #128	; 0x80
 80006f8:	464b      	mov	r3, r9
 80006fa:	03c9      	lsls	r1, r1, #15
 80006fc:	4319      	orrs	r1, r3
 80006fe:	0249      	lsls	r1, r1, #9
 8000700:	4642      	mov	r2, r8
 8000702:	20ff      	movs	r0, #255	; 0xff
 8000704:	0a49      	lsrs	r1, r1, #9
 8000706:	e707      	b.n	8000518 <__aeabi_fmul+0xa4>
 8000708:	2303      	movs	r3, #3
 800070a:	e7df      	b.n	80006cc <__aeabi_fmul+0x258>
 800070c:	f7ffffff 	.word	0xf7ffffff

08000710 <__aeabi_fsub>:
 8000710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000712:	46c6      	mov	lr, r8
 8000714:	0243      	lsls	r3, r0, #9
 8000716:	0a5b      	lsrs	r3, r3, #9
 8000718:	0045      	lsls	r5, r0, #1
 800071a:	00da      	lsls	r2, r3, #3
 800071c:	0fc4      	lsrs	r4, r0, #31
 800071e:	0248      	lsls	r0, r1, #9
 8000720:	004f      	lsls	r7, r1, #1
 8000722:	4694      	mov	ip, r2
 8000724:	0a42      	lsrs	r2, r0, #9
 8000726:	001e      	movs	r6, r3
 8000728:	4690      	mov	r8, r2
 800072a:	b500      	push	{lr}
 800072c:	0e2d      	lsrs	r5, r5, #24
 800072e:	0e3f      	lsrs	r7, r7, #24
 8000730:	0fc9      	lsrs	r1, r1, #31
 8000732:	0980      	lsrs	r0, r0, #6
 8000734:	2fff      	cmp	r7, #255	; 0xff
 8000736:	d059      	beq.n	80007ec <__aeabi_fsub+0xdc>
 8000738:	2201      	movs	r2, #1
 800073a:	4051      	eors	r1, r2
 800073c:	428c      	cmp	r4, r1
 800073e:	d039      	beq.n	80007b4 <__aeabi_fsub+0xa4>
 8000740:	1bea      	subs	r2, r5, r7
 8000742:	2a00      	cmp	r2, #0
 8000744:	dd58      	ble.n	80007f8 <__aeabi_fsub+0xe8>
 8000746:	2f00      	cmp	r7, #0
 8000748:	d068      	beq.n	800081c <__aeabi_fsub+0x10c>
 800074a:	2dff      	cmp	r5, #255	; 0xff
 800074c:	d100      	bne.n	8000750 <__aeabi_fsub+0x40>
 800074e:	e0d1      	b.n	80008f4 <__aeabi_fsub+0x1e4>
 8000750:	2380      	movs	r3, #128	; 0x80
 8000752:	04db      	lsls	r3, r3, #19
 8000754:	4318      	orrs	r0, r3
 8000756:	2a1b      	cmp	r2, #27
 8000758:	dc00      	bgt.n	800075c <__aeabi_fsub+0x4c>
 800075a:	e0e3      	b.n	8000924 <__aeabi_fsub+0x214>
 800075c:	2301      	movs	r3, #1
 800075e:	4662      	mov	r2, ip
 8000760:	1ad3      	subs	r3, r2, r3
 8000762:	015a      	lsls	r2, r3, #5
 8000764:	d400      	bmi.n	8000768 <__aeabi_fsub+0x58>
 8000766:	e0ac      	b.n	80008c2 <__aeabi_fsub+0x1b2>
 8000768:	019b      	lsls	r3, r3, #6
 800076a:	099e      	lsrs	r6, r3, #6
 800076c:	0030      	movs	r0, r6
 800076e:	f001 fbd7 	bl	8001f20 <__clzsi2>
 8000772:	0033      	movs	r3, r6
 8000774:	3805      	subs	r0, #5
 8000776:	4083      	lsls	r3, r0
 8000778:	4285      	cmp	r5, r0
 800077a:	dc00      	bgt.n	800077e <__aeabi_fsub+0x6e>
 800077c:	e0c6      	b.n	800090c <__aeabi_fsub+0x1fc>
 800077e:	4ab2      	ldr	r2, [pc, #712]	; (8000a48 <__aeabi_fsub+0x338>)
 8000780:	1a2d      	subs	r5, r5, r0
 8000782:	4013      	ands	r3, r2
 8000784:	075a      	lsls	r2, r3, #29
 8000786:	d004      	beq.n	8000792 <__aeabi_fsub+0x82>
 8000788:	220f      	movs	r2, #15
 800078a:	401a      	ands	r2, r3
 800078c:	2a04      	cmp	r2, #4
 800078e:	d000      	beq.n	8000792 <__aeabi_fsub+0x82>
 8000790:	3304      	adds	r3, #4
 8000792:	015a      	lsls	r2, r3, #5
 8000794:	d400      	bmi.n	8000798 <__aeabi_fsub+0x88>
 8000796:	e097      	b.n	80008c8 <__aeabi_fsub+0x1b8>
 8000798:	1c6a      	adds	r2, r5, #1
 800079a:	2dfe      	cmp	r5, #254	; 0xfe
 800079c:	d100      	bne.n	80007a0 <__aeabi_fsub+0x90>
 800079e:	e084      	b.n	80008aa <__aeabi_fsub+0x19a>
 80007a0:	019b      	lsls	r3, r3, #6
 80007a2:	0a5e      	lsrs	r6, r3, #9
 80007a4:	b2d2      	uxtb	r2, r2
 80007a6:	05d0      	lsls	r0, r2, #23
 80007a8:	4330      	orrs	r0, r6
 80007aa:	07e4      	lsls	r4, r4, #31
 80007ac:	4320      	orrs	r0, r4
 80007ae:	bc80      	pop	{r7}
 80007b0:	46b8      	mov	r8, r7
 80007b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007b4:	1bea      	subs	r2, r5, r7
 80007b6:	2a00      	cmp	r2, #0
 80007b8:	dd41      	ble.n	800083e <__aeabi_fsub+0x12e>
 80007ba:	2f00      	cmp	r7, #0
 80007bc:	d06b      	beq.n	8000896 <__aeabi_fsub+0x186>
 80007be:	2dff      	cmp	r5, #255	; 0xff
 80007c0:	d100      	bne.n	80007c4 <__aeabi_fsub+0xb4>
 80007c2:	e097      	b.n	80008f4 <__aeabi_fsub+0x1e4>
 80007c4:	2380      	movs	r3, #128	; 0x80
 80007c6:	04db      	lsls	r3, r3, #19
 80007c8:	4318      	orrs	r0, r3
 80007ca:	2a1b      	cmp	r2, #27
 80007cc:	dc00      	bgt.n	80007d0 <__aeabi_fsub+0xc0>
 80007ce:	e0cc      	b.n	800096a <__aeabi_fsub+0x25a>
 80007d0:	2301      	movs	r3, #1
 80007d2:	4463      	add	r3, ip
 80007d4:	015a      	lsls	r2, r3, #5
 80007d6:	d574      	bpl.n	80008c2 <__aeabi_fsub+0x1b2>
 80007d8:	3501      	adds	r5, #1
 80007da:	2dff      	cmp	r5, #255	; 0xff
 80007dc:	d065      	beq.n	80008aa <__aeabi_fsub+0x19a>
 80007de:	2201      	movs	r2, #1
 80007e0:	499a      	ldr	r1, [pc, #616]	; (8000a4c <__aeabi_fsub+0x33c>)
 80007e2:	401a      	ands	r2, r3
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	400b      	ands	r3, r1
 80007e8:	4313      	orrs	r3, r2
 80007ea:	e7cb      	b.n	8000784 <__aeabi_fsub+0x74>
 80007ec:	2800      	cmp	r0, #0
 80007ee:	d01f      	beq.n	8000830 <__aeabi_fsub+0x120>
 80007f0:	428c      	cmp	r4, r1
 80007f2:	d022      	beq.n	800083a <__aeabi_fsub+0x12a>
 80007f4:	002a      	movs	r2, r5
 80007f6:	3aff      	subs	r2, #255	; 0xff
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	d035      	beq.n	8000868 <__aeabi_fsub+0x158>
 80007fc:	1b7a      	subs	r2, r7, r5
 80007fe:	2d00      	cmp	r5, #0
 8000800:	d000      	beq.n	8000804 <__aeabi_fsub+0xf4>
 8000802:	e099      	b.n	8000938 <__aeabi_fsub+0x228>
 8000804:	4663      	mov	r3, ip
 8000806:	2b00      	cmp	r3, #0
 8000808:	d100      	bne.n	800080c <__aeabi_fsub+0xfc>
 800080a:	e0dd      	b.n	80009c8 <__aeabi_fsub+0x2b8>
 800080c:	1e53      	subs	r3, r2, #1
 800080e:	2a01      	cmp	r2, #1
 8000810:	d100      	bne.n	8000814 <__aeabi_fsub+0x104>
 8000812:	e105      	b.n	8000a20 <__aeabi_fsub+0x310>
 8000814:	2aff      	cmp	r2, #255	; 0xff
 8000816:	d06b      	beq.n	80008f0 <__aeabi_fsub+0x1e0>
 8000818:	001a      	movs	r2, r3
 800081a:	e094      	b.n	8000946 <__aeabi_fsub+0x236>
 800081c:	2800      	cmp	r0, #0
 800081e:	d073      	beq.n	8000908 <__aeabi_fsub+0x1f8>
 8000820:	1e51      	subs	r1, r2, #1
 8000822:	2a01      	cmp	r2, #1
 8000824:	d100      	bne.n	8000828 <__aeabi_fsub+0x118>
 8000826:	e0df      	b.n	80009e8 <__aeabi_fsub+0x2d8>
 8000828:	2aff      	cmp	r2, #255	; 0xff
 800082a:	d063      	beq.n	80008f4 <__aeabi_fsub+0x1e4>
 800082c:	000a      	movs	r2, r1
 800082e:	e792      	b.n	8000756 <__aeabi_fsub+0x46>
 8000830:	2201      	movs	r2, #1
 8000832:	4051      	eors	r1, r2
 8000834:	42a1      	cmp	r1, r4
 8000836:	d000      	beq.n	800083a <__aeabi_fsub+0x12a>
 8000838:	e782      	b.n	8000740 <__aeabi_fsub+0x30>
 800083a:	002a      	movs	r2, r5
 800083c:	3aff      	subs	r2, #255	; 0xff
 800083e:	2a00      	cmp	r2, #0
 8000840:	d036      	beq.n	80008b0 <__aeabi_fsub+0x1a0>
 8000842:	1b7a      	subs	r2, r7, r5
 8000844:	2d00      	cmp	r5, #0
 8000846:	d100      	bne.n	800084a <__aeabi_fsub+0x13a>
 8000848:	e0aa      	b.n	80009a0 <__aeabi_fsub+0x290>
 800084a:	2fff      	cmp	r7, #255	; 0xff
 800084c:	d100      	bne.n	8000850 <__aeabi_fsub+0x140>
 800084e:	e0da      	b.n	8000a06 <__aeabi_fsub+0x2f6>
 8000850:	2380      	movs	r3, #128	; 0x80
 8000852:	4661      	mov	r1, ip
 8000854:	04db      	lsls	r3, r3, #19
 8000856:	4319      	orrs	r1, r3
 8000858:	468c      	mov	ip, r1
 800085a:	2a1b      	cmp	r2, #27
 800085c:	dc00      	bgt.n	8000860 <__aeabi_fsub+0x150>
 800085e:	e0d4      	b.n	8000a0a <__aeabi_fsub+0x2fa>
 8000860:	2301      	movs	r3, #1
 8000862:	003d      	movs	r5, r7
 8000864:	181b      	adds	r3, r3, r0
 8000866:	e7b5      	b.n	80007d4 <__aeabi_fsub+0xc4>
 8000868:	27fe      	movs	r7, #254	; 0xfe
 800086a:	1c6a      	adds	r2, r5, #1
 800086c:	4217      	tst	r7, r2
 800086e:	d171      	bne.n	8000954 <__aeabi_fsub+0x244>
 8000870:	2d00      	cmp	r5, #0
 8000872:	d000      	beq.n	8000876 <__aeabi_fsub+0x166>
 8000874:	e09e      	b.n	80009b4 <__aeabi_fsub+0x2a4>
 8000876:	4663      	mov	r3, ip
 8000878:	2b00      	cmp	r3, #0
 800087a:	d100      	bne.n	800087e <__aeabi_fsub+0x16e>
 800087c:	e0d5      	b.n	8000a2a <__aeabi_fsub+0x31a>
 800087e:	2200      	movs	r2, #0
 8000880:	2800      	cmp	r0, #0
 8000882:	d100      	bne.n	8000886 <__aeabi_fsub+0x176>
 8000884:	e78f      	b.n	80007a6 <__aeabi_fsub+0x96>
 8000886:	1a1b      	subs	r3, r3, r0
 8000888:	015e      	lsls	r6, r3, #5
 800088a:	d400      	bmi.n	800088e <__aeabi_fsub+0x17e>
 800088c:	e0d6      	b.n	8000a3c <__aeabi_fsub+0x32c>
 800088e:	4663      	mov	r3, ip
 8000890:	000c      	movs	r4, r1
 8000892:	1ac3      	subs	r3, r0, r3
 8000894:	e776      	b.n	8000784 <__aeabi_fsub+0x74>
 8000896:	2800      	cmp	r0, #0
 8000898:	d036      	beq.n	8000908 <__aeabi_fsub+0x1f8>
 800089a:	1e51      	subs	r1, r2, #1
 800089c:	2a01      	cmp	r2, #1
 800089e:	d100      	bne.n	80008a2 <__aeabi_fsub+0x192>
 80008a0:	e09a      	b.n	80009d8 <__aeabi_fsub+0x2c8>
 80008a2:	2aff      	cmp	r2, #255	; 0xff
 80008a4:	d026      	beq.n	80008f4 <__aeabi_fsub+0x1e4>
 80008a6:	000a      	movs	r2, r1
 80008a8:	e78f      	b.n	80007ca <__aeabi_fsub+0xba>
 80008aa:	22ff      	movs	r2, #255	; 0xff
 80008ac:	2600      	movs	r6, #0
 80008ae:	e77a      	b.n	80007a6 <__aeabi_fsub+0x96>
 80008b0:	27fe      	movs	r7, #254	; 0xfe
 80008b2:	1c6a      	adds	r2, r5, #1
 80008b4:	4217      	tst	r7, r2
 80008b6:	d062      	beq.n	800097e <__aeabi_fsub+0x26e>
 80008b8:	2aff      	cmp	r2, #255	; 0xff
 80008ba:	d0f6      	beq.n	80008aa <__aeabi_fsub+0x19a>
 80008bc:	0015      	movs	r5, r2
 80008be:	4460      	add	r0, ip
 80008c0:	0843      	lsrs	r3, r0, #1
 80008c2:	075a      	lsls	r2, r3, #29
 80008c4:	d000      	beq.n	80008c8 <__aeabi_fsub+0x1b8>
 80008c6:	e75f      	b.n	8000788 <__aeabi_fsub+0x78>
 80008c8:	08db      	lsrs	r3, r3, #3
 80008ca:	2dff      	cmp	r5, #255	; 0xff
 80008cc:	d012      	beq.n	80008f4 <__aeabi_fsub+0x1e4>
 80008ce:	025b      	lsls	r3, r3, #9
 80008d0:	0a5e      	lsrs	r6, r3, #9
 80008d2:	b2ea      	uxtb	r2, r5
 80008d4:	e767      	b.n	80007a6 <__aeabi_fsub+0x96>
 80008d6:	4662      	mov	r2, ip
 80008d8:	2a00      	cmp	r2, #0
 80008da:	d100      	bne.n	80008de <__aeabi_fsub+0x1ce>
 80008dc:	e093      	b.n	8000a06 <__aeabi_fsub+0x2f6>
 80008de:	2800      	cmp	r0, #0
 80008e0:	d008      	beq.n	80008f4 <__aeabi_fsub+0x1e4>
 80008e2:	2280      	movs	r2, #128	; 0x80
 80008e4:	03d2      	lsls	r2, r2, #15
 80008e6:	4213      	tst	r3, r2
 80008e8:	d004      	beq.n	80008f4 <__aeabi_fsub+0x1e4>
 80008ea:	4640      	mov	r0, r8
 80008ec:	4210      	tst	r0, r2
 80008ee:	d101      	bne.n	80008f4 <__aeabi_fsub+0x1e4>
 80008f0:	000c      	movs	r4, r1
 80008f2:	4643      	mov	r3, r8
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d0d8      	beq.n	80008aa <__aeabi_fsub+0x19a>
 80008f8:	2680      	movs	r6, #128	; 0x80
 80008fa:	03f6      	lsls	r6, r6, #15
 80008fc:	431e      	orrs	r6, r3
 80008fe:	0276      	lsls	r6, r6, #9
 8000900:	22ff      	movs	r2, #255	; 0xff
 8000902:	0a76      	lsrs	r6, r6, #9
 8000904:	e74f      	b.n	80007a6 <__aeabi_fsub+0x96>
 8000906:	4643      	mov	r3, r8
 8000908:	0015      	movs	r5, r2
 800090a:	e7de      	b.n	80008ca <__aeabi_fsub+0x1ba>
 800090c:	2220      	movs	r2, #32
 800090e:	1b40      	subs	r0, r0, r5
 8000910:	3001      	adds	r0, #1
 8000912:	1a12      	subs	r2, r2, r0
 8000914:	0019      	movs	r1, r3
 8000916:	4093      	lsls	r3, r2
 8000918:	40c1      	lsrs	r1, r0
 800091a:	1e5a      	subs	r2, r3, #1
 800091c:	4193      	sbcs	r3, r2
 800091e:	2500      	movs	r5, #0
 8000920:	430b      	orrs	r3, r1
 8000922:	e72f      	b.n	8000784 <__aeabi_fsub+0x74>
 8000924:	2320      	movs	r3, #32
 8000926:	1a9b      	subs	r3, r3, r2
 8000928:	0001      	movs	r1, r0
 800092a:	4098      	lsls	r0, r3
 800092c:	0003      	movs	r3, r0
 800092e:	40d1      	lsrs	r1, r2
 8000930:	1e5a      	subs	r2, r3, #1
 8000932:	4193      	sbcs	r3, r2
 8000934:	430b      	orrs	r3, r1
 8000936:	e712      	b.n	800075e <__aeabi_fsub+0x4e>
 8000938:	2fff      	cmp	r7, #255	; 0xff
 800093a:	d0d9      	beq.n	80008f0 <__aeabi_fsub+0x1e0>
 800093c:	2380      	movs	r3, #128	; 0x80
 800093e:	4664      	mov	r4, ip
 8000940:	04db      	lsls	r3, r3, #19
 8000942:	431c      	orrs	r4, r3
 8000944:	46a4      	mov	ip, r4
 8000946:	2a1b      	cmp	r2, #27
 8000948:	dd52      	ble.n	80009f0 <__aeabi_fsub+0x2e0>
 800094a:	2301      	movs	r3, #1
 800094c:	000c      	movs	r4, r1
 800094e:	003d      	movs	r5, r7
 8000950:	1ac3      	subs	r3, r0, r3
 8000952:	e706      	b.n	8000762 <__aeabi_fsub+0x52>
 8000954:	4663      	mov	r3, ip
 8000956:	1a1e      	subs	r6, r3, r0
 8000958:	0173      	lsls	r3, r6, #5
 800095a:	d439      	bmi.n	80009d0 <__aeabi_fsub+0x2c0>
 800095c:	2e00      	cmp	r6, #0
 800095e:	d000      	beq.n	8000962 <__aeabi_fsub+0x252>
 8000960:	e704      	b.n	800076c <__aeabi_fsub+0x5c>
 8000962:	2400      	movs	r4, #0
 8000964:	2200      	movs	r2, #0
 8000966:	2600      	movs	r6, #0
 8000968:	e71d      	b.n	80007a6 <__aeabi_fsub+0x96>
 800096a:	2320      	movs	r3, #32
 800096c:	1a9b      	subs	r3, r3, r2
 800096e:	0001      	movs	r1, r0
 8000970:	4098      	lsls	r0, r3
 8000972:	0003      	movs	r3, r0
 8000974:	40d1      	lsrs	r1, r2
 8000976:	1e5a      	subs	r2, r3, #1
 8000978:	4193      	sbcs	r3, r2
 800097a:	430b      	orrs	r3, r1
 800097c:	e729      	b.n	80007d2 <__aeabi_fsub+0xc2>
 800097e:	2d00      	cmp	r5, #0
 8000980:	d1a9      	bne.n	80008d6 <__aeabi_fsub+0x1c6>
 8000982:	4663      	mov	r3, ip
 8000984:	2b00      	cmp	r3, #0
 8000986:	d056      	beq.n	8000a36 <__aeabi_fsub+0x326>
 8000988:	2200      	movs	r2, #0
 800098a:	2800      	cmp	r0, #0
 800098c:	d100      	bne.n	8000990 <__aeabi_fsub+0x280>
 800098e:	e70a      	b.n	80007a6 <__aeabi_fsub+0x96>
 8000990:	0003      	movs	r3, r0
 8000992:	4463      	add	r3, ip
 8000994:	015a      	lsls	r2, r3, #5
 8000996:	d594      	bpl.n	80008c2 <__aeabi_fsub+0x1b2>
 8000998:	4a2b      	ldr	r2, [pc, #172]	; (8000a48 <__aeabi_fsub+0x338>)
 800099a:	3501      	adds	r5, #1
 800099c:	4013      	ands	r3, r2
 800099e:	e790      	b.n	80008c2 <__aeabi_fsub+0x1b2>
 80009a0:	4663      	mov	r3, ip
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d0af      	beq.n	8000906 <__aeabi_fsub+0x1f6>
 80009a6:	1e53      	subs	r3, r2, #1
 80009a8:	2a01      	cmp	r2, #1
 80009aa:	d015      	beq.n	80009d8 <__aeabi_fsub+0x2c8>
 80009ac:	2aff      	cmp	r2, #255	; 0xff
 80009ae:	d02a      	beq.n	8000a06 <__aeabi_fsub+0x2f6>
 80009b0:	001a      	movs	r2, r3
 80009b2:	e752      	b.n	800085a <__aeabi_fsub+0x14a>
 80009b4:	4662      	mov	r2, ip
 80009b6:	2a00      	cmp	r2, #0
 80009b8:	d191      	bne.n	80008de <__aeabi_fsub+0x1ce>
 80009ba:	2800      	cmp	r0, #0
 80009bc:	d198      	bne.n	80008f0 <__aeabi_fsub+0x1e0>
 80009be:	2680      	movs	r6, #128	; 0x80
 80009c0:	2400      	movs	r4, #0
 80009c2:	22ff      	movs	r2, #255	; 0xff
 80009c4:	03f6      	lsls	r6, r6, #15
 80009c6:	e6ee      	b.n	80007a6 <__aeabi_fsub+0x96>
 80009c8:	000c      	movs	r4, r1
 80009ca:	4643      	mov	r3, r8
 80009cc:	0015      	movs	r5, r2
 80009ce:	e77c      	b.n	80008ca <__aeabi_fsub+0x1ba>
 80009d0:	4663      	mov	r3, ip
 80009d2:	000c      	movs	r4, r1
 80009d4:	1ac6      	subs	r6, r0, r3
 80009d6:	e6c9      	b.n	800076c <__aeabi_fsub+0x5c>
 80009d8:	0003      	movs	r3, r0
 80009da:	4463      	add	r3, ip
 80009dc:	2501      	movs	r5, #1
 80009de:	015a      	lsls	r2, r3, #5
 80009e0:	d400      	bmi.n	80009e4 <__aeabi_fsub+0x2d4>
 80009e2:	e76e      	b.n	80008c2 <__aeabi_fsub+0x1b2>
 80009e4:	2502      	movs	r5, #2
 80009e6:	e6fa      	b.n	80007de <__aeabi_fsub+0xce>
 80009e8:	4663      	mov	r3, ip
 80009ea:	2501      	movs	r5, #1
 80009ec:	1a1b      	subs	r3, r3, r0
 80009ee:	e6b8      	b.n	8000762 <__aeabi_fsub+0x52>
 80009f0:	4664      	mov	r4, ip
 80009f2:	2320      	movs	r3, #32
 80009f4:	40d4      	lsrs	r4, r2
 80009f6:	1a9b      	subs	r3, r3, r2
 80009f8:	4662      	mov	r2, ip
 80009fa:	409a      	lsls	r2, r3
 80009fc:	0013      	movs	r3, r2
 80009fe:	1e5a      	subs	r2, r3, #1
 8000a00:	4193      	sbcs	r3, r2
 8000a02:	4323      	orrs	r3, r4
 8000a04:	e7a2      	b.n	800094c <__aeabi_fsub+0x23c>
 8000a06:	4643      	mov	r3, r8
 8000a08:	e774      	b.n	80008f4 <__aeabi_fsub+0x1e4>
 8000a0a:	4661      	mov	r1, ip
 8000a0c:	2320      	movs	r3, #32
 8000a0e:	40d1      	lsrs	r1, r2
 8000a10:	1a9b      	subs	r3, r3, r2
 8000a12:	4662      	mov	r2, ip
 8000a14:	409a      	lsls	r2, r3
 8000a16:	0013      	movs	r3, r2
 8000a18:	1e5a      	subs	r2, r3, #1
 8000a1a:	4193      	sbcs	r3, r2
 8000a1c:	430b      	orrs	r3, r1
 8000a1e:	e720      	b.n	8000862 <__aeabi_fsub+0x152>
 8000a20:	4663      	mov	r3, ip
 8000a22:	000c      	movs	r4, r1
 8000a24:	2501      	movs	r5, #1
 8000a26:	1ac3      	subs	r3, r0, r3
 8000a28:	e69b      	b.n	8000762 <__aeabi_fsub+0x52>
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	d099      	beq.n	8000962 <__aeabi_fsub+0x252>
 8000a2e:	000c      	movs	r4, r1
 8000a30:	4646      	mov	r6, r8
 8000a32:	2200      	movs	r2, #0
 8000a34:	e6b7      	b.n	80007a6 <__aeabi_fsub+0x96>
 8000a36:	4646      	mov	r6, r8
 8000a38:	2200      	movs	r2, #0
 8000a3a:	e6b4      	b.n	80007a6 <__aeabi_fsub+0x96>
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d000      	beq.n	8000a42 <__aeabi_fsub+0x332>
 8000a40:	e73f      	b.n	80008c2 <__aeabi_fsub+0x1b2>
 8000a42:	2400      	movs	r4, #0
 8000a44:	2600      	movs	r6, #0
 8000a46:	e6ae      	b.n	80007a6 <__aeabi_fsub+0x96>
 8000a48:	fbffffff 	.word	0xfbffffff
 8000a4c:	7dffffff 	.word	0x7dffffff

08000a50 <__aeabi_f2iz>:
 8000a50:	0241      	lsls	r1, r0, #9
 8000a52:	0042      	lsls	r2, r0, #1
 8000a54:	0fc3      	lsrs	r3, r0, #31
 8000a56:	0a49      	lsrs	r1, r1, #9
 8000a58:	2000      	movs	r0, #0
 8000a5a:	0e12      	lsrs	r2, r2, #24
 8000a5c:	2a7e      	cmp	r2, #126	; 0x7e
 8000a5e:	dd03      	ble.n	8000a68 <__aeabi_f2iz+0x18>
 8000a60:	2a9d      	cmp	r2, #157	; 0x9d
 8000a62:	dd02      	ble.n	8000a6a <__aeabi_f2iz+0x1a>
 8000a64:	4a09      	ldr	r2, [pc, #36]	; (8000a8c <__aeabi_f2iz+0x3c>)
 8000a66:	1898      	adds	r0, r3, r2
 8000a68:	4770      	bx	lr
 8000a6a:	2080      	movs	r0, #128	; 0x80
 8000a6c:	0400      	lsls	r0, r0, #16
 8000a6e:	4301      	orrs	r1, r0
 8000a70:	2a95      	cmp	r2, #149	; 0x95
 8000a72:	dc07      	bgt.n	8000a84 <__aeabi_f2iz+0x34>
 8000a74:	2096      	movs	r0, #150	; 0x96
 8000a76:	1a82      	subs	r2, r0, r2
 8000a78:	40d1      	lsrs	r1, r2
 8000a7a:	4248      	negs	r0, r1
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d1f3      	bne.n	8000a68 <__aeabi_f2iz+0x18>
 8000a80:	0008      	movs	r0, r1
 8000a82:	e7f1      	b.n	8000a68 <__aeabi_f2iz+0x18>
 8000a84:	3a96      	subs	r2, #150	; 0x96
 8000a86:	4091      	lsls	r1, r2
 8000a88:	e7f7      	b.n	8000a7a <__aeabi_f2iz+0x2a>
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	7fffffff 	.word	0x7fffffff

08000a90 <__aeabi_i2f>:
 8000a90:	b570      	push	{r4, r5, r6, lr}
 8000a92:	2800      	cmp	r0, #0
 8000a94:	d013      	beq.n	8000abe <__aeabi_i2f+0x2e>
 8000a96:	17c3      	asrs	r3, r0, #31
 8000a98:	18c5      	adds	r5, r0, r3
 8000a9a:	405d      	eors	r5, r3
 8000a9c:	0fc4      	lsrs	r4, r0, #31
 8000a9e:	0028      	movs	r0, r5
 8000aa0:	f001 fa3e 	bl	8001f20 <__clzsi2>
 8000aa4:	239e      	movs	r3, #158	; 0x9e
 8000aa6:	0001      	movs	r1, r0
 8000aa8:	1a1b      	subs	r3, r3, r0
 8000aaa:	2b96      	cmp	r3, #150	; 0x96
 8000aac:	dc0f      	bgt.n	8000ace <__aeabi_i2f+0x3e>
 8000aae:	2808      	cmp	r0, #8
 8000ab0:	d031      	beq.n	8000b16 <__aeabi_i2f+0x86>
 8000ab2:	3908      	subs	r1, #8
 8000ab4:	408d      	lsls	r5, r1
 8000ab6:	026d      	lsls	r5, r5, #9
 8000ab8:	0a6d      	lsrs	r5, r5, #9
 8000aba:	b2d8      	uxtb	r0, r3
 8000abc:	e002      	b.n	8000ac4 <__aeabi_i2f+0x34>
 8000abe:	2400      	movs	r4, #0
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	2500      	movs	r5, #0
 8000ac4:	05c0      	lsls	r0, r0, #23
 8000ac6:	4328      	orrs	r0, r5
 8000ac8:	07e4      	lsls	r4, r4, #31
 8000aca:	4320      	orrs	r0, r4
 8000acc:	bd70      	pop	{r4, r5, r6, pc}
 8000ace:	2b99      	cmp	r3, #153	; 0x99
 8000ad0:	dd0c      	ble.n	8000aec <__aeabi_i2f+0x5c>
 8000ad2:	2205      	movs	r2, #5
 8000ad4:	1a12      	subs	r2, r2, r0
 8000ad6:	0028      	movs	r0, r5
 8000ad8:	40d0      	lsrs	r0, r2
 8000ada:	0002      	movs	r2, r0
 8000adc:	0008      	movs	r0, r1
 8000ade:	301b      	adds	r0, #27
 8000ae0:	4085      	lsls	r5, r0
 8000ae2:	0028      	movs	r0, r5
 8000ae4:	1e45      	subs	r5, r0, #1
 8000ae6:	41a8      	sbcs	r0, r5
 8000ae8:	4302      	orrs	r2, r0
 8000aea:	0015      	movs	r5, r2
 8000aec:	2905      	cmp	r1, #5
 8000aee:	dc16      	bgt.n	8000b1e <__aeabi_i2f+0x8e>
 8000af0:	002a      	movs	r2, r5
 8000af2:	480f      	ldr	r0, [pc, #60]	; (8000b30 <__aeabi_i2f+0xa0>)
 8000af4:	4002      	ands	r2, r0
 8000af6:	076e      	lsls	r6, r5, #29
 8000af8:	d009      	beq.n	8000b0e <__aeabi_i2f+0x7e>
 8000afa:	260f      	movs	r6, #15
 8000afc:	4035      	ands	r5, r6
 8000afe:	2d04      	cmp	r5, #4
 8000b00:	d005      	beq.n	8000b0e <__aeabi_i2f+0x7e>
 8000b02:	3204      	adds	r2, #4
 8000b04:	0155      	lsls	r5, r2, #5
 8000b06:	d502      	bpl.n	8000b0e <__aeabi_i2f+0x7e>
 8000b08:	239f      	movs	r3, #159	; 0x9f
 8000b0a:	4002      	ands	r2, r0
 8000b0c:	1a5b      	subs	r3, r3, r1
 8000b0e:	0192      	lsls	r2, r2, #6
 8000b10:	0a55      	lsrs	r5, r2, #9
 8000b12:	b2d8      	uxtb	r0, r3
 8000b14:	e7d6      	b.n	8000ac4 <__aeabi_i2f+0x34>
 8000b16:	026d      	lsls	r5, r5, #9
 8000b18:	2096      	movs	r0, #150	; 0x96
 8000b1a:	0a6d      	lsrs	r5, r5, #9
 8000b1c:	e7d2      	b.n	8000ac4 <__aeabi_i2f+0x34>
 8000b1e:	1f4a      	subs	r2, r1, #5
 8000b20:	4095      	lsls	r5, r2
 8000b22:	002a      	movs	r2, r5
 8000b24:	4802      	ldr	r0, [pc, #8]	; (8000b30 <__aeabi_i2f+0xa0>)
 8000b26:	4002      	ands	r2, r0
 8000b28:	076e      	lsls	r6, r5, #29
 8000b2a:	d0f0      	beq.n	8000b0e <__aeabi_i2f+0x7e>
 8000b2c:	e7e5      	b.n	8000afa <__aeabi_i2f+0x6a>
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	fbffffff 	.word	0xfbffffff

08000b34 <__aeabi_dadd>:
 8000b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b36:	464f      	mov	r7, r9
 8000b38:	4646      	mov	r6, r8
 8000b3a:	46d6      	mov	lr, sl
 8000b3c:	0004      	movs	r4, r0
 8000b3e:	b5c0      	push	{r6, r7, lr}
 8000b40:	001f      	movs	r7, r3
 8000b42:	030b      	lsls	r3, r1, #12
 8000b44:	0010      	movs	r0, r2
 8000b46:	004e      	lsls	r6, r1, #1
 8000b48:	0a5b      	lsrs	r3, r3, #9
 8000b4a:	0fcd      	lsrs	r5, r1, #31
 8000b4c:	0f61      	lsrs	r1, r4, #29
 8000b4e:	007a      	lsls	r2, r7, #1
 8000b50:	4319      	orrs	r1, r3
 8000b52:	00e3      	lsls	r3, r4, #3
 8000b54:	033c      	lsls	r4, r7, #12
 8000b56:	0fff      	lsrs	r7, r7, #31
 8000b58:	46bc      	mov	ip, r7
 8000b5a:	0a64      	lsrs	r4, r4, #9
 8000b5c:	0f47      	lsrs	r7, r0, #29
 8000b5e:	4327      	orrs	r7, r4
 8000b60:	0d76      	lsrs	r6, r6, #21
 8000b62:	0d52      	lsrs	r2, r2, #21
 8000b64:	00c0      	lsls	r0, r0, #3
 8000b66:	46b9      	mov	r9, r7
 8000b68:	4680      	mov	r8, r0
 8000b6a:	1ab7      	subs	r7, r6, r2
 8000b6c:	4565      	cmp	r5, ip
 8000b6e:	d100      	bne.n	8000b72 <__aeabi_dadd+0x3e>
 8000b70:	e09b      	b.n	8000caa <__aeabi_dadd+0x176>
 8000b72:	2f00      	cmp	r7, #0
 8000b74:	dc00      	bgt.n	8000b78 <__aeabi_dadd+0x44>
 8000b76:	e084      	b.n	8000c82 <__aeabi_dadd+0x14e>
 8000b78:	2a00      	cmp	r2, #0
 8000b7a:	d100      	bne.n	8000b7e <__aeabi_dadd+0x4a>
 8000b7c:	e0be      	b.n	8000cfc <__aeabi_dadd+0x1c8>
 8000b7e:	4ac8      	ldr	r2, [pc, #800]	; (8000ea0 <__aeabi_dadd+0x36c>)
 8000b80:	4296      	cmp	r6, r2
 8000b82:	d100      	bne.n	8000b86 <__aeabi_dadd+0x52>
 8000b84:	e124      	b.n	8000dd0 <__aeabi_dadd+0x29c>
 8000b86:	2280      	movs	r2, #128	; 0x80
 8000b88:	464c      	mov	r4, r9
 8000b8a:	0412      	lsls	r2, r2, #16
 8000b8c:	4314      	orrs	r4, r2
 8000b8e:	46a1      	mov	r9, r4
 8000b90:	2f38      	cmp	r7, #56	; 0x38
 8000b92:	dd00      	ble.n	8000b96 <__aeabi_dadd+0x62>
 8000b94:	e167      	b.n	8000e66 <__aeabi_dadd+0x332>
 8000b96:	2f1f      	cmp	r7, #31
 8000b98:	dd00      	ble.n	8000b9c <__aeabi_dadd+0x68>
 8000b9a:	e1d6      	b.n	8000f4a <__aeabi_dadd+0x416>
 8000b9c:	2220      	movs	r2, #32
 8000b9e:	464c      	mov	r4, r9
 8000ba0:	1bd2      	subs	r2, r2, r7
 8000ba2:	4094      	lsls	r4, r2
 8000ba4:	46a2      	mov	sl, r4
 8000ba6:	4644      	mov	r4, r8
 8000ba8:	40fc      	lsrs	r4, r7
 8000baa:	0020      	movs	r0, r4
 8000bac:	4654      	mov	r4, sl
 8000bae:	4304      	orrs	r4, r0
 8000bb0:	4640      	mov	r0, r8
 8000bb2:	4090      	lsls	r0, r2
 8000bb4:	1e42      	subs	r2, r0, #1
 8000bb6:	4190      	sbcs	r0, r2
 8000bb8:	464a      	mov	r2, r9
 8000bba:	40fa      	lsrs	r2, r7
 8000bbc:	4304      	orrs	r4, r0
 8000bbe:	1a89      	subs	r1, r1, r2
 8000bc0:	1b1c      	subs	r4, r3, r4
 8000bc2:	42a3      	cmp	r3, r4
 8000bc4:	4192      	sbcs	r2, r2
 8000bc6:	4252      	negs	r2, r2
 8000bc8:	1a8b      	subs	r3, r1, r2
 8000bca:	469a      	mov	sl, r3
 8000bcc:	4653      	mov	r3, sl
 8000bce:	021b      	lsls	r3, r3, #8
 8000bd0:	d400      	bmi.n	8000bd4 <__aeabi_dadd+0xa0>
 8000bd2:	e0d4      	b.n	8000d7e <__aeabi_dadd+0x24a>
 8000bd4:	4653      	mov	r3, sl
 8000bd6:	025a      	lsls	r2, r3, #9
 8000bd8:	0a53      	lsrs	r3, r2, #9
 8000bda:	469a      	mov	sl, r3
 8000bdc:	4653      	mov	r3, sl
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d100      	bne.n	8000be4 <__aeabi_dadd+0xb0>
 8000be2:	e104      	b.n	8000dee <__aeabi_dadd+0x2ba>
 8000be4:	4650      	mov	r0, sl
 8000be6:	f001 f99b 	bl	8001f20 <__clzsi2>
 8000bea:	0003      	movs	r3, r0
 8000bec:	3b08      	subs	r3, #8
 8000bee:	2220      	movs	r2, #32
 8000bf0:	0020      	movs	r0, r4
 8000bf2:	1ad2      	subs	r2, r2, r3
 8000bf4:	4651      	mov	r1, sl
 8000bf6:	40d0      	lsrs	r0, r2
 8000bf8:	4099      	lsls	r1, r3
 8000bfa:	0002      	movs	r2, r0
 8000bfc:	409c      	lsls	r4, r3
 8000bfe:	430a      	orrs	r2, r1
 8000c00:	42b3      	cmp	r3, r6
 8000c02:	da00      	bge.n	8000c06 <__aeabi_dadd+0xd2>
 8000c04:	e102      	b.n	8000e0c <__aeabi_dadd+0x2d8>
 8000c06:	1b9b      	subs	r3, r3, r6
 8000c08:	1c59      	adds	r1, r3, #1
 8000c0a:	291f      	cmp	r1, #31
 8000c0c:	dd00      	ble.n	8000c10 <__aeabi_dadd+0xdc>
 8000c0e:	e0a7      	b.n	8000d60 <__aeabi_dadd+0x22c>
 8000c10:	2320      	movs	r3, #32
 8000c12:	0010      	movs	r0, r2
 8000c14:	0026      	movs	r6, r4
 8000c16:	1a5b      	subs	r3, r3, r1
 8000c18:	409c      	lsls	r4, r3
 8000c1a:	4098      	lsls	r0, r3
 8000c1c:	40ce      	lsrs	r6, r1
 8000c1e:	40ca      	lsrs	r2, r1
 8000c20:	1e63      	subs	r3, r4, #1
 8000c22:	419c      	sbcs	r4, r3
 8000c24:	4330      	orrs	r0, r6
 8000c26:	4692      	mov	sl, r2
 8000c28:	2600      	movs	r6, #0
 8000c2a:	4304      	orrs	r4, r0
 8000c2c:	0763      	lsls	r3, r4, #29
 8000c2e:	d009      	beq.n	8000c44 <__aeabi_dadd+0x110>
 8000c30:	230f      	movs	r3, #15
 8000c32:	4023      	ands	r3, r4
 8000c34:	2b04      	cmp	r3, #4
 8000c36:	d005      	beq.n	8000c44 <__aeabi_dadd+0x110>
 8000c38:	1d23      	adds	r3, r4, #4
 8000c3a:	42a3      	cmp	r3, r4
 8000c3c:	41a4      	sbcs	r4, r4
 8000c3e:	4264      	negs	r4, r4
 8000c40:	44a2      	add	sl, r4
 8000c42:	001c      	movs	r4, r3
 8000c44:	4653      	mov	r3, sl
 8000c46:	021b      	lsls	r3, r3, #8
 8000c48:	d400      	bmi.n	8000c4c <__aeabi_dadd+0x118>
 8000c4a:	e09b      	b.n	8000d84 <__aeabi_dadd+0x250>
 8000c4c:	4b94      	ldr	r3, [pc, #592]	; (8000ea0 <__aeabi_dadd+0x36c>)
 8000c4e:	3601      	adds	r6, #1
 8000c50:	429e      	cmp	r6, r3
 8000c52:	d100      	bne.n	8000c56 <__aeabi_dadd+0x122>
 8000c54:	e0b8      	b.n	8000dc8 <__aeabi_dadd+0x294>
 8000c56:	4653      	mov	r3, sl
 8000c58:	4992      	ldr	r1, [pc, #584]	; (8000ea4 <__aeabi_dadd+0x370>)
 8000c5a:	08e4      	lsrs	r4, r4, #3
 8000c5c:	400b      	ands	r3, r1
 8000c5e:	0019      	movs	r1, r3
 8000c60:	075b      	lsls	r3, r3, #29
 8000c62:	4323      	orrs	r3, r4
 8000c64:	0572      	lsls	r2, r6, #21
 8000c66:	024c      	lsls	r4, r1, #9
 8000c68:	0b24      	lsrs	r4, r4, #12
 8000c6a:	0d52      	lsrs	r2, r2, #21
 8000c6c:	0512      	lsls	r2, r2, #20
 8000c6e:	07ed      	lsls	r5, r5, #31
 8000c70:	4322      	orrs	r2, r4
 8000c72:	432a      	orrs	r2, r5
 8000c74:	0018      	movs	r0, r3
 8000c76:	0011      	movs	r1, r2
 8000c78:	bce0      	pop	{r5, r6, r7}
 8000c7a:	46ba      	mov	sl, r7
 8000c7c:	46b1      	mov	r9, r6
 8000c7e:	46a8      	mov	r8, r5
 8000c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c82:	2f00      	cmp	r7, #0
 8000c84:	d048      	beq.n	8000d18 <__aeabi_dadd+0x1e4>
 8000c86:	1b97      	subs	r7, r2, r6
 8000c88:	2e00      	cmp	r6, #0
 8000c8a:	d000      	beq.n	8000c8e <__aeabi_dadd+0x15a>
 8000c8c:	e10e      	b.n	8000eac <__aeabi_dadd+0x378>
 8000c8e:	000c      	movs	r4, r1
 8000c90:	431c      	orrs	r4, r3
 8000c92:	d100      	bne.n	8000c96 <__aeabi_dadd+0x162>
 8000c94:	e1b7      	b.n	8001006 <__aeabi_dadd+0x4d2>
 8000c96:	1e7c      	subs	r4, r7, #1
 8000c98:	2f01      	cmp	r7, #1
 8000c9a:	d100      	bne.n	8000c9e <__aeabi_dadd+0x16a>
 8000c9c:	e226      	b.n	80010ec <__aeabi_dadd+0x5b8>
 8000c9e:	4d80      	ldr	r5, [pc, #512]	; (8000ea0 <__aeabi_dadd+0x36c>)
 8000ca0:	42af      	cmp	r7, r5
 8000ca2:	d100      	bne.n	8000ca6 <__aeabi_dadd+0x172>
 8000ca4:	e1d5      	b.n	8001052 <__aeabi_dadd+0x51e>
 8000ca6:	0027      	movs	r7, r4
 8000ca8:	e107      	b.n	8000eba <__aeabi_dadd+0x386>
 8000caa:	2f00      	cmp	r7, #0
 8000cac:	dc00      	bgt.n	8000cb0 <__aeabi_dadd+0x17c>
 8000cae:	e0b2      	b.n	8000e16 <__aeabi_dadd+0x2e2>
 8000cb0:	2a00      	cmp	r2, #0
 8000cb2:	d047      	beq.n	8000d44 <__aeabi_dadd+0x210>
 8000cb4:	4a7a      	ldr	r2, [pc, #488]	; (8000ea0 <__aeabi_dadd+0x36c>)
 8000cb6:	4296      	cmp	r6, r2
 8000cb8:	d100      	bne.n	8000cbc <__aeabi_dadd+0x188>
 8000cba:	e089      	b.n	8000dd0 <__aeabi_dadd+0x29c>
 8000cbc:	2280      	movs	r2, #128	; 0x80
 8000cbe:	464c      	mov	r4, r9
 8000cc0:	0412      	lsls	r2, r2, #16
 8000cc2:	4314      	orrs	r4, r2
 8000cc4:	46a1      	mov	r9, r4
 8000cc6:	2f38      	cmp	r7, #56	; 0x38
 8000cc8:	dc6b      	bgt.n	8000da2 <__aeabi_dadd+0x26e>
 8000cca:	2f1f      	cmp	r7, #31
 8000ccc:	dc00      	bgt.n	8000cd0 <__aeabi_dadd+0x19c>
 8000cce:	e16e      	b.n	8000fae <__aeabi_dadd+0x47a>
 8000cd0:	003a      	movs	r2, r7
 8000cd2:	4648      	mov	r0, r9
 8000cd4:	3a20      	subs	r2, #32
 8000cd6:	40d0      	lsrs	r0, r2
 8000cd8:	4684      	mov	ip, r0
 8000cda:	2f20      	cmp	r7, #32
 8000cdc:	d007      	beq.n	8000cee <__aeabi_dadd+0x1ba>
 8000cde:	2240      	movs	r2, #64	; 0x40
 8000ce0:	4648      	mov	r0, r9
 8000ce2:	1bd2      	subs	r2, r2, r7
 8000ce4:	4090      	lsls	r0, r2
 8000ce6:	0002      	movs	r2, r0
 8000ce8:	4640      	mov	r0, r8
 8000cea:	4310      	orrs	r0, r2
 8000cec:	4680      	mov	r8, r0
 8000cee:	4640      	mov	r0, r8
 8000cf0:	1e42      	subs	r2, r0, #1
 8000cf2:	4190      	sbcs	r0, r2
 8000cf4:	4662      	mov	r2, ip
 8000cf6:	0004      	movs	r4, r0
 8000cf8:	4314      	orrs	r4, r2
 8000cfa:	e057      	b.n	8000dac <__aeabi_dadd+0x278>
 8000cfc:	464a      	mov	r2, r9
 8000cfe:	4302      	orrs	r2, r0
 8000d00:	d100      	bne.n	8000d04 <__aeabi_dadd+0x1d0>
 8000d02:	e103      	b.n	8000f0c <__aeabi_dadd+0x3d8>
 8000d04:	1e7a      	subs	r2, r7, #1
 8000d06:	2f01      	cmp	r7, #1
 8000d08:	d100      	bne.n	8000d0c <__aeabi_dadd+0x1d8>
 8000d0a:	e193      	b.n	8001034 <__aeabi_dadd+0x500>
 8000d0c:	4c64      	ldr	r4, [pc, #400]	; (8000ea0 <__aeabi_dadd+0x36c>)
 8000d0e:	42a7      	cmp	r7, r4
 8000d10:	d100      	bne.n	8000d14 <__aeabi_dadd+0x1e0>
 8000d12:	e18a      	b.n	800102a <__aeabi_dadd+0x4f6>
 8000d14:	0017      	movs	r7, r2
 8000d16:	e73b      	b.n	8000b90 <__aeabi_dadd+0x5c>
 8000d18:	4c63      	ldr	r4, [pc, #396]	; (8000ea8 <__aeabi_dadd+0x374>)
 8000d1a:	1c72      	adds	r2, r6, #1
 8000d1c:	4222      	tst	r2, r4
 8000d1e:	d000      	beq.n	8000d22 <__aeabi_dadd+0x1ee>
 8000d20:	e0e0      	b.n	8000ee4 <__aeabi_dadd+0x3b0>
 8000d22:	000a      	movs	r2, r1
 8000d24:	431a      	orrs	r2, r3
 8000d26:	2e00      	cmp	r6, #0
 8000d28:	d000      	beq.n	8000d2c <__aeabi_dadd+0x1f8>
 8000d2a:	e174      	b.n	8001016 <__aeabi_dadd+0x4e2>
 8000d2c:	2a00      	cmp	r2, #0
 8000d2e:	d100      	bne.n	8000d32 <__aeabi_dadd+0x1fe>
 8000d30:	e1d0      	b.n	80010d4 <__aeabi_dadd+0x5a0>
 8000d32:	464a      	mov	r2, r9
 8000d34:	4302      	orrs	r2, r0
 8000d36:	d000      	beq.n	8000d3a <__aeabi_dadd+0x206>
 8000d38:	e1e3      	b.n	8001102 <__aeabi_dadd+0x5ce>
 8000d3a:	074a      	lsls	r2, r1, #29
 8000d3c:	08db      	lsrs	r3, r3, #3
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	08c9      	lsrs	r1, r1, #3
 8000d42:	e029      	b.n	8000d98 <__aeabi_dadd+0x264>
 8000d44:	464a      	mov	r2, r9
 8000d46:	4302      	orrs	r2, r0
 8000d48:	d100      	bne.n	8000d4c <__aeabi_dadd+0x218>
 8000d4a:	e17d      	b.n	8001048 <__aeabi_dadd+0x514>
 8000d4c:	1e7a      	subs	r2, r7, #1
 8000d4e:	2f01      	cmp	r7, #1
 8000d50:	d100      	bne.n	8000d54 <__aeabi_dadd+0x220>
 8000d52:	e0e0      	b.n	8000f16 <__aeabi_dadd+0x3e2>
 8000d54:	4c52      	ldr	r4, [pc, #328]	; (8000ea0 <__aeabi_dadd+0x36c>)
 8000d56:	42a7      	cmp	r7, r4
 8000d58:	d100      	bne.n	8000d5c <__aeabi_dadd+0x228>
 8000d5a:	e166      	b.n	800102a <__aeabi_dadd+0x4f6>
 8000d5c:	0017      	movs	r7, r2
 8000d5e:	e7b2      	b.n	8000cc6 <__aeabi_dadd+0x192>
 8000d60:	0010      	movs	r0, r2
 8000d62:	3b1f      	subs	r3, #31
 8000d64:	40d8      	lsrs	r0, r3
 8000d66:	2920      	cmp	r1, #32
 8000d68:	d003      	beq.n	8000d72 <__aeabi_dadd+0x23e>
 8000d6a:	2340      	movs	r3, #64	; 0x40
 8000d6c:	1a5b      	subs	r3, r3, r1
 8000d6e:	409a      	lsls	r2, r3
 8000d70:	4314      	orrs	r4, r2
 8000d72:	1e63      	subs	r3, r4, #1
 8000d74:	419c      	sbcs	r4, r3
 8000d76:	2300      	movs	r3, #0
 8000d78:	2600      	movs	r6, #0
 8000d7a:	469a      	mov	sl, r3
 8000d7c:	4304      	orrs	r4, r0
 8000d7e:	0763      	lsls	r3, r4, #29
 8000d80:	d000      	beq.n	8000d84 <__aeabi_dadd+0x250>
 8000d82:	e755      	b.n	8000c30 <__aeabi_dadd+0xfc>
 8000d84:	4652      	mov	r2, sl
 8000d86:	08e3      	lsrs	r3, r4, #3
 8000d88:	0752      	lsls	r2, r2, #29
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	4652      	mov	r2, sl
 8000d8e:	0037      	movs	r7, r6
 8000d90:	08d1      	lsrs	r1, r2, #3
 8000d92:	4a43      	ldr	r2, [pc, #268]	; (8000ea0 <__aeabi_dadd+0x36c>)
 8000d94:	4297      	cmp	r7, r2
 8000d96:	d01f      	beq.n	8000dd8 <__aeabi_dadd+0x2a4>
 8000d98:	0309      	lsls	r1, r1, #12
 8000d9a:	057a      	lsls	r2, r7, #21
 8000d9c:	0b0c      	lsrs	r4, r1, #12
 8000d9e:	0d52      	lsrs	r2, r2, #21
 8000da0:	e764      	b.n	8000c6c <__aeabi_dadd+0x138>
 8000da2:	4642      	mov	r2, r8
 8000da4:	464c      	mov	r4, r9
 8000da6:	4314      	orrs	r4, r2
 8000da8:	1e62      	subs	r2, r4, #1
 8000daa:	4194      	sbcs	r4, r2
 8000dac:	18e4      	adds	r4, r4, r3
 8000dae:	429c      	cmp	r4, r3
 8000db0:	4192      	sbcs	r2, r2
 8000db2:	4252      	negs	r2, r2
 8000db4:	4692      	mov	sl, r2
 8000db6:	448a      	add	sl, r1
 8000db8:	4653      	mov	r3, sl
 8000dba:	021b      	lsls	r3, r3, #8
 8000dbc:	d5df      	bpl.n	8000d7e <__aeabi_dadd+0x24a>
 8000dbe:	4b38      	ldr	r3, [pc, #224]	; (8000ea0 <__aeabi_dadd+0x36c>)
 8000dc0:	3601      	adds	r6, #1
 8000dc2:	429e      	cmp	r6, r3
 8000dc4:	d000      	beq.n	8000dc8 <__aeabi_dadd+0x294>
 8000dc6:	e0b3      	b.n	8000f30 <__aeabi_dadd+0x3fc>
 8000dc8:	0032      	movs	r2, r6
 8000dca:	2400      	movs	r4, #0
 8000dcc:	2300      	movs	r3, #0
 8000dce:	e74d      	b.n	8000c6c <__aeabi_dadd+0x138>
 8000dd0:	074a      	lsls	r2, r1, #29
 8000dd2:	08db      	lsrs	r3, r3, #3
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	08c9      	lsrs	r1, r1, #3
 8000dd8:	001a      	movs	r2, r3
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	d100      	bne.n	8000de0 <__aeabi_dadd+0x2ac>
 8000dde:	e200      	b.n	80011e2 <__aeabi_dadd+0x6ae>
 8000de0:	2480      	movs	r4, #128	; 0x80
 8000de2:	0324      	lsls	r4, r4, #12
 8000de4:	430c      	orrs	r4, r1
 8000de6:	0324      	lsls	r4, r4, #12
 8000de8:	4a2d      	ldr	r2, [pc, #180]	; (8000ea0 <__aeabi_dadd+0x36c>)
 8000dea:	0b24      	lsrs	r4, r4, #12
 8000dec:	e73e      	b.n	8000c6c <__aeabi_dadd+0x138>
 8000dee:	0020      	movs	r0, r4
 8000df0:	f001 f896 	bl	8001f20 <__clzsi2>
 8000df4:	0003      	movs	r3, r0
 8000df6:	3318      	adds	r3, #24
 8000df8:	2b1f      	cmp	r3, #31
 8000dfa:	dc00      	bgt.n	8000dfe <__aeabi_dadd+0x2ca>
 8000dfc:	e6f7      	b.n	8000bee <__aeabi_dadd+0xba>
 8000dfe:	0022      	movs	r2, r4
 8000e00:	3808      	subs	r0, #8
 8000e02:	4082      	lsls	r2, r0
 8000e04:	2400      	movs	r4, #0
 8000e06:	42b3      	cmp	r3, r6
 8000e08:	db00      	blt.n	8000e0c <__aeabi_dadd+0x2d8>
 8000e0a:	e6fc      	b.n	8000c06 <__aeabi_dadd+0xd2>
 8000e0c:	1af6      	subs	r6, r6, r3
 8000e0e:	4b25      	ldr	r3, [pc, #148]	; (8000ea4 <__aeabi_dadd+0x370>)
 8000e10:	401a      	ands	r2, r3
 8000e12:	4692      	mov	sl, r2
 8000e14:	e70a      	b.n	8000c2c <__aeabi_dadd+0xf8>
 8000e16:	2f00      	cmp	r7, #0
 8000e18:	d02b      	beq.n	8000e72 <__aeabi_dadd+0x33e>
 8000e1a:	1b97      	subs	r7, r2, r6
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d100      	bne.n	8000e22 <__aeabi_dadd+0x2ee>
 8000e20:	e0b8      	b.n	8000f94 <__aeabi_dadd+0x460>
 8000e22:	4c1f      	ldr	r4, [pc, #124]	; (8000ea0 <__aeabi_dadd+0x36c>)
 8000e24:	42a2      	cmp	r2, r4
 8000e26:	d100      	bne.n	8000e2a <__aeabi_dadd+0x2f6>
 8000e28:	e11c      	b.n	8001064 <__aeabi_dadd+0x530>
 8000e2a:	2480      	movs	r4, #128	; 0x80
 8000e2c:	0424      	lsls	r4, r4, #16
 8000e2e:	4321      	orrs	r1, r4
 8000e30:	2f38      	cmp	r7, #56	; 0x38
 8000e32:	dd00      	ble.n	8000e36 <__aeabi_dadd+0x302>
 8000e34:	e11e      	b.n	8001074 <__aeabi_dadd+0x540>
 8000e36:	2f1f      	cmp	r7, #31
 8000e38:	dd00      	ble.n	8000e3c <__aeabi_dadd+0x308>
 8000e3a:	e19e      	b.n	800117a <__aeabi_dadd+0x646>
 8000e3c:	2620      	movs	r6, #32
 8000e3e:	000c      	movs	r4, r1
 8000e40:	1bf6      	subs	r6, r6, r7
 8000e42:	0018      	movs	r0, r3
 8000e44:	40b3      	lsls	r3, r6
 8000e46:	40b4      	lsls	r4, r6
 8000e48:	40f8      	lsrs	r0, r7
 8000e4a:	1e5e      	subs	r6, r3, #1
 8000e4c:	41b3      	sbcs	r3, r6
 8000e4e:	40f9      	lsrs	r1, r7
 8000e50:	4304      	orrs	r4, r0
 8000e52:	431c      	orrs	r4, r3
 8000e54:	4489      	add	r9, r1
 8000e56:	4444      	add	r4, r8
 8000e58:	4544      	cmp	r4, r8
 8000e5a:	419b      	sbcs	r3, r3
 8000e5c:	425b      	negs	r3, r3
 8000e5e:	444b      	add	r3, r9
 8000e60:	469a      	mov	sl, r3
 8000e62:	0016      	movs	r6, r2
 8000e64:	e7a8      	b.n	8000db8 <__aeabi_dadd+0x284>
 8000e66:	4642      	mov	r2, r8
 8000e68:	464c      	mov	r4, r9
 8000e6a:	4314      	orrs	r4, r2
 8000e6c:	1e62      	subs	r2, r4, #1
 8000e6e:	4194      	sbcs	r4, r2
 8000e70:	e6a6      	b.n	8000bc0 <__aeabi_dadd+0x8c>
 8000e72:	4c0d      	ldr	r4, [pc, #52]	; (8000ea8 <__aeabi_dadd+0x374>)
 8000e74:	1c72      	adds	r2, r6, #1
 8000e76:	4222      	tst	r2, r4
 8000e78:	d000      	beq.n	8000e7c <__aeabi_dadd+0x348>
 8000e7a:	e0a8      	b.n	8000fce <__aeabi_dadd+0x49a>
 8000e7c:	000a      	movs	r2, r1
 8000e7e:	431a      	orrs	r2, r3
 8000e80:	2e00      	cmp	r6, #0
 8000e82:	d000      	beq.n	8000e86 <__aeabi_dadd+0x352>
 8000e84:	e10a      	b.n	800109c <__aeabi_dadd+0x568>
 8000e86:	2a00      	cmp	r2, #0
 8000e88:	d100      	bne.n	8000e8c <__aeabi_dadd+0x358>
 8000e8a:	e15e      	b.n	800114a <__aeabi_dadd+0x616>
 8000e8c:	464a      	mov	r2, r9
 8000e8e:	4302      	orrs	r2, r0
 8000e90:	d000      	beq.n	8000e94 <__aeabi_dadd+0x360>
 8000e92:	e161      	b.n	8001158 <__aeabi_dadd+0x624>
 8000e94:	074a      	lsls	r2, r1, #29
 8000e96:	08db      	lsrs	r3, r3, #3
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	08c9      	lsrs	r1, r1, #3
 8000e9c:	e77c      	b.n	8000d98 <__aeabi_dadd+0x264>
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	000007ff 	.word	0x000007ff
 8000ea4:	ff7fffff 	.word	0xff7fffff
 8000ea8:	000007fe 	.word	0x000007fe
 8000eac:	4ccf      	ldr	r4, [pc, #828]	; (80011ec <__aeabi_dadd+0x6b8>)
 8000eae:	42a2      	cmp	r2, r4
 8000eb0:	d100      	bne.n	8000eb4 <__aeabi_dadd+0x380>
 8000eb2:	e0ce      	b.n	8001052 <__aeabi_dadd+0x51e>
 8000eb4:	2480      	movs	r4, #128	; 0x80
 8000eb6:	0424      	lsls	r4, r4, #16
 8000eb8:	4321      	orrs	r1, r4
 8000eba:	2f38      	cmp	r7, #56	; 0x38
 8000ebc:	dc5b      	bgt.n	8000f76 <__aeabi_dadd+0x442>
 8000ebe:	2f1f      	cmp	r7, #31
 8000ec0:	dd00      	ble.n	8000ec4 <__aeabi_dadd+0x390>
 8000ec2:	e0dc      	b.n	800107e <__aeabi_dadd+0x54a>
 8000ec4:	2520      	movs	r5, #32
 8000ec6:	000c      	movs	r4, r1
 8000ec8:	1bed      	subs	r5, r5, r7
 8000eca:	001e      	movs	r6, r3
 8000ecc:	40ab      	lsls	r3, r5
 8000ece:	40ac      	lsls	r4, r5
 8000ed0:	40fe      	lsrs	r6, r7
 8000ed2:	1e5d      	subs	r5, r3, #1
 8000ed4:	41ab      	sbcs	r3, r5
 8000ed6:	4334      	orrs	r4, r6
 8000ed8:	40f9      	lsrs	r1, r7
 8000eda:	431c      	orrs	r4, r3
 8000edc:	464b      	mov	r3, r9
 8000ede:	1a5b      	subs	r3, r3, r1
 8000ee0:	4699      	mov	r9, r3
 8000ee2:	e04c      	b.n	8000f7e <__aeabi_dadd+0x44a>
 8000ee4:	464a      	mov	r2, r9
 8000ee6:	1a1c      	subs	r4, r3, r0
 8000ee8:	1a88      	subs	r0, r1, r2
 8000eea:	42a3      	cmp	r3, r4
 8000eec:	4192      	sbcs	r2, r2
 8000eee:	4252      	negs	r2, r2
 8000ef0:	4692      	mov	sl, r2
 8000ef2:	0002      	movs	r2, r0
 8000ef4:	4650      	mov	r0, sl
 8000ef6:	1a12      	subs	r2, r2, r0
 8000ef8:	4692      	mov	sl, r2
 8000efa:	0212      	lsls	r2, r2, #8
 8000efc:	d478      	bmi.n	8000ff0 <__aeabi_dadd+0x4bc>
 8000efe:	4653      	mov	r3, sl
 8000f00:	4323      	orrs	r3, r4
 8000f02:	d000      	beq.n	8000f06 <__aeabi_dadd+0x3d2>
 8000f04:	e66a      	b.n	8000bdc <__aeabi_dadd+0xa8>
 8000f06:	2100      	movs	r1, #0
 8000f08:	2500      	movs	r5, #0
 8000f0a:	e745      	b.n	8000d98 <__aeabi_dadd+0x264>
 8000f0c:	074a      	lsls	r2, r1, #29
 8000f0e:	08db      	lsrs	r3, r3, #3
 8000f10:	4313      	orrs	r3, r2
 8000f12:	08c9      	lsrs	r1, r1, #3
 8000f14:	e73d      	b.n	8000d92 <__aeabi_dadd+0x25e>
 8000f16:	181c      	adds	r4, r3, r0
 8000f18:	429c      	cmp	r4, r3
 8000f1a:	419b      	sbcs	r3, r3
 8000f1c:	4449      	add	r1, r9
 8000f1e:	468a      	mov	sl, r1
 8000f20:	425b      	negs	r3, r3
 8000f22:	449a      	add	sl, r3
 8000f24:	4653      	mov	r3, sl
 8000f26:	2601      	movs	r6, #1
 8000f28:	021b      	lsls	r3, r3, #8
 8000f2a:	d400      	bmi.n	8000f2e <__aeabi_dadd+0x3fa>
 8000f2c:	e727      	b.n	8000d7e <__aeabi_dadd+0x24a>
 8000f2e:	2602      	movs	r6, #2
 8000f30:	4652      	mov	r2, sl
 8000f32:	4baf      	ldr	r3, [pc, #700]	; (80011f0 <__aeabi_dadd+0x6bc>)
 8000f34:	2101      	movs	r1, #1
 8000f36:	401a      	ands	r2, r3
 8000f38:	0013      	movs	r3, r2
 8000f3a:	4021      	ands	r1, r4
 8000f3c:	0862      	lsrs	r2, r4, #1
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	07dc      	lsls	r4, r3, #31
 8000f42:	085b      	lsrs	r3, r3, #1
 8000f44:	469a      	mov	sl, r3
 8000f46:	4314      	orrs	r4, r2
 8000f48:	e670      	b.n	8000c2c <__aeabi_dadd+0xf8>
 8000f4a:	003a      	movs	r2, r7
 8000f4c:	464c      	mov	r4, r9
 8000f4e:	3a20      	subs	r2, #32
 8000f50:	40d4      	lsrs	r4, r2
 8000f52:	46a4      	mov	ip, r4
 8000f54:	2f20      	cmp	r7, #32
 8000f56:	d007      	beq.n	8000f68 <__aeabi_dadd+0x434>
 8000f58:	2240      	movs	r2, #64	; 0x40
 8000f5a:	4648      	mov	r0, r9
 8000f5c:	1bd2      	subs	r2, r2, r7
 8000f5e:	4090      	lsls	r0, r2
 8000f60:	0002      	movs	r2, r0
 8000f62:	4640      	mov	r0, r8
 8000f64:	4310      	orrs	r0, r2
 8000f66:	4680      	mov	r8, r0
 8000f68:	4640      	mov	r0, r8
 8000f6a:	1e42      	subs	r2, r0, #1
 8000f6c:	4190      	sbcs	r0, r2
 8000f6e:	4662      	mov	r2, ip
 8000f70:	0004      	movs	r4, r0
 8000f72:	4314      	orrs	r4, r2
 8000f74:	e624      	b.n	8000bc0 <__aeabi_dadd+0x8c>
 8000f76:	4319      	orrs	r1, r3
 8000f78:	000c      	movs	r4, r1
 8000f7a:	1e63      	subs	r3, r4, #1
 8000f7c:	419c      	sbcs	r4, r3
 8000f7e:	4643      	mov	r3, r8
 8000f80:	1b1c      	subs	r4, r3, r4
 8000f82:	45a0      	cmp	r8, r4
 8000f84:	419b      	sbcs	r3, r3
 8000f86:	4649      	mov	r1, r9
 8000f88:	425b      	negs	r3, r3
 8000f8a:	1acb      	subs	r3, r1, r3
 8000f8c:	469a      	mov	sl, r3
 8000f8e:	4665      	mov	r5, ip
 8000f90:	0016      	movs	r6, r2
 8000f92:	e61b      	b.n	8000bcc <__aeabi_dadd+0x98>
 8000f94:	000c      	movs	r4, r1
 8000f96:	431c      	orrs	r4, r3
 8000f98:	d100      	bne.n	8000f9c <__aeabi_dadd+0x468>
 8000f9a:	e0c7      	b.n	800112c <__aeabi_dadd+0x5f8>
 8000f9c:	1e7c      	subs	r4, r7, #1
 8000f9e:	2f01      	cmp	r7, #1
 8000fa0:	d100      	bne.n	8000fa4 <__aeabi_dadd+0x470>
 8000fa2:	e0f9      	b.n	8001198 <__aeabi_dadd+0x664>
 8000fa4:	4e91      	ldr	r6, [pc, #580]	; (80011ec <__aeabi_dadd+0x6b8>)
 8000fa6:	42b7      	cmp	r7, r6
 8000fa8:	d05c      	beq.n	8001064 <__aeabi_dadd+0x530>
 8000faa:	0027      	movs	r7, r4
 8000fac:	e740      	b.n	8000e30 <__aeabi_dadd+0x2fc>
 8000fae:	2220      	movs	r2, #32
 8000fb0:	464c      	mov	r4, r9
 8000fb2:	4640      	mov	r0, r8
 8000fb4:	1bd2      	subs	r2, r2, r7
 8000fb6:	4094      	lsls	r4, r2
 8000fb8:	40f8      	lsrs	r0, r7
 8000fba:	4304      	orrs	r4, r0
 8000fbc:	4640      	mov	r0, r8
 8000fbe:	4090      	lsls	r0, r2
 8000fc0:	1e42      	subs	r2, r0, #1
 8000fc2:	4190      	sbcs	r0, r2
 8000fc4:	464a      	mov	r2, r9
 8000fc6:	40fa      	lsrs	r2, r7
 8000fc8:	4304      	orrs	r4, r0
 8000fca:	1889      	adds	r1, r1, r2
 8000fcc:	e6ee      	b.n	8000dac <__aeabi_dadd+0x278>
 8000fce:	4c87      	ldr	r4, [pc, #540]	; (80011ec <__aeabi_dadd+0x6b8>)
 8000fd0:	42a2      	cmp	r2, r4
 8000fd2:	d100      	bne.n	8000fd6 <__aeabi_dadd+0x4a2>
 8000fd4:	e6f9      	b.n	8000dca <__aeabi_dadd+0x296>
 8000fd6:	1818      	adds	r0, r3, r0
 8000fd8:	4298      	cmp	r0, r3
 8000fda:	419b      	sbcs	r3, r3
 8000fdc:	4449      	add	r1, r9
 8000fde:	425b      	negs	r3, r3
 8000fe0:	18cb      	adds	r3, r1, r3
 8000fe2:	07dc      	lsls	r4, r3, #31
 8000fe4:	0840      	lsrs	r0, r0, #1
 8000fe6:	085b      	lsrs	r3, r3, #1
 8000fe8:	469a      	mov	sl, r3
 8000fea:	0016      	movs	r6, r2
 8000fec:	4304      	orrs	r4, r0
 8000fee:	e6c6      	b.n	8000d7e <__aeabi_dadd+0x24a>
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	1ad4      	subs	r4, r2, r3
 8000ff4:	45a0      	cmp	r8, r4
 8000ff6:	4180      	sbcs	r0, r0
 8000ff8:	464b      	mov	r3, r9
 8000ffa:	4240      	negs	r0, r0
 8000ffc:	1a59      	subs	r1, r3, r1
 8000ffe:	1a0b      	subs	r3, r1, r0
 8001000:	469a      	mov	sl, r3
 8001002:	4665      	mov	r5, ip
 8001004:	e5ea      	b.n	8000bdc <__aeabi_dadd+0xa8>
 8001006:	464b      	mov	r3, r9
 8001008:	464a      	mov	r2, r9
 800100a:	08c0      	lsrs	r0, r0, #3
 800100c:	075b      	lsls	r3, r3, #29
 800100e:	4665      	mov	r5, ip
 8001010:	4303      	orrs	r3, r0
 8001012:	08d1      	lsrs	r1, r2, #3
 8001014:	e6bd      	b.n	8000d92 <__aeabi_dadd+0x25e>
 8001016:	2a00      	cmp	r2, #0
 8001018:	d000      	beq.n	800101c <__aeabi_dadd+0x4e8>
 800101a:	e08e      	b.n	800113a <__aeabi_dadd+0x606>
 800101c:	464b      	mov	r3, r9
 800101e:	4303      	orrs	r3, r0
 8001020:	d117      	bne.n	8001052 <__aeabi_dadd+0x51e>
 8001022:	2180      	movs	r1, #128	; 0x80
 8001024:	2500      	movs	r5, #0
 8001026:	0309      	lsls	r1, r1, #12
 8001028:	e6da      	b.n	8000de0 <__aeabi_dadd+0x2ac>
 800102a:	074a      	lsls	r2, r1, #29
 800102c:	08db      	lsrs	r3, r3, #3
 800102e:	4313      	orrs	r3, r2
 8001030:	08c9      	lsrs	r1, r1, #3
 8001032:	e6d1      	b.n	8000dd8 <__aeabi_dadd+0x2a4>
 8001034:	1a1c      	subs	r4, r3, r0
 8001036:	464a      	mov	r2, r9
 8001038:	42a3      	cmp	r3, r4
 800103a:	419b      	sbcs	r3, r3
 800103c:	1a89      	subs	r1, r1, r2
 800103e:	425b      	negs	r3, r3
 8001040:	1acb      	subs	r3, r1, r3
 8001042:	469a      	mov	sl, r3
 8001044:	2601      	movs	r6, #1
 8001046:	e5c1      	b.n	8000bcc <__aeabi_dadd+0x98>
 8001048:	074a      	lsls	r2, r1, #29
 800104a:	08db      	lsrs	r3, r3, #3
 800104c:	4313      	orrs	r3, r2
 800104e:	08c9      	lsrs	r1, r1, #3
 8001050:	e69f      	b.n	8000d92 <__aeabi_dadd+0x25e>
 8001052:	4643      	mov	r3, r8
 8001054:	08d8      	lsrs	r0, r3, #3
 8001056:	464b      	mov	r3, r9
 8001058:	464a      	mov	r2, r9
 800105a:	075b      	lsls	r3, r3, #29
 800105c:	4665      	mov	r5, ip
 800105e:	4303      	orrs	r3, r0
 8001060:	08d1      	lsrs	r1, r2, #3
 8001062:	e6b9      	b.n	8000dd8 <__aeabi_dadd+0x2a4>
 8001064:	4643      	mov	r3, r8
 8001066:	08d8      	lsrs	r0, r3, #3
 8001068:	464b      	mov	r3, r9
 800106a:	464a      	mov	r2, r9
 800106c:	075b      	lsls	r3, r3, #29
 800106e:	4303      	orrs	r3, r0
 8001070:	08d1      	lsrs	r1, r2, #3
 8001072:	e6b1      	b.n	8000dd8 <__aeabi_dadd+0x2a4>
 8001074:	4319      	orrs	r1, r3
 8001076:	000c      	movs	r4, r1
 8001078:	1e63      	subs	r3, r4, #1
 800107a:	419c      	sbcs	r4, r3
 800107c:	e6eb      	b.n	8000e56 <__aeabi_dadd+0x322>
 800107e:	003c      	movs	r4, r7
 8001080:	000d      	movs	r5, r1
 8001082:	3c20      	subs	r4, #32
 8001084:	40e5      	lsrs	r5, r4
 8001086:	2f20      	cmp	r7, #32
 8001088:	d003      	beq.n	8001092 <__aeabi_dadd+0x55e>
 800108a:	2440      	movs	r4, #64	; 0x40
 800108c:	1be4      	subs	r4, r4, r7
 800108e:	40a1      	lsls	r1, r4
 8001090:	430b      	orrs	r3, r1
 8001092:	001c      	movs	r4, r3
 8001094:	1e63      	subs	r3, r4, #1
 8001096:	419c      	sbcs	r4, r3
 8001098:	432c      	orrs	r4, r5
 800109a:	e770      	b.n	8000f7e <__aeabi_dadd+0x44a>
 800109c:	2a00      	cmp	r2, #0
 800109e:	d0e1      	beq.n	8001064 <__aeabi_dadd+0x530>
 80010a0:	464a      	mov	r2, r9
 80010a2:	4302      	orrs	r2, r0
 80010a4:	d0c1      	beq.n	800102a <__aeabi_dadd+0x4f6>
 80010a6:	074a      	lsls	r2, r1, #29
 80010a8:	08db      	lsrs	r3, r3, #3
 80010aa:	4313      	orrs	r3, r2
 80010ac:	2280      	movs	r2, #128	; 0x80
 80010ae:	08c9      	lsrs	r1, r1, #3
 80010b0:	0312      	lsls	r2, r2, #12
 80010b2:	4211      	tst	r1, r2
 80010b4:	d008      	beq.n	80010c8 <__aeabi_dadd+0x594>
 80010b6:	4648      	mov	r0, r9
 80010b8:	08c4      	lsrs	r4, r0, #3
 80010ba:	4214      	tst	r4, r2
 80010bc:	d104      	bne.n	80010c8 <__aeabi_dadd+0x594>
 80010be:	4643      	mov	r3, r8
 80010c0:	0021      	movs	r1, r4
 80010c2:	08db      	lsrs	r3, r3, #3
 80010c4:	0742      	lsls	r2, r0, #29
 80010c6:	4313      	orrs	r3, r2
 80010c8:	0f5a      	lsrs	r2, r3, #29
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	0752      	lsls	r2, r2, #29
 80010ce:	08db      	lsrs	r3, r3, #3
 80010d0:	4313      	orrs	r3, r2
 80010d2:	e681      	b.n	8000dd8 <__aeabi_dadd+0x2a4>
 80010d4:	464b      	mov	r3, r9
 80010d6:	4303      	orrs	r3, r0
 80010d8:	d100      	bne.n	80010dc <__aeabi_dadd+0x5a8>
 80010da:	e714      	b.n	8000f06 <__aeabi_dadd+0x3d2>
 80010dc:	464b      	mov	r3, r9
 80010de:	464a      	mov	r2, r9
 80010e0:	08c0      	lsrs	r0, r0, #3
 80010e2:	075b      	lsls	r3, r3, #29
 80010e4:	4665      	mov	r5, ip
 80010e6:	4303      	orrs	r3, r0
 80010e8:	08d1      	lsrs	r1, r2, #3
 80010ea:	e655      	b.n	8000d98 <__aeabi_dadd+0x264>
 80010ec:	1ac4      	subs	r4, r0, r3
 80010ee:	45a0      	cmp	r8, r4
 80010f0:	4180      	sbcs	r0, r0
 80010f2:	464b      	mov	r3, r9
 80010f4:	4240      	negs	r0, r0
 80010f6:	1a59      	subs	r1, r3, r1
 80010f8:	1a0b      	subs	r3, r1, r0
 80010fa:	469a      	mov	sl, r3
 80010fc:	4665      	mov	r5, ip
 80010fe:	2601      	movs	r6, #1
 8001100:	e564      	b.n	8000bcc <__aeabi_dadd+0x98>
 8001102:	1a1c      	subs	r4, r3, r0
 8001104:	464a      	mov	r2, r9
 8001106:	42a3      	cmp	r3, r4
 8001108:	4180      	sbcs	r0, r0
 800110a:	1a8a      	subs	r2, r1, r2
 800110c:	4240      	negs	r0, r0
 800110e:	1a12      	subs	r2, r2, r0
 8001110:	4692      	mov	sl, r2
 8001112:	0212      	lsls	r2, r2, #8
 8001114:	d549      	bpl.n	80011aa <__aeabi_dadd+0x676>
 8001116:	4642      	mov	r2, r8
 8001118:	1ad4      	subs	r4, r2, r3
 800111a:	45a0      	cmp	r8, r4
 800111c:	4180      	sbcs	r0, r0
 800111e:	464b      	mov	r3, r9
 8001120:	4240      	negs	r0, r0
 8001122:	1a59      	subs	r1, r3, r1
 8001124:	1a0b      	subs	r3, r1, r0
 8001126:	469a      	mov	sl, r3
 8001128:	4665      	mov	r5, ip
 800112a:	e57f      	b.n	8000c2c <__aeabi_dadd+0xf8>
 800112c:	464b      	mov	r3, r9
 800112e:	464a      	mov	r2, r9
 8001130:	08c0      	lsrs	r0, r0, #3
 8001132:	075b      	lsls	r3, r3, #29
 8001134:	4303      	orrs	r3, r0
 8001136:	08d1      	lsrs	r1, r2, #3
 8001138:	e62b      	b.n	8000d92 <__aeabi_dadd+0x25e>
 800113a:	464a      	mov	r2, r9
 800113c:	08db      	lsrs	r3, r3, #3
 800113e:	4302      	orrs	r2, r0
 8001140:	d138      	bne.n	80011b4 <__aeabi_dadd+0x680>
 8001142:	074a      	lsls	r2, r1, #29
 8001144:	4313      	orrs	r3, r2
 8001146:	08c9      	lsrs	r1, r1, #3
 8001148:	e646      	b.n	8000dd8 <__aeabi_dadd+0x2a4>
 800114a:	464b      	mov	r3, r9
 800114c:	464a      	mov	r2, r9
 800114e:	08c0      	lsrs	r0, r0, #3
 8001150:	075b      	lsls	r3, r3, #29
 8001152:	4303      	orrs	r3, r0
 8001154:	08d1      	lsrs	r1, r2, #3
 8001156:	e61f      	b.n	8000d98 <__aeabi_dadd+0x264>
 8001158:	181c      	adds	r4, r3, r0
 800115a:	429c      	cmp	r4, r3
 800115c:	419b      	sbcs	r3, r3
 800115e:	4449      	add	r1, r9
 8001160:	468a      	mov	sl, r1
 8001162:	425b      	negs	r3, r3
 8001164:	449a      	add	sl, r3
 8001166:	4653      	mov	r3, sl
 8001168:	021b      	lsls	r3, r3, #8
 800116a:	d400      	bmi.n	800116e <__aeabi_dadd+0x63a>
 800116c:	e607      	b.n	8000d7e <__aeabi_dadd+0x24a>
 800116e:	4652      	mov	r2, sl
 8001170:	4b1f      	ldr	r3, [pc, #124]	; (80011f0 <__aeabi_dadd+0x6bc>)
 8001172:	2601      	movs	r6, #1
 8001174:	401a      	ands	r2, r3
 8001176:	4692      	mov	sl, r2
 8001178:	e601      	b.n	8000d7e <__aeabi_dadd+0x24a>
 800117a:	003c      	movs	r4, r7
 800117c:	000e      	movs	r6, r1
 800117e:	3c20      	subs	r4, #32
 8001180:	40e6      	lsrs	r6, r4
 8001182:	2f20      	cmp	r7, #32
 8001184:	d003      	beq.n	800118e <__aeabi_dadd+0x65a>
 8001186:	2440      	movs	r4, #64	; 0x40
 8001188:	1be4      	subs	r4, r4, r7
 800118a:	40a1      	lsls	r1, r4
 800118c:	430b      	orrs	r3, r1
 800118e:	001c      	movs	r4, r3
 8001190:	1e63      	subs	r3, r4, #1
 8001192:	419c      	sbcs	r4, r3
 8001194:	4334      	orrs	r4, r6
 8001196:	e65e      	b.n	8000e56 <__aeabi_dadd+0x322>
 8001198:	4443      	add	r3, r8
 800119a:	4283      	cmp	r3, r0
 800119c:	4180      	sbcs	r0, r0
 800119e:	4449      	add	r1, r9
 80011a0:	468a      	mov	sl, r1
 80011a2:	4240      	negs	r0, r0
 80011a4:	001c      	movs	r4, r3
 80011a6:	4482      	add	sl, r0
 80011a8:	e6bc      	b.n	8000f24 <__aeabi_dadd+0x3f0>
 80011aa:	4653      	mov	r3, sl
 80011ac:	4323      	orrs	r3, r4
 80011ae:	d100      	bne.n	80011b2 <__aeabi_dadd+0x67e>
 80011b0:	e6a9      	b.n	8000f06 <__aeabi_dadd+0x3d2>
 80011b2:	e5e4      	b.n	8000d7e <__aeabi_dadd+0x24a>
 80011b4:	074a      	lsls	r2, r1, #29
 80011b6:	4313      	orrs	r3, r2
 80011b8:	2280      	movs	r2, #128	; 0x80
 80011ba:	08c9      	lsrs	r1, r1, #3
 80011bc:	0312      	lsls	r2, r2, #12
 80011be:	4211      	tst	r1, r2
 80011c0:	d009      	beq.n	80011d6 <__aeabi_dadd+0x6a2>
 80011c2:	4648      	mov	r0, r9
 80011c4:	08c4      	lsrs	r4, r0, #3
 80011c6:	4214      	tst	r4, r2
 80011c8:	d105      	bne.n	80011d6 <__aeabi_dadd+0x6a2>
 80011ca:	4643      	mov	r3, r8
 80011cc:	4665      	mov	r5, ip
 80011ce:	0021      	movs	r1, r4
 80011d0:	08db      	lsrs	r3, r3, #3
 80011d2:	0742      	lsls	r2, r0, #29
 80011d4:	4313      	orrs	r3, r2
 80011d6:	0f5a      	lsrs	r2, r3, #29
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	08db      	lsrs	r3, r3, #3
 80011dc:	0752      	lsls	r2, r2, #29
 80011de:	4313      	orrs	r3, r2
 80011e0:	e5fa      	b.n	8000dd8 <__aeabi_dadd+0x2a4>
 80011e2:	2300      	movs	r3, #0
 80011e4:	4a01      	ldr	r2, [pc, #4]	; (80011ec <__aeabi_dadd+0x6b8>)
 80011e6:	001c      	movs	r4, r3
 80011e8:	e540      	b.n	8000c6c <__aeabi_dadd+0x138>
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	000007ff 	.word	0x000007ff
 80011f0:	ff7fffff 	.word	0xff7fffff

080011f4 <__aeabi_ddiv>:
 80011f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011f6:	4657      	mov	r7, sl
 80011f8:	464e      	mov	r6, r9
 80011fa:	4645      	mov	r5, r8
 80011fc:	46de      	mov	lr, fp
 80011fe:	b5e0      	push	{r5, r6, r7, lr}
 8001200:	030c      	lsls	r4, r1, #12
 8001202:	001f      	movs	r7, r3
 8001204:	004b      	lsls	r3, r1, #1
 8001206:	4681      	mov	r9, r0
 8001208:	4692      	mov	sl, r2
 800120a:	0005      	movs	r5, r0
 800120c:	b085      	sub	sp, #20
 800120e:	0b24      	lsrs	r4, r4, #12
 8001210:	0d5b      	lsrs	r3, r3, #21
 8001212:	0fce      	lsrs	r6, r1, #31
 8001214:	2b00      	cmp	r3, #0
 8001216:	d100      	bne.n	800121a <__aeabi_ddiv+0x26>
 8001218:	e152      	b.n	80014c0 <__aeabi_ddiv+0x2cc>
 800121a:	4ad2      	ldr	r2, [pc, #840]	; (8001564 <__aeabi_ddiv+0x370>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d100      	bne.n	8001222 <__aeabi_ddiv+0x2e>
 8001220:	e16e      	b.n	8001500 <__aeabi_ddiv+0x30c>
 8001222:	0f42      	lsrs	r2, r0, #29
 8001224:	00e4      	lsls	r4, r4, #3
 8001226:	4314      	orrs	r4, r2
 8001228:	2280      	movs	r2, #128	; 0x80
 800122a:	0412      	lsls	r2, r2, #16
 800122c:	4322      	orrs	r2, r4
 800122e:	4690      	mov	r8, r2
 8001230:	4acd      	ldr	r2, [pc, #820]	; (8001568 <__aeabi_ddiv+0x374>)
 8001232:	00c5      	lsls	r5, r0, #3
 8001234:	4693      	mov	fp, r2
 8001236:	449b      	add	fp, r3
 8001238:	2300      	movs	r3, #0
 800123a:	4699      	mov	r9, r3
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	033c      	lsls	r4, r7, #12
 8001240:	007b      	lsls	r3, r7, #1
 8001242:	4650      	mov	r0, sl
 8001244:	0b24      	lsrs	r4, r4, #12
 8001246:	0d5b      	lsrs	r3, r3, #21
 8001248:	0fff      	lsrs	r7, r7, #31
 800124a:	2b00      	cmp	r3, #0
 800124c:	d100      	bne.n	8001250 <__aeabi_ddiv+0x5c>
 800124e:	e11a      	b.n	8001486 <__aeabi_ddiv+0x292>
 8001250:	4ac4      	ldr	r2, [pc, #784]	; (8001564 <__aeabi_ddiv+0x370>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d100      	bne.n	8001258 <__aeabi_ddiv+0x64>
 8001256:	e15e      	b.n	8001516 <__aeabi_ddiv+0x322>
 8001258:	0f42      	lsrs	r2, r0, #29
 800125a:	00e4      	lsls	r4, r4, #3
 800125c:	4322      	orrs	r2, r4
 800125e:	2480      	movs	r4, #128	; 0x80
 8001260:	0424      	lsls	r4, r4, #16
 8001262:	4314      	orrs	r4, r2
 8001264:	4ac0      	ldr	r2, [pc, #768]	; (8001568 <__aeabi_ddiv+0x374>)
 8001266:	00c1      	lsls	r1, r0, #3
 8001268:	4694      	mov	ip, r2
 800126a:	465a      	mov	r2, fp
 800126c:	4463      	add	r3, ip
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	469b      	mov	fp, r3
 8001272:	2000      	movs	r0, #0
 8001274:	0033      	movs	r3, r6
 8001276:	407b      	eors	r3, r7
 8001278:	469a      	mov	sl, r3
 800127a:	464b      	mov	r3, r9
 800127c:	2b0f      	cmp	r3, #15
 800127e:	d827      	bhi.n	80012d0 <__aeabi_ddiv+0xdc>
 8001280:	4aba      	ldr	r2, [pc, #744]	; (800156c <__aeabi_ddiv+0x378>)
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	58d3      	ldr	r3, [r2, r3]
 8001286:	469f      	mov	pc, r3
 8001288:	46b2      	mov	sl, r6
 800128a:	9b00      	ldr	r3, [sp, #0]
 800128c:	2b02      	cmp	r3, #2
 800128e:	d016      	beq.n	80012be <__aeabi_ddiv+0xca>
 8001290:	2b03      	cmp	r3, #3
 8001292:	d100      	bne.n	8001296 <__aeabi_ddiv+0xa2>
 8001294:	e287      	b.n	80017a6 <__aeabi_ddiv+0x5b2>
 8001296:	2b01      	cmp	r3, #1
 8001298:	d000      	beq.n	800129c <__aeabi_ddiv+0xa8>
 800129a:	e0d5      	b.n	8001448 <__aeabi_ddiv+0x254>
 800129c:	2300      	movs	r3, #0
 800129e:	2200      	movs	r2, #0
 80012a0:	2500      	movs	r5, #0
 80012a2:	051b      	lsls	r3, r3, #20
 80012a4:	4313      	orrs	r3, r2
 80012a6:	4652      	mov	r2, sl
 80012a8:	07d2      	lsls	r2, r2, #31
 80012aa:	4313      	orrs	r3, r2
 80012ac:	0028      	movs	r0, r5
 80012ae:	0019      	movs	r1, r3
 80012b0:	b005      	add	sp, #20
 80012b2:	bcf0      	pop	{r4, r5, r6, r7}
 80012b4:	46bb      	mov	fp, r7
 80012b6:	46b2      	mov	sl, r6
 80012b8:	46a9      	mov	r9, r5
 80012ba:	46a0      	mov	r8, r4
 80012bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012be:	2200      	movs	r2, #0
 80012c0:	2500      	movs	r5, #0
 80012c2:	4ba8      	ldr	r3, [pc, #672]	; (8001564 <__aeabi_ddiv+0x370>)
 80012c4:	e7ed      	b.n	80012a2 <__aeabi_ddiv+0xae>
 80012c6:	46ba      	mov	sl, r7
 80012c8:	46a0      	mov	r8, r4
 80012ca:	000d      	movs	r5, r1
 80012cc:	9000      	str	r0, [sp, #0]
 80012ce:	e7dc      	b.n	800128a <__aeabi_ddiv+0x96>
 80012d0:	4544      	cmp	r4, r8
 80012d2:	d200      	bcs.n	80012d6 <__aeabi_ddiv+0xe2>
 80012d4:	e1c4      	b.n	8001660 <__aeabi_ddiv+0x46c>
 80012d6:	d100      	bne.n	80012da <__aeabi_ddiv+0xe6>
 80012d8:	e1bf      	b.n	800165a <__aeabi_ddiv+0x466>
 80012da:	2301      	movs	r3, #1
 80012dc:	425b      	negs	r3, r3
 80012de:	469c      	mov	ip, r3
 80012e0:	002e      	movs	r6, r5
 80012e2:	4640      	mov	r0, r8
 80012e4:	2500      	movs	r5, #0
 80012e6:	44e3      	add	fp, ip
 80012e8:	0223      	lsls	r3, r4, #8
 80012ea:	0e0c      	lsrs	r4, r1, #24
 80012ec:	431c      	orrs	r4, r3
 80012ee:	0c1b      	lsrs	r3, r3, #16
 80012f0:	4699      	mov	r9, r3
 80012f2:	0423      	lsls	r3, r4, #16
 80012f4:	020a      	lsls	r2, r1, #8
 80012f6:	0c1f      	lsrs	r7, r3, #16
 80012f8:	4649      	mov	r1, r9
 80012fa:	9200      	str	r2, [sp, #0]
 80012fc:	9701      	str	r7, [sp, #4]
 80012fe:	f7fe ff9b 	bl	8000238 <__aeabi_uidivmod>
 8001302:	0002      	movs	r2, r0
 8001304:	437a      	muls	r2, r7
 8001306:	040b      	lsls	r3, r1, #16
 8001308:	0c31      	lsrs	r1, r6, #16
 800130a:	4680      	mov	r8, r0
 800130c:	4319      	orrs	r1, r3
 800130e:	428a      	cmp	r2, r1
 8001310:	d907      	bls.n	8001322 <__aeabi_ddiv+0x12e>
 8001312:	2301      	movs	r3, #1
 8001314:	425b      	negs	r3, r3
 8001316:	469c      	mov	ip, r3
 8001318:	1909      	adds	r1, r1, r4
 800131a:	44e0      	add	r8, ip
 800131c:	428c      	cmp	r4, r1
 800131e:	d800      	bhi.n	8001322 <__aeabi_ddiv+0x12e>
 8001320:	e201      	b.n	8001726 <__aeabi_ddiv+0x532>
 8001322:	1a88      	subs	r0, r1, r2
 8001324:	4649      	mov	r1, r9
 8001326:	f7fe ff87 	bl	8000238 <__aeabi_uidivmod>
 800132a:	9a01      	ldr	r2, [sp, #4]
 800132c:	0436      	lsls	r6, r6, #16
 800132e:	4342      	muls	r2, r0
 8001330:	0409      	lsls	r1, r1, #16
 8001332:	0c36      	lsrs	r6, r6, #16
 8001334:	0003      	movs	r3, r0
 8001336:	430e      	orrs	r6, r1
 8001338:	42b2      	cmp	r2, r6
 800133a:	d904      	bls.n	8001346 <__aeabi_ddiv+0x152>
 800133c:	1936      	adds	r6, r6, r4
 800133e:	3b01      	subs	r3, #1
 8001340:	42b4      	cmp	r4, r6
 8001342:	d800      	bhi.n	8001346 <__aeabi_ddiv+0x152>
 8001344:	e1e9      	b.n	800171a <__aeabi_ddiv+0x526>
 8001346:	1ab0      	subs	r0, r6, r2
 8001348:	4642      	mov	r2, r8
 800134a:	9e00      	ldr	r6, [sp, #0]
 800134c:	0412      	lsls	r2, r2, #16
 800134e:	431a      	orrs	r2, r3
 8001350:	0c33      	lsrs	r3, r6, #16
 8001352:	001f      	movs	r7, r3
 8001354:	0c11      	lsrs	r1, r2, #16
 8001356:	4690      	mov	r8, r2
 8001358:	9302      	str	r3, [sp, #8]
 800135a:	0413      	lsls	r3, r2, #16
 800135c:	0432      	lsls	r2, r6, #16
 800135e:	0c16      	lsrs	r6, r2, #16
 8001360:	0032      	movs	r2, r6
 8001362:	0c1b      	lsrs	r3, r3, #16
 8001364:	435a      	muls	r2, r3
 8001366:	9603      	str	r6, [sp, #12]
 8001368:	437b      	muls	r3, r7
 800136a:	434e      	muls	r6, r1
 800136c:	4379      	muls	r1, r7
 800136e:	0c17      	lsrs	r7, r2, #16
 8001370:	46bc      	mov	ip, r7
 8001372:	199b      	adds	r3, r3, r6
 8001374:	4463      	add	r3, ip
 8001376:	429e      	cmp	r6, r3
 8001378:	d903      	bls.n	8001382 <__aeabi_ddiv+0x18e>
 800137a:	2680      	movs	r6, #128	; 0x80
 800137c:	0276      	lsls	r6, r6, #9
 800137e:	46b4      	mov	ip, r6
 8001380:	4461      	add	r1, ip
 8001382:	0c1e      	lsrs	r6, r3, #16
 8001384:	1871      	adds	r1, r6, r1
 8001386:	0416      	lsls	r6, r2, #16
 8001388:	041b      	lsls	r3, r3, #16
 800138a:	0c36      	lsrs	r6, r6, #16
 800138c:	199e      	adds	r6, r3, r6
 800138e:	4288      	cmp	r0, r1
 8001390:	d302      	bcc.n	8001398 <__aeabi_ddiv+0x1a4>
 8001392:	d112      	bne.n	80013ba <__aeabi_ddiv+0x1c6>
 8001394:	42b5      	cmp	r5, r6
 8001396:	d210      	bcs.n	80013ba <__aeabi_ddiv+0x1c6>
 8001398:	4643      	mov	r3, r8
 800139a:	1e5a      	subs	r2, r3, #1
 800139c:	9b00      	ldr	r3, [sp, #0]
 800139e:	469c      	mov	ip, r3
 80013a0:	4465      	add	r5, ip
 80013a2:	001f      	movs	r7, r3
 80013a4:	429d      	cmp	r5, r3
 80013a6:	419b      	sbcs	r3, r3
 80013a8:	425b      	negs	r3, r3
 80013aa:	191b      	adds	r3, r3, r4
 80013ac:	18c0      	adds	r0, r0, r3
 80013ae:	4284      	cmp	r4, r0
 80013b0:	d200      	bcs.n	80013b4 <__aeabi_ddiv+0x1c0>
 80013b2:	e19e      	b.n	80016f2 <__aeabi_ddiv+0x4fe>
 80013b4:	d100      	bne.n	80013b8 <__aeabi_ddiv+0x1c4>
 80013b6:	e199      	b.n	80016ec <__aeabi_ddiv+0x4f8>
 80013b8:	4690      	mov	r8, r2
 80013ba:	1bae      	subs	r6, r5, r6
 80013bc:	42b5      	cmp	r5, r6
 80013be:	41ad      	sbcs	r5, r5
 80013c0:	1a40      	subs	r0, r0, r1
 80013c2:	426d      	negs	r5, r5
 80013c4:	1b40      	subs	r0, r0, r5
 80013c6:	4284      	cmp	r4, r0
 80013c8:	d100      	bne.n	80013cc <__aeabi_ddiv+0x1d8>
 80013ca:	e1d2      	b.n	8001772 <__aeabi_ddiv+0x57e>
 80013cc:	4649      	mov	r1, r9
 80013ce:	f7fe ff33 	bl	8000238 <__aeabi_uidivmod>
 80013d2:	9a01      	ldr	r2, [sp, #4]
 80013d4:	040b      	lsls	r3, r1, #16
 80013d6:	4342      	muls	r2, r0
 80013d8:	0c31      	lsrs	r1, r6, #16
 80013da:	0005      	movs	r5, r0
 80013dc:	4319      	orrs	r1, r3
 80013de:	428a      	cmp	r2, r1
 80013e0:	d900      	bls.n	80013e4 <__aeabi_ddiv+0x1f0>
 80013e2:	e16c      	b.n	80016be <__aeabi_ddiv+0x4ca>
 80013e4:	1a88      	subs	r0, r1, r2
 80013e6:	4649      	mov	r1, r9
 80013e8:	f7fe ff26 	bl	8000238 <__aeabi_uidivmod>
 80013ec:	9a01      	ldr	r2, [sp, #4]
 80013ee:	0436      	lsls	r6, r6, #16
 80013f0:	4342      	muls	r2, r0
 80013f2:	0409      	lsls	r1, r1, #16
 80013f4:	0c36      	lsrs	r6, r6, #16
 80013f6:	0003      	movs	r3, r0
 80013f8:	430e      	orrs	r6, r1
 80013fa:	42b2      	cmp	r2, r6
 80013fc:	d900      	bls.n	8001400 <__aeabi_ddiv+0x20c>
 80013fe:	e153      	b.n	80016a8 <__aeabi_ddiv+0x4b4>
 8001400:	9803      	ldr	r0, [sp, #12]
 8001402:	1ab6      	subs	r6, r6, r2
 8001404:	0002      	movs	r2, r0
 8001406:	042d      	lsls	r5, r5, #16
 8001408:	431d      	orrs	r5, r3
 800140a:	9f02      	ldr	r7, [sp, #8]
 800140c:	042b      	lsls	r3, r5, #16
 800140e:	0c1b      	lsrs	r3, r3, #16
 8001410:	435a      	muls	r2, r3
 8001412:	437b      	muls	r3, r7
 8001414:	469c      	mov	ip, r3
 8001416:	0c29      	lsrs	r1, r5, #16
 8001418:	4348      	muls	r0, r1
 800141a:	0c13      	lsrs	r3, r2, #16
 800141c:	4484      	add	ip, r0
 800141e:	4463      	add	r3, ip
 8001420:	4379      	muls	r1, r7
 8001422:	4298      	cmp	r0, r3
 8001424:	d903      	bls.n	800142e <__aeabi_ddiv+0x23a>
 8001426:	2080      	movs	r0, #128	; 0x80
 8001428:	0240      	lsls	r0, r0, #9
 800142a:	4684      	mov	ip, r0
 800142c:	4461      	add	r1, ip
 800142e:	0c18      	lsrs	r0, r3, #16
 8001430:	0412      	lsls	r2, r2, #16
 8001432:	041b      	lsls	r3, r3, #16
 8001434:	0c12      	lsrs	r2, r2, #16
 8001436:	1840      	adds	r0, r0, r1
 8001438:	189b      	adds	r3, r3, r2
 800143a:	4286      	cmp	r6, r0
 800143c:	d200      	bcs.n	8001440 <__aeabi_ddiv+0x24c>
 800143e:	e100      	b.n	8001642 <__aeabi_ddiv+0x44e>
 8001440:	d100      	bne.n	8001444 <__aeabi_ddiv+0x250>
 8001442:	e0fb      	b.n	800163c <__aeabi_ddiv+0x448>
 8001444:	2301      	movs	r3, #1
 8001446:	431d      	orrs	r5, r3
 8001448:	4b49      	ldr	r3, [pc, #292]	; (8001570 <__aeabi_ddiv+0x37c>)
 800144a:	445b      	add	r3, fp
 800144c:	2b00      	cmp	r3, #0
 800144e:	dc00      	bgt.n	8001452 <__aeabi_ddiv+0x25e>
 8001450:	e0aa      	b.n	80015a8 <__aeabi_ddiv+0x3b4>
 8001452:	076a      	lsls	r2, r5, #29
 8001454:	d000      	beq.n	8001458 <__aeabi_ddiv+0x264>
 8001456:	e13d      	b.n	80016d4 <__aeabi_ddiv+0x4e0>
 8001458:	08e9      	lsrs	r1, r5, #3
 800145a:	4642      	mov	r2, r8
 800145c:	01d2      	lsls	r2, r2, #7
 800145e:	d506      	bpl.n	800146e <__aeabi_ddiv+0x27a>
 8001460:	4642      	mov	r2, r8
 8001462:	4b44      	ldr	r3, [pc, #272]	; (8001574 <__aeabi_ddiv+0x380>)
 8001464:	401a      	ands	r2, r3
 8001466:	2380      	movs	r3, #128	; 0x80
 8001468:	4690      	mov	r8, r2
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	445b      	add	r3, fp
 800146e:	4a42      	ldr	r2, [pc, #264]	; (8001578 <__aeabi_ddiv+0x384>)
 8001470:	4293      	cmp	r3, r2
 8001472:	dd00      	ble.n	8001476 <__aeabi_ddiv+0x282>
 8001474:	e723      	b.n	80012be <__aeabi_ddiv+0xca>
 8001476:	4642      	mov	r2, r8
 8001478:	055b      	lsls	r3, r3, #21
 800147a:	0755      	lsls	r5, r2, #29
 800147c:	0252      	lsls	r2, r2, #9
 800147e:	430d      	orrs	r5, r1
 8001480:	0b12      	lsrs	r2, r2, #12
 8001482:	0d5b      	lsrs	r3, r3, #21
 8001484:	e70d      	b.n	80012a2 <__aeabi_ddiv+0xae>
 8001486:	4651      	mov	r1, sl
 8001488:	4321      	orrs	r1, r4
 800148a:	d100      	bne.n	800148e <__aeabi_ddiv+0x29a>
 800148c:	e07c      	b.n	8001588 <__aeabi_ddiv+0x394>
 800148e:	2c00      	cmp	r4, #0
 8001490:	d100      	bne.n	8001494 <__aeabi_ddiv+0x2a0>
 8001492:	e0fb      	b.n	800168c <__aeabi_ddiv+0x498>
 8001494:	0020      	movs	r0, r4
 8001496:	f000 fd43 	bl	8001f20 <__clzsi2>
 800149a:	0002      	movs	r2, r0
 800149c:	3a0b      	subs	r2, #11
 800149e:	231d      	movs	r3, #29
 80014a0:	1a9b      	subs	r3, r3, r2
 80014a2:	4652      	mov	r2, sl
 80014a4:	0001      	movs	r1, r0
 80014a6:	40da      	lsrs	r2, r3
 80014a8:	4653      	mov	r3, sl
 80014aa:	3908      	subs	r1, #8
 80014ac:	408b      	lsls	r3, r1
 80014ae:	408c      	lsls	r4, r1
 80014b0:	0019      	movs	r1, r3
 80014b2:	4314      	orrs	r4, r2
 80014b4:	4b31      	ldr	r3, [pc, #196]	; (800157c <__aeabi_ddiv+0x388>)
 80014b6:	4458      	add	r0, fp
 80014b8:	469b      	mov	fp, r3
 80014ba:	4483      	add	fp, r0
 80014bc:	2000      	movs	r0, #0
 80014be:	e6d9      	b.n	8001274 <__aeabi_ddiv+0x80>
 80014c0:	0003      	movs	r3, r0
 80014c2:	4323      	orrs	r3, r4
 80014c4:	4698      	mov	r8, r3
 80014c6:	d044      	beq.n	8001552 <__aeabi_ddiv+0x35e>
 80014c8:	2c00      	cmp	r4, #0
 80014ca:	d100      	bne.n	80014ce <__aeabi_ddiv+0x2da>
 80014cc:	e0cf      	b.n	800166e <__aeabi_ddiv+0x47a>
 80014ce:	0020      	movs	r0, r4
 80014d0:	f000 fd26 	bl	8001f20 <__clzsi2>
 80014d4:	0001      	movs	r1, r0
 80014d6:	0002      	movs	r2, r0
 80014d8:	390b      	subs	r1, #11
 80014da:	231d      	movs	r3, #29
 80014dc:	1a5b      	subs	r3, r3, r1
 80014de:	4649      	mov	r1, r9
 80014e0:	0010      	movs	r0, r2
 80014e2:	40d9      	lsrs	r1, r3
 80014e4:	3808      	subs	r0, #8
 80014e6:	4084      	lsls	r4, r0
 80014e8:	000b      	movs	r3, r1
 80014ea:	464d      	mov	r5, r9
 80014ec:	4323      	orrs	r3, r4
 80014ee:	4698      	mov	r8, r3
 80014f0:	4085      	lsls	r5, r0
 80014f2:	4b23      	ldr	r3, [pc, #140]	; (8001580 <__aeabi_ddiv+0x38c>)
 80014f4:	1a9b      	subs	r3, r3, r2
 80014f6:	469b      	mov	fp, r3
 80014f8:	2300      	movs	r3, #0
 80014fa:	4699      	mov	r9, r3
 80014fc:	9300      	str	r3, [sp, #0]
 80014fe:	e69e      	b.n	800123e <__aeabi_ddiv+0x4a>
 8001500:	0002      	movs	r2, r0
 8001502:	4322      	orrs	r2, r4
 8001504:	4690      	mov	r8, r2
 8001506:	d11d      	bne.n	8001544 <__aeabi_ddiv+0x350>
 8001508:	2208      	movs	r2, #8
 800150a:	469b      	mov	fp, r3
 800150c:	2302      	movs	r3, #2
 800150e:	2500      	movs	r5, #0
 8001510:	4691      	mov	r9, r2
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	e693      	b.n	800123e <__aeabi_ddiv+0x4a>
 8001516:	4651      	mov	r1, sl
 8001518:	4321      	orrs	r1, r4
 800151a:	d109      	bne.n	8001530 <__aeabi_ddiv+0x33c>
 800151c:	2302      	movs	r3, #2
 800151e:	464a      	mov	r2, r9
 8001520:	431a      	orrs	r2, r3
 8001522:	4b18      	ldr	r3, [pc, #96]	; (8001584 <__aeabi_ddiv+0x390>)
 8001524:	4691      	mov	r9, r2
 8001526:	469c      	mov	ip, r3
 8001528:	2400      	movs	r4, #0
 800152a:	2002      	movs	r0, #2
 800152c:	44e3      	add	fp, ip
 800152e:	e6a1      	b.n	8001274 <__aeabi_ddiv+0x80>
 8001530:	2303      	movs	r3, #3
 8001532:	464a      	mov	r2, r9
 8001534:	431a      	orrs	r2, r3
 8001536:	4b13      	ldr	r3, [pc, #76]	; (8001584 <__aeabi_ddiv+0x390>)
 8001538:	4691      	mov	r9, r2
 800153a:	469c      	mov	ip, r3
 800153c:	4651      	mov	r1, sl
 800153e:	2003      	movs	r0, #3
 8001540:	44e3      	add	fp, ip
 8001542:	e697      	b.n	8001274 <__aeabi_ddiv+0x80>
 8001544:	220c      	movs	r2, #12
 8001546:	469b      	mov	fp, r3
 8001548:	2303      	movs	r3, #3
 800154a:	46a0      	mov	r8, r4
 800154c:	4691      	mov	r9, r2
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	e675      	b.n	800123e <__aeabi_ddiv+0x4a>
 8001552:	2304      	movs	r3, #4
 8001554:	4699      	mov	r9, r3
 8001556:	2300      	movs	r3, #0
 8001558:	469b      	mov	fp, r3
 800155a:	3301      	adds	r3, #1
 800155c:	2500      	movs	r5, #0
 800155e:	9300      	str	r3, [sp, #0]
 8001560:	e66d      	b.n	800123e <__aeabi_ddiv+0x4a>
 8001562:	46c0      	nop			; (mov r8, r8)
 8001564:	000007ff 	.word	0x000007ff
 8001568:	fffffc01 	.word	0xfffffc01
 800156c:	0800ab8c 	.word	0x0800ab8c
 8001570:	000003ff 	.word	0x000003ff
 8001574:	feffffff 	.word	0xfeffffff
 8001578:	000007fe 	.word	0x000007fe
 800157c:	000003f3 	.word	0x000003f3
 8001580:	fffffc0d 	.word	0xfffffc0d
 8001584:	fffff801 	.word	0xfffff801
 8001588:	464a      	mov	r2, r9
 800158a:	2301      	movs	r3, #1
 800158c:	431a      	orrs	r2, r3
 800158e:	4691      	mov	r9, r2
 8001590:	2400      	movs	r4, #0
 8001592:	2001      	movs	r0, #1
 8001594:	e66e      	b.n	8001274 <__aeabi_ddiv+0x80>
 8001596:	2300      	movs	r3, #0
 8001598:	2280      	movs	r2, #128	; 0x80
 800159a:	469a      	mov	sl, r3
 800159c:	2500      	movs	r5, #0
 800159e:	4b88      	ldr	r3, [pc, #544]	; (80017c0 <__aeabi_ddiv+0x5cc>)
 80015a0:	0312      	lsls	r2, r2, #12
 80015a2:	e67e      	b.n	80012a2 <__aeabi_ddiv+0xae>
 80015a4:	2501      	movs	r5, #1
 80015a6:	426d      	negs	r5, r5
 80015a8:	2201      	movs	r2, #1
 80015aa:	1ad2      	subs	r2, r2, r3
 80015ac:	2a38      	cmp	r2, #56	; 0x38
 80015ae:	dd00      	ble.n	80015b2 <__aeabi_ddiv+0x3be>
 80015b0:	e674      	b.n	800129c <__aeabi_ddiv+0xa8>
 80015b2:	2a1f      	cmp	r2, #31
 80015b4:	dc00      	bgt.n	80015b8 <__aeabi_ddiv+0x3c4>
 80015b6:	e0bd      	b.n	8001734 <__aeabi_ddiv+0x540>
 80015b8:	211f      	movs	r1, #31
 80015ba:	4249      	negs	r1, r1
 80015bc:	1acb      	subs	r3, r1, r3
 80015be:	4641      	mov	r1, r8
 80015c0:	40d9      	lsrs	r1, r3
 80015c2:	000b      	movs	r3, r1
 80015c4:	2a20      	cmp	r2, #32
 80015c6:	d004      	beq.n	80015d2 <__aeabi_ddiv+0x3de>
 80015c8:	4641      	mov	r1, r8
 80015ca:	4a7e      	ldr	r2, [pc, #504]	; (80017c4 <__aeabi_ddiv+0x5d0>)
 80015cc:	445a      	add	r2, fp
 80015ce:	4091      	lsls	r1, r2
 80015d0:	430d      	orrs	r5, r1
 80015d2:	0029      	movs	r1, r5
 80015d4:	1e4a      	subs	r2, r1, #1
 80015d6:	4191      	sbcs	r1, r2
 80015d8:	4319      	orrs	r1, r3
 80015da:	2307      	movs	r3, #7
 80015dc:	001d      	movs	r5, r3
 80015de:	2200      	movs	r2, #0
 80015e0:	400d      	ands	r5, r1
 80015e2:	420b      	tst	r3, r1
 80015e4:	d100      	bne.n	80015e8 <__aeabi_ddiv+0x3f4>
 80015e6:	e0d0      	b.n	800178a <__aeabi_ddiv+0x596>
 80015e8:	220f      	movs	r2, #15
 80015ea:	2300      	movs	r3, #0
 80015ec:	400a      	ands	r2, r1
 80015ee:	2a04      	cmp	r2, #4
 80015f0:	d100      	bne.n	80015f4 <__aeabi_ddiv+0x400>
 80015f2:	e0c7      	b.n	8001784 <__aeabi_ddiv+0x590>
 80015f4:	1d0a      	adds	r2, r1, #4
 80015f6:	428a      	cmp	r2, r1
 80015f8:	4189      	sbcs	r1, r1
 80015fa:	4249      	negs	r1, r1
 80015fc:	185b      	adds	r3, r3, r1
 80015fe:	0011      	movs	r1, r2
 8001600:	021a      	lsls	r2, r3, #8
 8001602:	d400      	bmi.n	8001606 <__aeabi_ddiv+0x412>
 8001604:	e0be      	b.n	8001784 <__aeabi_ddiv+0x590>
 8001606:	2301      	movs	r3, #1
 8001608:	2200      	movs	r2, #0
 800160a:	2500      	movs	r5, #0
 800160c:	e649      	b.n	80012a2 <__aeabi_ddiv+0xae>
 800160e:	2280      	movs	r2, #128	; 0x80
 8001610:	4643      	mov	r3, r8
 8001612:	0312      	lsls	r2, r2, #12
 8001614:	4213      	tst	r3, r2
 8001616:	d008      	beq.n	800162a <__aeabi_ddiv+0x436>
 8001618:	4214      	tst	r4, r2
 800161a:	d106      	bne.n	800162a <__aeabi_ddiv+0x436>
 800161c:	4322      	orrs	r2, r4
 800161e:	0312      	lsls	r2, r2, #12
 8001620:	46ba      	mov	sl, r7
 8001622:	000d      	movs	r5, r1
 8001624:	4b66      	ldr	r3, [pc, #408]	; (80017c0 <__aeabi_ddiv+0x5cc>)
 8001626:	0b12      	lsrs	r2, r2, #12
 8001628:	e63b      	b.n	80012a2 <__aeabi_ddiv+0xae>
 800162a:	2280      	movs	r2, #128	; 0x80
 800162c:	4643      	mov	r3, r8
 800162e:	0312      	lsls	r2, r2, #12
 8001630:	431a      	orrs	r2, r3
 8001632:	0312      	lsls	r2, r2, #12
 8001634:	46b2      	mov	sl, r6
 8001636:	4b62      	ldr	r3, [pc, #392]	; (80017c0 <__aeabi_ddiv+0x5cc>)
 8001638:	0b12      	lsrs	r2, r2, #12
 800163a:	e632      	b.n	80012a2 <__aeabi_ddiv+0xae>
 800163c:	2b00      	cmp	r3, #0
 800163e:	d100      	bne.n	8001642 <__aeabi_ddiv+0x44e>
 8001640:	e702      	b.n	8001448 <__aeabi_ddiv+0x254>
 8001642:	19a6      	adds	r6, r4, r6
 8001644:	1e6a      	subs	r2, r5, #1
 8001646:	42a6      	cmp	r6, r4
 8001648:	d200      	bcs.n	800164c <__aeabi_ddiv+0x458>
 800164a:	e089      	b.n	8001760 <__aeabi_ddiv+0x56c>
 800164c:	4286      	cmp	r6, r0
 800164e:	d200      	bcs.n	8001652 <__aeabi_ddiv+0x45e>
 8001650:	e09f      	b.n	8001792 <__aeabi_ddiv+0x59e>
 8001652:	d100      	bne.n	8001656 <__aeabi_ddiv+0x462>
 8001654:	e0af      	b.n	80017b6 <__aeabi_ddiv+0x5c2>
 8001656:	0015      	movs	r5, r2
 8001658:	e6f4      	b.n	8001444 <__aeabi_ddiv+0x250>
 800165a:	42a9      	cmp	r1, r5
 800165c:	d900      	bls.n	8001660 <__aeabi_ddiv+0x46c>
 800165e:	e63c      	b.n	80012da <__aeabi_ddiv+0xe6>
 8001660:	4643      	mov	r3, r8
 8001662:	07de      	lsls	r6, r3, #31
 8001664:	0858      	lsrs	r0, r3, #1
 8001666:	086b      	lsrs	r3, r5, #1
 8001668:	431e      	orrs	r6, r3
 800166a:	07ed      	lsls	r5, r5, #31
 800166c:	e63c      	b.n	80012e8 <__aeabi_ddiv+0xf4>
 800166e:	f000 fc57 	bl	8001f20 <__clzsi2>
 8001672:	0001      	movs	r1, r0
 8001674:	0002      	movs	r2, r0
 8001676:	3115      	adds	r1, #21
 8001678:	3220      	adds	r2, #32
 800167a:	291c      	cmp	r1, #28
 800167c:	dc00      	bgt.n	8001680 <__aeabi_ddiv+0x48c>
 800167e:	e72c      	b.n	80014da <__aeabi_ddiv+0x2e6>
 8001680:	464b      	mov	r3, r9
 8001682:	3808      	subs	r0, #8
 8001684:	4083      	lsls	r3, r0
 8001686:	2500      	movs	r5, #0
 8001688:	4698      	mov	r8, r3
 800168a:	e732      	b.n	80014f2 <__aeabi_ddiv+0x2fe>
 800168c:	f000 fc48 	bl	8001f20 <__clzsi2>
 8001690:	0003      	movs	r3, r0
 8001692:	001a      	movs	r2, r3
 8001694:	3215      	adds	r2, #21
 8001696:	3020      	adds	r0, #32
 8001698:	2a1c      	cmp	r2, #28
 800169a:	dc00      	bgt.n	800169e <__aeabi_ddiv+0x4aa>
 800169c:	e6ff      	b.n	800149e <__aeabi_ddiv+0x2aa>
 800169e:	4654      	mov	r4, sl
 80016a0:	3b08      	subs	r3, #8
 80016a2:	2100      	movs	r1, #0
 80016a4:	409c      	lsls	r4, r3
 80016a6:	e705      	b.n	80014b4 <__aeabi_ddiv+0x2c0>
 80016a8:	1936      	adds	r6, r6, r4
 80016aa:	3b01      	subs	r3, #1
 80016ac:	42b4      	cmp	r4, r6
 80016ae:	d900      	bls.n	80016b2 <__aeabi_ddiv+0x4be>
 80016b0:	e6a6      	b.n	8001400 <__aeabi_ddiv+0x20c>
 80016b2:	42b2      	cmp	r2, r6
 80016b4:	d800      	bhi.n	80016b8 <__aeabi_ddiv+0x4c4>
 80016b6:	e6a3      	b.n	8001400 <__aeabi_ddiv+0x20c>
 80016b8:	1e83      	subs	r3, r0, #2
 80016ba:	1936      	adds	r6, r6, r4
 80016bc:	e6a0      	b.n	8001400 <__aeabi_ddiv+0x20c>
 80016be:	1909      	adds	r1, r1, r4
 80016c0:	3d01      	subs	r5, #1
 80016c2:	428c      	cmp	r4, r1
 80016c4:	d900      	bls.n	80016c8 <__aeabi_ddiv+0x4d4>
 80016c6:	e68d      	b.n	80013e4 <__aeabi_ddiv+0x1f0>
 80016c8:	428a      	cmp	r2, r1
 80016ca:	d800      	bhi.n	80016ce <__aeabi_ddiv+0x4da>
 80016cc:	e68a      	b.n	80013e4 <__aeabi_ddiv+0x1f0>
 80016ce:	1e85      	subs	r5, r0, #2
 80016d0:	1909      	adds	r1, r1, r4
 80016d2:	e687      	b.n	80013e4 <__aeabi_ddiv+0x1f0>
 80016d4:	220f      	movs	r2, #15
 80016d6:	402a      	ands	r2, r5
 80016d8:	2a04      	cmp	r2, #4
 80016da:	d100      	bne.n	80016de <__aeabi_ddiv+0x4ea>
 80016dc:	e6bc      	b.n	8001458 <__aeabi_ddiv+0x264>
 80016de:	1d29      	adds	r1, r5, #4
 80016e0:	42a9      	cmp	r1, r5
 80016e2:	41ad      	sbcs	r5, r5
 80016e4:	426d      	negs	r5, r5
 80016e6:	08c9      	lsrs	r1, r1, #3
 80016e8:	44a8      	add	r8, r5
 80016ea:	e6b6      	b.n	800145a <__aeabi_ddiv+0x266>
 80016ec:	42af      	cmp	r7, r5
 80016ee:	d900      	bls.n	80016f2 <__aeabi_ddiv+0x4fe>
 80016f0:	e662      	b.n	80013b8 <__aeabi_ddiv+0x1c4>
 80016f2:	4281      	cmp	r1, r0
 80016f4:	d804      	bhi.n	8001700 <__aeabi_ddiv+0x50c>
 80016f6:	d000      	beq.n	80016fa <__aeabi_ddiv+0x506>
 80016f8:	e65e      	b.n	80013b8 <__aeabi_ddiv+0x1c4>
 80016fa:	42ae      	cmp	r6, r5
 80016fc:	d800      	bhi.n	8001700 <__aeabi_ddiv+0x50c>
 80016fe:	e65b      	b.n	80013b8 <__aeabi_ddiv+0x1c4>
 8001700:	2302      	movs	r3, #2
 8001702:	425b      	negs	r3, r3
 8001704:	469c      	mov	ip, r3
 8001706:	9b00      	ldr	r3, [sp, #0]
 8001708:	44e0      	add	r8, ip
 800170a:	469c      	mov	ip, r3
 800170c:	4465      	add	r5, ip
 800170e:	429d      	cmp	r5, r3
 8001710:	419b      	sbcs	r3, r3
 8001712:	425b      	negs	r3, r3
 8001714:	191b      	adds	r3, r3, r4
 8001716:	18c0      	adds	r0, r0, r3
 8001718:	e64f      	b.n	80013ba <__aeabi_ddiv+0x1c6>
 800171a:	42b2      	cmp	r2, r6
 800171c:	d800      	bhi.n	8001720 <__aeabi_ddiv+0x52c>
 800171e:	e612      	b.n	8001346 <__aeabi_ddiv+0x152>
 8001720:	1e83      	subs	r3, r0, #2
 8001722:	1936      	adds	r6, r6, r4
 8001724:	e60f      	b.n	8001346 <__aeabi_ddiv+0x152>
 8001726:	428a      	cmp	r2, r1
 8001728:	d800      	bhi.n	800172c <__aeabi_ddiv+0x538>
 800172a:	e5fa      	b.n	8001322 <__aeabi_ddiv+0x12e>
 800172c:	1e83      	subs	r3, r0, #2
 800172e:	4698      	mov	r8, r3
 8001730:	1909      	adds	r1, r1, r4
 8001732:	e5f6      	b.n	8001322 <__aeabi_ddiv+0x12e>
 8001734:	4b24      	ldr	r3, [pc, #144]	; (80017c8 <__aeabi_ddiv+0x5d4>)
 8001736:	0028      	movs	r0, r5
 8001738:	445b      	add	r3, fp
 800173a:	4641      	mov	r1, r8
 800173c:	409d      	lsls	r5, r3
 800173e:	4099      	lsls	r1, r3
 8001740:	40d0      	lsrs	r0, r2
 8001742:	1e6b      	subs	r3, r5, #1
 8001744:	419d      	sbcs	r5, r3
 8001746:	4643      	mov	r3, r8
 8001748:	4301      	orrs	r1, r0
 800174a:	4329      	orrs	r1, r5
 800174c:	40d3      	lsrs	r3, r2
 800174e:	074a      	lsls	r2, r1, #29
 8001750:	d100      	bne.n	8001754 <__aeabi_ddiv+0x560>
 8001752:	e755      	b.n	8001600 <__aeabi_ddiv+0x40c>
 8001754:	220f      	movs	r2, #15
 8001756:	400a      	ands	r2, r1
 8001758:	2a04      	cmp	r2, #4
 800175a:	d000      	beq.n	800175e <__aeabi_ddiv+0x56a>
 800175c:	e74a      	b.n	80015f4 <__aeabi_ddiv+0x400>
 800175e:	e74f      	b.n	8001600 <__aeabi_ddiv+0x40c>
 8001760:	0015      	movs	r5, r2
 8001762:	4286      	cmp	r6, r0
 8001764:	d000      	beq.n	8001768 <__aeabi_ddiv+0x574>
 8001766:	e66d      	b.n	8001444 <__aeabi_ddiv+0x250>
 8001768:	9a00      	ldr	r2, [sp, #0]
 800176a:	429a      	cmp	r2, r3
 800176c:	d000      	beq.n	8001770 <__aeabi_ddiv+0x57c>
 800176e:	e669      	b.n	8001444 <__aeabi_ddiv+0x250>
 8001770:	e66a      	b.n	8001448 <__aeabi_ddiv+0x254>
 8001772:	4b16      	ldr	r3, [pc, #88]	; (80017cc <__aeabi_ddiv+0x5d8>)
 8001774:	445b      	add	r3, fp
 8001776:	2b00      	cmp	r3, #0
 8001778:	dc00      	bgt.n	800177c <__aeabi_ddiv+0x588>
 800177a:	e713      	b.n	80015a4 <__aeabi_ddiv+0x3b0>
 800177c:	2501      	movs	r5, #1
 800177e:	2100      	movs	r1, #0
 8001780:	44a8      	add	r8, r5
 8001782:	e66a      	b.n	800145a <__aeabi_ddiv+0x266>
 8001784:	075d      	lsls	r5, r3, #29
 8001786:	025b      	lsls	r3, r3, #9
 8001788:	0b1a      	lsrs	r2, r3, #12
 800178a:	08c9      	lsrs	r1, r1, #3
 800178c:	2300      	movs	r3, #0
 800178e:	430d      	orrs	r5, r1
 8001790:	e587      	b.n	80012a2 <__aeabi_ddiv+0xae>
 8001792:	9900      	ldr	r1, [sp, #0]
 8001794:	3d02      	subs	r5, #2
 8001796:	004a      	lsls	r2, r1, #1
 8001798:	428a      	cmp	r2, r1
 800179a:	41bf      	sbcs	r7, r7
 800179c:	427f      	negs	r7, r7
 800179e:	193f      	adds	r7, r7, r4
 80017a0:	19f6      	adds	r6, r6, r7
 80017a2:	9200      	str	r2, [sp, #0]
 80017a4:	e7dd      	b.n	8001762 <__aeabi_ddiv+0x56e>
 80017a6:	2280      	movs	r2, #128	; 0x80
 80017a8:	4643      	mov	r3, r8
 80017aa:	0312      	lsls	r2, r2, #12
 80017ac:	431a      	orrs	r2, r3
 80017ae:	0312      	lsls	r2, r2, #12
 80017b0:	4b03      	ldr	r3, [pc, #12]	; (80017c0 <__aeabi_ddiv+0x5cc>)
 80017b2:	0b12      	lsrs	r2, r2, #12
 80017b4:	e575      	b.n	80012a2 <__aeabi_ddiv+0xae>
 80017b6:	9900      	ldr	r1, [sp, #0]
 80017b8:	4299      	cmp	r1, r3
 80017ba:	d3ea      	bcc.n	8001792 <__aeabi_ddiv+0x59e>
 80017bc:	0015      	movs	r5, r2
 80017be:	e7d3      	b.n	8001768 <__aeabi_ddiv+0x574>
 80017c0:	000007ff 	.word	0x000007ff
 80017c4:	0000043e 	.word	0x0000043e
 80017c8:	0000041e 	.word	0x0000041e
 80017cc:	000003ff 	.word	0x000003ff

080017d0 <__aeabi_dmul>:
 80017d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017d2:	4645      	mov	r5, r8
 80017d4:	46de      	mov	lr, fp
 80017d6:	4657      	mov	r7, sl
 80017d8:	464e      	mov	r6, r9
 80017da:	b5e0      	push	{r5, r6, r7, lr}
 80017dc:	001f      	movs	r7, r3
 80017de:	030b      	lsls	r3, r1, #12
 80017e0:	0b1b      	lsrs	r3, r3, #12
 80017e2:	469b      	mov	fp, r3
 80017e4:	004d      	lsls	r5, r1, #1
 80017e6:	0fcb      	lsrs	r3, r1, #31
 80017e8:	0004      	movs	r4, r0
 80017ea:	4691      	mov	r9, r2
 80017ec:	4698      	mov	r8, r3
 80017ee:	b087      	sub	sp, #28
 80017f0:	0d6d      	lsrs	r5, r5, #21
 80017f2:	d100      	bne.n	80017f6 <__aeabi_dmul+0x26>
 80017f4:	e1cd      	b.n	8001b92 <__aeabi_dmul+0x3c2>
 80017f6:	4bce      	ldr	r3, [pc, #824]	; (8001b30 <__aeabi_dmul+0x360>)
 80017f8:	429d      	cmp	r5, r3
 80017fa:	d100      	bne.n	80017fe <__aeabi_dmul+0x2e>
 80017fc:	e1e9      	b.n	8001bd2 <__aeabi_dmul+0x402>
 80017fe:	465a      	mov	r2, fp
 8001800:	0f43      	lsrs	r3, r0, #29
 8001802:	00d2      	lsls	r2, r2, #3
 8001804:	4313      	orrs	r3, r2
 8001806:	2280      	movs	r2, #128	; 0x80
 8001808:	0412      	lsls	r2, r2, #16
 800180a:	431a      	orrs	r2, r3
 800180c:	00c3      	lsls	r3, r0, #3
 800180e:	469a      	mov	sl, r3
 8001810:	4bc8      	ldr	r3, [pc, #800]	; (8001b34 <__aeabi_dmul+0x364>)
 8001812:	4693      	mov	fp, r2
 8001814:	469c      	mov	ip, r3
 8001816:	2300      	movs	r3, #0
 8001818:	2600      	movs	r6, #0
 800181a:	4465      	add	r5, ip
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	033c      	lsls	r4, r7, #12
 8001820:	007b      	lsls	r3, r7, #1
 8001822:	4648      	mov	r0, r9
 8001824:	0b24      	lsrs	r4, r4, #12
 8001826:	0d5b      	lsrs	r3, r3, #21
 8001828:	0fff      	lsrs	r7, r7, #31
 800182a:	2b00      	cmp	r3, #0
 800182c:	d100      	bne.n	8001830 <__aeabi_dmul+0x60>
 800182e:	e189      	b.n	8001b44 <__aeabi_dmul+0x374>
 8001830:	4abf      	ldr	r2, [pc, #764]	; (8001b30 <__aeabi_dmul+0x360>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d019      	beq.n	800186a <__aeabi_dmul+0x9a>
 8001836:	0f42      	lsrs	r2, r0, #29
 8001838:	00e4      	lsls	r4, r4, #3
 800183a:	4322      	orrs	r2, r4
 800183c:	2480      	movs	r4, #128	; 0x80
 800183e:	0424      	lsls	r4, r4, #16
 8001840:	4314      	orrs	r4, r2
 8001842:	4abc      	ldr	r2, [pc, #752]	; (8001b34 <__aeabi_dmul+0x364>)
 8001844:	2100      	movs	r1, #0
 8001846:	4694      	mov	ip, r2
 8001848:	4642      	mov	r2, r8
 800184a:	4463      	add	r3, ip
 800184c:	195b      	adds	r3, r3, r5
 800184e:	9301      	str	r3, [sp, #4]
 8001850:	9b01      	ldr	r3, [sp, #4]
 8001852:	407a      	eors	r2, r7
 8001854:	3301      	adds	r3, #1
 8001856:	00c0      	lsls	r0, r0, #3
 8001858:	b2d2      	uxtb	r2, r2
 800185a:	9302      	str	r3, [sp, #8]
 800185c:	2e0a      	cmp	r6, #10
 800185e:	dd1c      	ble.n	800189a <__aeabi_dmul+0xca>
 8001860:	003a      	movs	r2, r7
 8001862:	2e0b      	cmp	r6, #11
 8001864:	d05e      	beq.n	8001924 <__aeabi_dmul+0x154>
 8001866:	4647      	mov	r7, r8
 8001868:	e056      	b.n	8001918 <__aeabi_dmul+0x148>
 800186a:	4649      	mov	r1, r9
 800186c:	4bb0      	ldr	r3, [pc, #704]	; (8001b30 <__aeabi_dmul+0x360>)
 800186e:	4321      	orrs	r1, r4
 8001870:	18eb      	adds	r3, r5, r3
 8001872:	9301      	str	r3, [sp, #4]
 8001874:	2900      	cmp	r1, #0
 8001876:	d12a      	bne.n	80018ce <__aeabi_dmul+0xfe>
 8001878:	2080      	movs	r0, #128	; 0x80
 800187a:	2202      	movs	r2, #2
 800187c:	0100      	lsls	r0, r0, #4
 800187e:	002b      	movs	r3, r5
 8001880:	4684      	mov	ip, r0
 8001882:	4316      	orrs	r6, r2
 8001884:	4642      	mov	r2, r8
 8001886:	4463      	add	r3, ip
 8001888:	407a      	eors	r2, r7
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	9302      	str	r3, [sp, #8]
 800188e:	2e0a      	cmp	r6, #10
 8001890:	dd00      	ble.n	8001894 <__aeabi_dmul+0xc4>
 8001892:	e231      	b.n	8001cf8 <__aeabi_dmul+0x528>
 8001894:	2000      	movs	r0, #0
 8001896:	2400      	movs	r4, #0
 8001898:	2102      	movs	r1, #2
 800189a:	2e02      	cmp	r6, #2
 800189c:	dc26      	bgt.n	80018ec <__aeabi_dmul+0x11c>
 800189e:	3e01      	subs	r6, #1
 80018a0:	2e01      	cmp	r6, #1
 80018a2:	d852      	bhi.n	800194a <__aeabi_dmul+0x17a>
 80018a4:	2902      	cmp	r1, #2
 80018a6:	d04c      	beq.n	8001942 <__aeabi_dmul+0x172>
 80018a8:	2901      	cmp	r1, #1
 80018aa:	d000      	beq.n	80018ae <__aeabi_dmul+0xde>
 80018ac:	e118      	b.n	8001ae0 <__aeabi_dmul+0x310>
 80018ae:	2300      	movs	r3, #0
 80018b0:	2400      	movs	r4, #0
 80018b2:	2500      	movs	r5, #0
 80018b4:	051b      	lsls	r3, r3, #20
 80018b6:	4323      	orrs	r3, r4
 80018b8:	07d2      	lsls	r2, r2, #31
 80018ba:	4313      	orrs	r3, r2
 80018bc:	0028      	movs	r0, r5
 80018be:	0019      	movs	r1, r3
 80018c0:	b007      	add	sp, #28
 80018c2:	bcf0      	pop	{r4, r5, r6, r7}
 80018c4:	46bb      	mov	fp, r7
 80018c6:	46b2      	mov	sl, r6
 80018c8:	46a9      	mov	r9, r5
 80018ca:	46a0      	mov	r8, r4
 80018cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018ce:	2180      	movs	r1, #128	; 0x80
 80018d0:	2203      	movs	r2, #3
 80018d2:	0109      	lsls	r1, r1, #4
 80018d4:	002b      	movs	r3, r5
 80018d6:	468c      	mov	ip, r1
 80018d8:	4316      	orrs	r6, r2
 80018da:	4642      	mov	r2, r8
 80018dc:	4463      	add	r3, ip
 80018de:	407a      	eors	r2, r7
 80018e0:	b2d2      	uxtb	r2, r2
 80018e2:	9302      	str	r3, [sp, #8]
 80018e4:	2e0a      	cmp	r6, #10
 80018e6:	dd00      	ble.n	80018ea <__aeabi_dmul+0x11a>
 80018e8:	e228      	b.n	8001d3c <__aeabi_dmul+0x56c>
 80018ea:	2103      	movs	r1, #3
 80018ec:	2501      	movs	r5, #1
 80018ee:	40b5      	lsls	r5, r6
 80018f0:	46ac      	mov	ip, r5
 80018f2:	26a6      	movs	r6, #166	; 0xa6
 80018f4:	4663      	mov	r3, ip
 80018f6:	00f6      	lsls	r6, r6, #3
 80018f8:	4035      	ands	r5, r6
 80018fa:	4233      	tst	r3, r6
 80018fc:	d10b      	bne.n	8001916 <__aeabi_dmul+0x146>
 80018fe:	2690      	movs	r6, #144	; 0x90
 8001900:	00b6      	lsls	r6, r6, #2
 8001902:	4233      	tst	r3, r6
 8001904:	d118      	bne.n	8001938 <__aeabi_dmul+0x168>
 8001906:	3eb9      	subs	r6, #185	; 0xb9
 8001908:	3eff      	subs	r6, #255	; 0xff
 800190a:	421e      	tst	r6, r3
 800190c:	d01d      	beq.n	800194a <__aeabi_dmul+0x17a>
 800190e:	46a3      	mov	fp, r4
 8001910:	4682      	mov	sl, r0
 8001912:	9100      	str	r1, [sp, #0]
 8001914:	e000      	b.n	8001918 <__aeabi_dmul+0x148>
 8001916:	0017      	movs	r7, r2
 8001918:	9900      	ldr	r1, [sp, #0]
 800191a:	003a      	movs	r2, r7
 800191c:	2902      	cmp	r1, #2
 800191e:	d010      	beq.n	8001942 <__aeabi_dmul+0x172>
 8001920:	465c      	mov	r4, fp
 8001922:	4650      	mov	r0, sl
 8001924:	2903      	cmp	r1, #3
 8001926:	d1bf      	bne.n	80018a8 <__aeabi_dmul+0xd8>
 8001928:	2380      	movs	r3, #128	; 0x80
 800192a:	031b      	lsls	r3, r3, #12
 800192c:	431c      	orrs	r4, r3
 800192e:	0324      	lsls	r4, r4, #12
 8001930:	0005      	movs	r5, r0
 8001932:	4b7f      	ldr	r3, [pc, #508]	; (8001b30 <__aeabi_dmul+0x360>)
 8001934:	0b24      	lsrs	r4, r4, #12
 8001936:	e7bd      	b.n	80018b4 <__aeabi_dmul+0xe4>
 8001938:	2480      	movs	r4, #128	; 0x80
 800193a:	2200      	movs	r2, #0
 800193c:	4b7c      	ldr	r3, [pc, #496]	; (8001b30 <__aeabi_dmul+0x360>)
 800193e:	0324      	lsls	r4, r4, #12
 8001940:	e7b8      	b.n	80018b4 <__aeabi_dmul+0xe4>
 8001942:	2400      	movs	r4, #0
 8001944:	2500      	movs	r5, #0
 8001946:	4b7a      	ldr	r3, [pc, #488]	; (8001b30 <__aeabi_dmul+0x360>)
 8001948:	e7b4      	b.n	80018b4 <__aeabi_dmul+0xe4>
 800194a:	4653      	mov	r3, sl
 800194c:	041e      	lsls	r6, r3, #16
 800194e:	0c36      	lsrs	r6, r6, #16
 8001950:	0c1f      	lsrs	r7, r3, #16
 8001952:	0033      	movs	r3, r6
 8001954:	0c01      	lsrs	r1, r0, #16
 8001956:	0400      	lsls	r0, r0, #16
 8001958:	0c00      	lsrs	r0, r0, #16
 800195a:	4343      	muls	r3, r0
 800195c:	4698      	mov	r8, r3
 800195e:	0003      	movs	r3, r0
 8001960:	437b      	muls	r3, r7
 8001962:	4699      	mov	r9, r3
 8001964:	0033      	movs	r3, r6
 8001966:	434b      	muls	r3, r1
 8001968:	469c      	mov	ip, r3
 800196a:	4643      	mov	r3, r8
 800196c:	000d      	movs	r5, r1
 800196e:	0c1b      	lsrs	r3, r3, #16
 8001970:	469a      	mov	sl, r3
 8001972:	437d      	muls	r5, r7
 8001974:	44cc      	add	ip, r9
 8001976:	44d4      	add	ip, sl
 8001978:	9500      	str	r5, [sp, #0]
 800197a:	45e1      	cmp	r9, ip
 800197c:	d904      	bls.n	8001988 <__aeabi_dmul+0x1b8>
 800197e:	2380      	movs	r3, #128	; 0x80
 8001980:	025b      	lsls	r3, r3, #9
 8001982:	4699      	mov	r9, r3
 8001984:	444d      	add	r5, r9
 8001986:	9500      	str	r5, [sp, #0]
 8001988:	4663      	mov	r3, ip
 800198a:	0c1b      	lsrs	r3, r3, #16
 800198c:	001d      	movs	r5, r3
 800198e:	4663      	mov	r3, ip
 8001990:	041b      	lsls	r3, r3, #16
 8001992:	469c      	mov	ip, r3
 8001994:	4643      	mov	r3, r8
 8001996:	041b      	lsls	r3, r3, #16
 8001998:	0c1b      	lsrs	r3, r3, #16
 800199a:	4698      	mov	r8, r3
 800199c:	4663      	mov	r3, ip
 800199e:	4443      	add	r3, r8
 80019a0:	9303      	str	r3, [sp, #12]
 80019a2:	0c23      	lsrs	r3, r4, #16
 80019a4:	4698      	mov	r8, r3
 80019a6:	0033      	movs	r3, r6
 80019a8:	0424      	lsls	r4, r4, #16
 80019aa:	0c24      	lsrs	r4, r4, #16
 80019ac:	4363      	muls	r3, r4
 80019ae:	469c      	mov	ip, r3
 80019b0:	0023      	movs	r3, r4
 80019b2:	437b      	muls	r3, r7
 80019b4:	4699      	mov	r9, r3
 80019b6:	4643      	mov	r3, r8
 80019b8:	435e      	muls	r6, r3
 80019ba:	435f      	muls	r7, r3
 80019bc:	444e      	add	r6, r9
 80019be:	4663      	mov	r3, ip
 80019c0:	46b2      	mov	sl, r6
 80019c2:	0c1e      	lsrs	r6, r3, #16
 80019c4:	4456      	add	r6, sl
 80019c6:	45b1      	cmp	r9, r6
 80019c8:	d903      	bls.n	80019d2 <__aeabi_dmul+0x202>
 80019ca:	2380      	movs	r3, #128	; 0x80
 80019cc:	025b      	lsls	r3, r3, #9
 80019ce:	4699      	mov	r9, r3
 80019d0:	444f      	add	r7, r9
 80019d2:	0c33      	lsrs	r3, r6, #16
 80019d4:	4699      	mov	r9, r3
 80019d6:	003b      	movs	r3, r7
 80019d8:	444b      	add	r3, r9
 80019da:	9305      	str	r3, [sp, #20]
 80019dc:	4663      	mov	r3, ip
 80019de:	46ac      	mov	ip, r5
 80019e0:	041f      	lsls	r7, r3, #16
 80019e2:	0c3f      	lsrs	r7, r7, #16
 80019e4:	0436      	lsls	r6, r6, #16
 80019e6:	19f6      	adds	r6, r6, r7
 80019e8:	44b4      	add	ip, r6
 80019ea:	4663      	mov	r3, ip
 80019ec:	9304      	str	r3, [sp, #16]
 80019ee:	465b      	mov	r3, fp
 80019f0:	0c1b      	lsrs	r3, r3, #16
 80019f2:	469c      	mov	ip, r3
 80019f4:	465b      	mov	r3, fp
 80019f6:	041f      	lsls	r7, r3, #16
 80019f8:	0c3f      	lsrs	r7, r7, #16
 80019fa:	003b      	movs	r3, r7
 80019fc:	4343      	muls	r3, r0
 80019fe:	4699      	mov	r9, r3
 8001a00:	4663      	mov	r3, ip
 8001a02:	4343      	muls	r3, r0
 8001a04:	469a      	mov	sl, r3
 8001a06:	464b      	mov	r3, r9
 8001a08:	4660      	mov	r0, ip
 8001a0a:	0c1b      	lsrs	r3, r3, #16
 8001a0c:	469b      	mov	fp, r3
 8001a0e:	4348      	muls	r0, r1
 8001a10:	4379      	muls	r1, r7
 8001a12:	4451      	add	r1, sl
 8001a14:	4459      	add	r1, fp
 8001a16:	458a      	cmp	sl, r1
 8001a18:	d903      	bls.n	8001a22 <__aeabi_dmul+0x252>
 8001a1a:	2380      	movs	r3, #128	; 0x80
 8001a1c:	025b      	lsls	r3, r3, #9
 8001a1e:	469a      	mov	sl, r3
 8001a20:	4450      	add	r0, sl
 8001a22:	0c0b      	lsrs	r3, r1, #16
 8001a24:	469a      	mov	sl, r3
 8001a26:	464b      	mov	r3, r9
 8001a28:	041b      	lsls	r3, r3, #16
 8001a2a:	0c1b      	lsrs	r3, r3, #16
 8001a2c:	4699      	mov	r9, r3
 8001a2e:	003b      	movs	r3, r7
 8001a30:	4363      	muls	r3, r4
 8001a32:	0409      	lsls	r1, r1, #16
 8001a34:	4645      	mov	r5, r8
 8001a36:	4449      	add	r1, r9
 8001a38:	4699      	mov	r9, r3
 8001a3a:	4663      	mov	r3, ip
 8001a3c:	435c      	muls	r4, r3
 8001a3e:	436b      	muls	r3, r5
 8001a40:	469c      	mov	ip, r3
 8001a42:	464b      	mov	r3, r9
 8001a44:	0c1b      	lsrs	r3, r3, #16
 8001a46:	4698      	mov	r8, r3
 8001a48:	436f      	muls	r7, r5
 8001a4a:	193f      	adds	r7, r7, r4
 8001a4c:	4447      	add	r7, r8
 8001a4e:	4450      	add	r0, sl
 8001a50:	42bc      	cmp	r4, r7
 8001a52:	d903      	bls.n	8001a5c <__aeabi_dmul+0x28c>
 8001a54:	2380      	movs	r3, #128	; 0x80
 8001a56:	025b      	lsls	r3, r3, #9
 8001a58:	4698      	mov	r8, r3
 8001a5a:	44c4      	add	ip, r8
 8001a5c:	9b04      	ldr	r3, [sp, #16]
 8001a5e:	9d00      	ldr	r5, [sp, #0]
 8001a60:	4698      	mov	r8, r3
 8001a62:	4445      	add	r5, r8
 8001a64:	42b5      	cmp	r5, r6
 8001a66:	41b6      	sbcs	r6, r6
 8001a68:	4273      	negs	r3, r6
 8001a6a:	4698      	mov	r8, r3
 8001a6c:	464b      	mov	r3, r9
 8001a6e:	041e      	lsls	r6, r3, #16
 8001a70:	9b05      	ldr	r3, [sp, #20]
 8001a72:	043c      	lsls	r4, r7, #16
 8001a74:	4699      	mov	r9, r3
 8001a76:	0c36      	lsrs	r6, r6, #16
 8001a78:	19a4      	adds	r4, r4, r6
 8001a7a:	444c      	add	r4, r9
 8001a7c:	46a1      	mov	r9, r4
 8001a7e:	4683      	mov	fp, r0
 8001a80:	186e      	adds	r6, r5, r1
 8001a82:	44c1      	add	r9, r8
 8001a84:	428e      	cmp	r6, r1
 8001a86:	4189      	sbcs	r1, r1
 8001a88:	44cb      	add	fp, r9
 8001a8a:	465d      	mov	r5, fp
 8001a8c:	4249      	negs	r1, r1
 8001a8e:	186d      	adds	r5, r5, r1
 8001a90:	429c      	cmp	r4, r3
 8001a92:	41a4      	sbcs	r4, r4
 8001a94:	45c1      	cmp	r9, r8
 8001a96:	419b      	sbcs	r3, r3
 8001a98:	4583      	cmp	fp, r0
 8001a9a:	4180      	sbcs	r0, r0
 8001a9c:	428d      	cmp	r5, r1
 8001a9e:	4189      	sbcs	r1, r1
 8001aa0:	425b      	negs	r3, r3
 8001aa2:	4264      	negs	r4, r4
 8001aa4:	431c      	orrs	r4, r3
 8001aa6:	4240      	negs	r0, r0
 8001aa8:	9b03      	ldr	r3, [sp, #12]
 8001aaa:	4249      	negs	r1, r1
 8001aac:	4301      	orrs	r1, r0
 8001aae:	0270      	lsls	r0, r6, #9
 8001ab0:	0c3f      	lsrs	r7, r7, #16
 8001ab2:	4318      	orrs	r0, r3
 8001ab4:	19e4      	adds	r4, r4, r7
 8001ab6:	1e47      	subs	r7, r0, #1
 8001ab8:	41b8      	sbcs	r0, r7
 8001aba:	1864      	adds	r4, r4, r1
 8001abc:	4464      	add	r4, ip
 8001abe:	0df6      	lsrs	r6, r6, #23
 8001ac0:	0261      	lsls	r1, r4, #9
 8001ac2:	4330      	orrs	r0, r6
 8001ac4:	0dec      	lsrs	r4, r5, #23
 8001ac6:	026e      	lsls	r6, r5, #9
 8001ac8:	430c      	orrs	r4, r1
 8001aca:	4330      	orrs	r0, r6
 8001acc:	01c9      	lsls	r1, r1, #7
 8001ace:	d400      	bmi.n	8001ad2 <__aeabi_dmul+0x302>
 8001ad0:	e0f1      	b.n	8001cb6 <__aeabi_dmul+0x4e6>
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	0843      	lsrs	r3, r0, #1
 8001ad6:	4001      	ands	r1, r0
 8001ad8:	430b      	orrs	r3, r1
 8001ada:	07e0      	lsls	r0, r4, #31
 8001adc:	4318      	orrs	r0, r3
 8001ade:	0864      	lsrs	r4, r4, #1
 8001ae0:	4915      	ldr	r1, [pc, #84]	; (8001b38 <__aeabi_dmul+0x368>)
 8001ae2:	9b02      	ldr	r3, [sp, #8]
 8001ae4:	468c      	mov	ip, r1
 8001ae6:	4463      	add	r3, ip
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	dc00      	bgt.n	8001aee <__aeabi_dmul+0x31e>
 8001aec:	e097      	b.n	8001c1e <__aeabi_dmul+0x44e>
 8001aee:	0741      	lsls	r1, r0, #29
 8001af0:	d009      	beq.n	8001b06 <__aeabi_dmul+0x336>
 8001af2:	210f      	movs	r1, #15
 8001af4:	4001      	ands	r1, r0
 8001af6:	2904      	cmp	r1, #4
 8001af8:	d005      	beq.n	8001b06 <__aeabi_dmul+0x336>
 8001afa:	1d01      	adds	r1, r0, #4
 8001afc:	4281      	cmp	r1, r0
 8001afe:	4180      	sbcs	r0, r0
 8001b00:	4240      	negs	r0, r0
 8001b02:	1824      	adds	r4, r4, r0
 8001b04:	0008      	movs	r0, r1
 8001b06:	01e1      	lsls	r1, r4, #7
 8001b08:	d506      	bpl.n	8001b18 <__aeabi_dmul+0x348>
 8001b0a:	2180      	movs	r1, #128	; 0x80
 8001b0c:	00c9      	lsls	r1, r1, #3
 8001b0e:	468c      	mov	ip, r1
 8001b10:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <__aeabi_dmul+0x36c>)
 8001b12:	401c      	ands	r4, r3
 8001b14:	9b02      	ldr	r3, [sp, #8]
 8001b16:	4463      	add	r3, ip
 8001b18:	4909      	ldr	r1, [pc, #36]	; (8001b40 <__aeabi_dmul+0x370>)
 8001b1a:	428b      	cmp	r3, r1
 8001b1c:	dd00      	ble.n	8001b20 <__aeabi_dmul+0x350>
 8001b1e:	e710      	b.n	8001942 <__aeabi_dmul+0x172>
 8001b20:	0761      	lsls	r1, r4, #29
 8001b22:	08c5      	lsrs	r5, r0, #3
 8001b24:	0264      	lsls	r4, r4, #9
 8001b26:	055b      	lsls	r3, r3, #21
 8001b28:	430d      	orrs	r5, r1
 8001b2a:	0b24      	lsrs	r4, r4, #12
 8001b2c:	0d5b      	lsrs	r3, r3, #21
 8001b2e:	e6c1      	b.n	80018b4 <__aeabi_dmul+0xe4>
 8001b30:	000007ff 	.word	0x000007ff
 8001b34:	fffffc01 	.word	0xfffffc01
 8001b38:	000003ff 	.word	0x000003ff
 8001b3c:	feffffff 	.word	0xfeffffff
 8001b40:	000007fe 	.word	0x000007fe
 8001b44:	464b      	mov	r3, r9
 8001b46:	4323      	orrs	r3, r4
 8001b48:	d059      	beq.n	8001bfe <__aeabi_dmul+0x42e>
 8001b4a:	2c00      	cmp	r4, #0
 8001b4c:	d100      	bne.n	8001b50 <__aeabi_dmul+0x380>
 8001b4e:	e0a3      	b.n	8001c98 <__aeabi_dmul+0x4c8>
 8001b50:	0020      	movs	r0, r4
 8001b52:	f000 f9e5 	bl	8001f20 <__clzsi2>
 8001b56:	0001      	movs	r1, r0
 8001b58:	0003      	movs	r3, r0
 8001b5a:	390b      	subs	r1, #11
 8001b5c:	221d      	movs	r2, #29
 8001b5e:	1a52      	subs	r2, r2, r1
 8001b60:	4649      	mov	r1, r9
 8001b62:	0018      	movs	r0, r3
 8001b64:	40d1      	lsrs	r1, r2
 8001b66:	464a      	mov	r2, r9
 8001b68:	3808      	subs	r0, #8
 8001b6a:	4082      	lsls	r2, r0
 8001b6c:	4084      	lsls	r4, r0
 8001b6e:	0010      	movs	r0, r2
 8001b70:	430c      	orrs	r4, r1
 8001b72:	4a74      	ldr	r2, [pc, #464]	; (8001d44 <__aeabi_dmul+0x574>)
 8001b74:	1aeb      	subs	r3, r5, r3
 8001b76:	4694      	mov	ip, r2
 8001b78:	4642      	mov	r2, r8
 8001b7a:	4463      	add	r3, ip
 8001b7c:	9301      	str	r3, [sp, #4]
 8001b7e:	9b01      	ldr	r3, [sp, #4]
 8001b80:	407a      	eors	r2, r7
 8001b82:	3301      	adds	r3, #1
 8001b84:	2100      	movs	r1, #0
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	9302      	str	r3, [sp, #8]
 8001b8a:	2e0a      	cmp	r6, #10
 8001b8c:	dd00      	ble.n	8001b90 <__aeabi_dmul+0x3c0>
 8001b8e:	e667      	b.n	8001860 <__aeabi_dmul+0x90>
 8001b90:	e683      	b.n	800189a <__aeabi_dmul+0xca>
 8001b92:	465b      	mov	r3, fp
 8001b94:	4303      	orrs	r3, r0
 8001b96:	469a      	mov	sl, r3
 8001b98:	d02a      	beq.n	8001bf0 <__aeabi_dmul+0x420>
 8001b9a:	465b      	mov	r3, fp
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d06d      	beq.n	8001c7c <__aeabi_dmul+0x4ac>
 8001ba0:	4658      	mov	r0, fp
 8001ba2:	f000 f9bd 	bl	8001f20 <__clzsi2>
 8001ba6:	0001      	movs	r1, r0
 8001ba8:	0003      	movs	r3, r0
 8001baa:	390b      	subs	r1, #11
 8001bac:	221d      	movs	r2, #29
 8001bae:	1a52      	subs	r2, r2, r1
 8001bb0:	0021      	movs	r1, r4
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	465d      	mov	r5, fp
 8001bb6:	40d1      	lsrs	r1, r2
 8001bb8:	3808      	subs	r0, #8
 8001bba:	4085      	lsls	r5, r0
 8001bbc:	000a      	movs	r2, r1
 8001bbe:	4084      	lsls	r4, r0
 8001bc0:	432a      	orrs	r2, r5
 8001bc2:	4693      	mov	fp, r2
 8001bc4:	46a2      	mov	sl, r4
 8001bc6:	4d5f      	ldr	r5, [pc, #380]	; (8001d44 <__aeabi_dmul+0x574>)
 8001bc8:	2600      	movs	r6, #0
 8001bca:	1aed      	subs	r5, r5, r3
 8001bcc:	2300      	movs	r3, #0
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	e625      	b.n	800181e <__aeabi_dmul+0x4e>
 8001bd2:	465b      	mov	r3, fp
 8001bd4:	4303      	orrs	r3, r0
 8001bd6:	469a      	mov	sl, r3
 8001bd8:	d105      	bne.n	8001be6 <__aeabi_dmul+0x416>
 8001bda:	2300      	movs	r3, #0
 8001bdc:	469b      	mov	fp, r3
 8001bde:	3302      	adds	r3, #2
 8001be0:	2608      	movs	r6, #8
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	e61b      	b.n	800181e <__aeabi_dmul+0x4e>
 8001be6:	2303      	movs	r3, #3
 8001be8:	4682      	mov	sl, r0
 8001bea:	260c      	movs	r6, #12
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	e616      	b.n	800181e <__aeabi_dmul+0x4e>
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	469b      	mov	fp, r3
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	2604      	movs	r6, #4
 8001bf8:	2500      	movs	r5, #0
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	e60f      	b.n	800181e <__aeabi_dmul+0x4e>
 8001bfe:	4642      	mov	r2, r8
 8001c00:	3301      	adds	r3, #1
 8001c02:	9501      	str	r5, [sp, #4]
 8001c04:	431e      	orrs	r6, r3
 8001c06:	9b01      	ldr	r3, [sp, #4]
 8001c08:	407a      	eors	r2, r7
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	2400      	movs	r4, #0
 8001c0e:	2000      	movs	r0, #0
 8001c10:	2101      	movs	r1, #1
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	9302      	str	r3, [sp, #8]
 8001c16:	2e0a      	cmp	r6, #10
 8001c18:	dd00      	ble.n	8001c1c <__aeabi_dmul+0x44c>
 8001c1a:	e621      	b.n	8001860 <__aeabi_dmul+0x90>
 8001c1c:	e63d      	b.n	800189a <__aeabi_dmul+0xca>
 8001c1e:	2101      	movs	r1, #1
 8001c20:	1ac9      	subs	r1, r1, r3
 8001c22:	2938      	cmp	r1, #56	; 0x38
 8001c24:	dd00      	ble.n	8001c28 <__aeabi_dmul+0x458>
 8001c26:	e642      	b.n	80018ae <__aeabi_dmul+0xde>
 8001c28:	291f      	cmp	r1, #31
 8001c2a:	dd47      	ble.n	8001cbc <__aeabi_dmul+0x4ec>
 8001c2c:	261f      	movs	r6, #31
 8001c2e:	0025      	movs	r5, r4
 8001c30:	4276      	negs	r6, r6
 8001c32:	1af3      	subs	r3, r6, r3
 8001c34:	40dd      	lsrs	r5, r3
 8001c36:	002b      	movs	r3, r5
 8001c38:	2920      	cmp	r1, #32
 8001c3a:	d005      	beq.n	8001c48 <__aeabi_dmul+0x478>
 8001c3c:	4942      	ldr	r1, [pc, #264]	; (8001d48 <__aeabi_dmul+0x578>)
 8001c3e:	9d02      	ldr	r5, [sp, #8]
 8001c40:	468c      	mov	ip, r1
 8001c42:	4465      	add	r5, ip
 8001c44:	40ac      	lsls	r4, r5
 8001c46:	4320      	orrs	r0, r4
 8001c48:	1e41      	subs	r1, r0, #1
 8001c4a:	4188      	sbcs	r0, r1
 8001c4c:	4318      	orrs	r0, r3
 8001c4e:	2307      	movs	r3, #7
 8001c50:	001d      	movs	r5, r3
 8001c52:	2400      	movs	r4, #0
 8001c54:	4005      	ands	r5, r0
 8001c56:	4203      	tst	r3, r0
 8001c58:	d04a      	beq.n	8001cf0 <__aeabi_dmul+0x520>
 8001c5a:	230f      	movs	r3, #15
 8001c5c:	2400      	movs	r4, #0
 8001c5e:	4003      	ands	r3, r0
 8001c60:	2b04      	cmp	r3, #4
 8001c62:	d042      	beq.n	8001cea <__aeabi_dmul+0x51a>
 8001c64:	1d03      	adds	r3, r0, #4
 8001c66:	4283      	cmp	r3, r0
 8001c68:	4180      	sbcs	r0, r0
 8001c6a:	4240      	negs	r0, r0
 8001c6c:	1824      	adds	r4, r4, r0
 8001c6e:	0018      	movs	r0, r3
 8001c70:	0223      	lsls	r3, r4, #8
 8001c72:	d53a      	bpl.n	8001cea <__aeabi_dmul+0x51a>
 8001c74:	2301      	movs	r3, #1
 8001c76:	2400      	movs	r4, #0
 8001c78:	2500      	movs	r5, #0
 8001c7a:	e61b      	b.n	80018b4 <__aeabi_dmul+0xe4>
 8001c7c:	f000 f950 	bl	8001f20 <__clzsi2>
 8001c80:	0001      	movs	r1, r0
 8001c82:	0003      	movs	r3, r0
 8001c84:	3115      	adds	r1, #21
 8001c86:	3320      	adds	r3, #32
 8001c88:	291c      	cmp	r1, #28
 8001c8a:	dd8f      	ble.n	8001bac <__aeabi_dmul+0x3dc>
 8001c8c:	3808      	subs	r0, #8
 8001c8e:	2200      	movs	r2, #0
 8001c90:	4084      	lsls	r4, r0
 8001c92:	4692      	mov	sl, r2
 8001c94:	46a3      	mov	fp, r4
 8001c96:	e796      	b.n	8001bc6 <__aeabi_dmul+0x3f6>
 8001c98:	f000 f942 	bl	8001f20 <__clzsi2>
 8001c9c:	0001      	movs	r1, r0
 8001c9e:	0003      	movs	r3, r0
 8001ca0:	3115      	adds	r1, #21
 8001ca2:	3320      	adds	r3, #32
 8001ca4:	291c      	cmp	r1, #28
 8001ca6:	dc00      	bgt.n	8001caa <__aeabi_dmul+0x4da>
 8001ca8:	e758      	b.n	8001b5c <__aeabi_dmul+0x38c>
 8001caa:	0002      	movs	r2, r0
 8001cac:	464c      	mov	r4, r9
 8001cae:	3a08      	subs	r2, #8
 8001cb0:	2000      	movs	r0, #0
 8001cb2:	4094      	lsls	r4, r2
 8001cb4:	e75d      	b.n	8001b72 <__aeabi_dmul+0x3a2>
 8001cb6:	9b01      	ldr	r3, [sp, #4]
 8001cb8:	9302      	str	r3, [sp, #8]
 8001cba:	e711      	b.n	8001ae0 <__aeabi_dmul+0x310>
 8001cbc:	4b23      	ldr	r3, [pc, #140]	; (8001d4c <__aeabi_dmul+0x57c>)
 8001cbe:	0026      	movs	r6, r4
 8001cc0:	469c      	mov	ip, r3
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	9d02      	ldr	r5, [sp, #8]
 8001cc6:	40cb      	lsrs	r3, r1
 8001cc8:	4465      	add	r5, ip
 8001cca:	40ae      	lsls	r6, r5
 8001ccc:	431e      	orrs	r6, r3
 8001cce:	0003      	movs	r3, r0
 8001cd0:	40ab      	lsls	r3, r5
 8001cd2:	1e58      	subs	r0, r3, #1
 8001cd4:	4183      	sbcs	r3, r0
 8001cd6:	0030      	movs	r0, r6
 8001cd8:	4318      	orrs	r0, r3
 8001cda:	40cc      	lsrs	r4, r1
 8001cdc:	0743      	lsls	r3, r0, #29
 8001cde:	d0c7      	beq.n	8001c70 <__aeabi_dmul+0x4a0>
 8001ce0:	230f      	movs	r3, #15
 8001ce2:	4003      	ands	r3, r0
 8001ce4:	2b04      	cmp	r3, #4
 8001ce6:	d1bd      	bne.n	8001c64 <__aeabi_dmul+0x494>
 8001ce8:	e7c2      	b.n	8001c70 <__aeabi_dmul+0x4a0>
 8001cea:	0765      	lsls	r5, r4, #29
 8001cec:	0264      	lsls	r4, r4, #9
 8001cee:	0b24      	lsrs	r4, r4, #12
 8001cf0:	08c0      	lsrs	r0, r0, #3
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	4305      	orrs	r5, r0
 8001cf6:	e5dd      	b.n	80018b4 <__aeabi_dmul+0xe4>
 8001cf8:	2500      	movs	r5, #0
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	2e0f      	cmp	r6, #15
 8001cfe:	d10c      	bne.n	8001d1a <__aeabi_dmul+0x54a>
 8001d00:	2480      	movs	r4, #128	; 0x80
 8001d02:	465b      	mov	r3, fp
 8001d04:	0324      	lsls	r4, r4, #12
 8001d06:	4223      	tst	r3, r4
 8001d08:	d00e      	beq.n	8001d28 <__aeabi_dmul+0x558>
 8001d0a:	4221      	tst	r1, r4
 8001d0c:	d10c      	bne.n	8001d28 <__aeabi_dmul+0x558>
 8001d0e:	430c      	orrs	r4, r1
 8001d10:	0324      	lsls	r4, r4, #12
 8001d12:	003a      	movs	r2, r7
 8001d14:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <__aeabi_dmul+0x580>)
 8001d16:	0b24      	lsrs	r4, r4, #12
 8001d18:	e5cc      	b.n	80018b4 <__aeabi_dmul+0xe4>
 8001d1a:	2e0b      	cmp	r6, #11
 8001d1c:	d000      	beq.n	8001d20 <__aeabi_dmul+0x550>
 8001d1e:	e5a2      	b.n	8001866 <__aeabi_dmul+0x96>
 8001d20:	468b      	mov	fp, r1
 8001d22:	46aa      	mov	sl, r5
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	e5f7      	b.n	8001918 <__aeabi_dmul+0x148>
 8001d28:	2480      	movs	r4, #128	; 0x80
 8001d2a:	465b      	mov	r3, fp
 8001d2c:	0324      	lsls	r4, r4, #12
 8001d2e:	431c      	orrs	r4, r3
 8001d30:	0324      	lsls	r4, r4, #12
 8001d32:	4642      	mov	r2, r8
 8001d34:	4655      	mov	r5, sl
 8001d36:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <__aeabi_dmul+0x580>)
 8001d38:	0b24      	lsrs	r4, r4, #12
 8001d3a:	e5bb      	b.n	80018b4 <__aeabi_dmul+0xe4>
 8001d3c:	464d      	mov	r5, r9
 8001d3e:	0021      	movs	r1, r4
 8001d40:	2303      	movs	r3, #3
 8001d42:	e7db      	b.n	8001cfc <__aeabi_dmul+0x52c>
 8001d44:	fffffc0d 	.word	0xfffffc0d
 8001d48:	0000043e 	.word	0x0000043e
 8001d4c:	0000041e 	.word	0x0000041e
 8001d50:	000007ff 	.word	0x000007ff

08001d54 <__aeabi_ui2d>:
 8001d54:	b510      	push	{r4, lr}
 8001d56:	1e04      	subs	r4, r0, #0
 8001d58:	d010      	beq.n	8001d7c <__aeabi_ui2d+0x28>
 8001d5a:	f000 f8e1 	bl	8001f20 <__clzsi2>
 8001d5e:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <__aeabi_ui2d+0x48>)
 8001d60:	1a1b      	subs	r3, r3, r0
 8001d62:	280a      	cmp	r0, #10
 8001d64:	dc11      	bgt.n	8001d8a <__aeabi_ui2d+0x36>
 8001d66:	220b      	movs	r2, #11
 8001d68:	0021      	movs	r1, r4
 8001d6a:	1a12      	subs	r2, r2, r0
 8001d6c:	40d1      	lsrs	r1, r2
 8001d6e:	3015      	adds	r0, #21
 8001d70:	030a      	lsls	r2, r1, #12
 8001d72:	055b      	lsls	r3, r3, #21
 8001d74:	4084      	lsls	r4, r0
 8001d76:	0b12      	lsrs	r2, r2, #12
 8001d78:	0d5b      	lsrs	r3, r3, #21
 8001d7a:	e001      	b.n	8001d80 <__aeabi_ui2d+0x2c>
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	2200      	movs	r2, #0
 8001d80:	051b      	lsls	r3, r3, #20
 8001d82:	4313      	orrs	r3, r2
 8001d84:	0020      	movs	r0, r4
 8001d86:	0019      	movs	r1, r3
 8001d88:	bd10      	pop	{r4, pc}
 8001d8a:	0022      	movs	r2, r4
 8001d8c:	380b      	subs	r0, #11
 8001d8e:	4082      	lsls	r2, r0
 8001d90:	055b      	lsls	r3, r3, #21
 8001d92:	0312      	lsls	r2, r2, #12
 8001d94:	2400      	movs	r4, #0
 8001d96:	0b12      	lsrs	r2, r2, #12
 8001d98:	0d5b      	lsrs	r3, r3, #21
 8001d9a:	e7f1      	b.n	8001d80 <__aeabi_ui2d+0x2c>
 8001d9c:	0000041e 	.word	0x0000041e

08001da0 <__aeabi_d2f>:
 8001da0:	0002      	movs	r2, r0
 8001da2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001da4:	004b      	lsls	r3, r1, #1
 8001da6:	030d      	lsls	r5, r1, #12
 8001da8:	0f40      	lsrs	r0, r0, #29
 8001daa:	0d5b      	lsrs	r3, r3, #21
 8001dac:	0fcc      	lsrs	r4, r1, #31
 8001dae:	0a6d      	lsrs	r5, r5, #9
 8001db0:	493a      	ldr	r1, [pc, #232]	; (8001e9c <__aeabi_d2f+0xfc>)
 8001db2:	4305      	orrs	r5, r0
 8001db4:	1c58      	adds	r0, r3, #1
 8001db6:	00d7      	lsls	r7, r2, #3
 8001db8:	4208      	tst	r0, r1
 8001dba:	d00a      	beq.n	8001dd2 <__aeabi_d2f+0x32>
 8001dbc:	4938      	ldr	r1, [pc, #224]	; (8001ea0 <__aeabi_d2f+0x100>)
 8001dbe:	1859      	adds	r1, r3, r1
 8001dc0:	29fe      	cmp	r1, #254	; 0xfe
 8001dc2:	dd16      	ble.n	8001df2 <__aeabi_d2f+0x52>
 8001dc4:	20ff      	movs	r0, #255	; 0xff
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	05c0      	lsls	r0, r0, #23
 8001dca:	4310      	orrs	r0, r2
 8001dcc:	07e4      	lsls	r4, r4, #31
 8001dce:	4320      	orrs	r0, r4
 8001dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d106      	bne.n	8001de4 <__aeabi_d2f+0x44>
 8001dd6:	433d      	orrs	r5, r7
 8001dd8:	d026      	beq.n	8001e28 <__aeabi_d2f+0x88>
 8001dda:	2205      	movs	r2, #5
 8001ddc:	0192      	lsls	r2, r2, #6
 8001dde:	0a52      	lsrs	r2, r2, #9
 8001de0:	b2d8      	uxtb	r0, r3
 8001de2:	e7f1      	b.n	8001dc8 <__aeabi_d2f+0x28>
 8001de4:	432f      	orrs	r7, r5
 8001de6:	d0ed      	beq.n	8001dc4 <__aeabi_d2f+0x24>
 8001de8:	2280      	movs	r2, #128	; 0x80
 8001dea:	03d2      	lsls	r2, r2, #15
 8001dec:	20ff      	movs	r0, #255	; 0xff
 8001dee:	432a      	orrs	r2, r5
 8001df0:	e7ea      	b.n	8001dc8 <__aeabi_d2f+0x28>
 8001df2:	2900      	cmp	r1, #0
 8001df4:	dd1b      	ble.n	8001e2e <__aeabi_d2f+0x8e>
 8001df6:	0192      	lsls	r2, r2, #6
 8001df8:	1e50      	subs	r0, r2, #1
 8001dfa:	4182      	sbcs	r2, r0
 8001dfc:	00ed      	lsls	r5, r5, #3
 8001dfe:	0f7f      	lsrs	r7, r7, #29
 8001e00:	432a      	orrs	r2, r5
 8001e02:	433a      	orrs	r2, r7
 8001e04:	0753      	lsls	r3, r2, #29
 8001e06:	d047      	beq.n	8001e98 <__aeabi_d2f+0xf8>
 8001e08:	230f      	movs	r3, #15
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	2b04      	cmp	r3, #4
 8001e0e:	d000      	beq.n	8001e12 <__aeabi_d2f+0x72>
 8001e10:	3204      	adds	r2, #4
 8001e12:	2380      	movs	r3, #128	; 0x80
 8001e14:	04db      	lsls	r3, r3, #19
 8001e16:	4013      	ands	r3, r2
 8001e18:	d03e      	beq.n	8001e98 <__aeabi_d2f+0xf8>
 8001e1a:	1c48      	adds	r0, r1, #1
 8001e1c:	29fe      	cmp	r1, #254	; 0xfe
 8001e1e:	d0d1      	beq.n	8001dc4 <__aeabi_d2f+0x24>
 8001e20:	0192      	lsls	r2, r2, #6
 8001e22:	0a52      	lsrs	r2, r2, #9
 8001e24:	b2c0      	uxtb	r0, r0
 8001e26:	e7cf      	b.n	8001dc8 <__aeabi_d2f+0x28>
 8001e28:	2000      	movs	r0, #0
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	e7cc      	b.n	8001dc8 <__aeabi_d2f+0x28>
 8001e2e:	000a      	movs	r2, r1
 8001e30:	3217      	adds	r2, #23
 8001e32:	db2f      	blt.n	8001e94 <__aeabi_d2f+0xf4>
 8001e34:	2680      	movs	r6, #128	; 0x80
 8001e36:	0436      	lsls	r6, r6, #16
 8001e38:	432e      	orrs	r6, r5
 8001e3a:	251e      	movs	r5, #30
 8001e3c:	1a6d      	subs	r5, r5, r1
 8001e3e:	2d1f      	cmp	r5, #31
 8001e40:	dd11      	ble.n	8001e66 <__aeabi_d2f+0xc6>
 8001e42:	2202      	movs	r2, #2
 8001e44:	4252      	negs	r2, r2
 8001e46:	1a52      	subs	r2, r2, r1
 8001e48:	0031      	movs	r1, r6
 8001e4a:	40d1      	lsrs	r1, r2
 8001e4c:	2d20      	cmp	r5, #32
 8001e4e:	d004      	beq.n	8001e5a <__aeabi_d2f+0xba>
 8001e50:	4a14      	ldr	r2, [pc, #80]	; (8001ea4 <__aeabi_d2f+0x104>)
 8001e52:	4694      	mov	ip, r2
 8001e54:	4463      	add	r3, ip
 8001e56:	409e      	lsls	r6, r3
 8001e58:	4337      	orrs	r7, r6
 8001e5a:	003a      	movs	r2, r7
 8001e5c:	1e53      	subs	r3, r2, #1
 8001e5e:	419a      	sbcs	r2, r3
 8001e60:	430a      	orrs	r2, r1
 8001e62:	2100      	movs	r1, #0
 8001e64:	e7ce      	b.n	8001e04 <__aeabi_d2f+0x64>
 8001e66:	4a10      	ldr	r2, [pc, #64]	; (8001ea8 <__aeabi_d2f+0x108>)
 8001e68:	0038      	movs	r0, r7
 8001e6a:	4694      	mov	ip, r2
 8001e6c:	4463      	add	r3, ip
 8001e6e:	4098      	lsls	r0, r3
 8001e70:	003a      	movs	r2, r7
 8001e72:	1e41      	subs	r1, r0, #1
 8001e74:	4188      	sbcs	r0, r1
 8001e76:	409e      	lsls	r6, r3
 8001e78:	40ea      	lsrs	r2, r5
 8001e7a:	4330      	orrs	r0, r6
 8001e7c:	4302      	orrs	r2, r0
 8001e7e:	2100      	movs	r1, #0
 8001e80:	0753      	lsls	r3, r2, #29
 8001e82:	d1c1      	bne.n	8001e08 <__aeabi_d2f+0x68>
 8001e84:	2180      	movs	r1, #128	; 0x80
 8001e86:	0013      	movs	r3, r2
 8001e88:	04c9      	lsls	r1, r1, #19
 8001e8a:	2001      	movs	r0, #1
 8001e8c:	400b      	ands	r3, r1
 8001e8e:	420a      	tst	r2, r1
 8001e90:	d1c6      	bne.n	8001e20 <__aeabi_d2f+0x80>
 8001e92:	e7a3      	b.n	8001ddc <__aeabi_d2f+0x3c>
 8001e94:	2300      	movs	r3, #0
 8001e96:	e7a0      	b.n	8001dda <__aeabi_d2f+0x3a>
 8001e98:	000b      	movs	r3, r1
 8001e9a:	e79f      	b.n	8001ddc <__aeabi_d2f+0x3c>
 8001e9c:	000007fe 	.word	0x000007fe
 8001ea0:	fffffc80 	.word	0xfffffc80
 8001ea4:	fffffca2 	.word	0xfffffca2
 8001ea8:	fffffc82 	.word	0xfffffc82

08001eac <__aeabi_cfrcmple>:
 8001eac:	4684      	mov	ip, r0
 8001eae:	0008      	movs	r0, r1
 8001eb0:	4661      	mov	r1, ip
 8001eb2:	e7ff      	b.n	8001eb4 <__aeabi_cfcmpeq>

08001eb4 <__aeabi_cfcmpeq>:
 8001eb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001eb6:	f000 f8bd 	bl	8002034 <__lesf2>
 8001eba:	2800      	cmp	r0, #0
 8001ebc:	d401      	bmi.n	8001ec2 <__aeabi_cfcmpeq+0xe>
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	42c8      	cmn	r0, r1
 8001ec2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001ec4 <__aeabi_fcmpeq>:
 8001ec4:	b510      	push	{r4, lr}
 8001ec6:	f000 f849 	bl	8001f5c <__eqsf2>
 8001eca:	4240      	negs	r0, r0
 8001ecc:	3001      	adds	r0, #1
 8001ece:	bd10      	pop	{r4, pc}

08001ed0 <__aeabi_fcmplt>:
 8001ed0:	b510      	push	{r4, lr}
 8001ed2:	f000 f8af 	bl	8002034 <__lesf2>
 8001ed6:	2800      	cmp	r0, #0
 8001ed8:	db01      	blt.n	8001ede <__aeabi_fcmplt+0xe>
 8001eda:	2000      	movs	r0, #0
 8001edc:	bd10      	pop	{r4, pc}
 8001ede:	2001      	movs	r0, #1
 8001ee0:	bd10      	pop	{r4, pc}
 8001ee2:	46c0      	nop			; (mov r8, r8)

08001ee4 <__aeabi_fcmple>:
 8001ee4:	b510      	push	{r4, lr}
 8001ee6:	f000 f8a5 	bl	8002034 <__lesf2>
 8001eea:	2800      	cmp	r0, #0
 8001eec:	dd01      	ble.n	8001ef2 <__aeabi_fcmple+0xe>
 8001eee:	2000      	movs	r0, #0
 8001ef0:	bd10      	pop	{r4, pc}
 8001ef2:	2001      	movs	r0, #1
 8001ef4:	bd10      	pop	{r4, pc}
 8001ef6:	46c0      	nop			; (mov r8, r8)

08001ef8 <__aeabi_fcmpgt>:
 8001ef8:	b510      	push	{r4, lr}
 8001efa:	f000 f855 	bl	8001fa8 <__gesf2>
 8001efe:	2800      	cmp	r0, #0
 8001f00:	dc01      	bgt.n	8001f06 <__aeabi_fcmpgt+0xe>
 8001f02:	2000      	movs	r0, #0
 8001f04:	bd10      	pop	{r4, pc}
 8001f06:	2001      	movs	r0, #1
 8001f08:	bd10      	pop	{r4, pc}
 8001f0a:	46c0      	nop			; (mov r8, r8)

08001f0c <__aeabi_fcmpge>:
 8001f0c:	b510      	push	{r4, lr}
 8001f0e:	f000 f84b 	bl	8001fa8 <__gesf2>
 8001f12:	2800      	cmp	r0, #0
 8001f14:	da01      	bge.n	8001f1a <__aeabi_fcmpge+0xe>
 8001f16:	2000      	movs	r0, #0
 8001f18:	bd10      	pop	{r4, pc}
 8001f1a:	2001      	movs	r0, #1
 8001f1c:	bd10      	pop	{r4, pc}
 8001f1e:	46c0      	nop			; (mov r8, r8)

08001f20 <__clzsi2>:
 8001f20:	211c      	movs	r1, #28
 8001f22:	2301      	movs	r3, #1
 8001f24:	041b      	lsls	r3, r3, #16
 8001f26:	4298      	cmp	r0, r3
 8001f28:	d301      	bcc.n	8001f2e <__clzsi2+0xe>
 8001f2a:	0c00      	lsrs	r0, r0, #16
 8001f2c:	3910      	subs	r1, #16
 8001f2e:	0a1b      	lsrs	r3, r3, #8
 8001f30:	4298      	cmp	r0, r3
 8001f32:	d301      	bcc.n	8001f38 <__clzsi2+0x18>
 8001f34:	0a00      	lsrs	r0, r0, #8
 8001f36:	3908      	subs	r1, #8
 8001f38:	091b      	lsrs	r3, r3, #4
 8001f3a:	4298      	cmp	r0, r3
 8001f3c:	d301      	bcc.n	8001f42 <__clzsi2+0x22>
 8001f3e:	0900      	lsrs	r0, r0, #4
 8001f40:	3904      	subs	r1, #4
 8001f42:	a202      	add	r2, pc, #8	; (adr r2, 8001f4c <__clzsi2+0x2c>)
 8001f44:	5c10      	ldrb	r0, [r2, r0]
 8001f46:	1840      	adds	r0, r0, r1
 8001f48:	4770      	bx	lr
 8001f4a:	46c0      	nop			; (mov r8, r8)
 8001f4c:	02020304 	.word	0x02020304
 8001f50:	01010101 	.word	0x01010101
	...

08001f5c <__eqsf2>:
 8001f5c:	b570      	push	{r4, r5, r6, lr}
 8001f5e:	0042      	lsls	r2, r0, #1
 8001f60:	0245      	lsls	r5, r0, #9
 8001f62:	024e      	lsls	r6, r1, #9
 8001f64:	004c      	lsls	r4, r1, #1
 8001f66:	0fc3      	lsrs	r3, r0, #31
 8001f68:	0a6d      	lsrs	r5, r5, #9
 8001f6a:	2001      	movs	r0, #1
 8001f6c:	0e12      	lsrs	r2, r2, #24
 8001f6e:	0a76      	lsrs	r6, r6, #9
 8001f70:	0e24      	lsrs	r4, r4, #24
 8001f72:	0fc9      	lsrs	r1, r1, #31
 8001f74:	2aff      	cmp	r2, #255	; 0xff
 8001f76:	d006      	beq.n	8001f86 <__eqsf2+0x2a>
 8001f78:	2cff      	cmp	r4, #255	; 0xff
 8001f7a:	d003      	beq.n	8001f84 <__eqsf2+0x28>
 8001f7c:	42a2      	cmp	r2, r4
 8001f7e:	d101      	bne.n	8001f84 <__eqsf2+0x28>
 8001f80:	42b5      	cmp	r5, r6
 8001f82:	d006      	beq.n	8001f92 <__eqsf2+0x36>
 8001f84:	bd70      	pop	{r4, r5, r6, pc}
 8001f86:	2d00      	cmp	r5, #0
 8001f88:	d1fc      	bne.n	8001f84 <__eqsf2+0x28>
 8001f8a:	2cff      	cmp	r4, #255	; 0xff
 8001f8c:	d1fa      	bne.n	8001f84 <__eqsf2+0x28>
 8001f8e:	2e00      	cmp	r6, #0
 8001f90:	d1f8      	bne.n	8001f84 <__eqsf2+0x28>
 8001f92:	428b      	cmp	r3, r1
 8001f94:	d006      	beq.n	8001fa4 <__eqsf2+0x48>
 8001f96:	2001      	movs	r0, #1
 8001f98:	2a00      	cmp	r2, #0
 8001f9a:	d1f3      	bne.n	8001f84 <__eqsf2+0x28>
 8001f9c:	0028      	movs	r0, r5
 8001f9e:	1e43      	subs	r3, r0, #1
 8001fa0:	4198      	sbcs	r0, r3
 8001fa2:	e7ef      	b.n	8001f84 <__eqsf2+0x28>
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	e7ed      	b.n	8001f84 <__eqsf2+0x28>

08001fa8 <__gesf2>:
 8001fa8:	b570      	push	{r4, r5, r6, lr}
 8001faa:	0042      	lsls	r2, r0, #1
 8001fac:	0245      	lsls	r5, r0, #9
 8001fae:	024e      	lsls	r6, r1, #9
 8001fb0:	004c      	lsls	r4, r1, #1
 8001fb2:	0fc3      	lsrs	r3, r0, #31
 8001fb4:	0a6d      	lsrs	r5, r5, #9
 8001fb6:	0e12      	lsrs	r2, r2, #24
 8001fb8:	0a76      	lsrs	r6, r6, #9
 8001fba:	0e24      	lsrs	r4, r4, #24
 8001fbc:	0fc8      	lsrs	r0, r1, #31
 8001fbe:	2aff      	cmp	r2, #255	; 0xff
 8001fc0:	d01b      	beq.n	8001ffa <__gesf2+0x52>
 8001fc2:	2cff      	cmp	r4, #255	; 0xff
 8001fc4:	d00e      	beq.n	8001fe4 <__gesf2+0x3c>
 8001fc6:	2a00      	cmp	r2, #0
 8001fc8:	d11b      	bne.n	8002002 <__gesf2+0x5a>
 8001fca:	2c00      	cmp	r4, #0
 8001fcc:	d101      	bne.n	8001fd2 <__gesf2+0x2a>
 8001fce:	2e00      	cmp	r6, #0
 8001fd0:	d01c      	beq.n	800200c <__gesf2+0x64>
 8001fd2:	2d00      	cmp	r5, #0
 8001fd4:	d00c      	beq.n	8001ff0 <__gesf2+0x48>
 8001fd6:	4283      	cmp	r3, r0
 8001fd8:	d01c      	beq.n	8002014 <__gesf2+0x6c>
 8001fda:	2102      	movs	r1, #2
 8001fdc:	1e58      	subs	r0, r3, #1
 8001fde:	4008      	ands	r0, r1
 8001fe0:	3801      	subs	r0, #1
 8001fe2:	bd70      	pop	{r4, r5, r6, pc}
 8001fe4:	2e00      	cmp	r6, #0
 8001fe6:	d122      	bne.n	800202e <__gesf2+0x86>
 8001fe8:	2a00      	cmp	r2, #0
 8001fea:	d1f4      	bne.n	8001fd6 <__gesf2+0x2e>
 8001fec:	2d00      	cmp	r5, #0
 8001fee:	d1f2      	bne.n	8001fd6 <__gesf2+0x2e>
 8001ff0:	2800      	cmp	r0, #0
 8001ff2:	d1f6      	bne.n	8001fe2 <__gesf2+0x3a>
 8001ff4:	2001      	movs	r0, #1
 8001ff6:	4240      	negs	r0, r0
 8001ff8:	e7f3      	b.n	8001fe2 <__gesf2+0x3a>
 8001ffa:	2d00      	cmp	r5, #0
 8001ffc:	d117      	bne.n	800202e <__gesf2+0x86>
 8001ffe:	2cff      	cmp	r4, #255	; 0xff
 8002000:	d0f0      	beq.n	8001fe4 <__gesf2+0x3c>
 8002002:	2c00      	cmp	r4, #0
 8002004:	d1e7      	bne.n	8001fd6 <__gesf2+0x2e>
 8002006:	2e00      	cmp	r6, #0
 8002008:	d1e5      	bne.n	8001fd6 <__gesf2+0x2e>
 800200a:	e7e6      	b.n	8001fda <__gesf2+0x32>
 800200c:	2000      	movs	r0, #0
 800200e:	2d00      	cmp	r5, #0
 8002010:	d0e7      	beq.n	8001fe2 <__gesf2+0x3a>
 8002012:	e7e2      	b.n	8001fda <__gesf2+0x32>
 8002014:	42a2      	cmp	r2, r4
 8002016:	dc05      	bgt.n	8002024 <__gesf2+0x7c>
 8002018:	dbea      	blt.n	8001ff0 <__gesf2+0x48>
 800201a:	42b5      	cmp	r5, r6
 800201c:	d802      	bhi.n	8002024 <__gesf2+0x7c>
 800201e:	d3e7      	bcc.n	8001ff0 <__gesf2+0x48>
 8002020:	2000      	movs	r0, #0
 8002022:	e7de      	b.n	8001fe2 <__gesf2+0x3a>
 8002024:	4243      	negs	r3, r0
 8002026:	4158      	adcs	r0, r3
 8002028:	0040      	lsls	r0, r0, #1
 800202a:	3801      	subs	r0, #1
 800202c:	e7d9      	b.n	8001fe2 <__gesf2+0x3a>
 800202e:	2002      	movs	r0, #2
 8002030:	4240      	negs	r0, r0
 8002032:	e7d6      	b.n	8001fe2 <__gesf2+0x3a>

08002034 <__lesf2>:
 8002034:	b570      	push	{r4, r5, r6, lr}
 8002036:	0042      	lsls	r2, r0, #1
 8002038:	0245      	lsls	r5, r0, #9
 800203a:	024e      	lsls	r6, r1, #9
 800203c:	004c      	lsls	r4, r1, #1
 800203e:	0fc3      	lsrs	r3, r0, #31
 8002040:	0a6d      	lsrs	r5, r5, #9
 8002042:	0e12      	lsrs	r2, r2, #24
 8002044:	0a76      	lsrs	r6, r6, #9
 8002046:	0e24      	lsrs	r4, r4, #24
 8002048:	0fc8      	lsrs	r0, r1, #31
 800204a:	2aff      	cmp	r2, #255	; 0xff
 800204c:	d00b      	beq.n	8002066 <__lesf2+0x32>
 800204e:	2cff      	cmp	r4, #255	; 0xff
 8002050:	d00d      	beq.n	800206e <__lesf2+0x3a>
 8002052:	2a00      	cmp	r2, #0
 8002054:	d11f      	bne.n	8002096 <__lesf2+0x62>
 8002056:	2c00      	cmp	r4, #0
 8002058:	d116      	bne.n	8002088 <__lesf2+0x54>
 800205a:	2e00      	cmp	r6, #0
 800205c:	d114      	bne.n	8002088 <__lesf2+0x54>
 800205e:	2000      	movs	r0, #0
 8002060:	2d00      	cmp	r5, #0
 8002062:	d010      	beq.n	8002086 <__lesf2+0x52>
 8002064:	e009      	b.n	800207a <__lesf2+0x46>
 8002066:	2d00      	cmp	r5, #0
 8002068:	d10c      	bne.n	8002084 <__lesf2+0x50>
 800206a:	2cff      	cmp	r4, #255	; 0xff
 800206c:	d113      	bne.n	8002096 <__lesf2+0x62>
 800206e:	2e00      	cmp	r6, #0
 8002070:	d108      	bne.n	8002084 <__lesf2+0x50>
 8002072:	2a00      	cmp	r2, #0
 8002074:	d008      	beq.n	8002088 <__lesf2+0x54>
 8002076:	4283      	cmp	r3, r0
 8002078:	d012      	beq.n	80020a0 <__lesf2+0x6c>
 800207a:	2102      	movs	r1, #2
 800207c:	1e58      	subs	r0, r3, #1
 800207e:	4008      	ands	r0, r1
 8002080:	3801      	subs	r0, #1
 8002082:	e000      	b.n	8002086 <__lesf2+0x52>
 8002084:	2002      	movs	r0, #2
 8002086:	bd70      	pop	{r4, r5, r6, pc}
 8002088:	2d00      	cmp	r5, #0
 800208a:	d1f4      	bne.n	8002076 <__lesf2+0x42>
 800208c:	2800      	cmp	r0, #0
 800208e:	d1fa      	bne.n	8002086 <__lesf2+0x52>
 8002090:	2001      	movs	r0, #1
 8002092:	4240      	negs	r0, r0
 8002094:	e7f7      	b.n	8002086 <__lesf2+0x52>
 8002096:	2c00      	cmp	r4, #0
 8002098:	d1ed      	bne.n	8002076 <__lesf2+0x42>
 800209a:	2e00      	cmp	r6, #0
 800209c:	d1eb      	bne.n	8002076 <__lesf2+0x42>
 800209e:	e7ec      	b.n	800207a <__lesf2+0x46>
 80020a0:	42a2      	cmp	r2, r4
 80020a2:	dc05      	bgt.n	80020b0 <__lesf2+0x7c>
 80020a4:	dbf2      	blt.n	800208c <__lesf2+0x58>
 80020a6:	42b5      	cmp	r5, r6
 80020a8:	d802      	bhi.n	80020b0 <__lesf2+0x7c>
 80020aa:	d3ef      	bcc.n	800208c <__lesf2+0x58>
 80020ac:	2000      	movs	r0, #0
 80020ae:	e7ea      	b.n	8002086 <__lesf2+0x52>
 80020b0:	4243      	negs	r3, r0
 80020b2:	4158      	adcs	r0, r3
 80020b4:	0040      	lsls	r0, r0, #1
 80020b6:	3801      	subs	r0, #1
 80020b8:	e7e5      	b.n	8002086 <__lesf2+0x52>
 80020ba:	46c0      	nop			; (mov r8, r8)

080020bc <eventHandler>:
sh2_Hal_t *pSh2Hal = 0;
bool resetOccurred = false;

// Handle non-sensor events from the sensor hub
static void eventHandler(void * cookie, sh2_AsyncEvent_t *pEvent)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
    // If we see a reset, set a flag so that sensors will be reconfigured.
    if (pEvent->eventId == SH2_RESET) {
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d102      	bne.n	80020d4 <eventHandler+0x18>
        resetOccurred = true;
 80020ce:	4b03      	ldr	r3, [pc, #12]	; (80020dc <eventHandler+0x20>)
 80020d0:	2201      	movs	r2, #1
 80020d2:	701a      	strb	r2, [r3, #0]
        // printf("EventHandler Sensor Config, %d\n", pEvent->sh2SensorConfigResp.sensorId);
    }
    else {
        // printf("EventHandler, unknown event Id: %d\n", pEvent->eventId);
    }
}
 80020d4:	46c0      	nop			; (mov r8, r8)
 80020d6:	46bd      	mov	sp, r7
 80020d8:	b002      	add	sp, #8
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	2000002c 	.word	0x2000002c

080020e0 <init_bno08x>:
//     printEvent(pEvent);
// #endif
// }

void init_bno08x(sh2_SensorCallback_t *callback)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  int status;

  // Create an instance of the SH2 interface
  pSh2Hal = sh2_hal_init();
 80020e8:	f000 f81a 	bl	8002120 <sh2_hal_init>
 80020ec:	0002      	movs	r2, r0
 80020ee:	4b0a      	ldr	r3, [pc, #40]	; (8002118 <init_bno08x+0x38>)
 80020f0:	601a      	str	r2, [r3, #0]

  // Open the SH2 interface
  status = sh2_open(pSh2Hal, eventHandler, NULL);
 80020f2:	4b09      	ldr	r3, [pc, #36]	; (8002118 <init_bno08x+0x38>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4909      	ldr	r1, [pc, #36]	; (800211c <init_bno08x+0x3c>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	0018      	movs	r0, r3
 80020fc:	f001 fc38 	bl	8003970 <sh2_open>
 8002100:	0003      	movs	r3, r0
 8002102:	60fb      	str	r3, [r7, #12]
  if (status != SH2_OK) {
      // printf("sh2_open failed, status = %d\n", status);
  }

  // Register sensor listener
  sh2_setSensorCallback(callback, NULL);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2100      	movs	r1, #0
 8002108:	0018      	movs	r0, r3
 800210a:	f001 fd01 	bl	8003b10 <sh2_setSensorCallback>
}
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	46bd      	mov	sp, r7
 8002112:	b004      	add	sp, #16
 8002114:	bd80      	pop	{r7, pc}
 8002116:	46c0      	nop			; (mov r8, r8)
 8002118:	20000028 	.word	0x20000028
 800211c:	080020bd 	.word	0x080020bd

08002120 <sh2_hal_init>:

i2c_hal_t sh2_hal;
i2c_hal_t dfu_hal;

sh2_Hal_t *sh2_hal_init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
    // Get instance of i2c hal suitable for SH2 on BNO08x
    return shtp_i2c_hal_init(&sh2_hal, false, ADDR_SH2_0);
 8002124:	4b04      	ldr	r3, [pc, #16]	; (8002138 <sh2_hal_init+0x18>)
 8002126:	224a      	movs	r2, #74	; 0x4a
 8002128:	2100      	movs	r1, #0
 800212a:	0018      	movs	r0, r3
 800212c:	f000 fce2 	bl	8002af4 <shtp_i2c_hal_init>
 8002130:	0003      	movs	r3, r0
}
 8002132:	0018      	movs	r0, r3
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	20000030 	.word	0x20000030

0800213c <enableInts>:

// ------------------------------------------------------------------------
// Private methods

static void enableInts(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
    // Enable INTN interrupt
    HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002140:	2007      	movs	r0, #7
 8002142:	f005 f99e 	bl	8007482 <HAL_NVIC_EnableIRQ>

    // Enable I2C interrupts
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8002146:	2017      	movs	r0, #23
 8002148:	f005 f99b 	bl	8007482 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800214c:	2017      	movs	r0, #23
 800214e:	f005 f998 	bl	8007482 <HAL_NVIC_EnableIRQ>
}
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <disableInts>:

static void disableInts(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
    // Disable I2C interrupts
    HAL_NVIC_DisableIRQ(I2C1_IRQn);
 800215c:	2017      	movs	r0, #23
 800215e:	f005 f9a0 	bl	80074a2 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_IRQn);
 8002162:	2017      	movs	r0, #23
 8002164:	f005 f99d 	bl	80074a2 <HAL_NVIC_DisableIRQ>

    // Disable INTN interrupt line
    HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 8002168:	2007      	movs	r0, #7
 800216a:	f005 f99a 	bl	80074a2 <HAL_NVIC_DisableIRQ>
}
 800216e:	46c0      	nop			; (mov r8, r8)
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <enableI2cInts>:

static void enableI2cInts(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
    // Enable I2C interrupts
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8002178:	2017      	movs	r0, #23
 800217a:	f005 f982 	bl	8007482 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800217e:	2017      	movs	r0, #23
 8002180:	f005 f97f 	bl	8007482 <HAL_NVIC_EnableIRQ>
}
 8002184:	46c0      	nop			; (mov r8, r8)
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <disableI2cInts>:

static void disableI2cInts(void)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	af00      	add	r7, sp, #0
    // Disable I2C interrupts
    HAL_NVIC_DisableIRQ(I2C1_IRQn);
 800218e:	2017      	movs	r0, #23
 8002190:	f005 f987 	bl	80074a2 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_IRQn);
 8002194:	2017      	movs	r0, #23
 8002196:	f005 f984 	bl	80074a2 <HAL_NVIC_DisableIRQ>
}
 800219a:	46c0      	nop			; (mov r8, r8)
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <hal_init_gpio>:

static void hal_init_gpio(void)
{
 80021a0:	b590      	push	{r4, r7, lr}
 80021a2:	b089      	sub	sp, #36	; 0x24
 80021a4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a6:	4b5b      	ldr	r3, [pc, #364]	; (8002314 <hal_init_gpio+0x174>)
 80021a8:	695a      	ldr	r2, [r3, #20]
 80021aa:	4b5a      	ldr	r3, [pc, #360]	; (8002314 <hal_init_gpio+0x174>)
 80021ac:	2180      	movs	r1, #128	; 0x80
 80021ae:	0289      	lsls	r1, r1, #10
 80021b0:	430a      	orrs	r2, r1
 80021b2:	615a      	str	r2, [r3, #20]
 80021b4:	4b57      	ldr	r3, [pc, #348]	; (8002314 <hal_init_gpio+0x174>)
 80021b6:	695a      	ldr	r2, [r3, #20]
 80021b8:	2380      	movs	r3, #128	; 0x80
 80021ba:	029b      	lsls	r3, r3, #10
 80021bc:	4013      	ands	r3, r2
 80021be:	60bb      	str	r3, [r7, #8]
 80021c0:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c2:	4b54      	ldr	r3, [pc, #336]	; (8002314 <hal_init_gpio+0x174>)
 80021c4:	695a      	ldr	r2, [r3, #20]
 80021c6:	4b53      	ldr	r3, [pc, #332]	; (8002314 <hal_init_gpio+0x174>)
 80021c8:	2180      	movs	r1, #128	; 0x80
 80021ca:	02c9      	lsls	r1, r1, #11
 80021cc:	430a      	orrs	r2, r1
 80021ce:	615a      	str	r2, [r3, #20]
 80021d0:	4b50      	ldr	r3, [pc, #320]	; (8002314 <hal_init_gpio+0x174>)
 80021d2:	695a      	ldr	r2, [r3, #20]
 80021d4:	2380      	movs	r3, #128	; 0x80
 80021d6:	02db      	lsls	r3, r3, #11
 80021d8:	4013      	ands	r3, r2
 80021da:	607b      	str	r3, [r7, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]

    /* Configure PS0_WAKEN */
    HAL_GPIO_WritePin(PS0_WAKEN_PORT, PS0_WAKEN_PIN, GPIO_PIN_RESET);
 80021de:	2380      	movs	r3, #128	; 0x80
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	484d      	ldr	r0, [pc, #308]	; (8002318 <hal_init_gpio+0x178>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	0019      	movs	r1, r3
 80021e8:	f005 fdda 	bl	8007da0 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = PS0_WAKEN_PIN;
 80021ec:	210c      	movs	r1, #12
 80021ee:	187b      	adds	r3, r7, r1
 80021f0:	2280      	movs	r2, #128	; 0x80
 80021f2:	00d2      	lsls	r2, r2, #3
 80021f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021f6:	000c      	movs	r4, r1
 80021f8:	193b      	adds	r3, r7, r4
 80021fa:	2201      	movs	r2, #1
 80021fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	193b      	adds	r3, r7, r4
 8002200:	2200      	movs	r2, #0
 8002202:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002204:	193b      	adds	r3, r7, r4
 8002206:	2200      	movs	r2, #0
 8002208:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(PS0_WAKEN_PORT, &GPIO_InitStruct);
 800220a:	193b      	adds	r3, r7, r4
 800220c:	4a42      	ldr	r2, [pc, #264]	; (8002318 <hal_init_gpio+0x178>)
 800220e:	0019      	movs	r1, r3
 8002210:	0010      	movs	r0, r2
 8002212:	f005 fb95 	bl	8007940 <HAL_GPIO_Init>

    /* Configure PS1 */
    HAL_GPIO_WritePin(PS1_PORT, PS1_PIN, GPIO_PIN_SET);
 8002216:	4b40      	ldr	r3, [pc, #256]	; (8002318 <hal_init_gpio+0x178>)
 8002218:	2201      	movs	r2, #1
 800221a:	2101      	movs	r1, #1
 800221c:	0018      	movs	r0, r3
 800221e:	f005 fdbf 	bl	8007da0 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = PS1_PIN;
 8002222:	193b      	adds	r3, r7, r4
 8002224:	2201      	movs	r2, #1
 8002226:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002228:	193b      	adds	r3, r7, r4
 800222a:	2201      	movs	r2, #1
 800222c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222e:	193b      	adds	r3, r7, r4
 8002230:	2200      	movs	r2, #0
 8002232:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002234:	193b      	adds	r3, r7, r4
 8002236:	2200      	movs	r2, #0
 8002238:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(PS1_PORT, &GPIO_InitStruct);
 800223a:	193b      	adds	r3, r7, r4
 800223c:	4a36      	ldr	r2, [pc, #216]	; (8002318 <hal_init_gpio+0x178>)
 800223e:	0019      	movs	r1, r3
 8002240:	0010      	movs	r0, r2
 8002242:	f005 fb7d 	bl	8007940 <HAL_GPIO_Init>

    /* Configure RSTN*/
    HAL_GPIO_WritePin(RSTN_PORT, RSTN_PIN, GPIO_PIN_RESET);
 8002246:	4b34      	ldr	r3, [pc, #208]	; (8002318 <hal_init_gpio+0x178>)
 8002248:	2200      	movs	r2, #0
 800224a:	2110      	movs	r1, #16
 800224c:	0018      	movs	r0, r3
 800224e:	f005 fda7 	bl	8007da0 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = RSTN_PIN;
 8002252:	193b      	adds	r3, r7, r4
 8002254:	2210      	movs	r2, #16
 8002256:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002258:	193b      	adds	r3, r7, r4
 800225a:	2201      	movs	r2, #1
 800225c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225e:	193b      	adds	r3, r7, r4
 8002260:	2200      	movs	r2, #0
 8002262:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002264:	193b      	adds	r3, r7, r4
 8002266:	2200      	movs	r2, #0
 8002268:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(RSTN_PORT, &GPIO_InitStruct);
 800226a:	193b      	adds	r3, r7, r4
 800226c:	4a2a      	ldr	r2, [pc, #168]	; (8002318 <hal_init_gpio+0x178>)
 800226e:	0019      	movs	r1, r3
 8002270:	0010      	movs	r0, r2
 8002272:	f005 fb65 	bl	8007940 <HAL_GPIO_Init>

    /* Configure BOOTN */
    HAL_GPIO_WritePin(BOOTN_PORT, BOOTN_PIN, GPIO_PIN_SET);
 8002276:	4b28      	ldr	r3, [pc, #160]	; (8002318 <hal_init_gpio+0x178>)
 8002278:	2201      	movs	r2, #1
 800227a:	2120      	movs	r1, #32
 800227c:	0018      	movs	r0, r3
 800227e:	f005 fd8f 	bl	8007da0 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = BOOTN_PIN;
 8002282:	193b      	adds	r3, r7, r4
 8002284:	2220      	movs	r2, #32
 8002286:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002288:	193b      	adds	r3, r7, r4
 800228a:	2201      	movs	r2, #1
 800228c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228e:	193b      	adds	r3, r7, r4
 8002290:	2200      	movs	r2, #0
 8002292:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002294:	193b      	adds	r3, r7, r4
 8002296:	2200      	movs	r2, #0
 8002298:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(BOOTN_PORT, &GPIO_InitStruct);
 800229a:	193b      	adds	r3, r7, r4
 800229c:	4a1e      	ldr	r2, [pc, #120]	; (8002318 <hal_init_gpio+0x178>)
 800229e:	0019      	movs	r1, r3
 80022a0:	0010      	movs	r0, r2
 80022a2:	f005 fb4d 	bl	8007940 <HAL_GPIO_Init>

    /*Configure GPIO pin : INTN */
    GPIO_InitStruct.Pin = INTN_PIN;
 80022a6:	193b      	adds	r3, r7, r4
 80022a8:	2280      	movs	r2, #128	; 0x80
 80022aa:	00d2      	lsls	r2, r2, #3
 80022ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80022ae:	193b      	adds	r3, r7, r4
 80022b0:	2284      	movs	r2, #132	; 0x84
 80022b2:	0392      	lsls	r2, r2, #14
 80022b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022b6:	193b      	adds	r3, r7, r4
 80022b8:	2201      	movs	r2, #1
 80022ba:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(INTN_PORT, &GPIO_InitStruct);
 80022bc:	193a      	adds	r2, r7, r4
 80022be:	2390      	movs	r3, #144	; 0x90
 80022c0:	05db      	lsls	r3, r3, #23
 80022c2:	0011      	movs	r1, r2
 80022c4:	0018      	movs	r0, r3
 80022c6:	f005 fb3b 	bl	8007940 <HAL_GPIO_Init>

    /*Configure GPIO pin : CLKSEL0_PIN */
    /* Set CLKSEL0 to 0 : FSP200 should use crystal for timing. */
    HAL_GPIO_WritePin(CLKSEL0_PORT, CLKSEL0_PIN, GPIO_PIN_RESET);
 80022ca:	2380      	movs	r3, #128	; 0x80
 80022cc:	0059      	lsls	r1, r3, #1
 80022ce:	2390      	movs	r3, #144	; 0x90
 80022d0:	05db      	lsls	r3, r3, #23
 80022d2:	2200      	movs	r2, #0
 80022d4:	0018      	movs	r0, r3
 80022d6:	f005 fd63 	bl	8007da0 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = CLKSEL0_PIN;
 80022da:	193b      	adds	r3, r7, r4
 80022dc:	2280      	movs	r2, #128	; 0x80
 80022de:	0052      	lsls	r2, r2, #1
 80022e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e2:	193b      	adds	r3, r7, r4
 80022e4:	2201      	movs	r2, #1
 80022e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e8:	193b      	adds	r3, r7, r4
 80022ea:	2200      	movs	r2, #0
 80022ec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80022ee:	193b      	adds	r3, r7, r4
 80022f0:	2203      	movs	r2, #3
 80022f2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(CLKSEL0_PORT, &GPIO_InitStruct);
 80022f4:	193a      	adds	r2, r7, r4
 80022f6:	2390      	movs	r3, #144	; 0x90
 80022f8:	05db      	lsls	r3, r3, #23
 80022fa:	0011      	movs	r1, r2
 80022fc:	0018      	movs	r0, r3
 80022fe:	f005 fb1f 	bl	8007940 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI4_15_IRQn, 5, 0);
 8002302:	2200      	movs	r2, #0
 8002304:	2105      	movs	r1, #5
 8002306:	2007      	movs	r0, #7
 8002308:	f005 f8a6 	bl	8007458 <HAL_NVIC_SetPriority>
}
 800230c:	46c0      	nop			; (mov r8, r8)
 800230e:	46bd      	mov	sp, r7
 8002310:	b009      	add	sp, #36	; 0x24
 8002312:	bd90      	pop	{r4, r7, pc}
 8002314:	40021000 	.word	0x40021000
 8002318:	48000400 	.word	0x48000400

0800231c <hal_init_i2c>:

static void hal_init_i2c(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;

    // Configure GPIO Pins for use with I2C
    // PB8 : I2C1_SCL
    // PB9 : I2C1_SDA 
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002322:	1d3b      	adds	r3, r7, #4
 8002324:	22c0      	movs	r2, #192	; 0xc0
 8002326:	0092      	lsls	r2, r2, #2
 8002328:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800232a:	1d3b      	adds	r3, r7, #4
 800232c:	2212      	movs	r2, #18
 800232e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002330:	1d3b      	adds	r3, r7, #4
 8002332:	2201      	movs	r2, #1
 8002334:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002336:	1d3b      	adds	r3, r7, #4
 8002338:	2203      	movs	r2, #3
 800233a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800233c:	1d3b      	adds	r3, r7, #4
 800233e:	2204      	movs	r2, #4
 8002340:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002342:	1d3b      	adds	r3, r7, #4
 8002344:	4a1f      	ldr	r2, [pc, #124]	; (80023c4 <hal_init_i2c+0xa8>)
 8002346:	0019      	movs	r1, r3
 8002348:	0010      	movs	r0, r2
 800234a:	f005 faf9 	bl	8007940 <HAL_GPIO_Init>

    // Peripheral clock enable
    __HAL_RCC_I2C1_CLK_ENABLE();
 800234e:	4b1e      	ldr	r3, [pc, #120]	; (80023c8 <hal_init_i2c+0xac>)
 8002350:	69da      	ldr	r2, [r3, #28]
 8002352:	4b1d      	ldr	r3, [pc, #116]	; (80023c8 <hal_init_i2c+0xac>)
 8002354:	2180      	movs	r1, #128	; 0x80
 8002356:	0389      	lsls	r1, r1, #14
 8002358:	430a      	orrs	r2, r1
 800235a:	61da      	str	r2, [r3, #28]
 800235c:	4b1a      	ldr	r3, [pc, #104]	; (80023c8 <hal_init_i2c+0xac>)
 800235e:	69da      	ldr	r2, [r3, #28]
 8002360:	2380      	movs	r3, #128	; 0x80
 8002362:	039b      	lsls	r3, r3, #14
 8002364:	4013      	ands	r3, r2
 8002366:	603b      	str	r3, [r7, #0]
 8002368:	683b      	ldr	r3, [r7, #0]

    i2c.Instance = I2C1;
 800236a:	4b18      	ldr	r3, [pc, #96]	; (80023cc <hal_init_i2c+0xb0>)
 800236c:	4a18      	ldr	r2, [pc, #96]	; (80023d0 <hal_init_i2c+0xb4>)
 800236e:	601a      	str	r2, [r3, #0]
    i2c.Init.Timing = 0x2000090E;
 8002370:	4b16      	ldr	r3, [pc, #88]	; (80023cc <hal_init_i2c+0xb0>)
 8002372:	4a18      	ldr	r2, [pc, #96]	; (80023d4 <hal_init_i2c+0xb8>)
 8002374:	605a      	str	r2, [r3, #4]
    i2c.Init.OwnAddress1 = 0;
 8002376:	4b15      	ldr	r3, [pc, #84]	; (80023cc <hal_init_i2c+0xb0>)
 8002378:	2200      	movs	r2, #0
 800237a:	609a      	str	r2, [r3, #8]
    i2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800237c:	4b13      	ldr	r3, [pc, #76]	; (80023cc <hal_init_i2c+0xb0>)
 800237e:	2201      	movs	r2, #1
 8002380:	60da      	str	r2, [r3, #12]
    i2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002382:	4b12      	ldr	r3, [pc, #72]	; (80023cc <hal_init_i2c+0xb0>)
 8002384:	2200      	movs	r2, #0
 8002386:	611a      	str	r2, [r3, #16]
    i2c.Init.OwnAddress2 = 0;
 8002388:	4b10      	ldr	r3, [pc, #64]	; (80023cc <hal_init_i2c+0xb0>)
 800238a:	2200      	movs	r2, #0
 800238c:	615a      	str	r2, [r3, #20]
    i2c.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800238e:	4b0f      	ldr	r3, [pc, #60]	; (80023cc <hal_init_i2c+0xb0>)
 8002390:	2200      	movs	r2, #0
 8002392:	619a      	str	r2, [r3, #24]
    i2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002394:	4b0d      	ldr	r3, [pc, #52]	; (80023cc <hal_init_i2c+0xb0>)
 8002396:	2200      	movs	r2, #0
 8002398:	61da      	str	r2, [r3, #28]
    i2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800239a:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <hal_init_i2c+0xb0>)
 800239c:	2200      	movs	r2, #0
 800239e:	621a      	str	r2, [r3, #32]

    HAL_I2C_Init(&i2c);
 80023a0:	4b0a      	ldr	r3, [pc, #40]	; (80023cc <hal_init_i2c+0xb0>)
 80023a2:	0018      	movs	r0, r3
 80023a4:	f005 fd1a 	bl	8007ddc <HAL_I2C_Init>

    // Set Priority for I2C IRQ and enable
    HAL_NVIC_SetPriority(I2C1_IRQn, 5, 0);
 80023a8:	2200      	movs	r2, #0
 80023aa:	2105      	movs	r1, #5
 80023ac:	2017      	movs	r0, #23
 80023ae:	f005 f853 	bl	8007458 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(I2C1_IRQn, 5, 0);
 80023b2:	2200      	movs	r2, #0
 80023b4:	2105      	movs	r1, #5
 80023b6:	2017      	movs	r0, #23
 80023b8:	f005 f84e 	bl	8007458 <HAL_NVIC_SetPriority>
}
 80023bc:	46c0      	nop			; (mov r8, r8)
 80023be:	46bd      	mov	sp, r7
 80023c0:	b006      	add	sp, #24
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	48000400 	.word	0x48000400
 80023c8:	40021000 	.word	0x40021000
 80023cc:	20000094 	.word	0x20000094
 80023d0:	40005400 	.word	0x40005400
 80023d4:	2000090e 	.word	0x2000090e

080023d8 <hal_init_timer>:

static void hal_init_timer(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023de:	4b19      	ldr	r3, [pc, #100]	; (8002444 <hal_init_timer+0x6c>)
 80023e0:	69da      	ldr	r2, [r3, #28]
 80023e2:	4b18      	ldr	r3, [pc, #96]	; (8002444 <hal_init_timer+0x6c>)
 80023e4:	2101      	movs	r1, #1
 80023e6:	430a      	orrs	r2, r1
 80023e8:	61da      	str	r2, [r3, #28]
 80023ea:	4b16      	ldr	r3, [pc, #88]	; (8002444 <hal_init_timer+0x6c>)
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	2201      	movs	r2, #1
 80023f0:	4013      	ands	r3, r2
 80023f2:	603b      	str	r3, [r7, #0]
 80023f4:	683b      	ldr	r3, [r7, #0]

    // Prescale to get 1 count per uS
    uint32_t prescaler = (uint32_t)((HAL_RCC_GetPCLK1Freq() / 1000000) - 1);
 80023f6:	f007 ffb5 	bl	800a364 <HAL_RCC_GetPCLK1Freq>
 80023fa:	0003      	movs	r3, r0
 80023fc:	4912      	ldr	r1, [pc, #72]	; (8002448 <hal_init_timer+0x70>)
 80023fe:	0018      	movs	r0, r3
 8002400:	f7fd fe94 	bl	800012c <__udivsi3>
 8002404:	0003      	movs	r3, r0
 8002406:	3b01      	subs	r3, #1
 8002408:	607b      	str	r3, [r7, #4]

    tim2.Instance = TIM2;
 800240a:	4b10      	ldr	r3, [pc, #64]	; (800244c <hal_init_timer+0x74>)
 800240c:	2280      	movs	r2, #128	; 0x80
 800240e:	05d2      	lsls	r2, r2, #23
 8002410:	601a      	str	r2, [r3, #0]
    tim2.Init.Period = 0xFFFFFFFF;
 8002412:	4b0e      	ldr	r3, [pc, #56]	; (800244c <hal_init_timer+0x74>)
 8002414:	2201      	movs	r2, #1
 8002416:	4252      	negs	r2, r2
 8002418:	60da      	str	r2, [r3, #12]
    tim2.Init.Prescaler = prescaler;
 800241a:	4b0c      	ldr	r3, [pc, #48]	; (800244c <hal_init_timer+0x74>)
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	605a      	str	r2, [r3, #4]
    tim2.Init.ClockDivision = 0;
 8002420:	4b0a      	ldr	r3, [pc, #40]	; (800244c <hal_init_timer+0x74>)
 8002422:	2200      	movs	r2, #0
 8002424:	611a      	str	r2, [r3, #16]
    tim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002426:	4b09      	ldr	r3, [pc, #36]	; (800244c <hal_init_timer+0x74>)
 8002428:	2200      	movs	r2, #0
 800242a:	609a      	str	r2, [r3, #8]

    HAL_TIM_Base_Init(&tim2);
 800242c:	4b07      	ldr	r3, [pc, #28]	; (800244c <hal_init_timer+0x74>)
 800242e:	0018      	movs	r0, r3
 8002430:	f008 f89c 	bl	800a56c <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start(&tim2);
 8002434:	4b05      	ldr	r3, [pc, #20]	; (800244c <hal_init_timer+0x74>)
 8002436:	0018      	movs	r0, r3
 8002438:	f008 f8e8 	bl	800a60c <HAL_TIM_Base_Start>
}
 800243c:	46c0      	nop			; (mov r8, r8)
 800243e:	46bd      	mov	sp, r7
 8002440:	b002      	add	sp, #8
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40021000 	.word	0x40021000
 8002448:	000f4240 	.word	0x000f4240
 800244c:	2000004c 	.word	0x2000004c

08002450 <hal_init_hw>:

static void hal_init_hw(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
    hal_init_timer();
 8002454:	f7ff ffc0 	bl	80023d8 <hal_init_timer>
    hal_init_gpio();
 8002458:	f7ff fea2 	bl	80021a0 <hal_init_gpio>
    hal_init_i2c();
 800245c:	f7ff ff5e 	bl	800231c <hal_init_i2c>
}
 8002460:	46c0      	nop			; (mov r8, r8)
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <bootn>:

static void bootn(bool state)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	0002      	movs	r2, r0
 8002470:	1dfb      	adds	r3, r7, #7
 8002472:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(BOOTN_PORT, BOOTN_PIN, 
 8002474:	1dfb      	adds	r3, r7, #7
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	001a      	movs	r2, r3
 800247a:	4b04      	ldr	r3, [pc, #16]	; (800248c <bootn+0x24>)
 800247c:	2120      	movs	r1, #32
 800247e:	0018      	movs	r0, r3
 8002480:	f005 fc8e 	bl	8007da0 <HAL_GPIO_WritePin>
                      state ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8002484:	46c0      	nop			; (mov r8, r8)
 8002486:	46bd      	mov	sp, r7
 8002488:	b002      	add	sp, #8
 800248a:	bd80      	pop	{r7, pc}
 800248c:	48000400 	.word	0x48000400

08002490 <rstn>:

static void rstn(bool state)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	0002      	movs	r2, r0
 8002498:	1dfb      	adds	r3, r7, #7
 800249a:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(RSTN_PORT, RSTN_PIN, 
 800249c:	1dfb      	adds	r3, r7, #7
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	001a      	movs	r2, r3
 80024a2:	4b04      	ldr	r3, [pc, #16]	; (80024b4 <rstn+0x24>)
 80024a4:	2110      	movs	r1, #16
 80024a6:	0018      	movs	r0, r3
 80024a8:	f005 fc7a 	bl	8007da0 <HAL_GPIO_WritePin>
                      state ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 80024ac:	46c0      	nop			; (mov r8, r8)
 80024ae:	46bd      	mov	sp, r7
 80024b0:	b002      	add	sp, #8
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	48000400 	.word	0x48000400

080024b8 <ps0_waken>:

static void ps0_waken(bool state)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	0002      	movs	r2, r0
 80024c0:	1dfb      	adds	r3, r7, #7
 80024c2:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(PS0_WAKEN_PORT, PS0_WAKEN_PIN, 
 80024c4:	1dfb      	adds	r3, r7, #7
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	001a      	movs	r2, r3
 80024ca:	2380      	movs	r3, #128	; 0x80
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	4804      	ldr	r0, [pc, #16]	; (80024e0 <ps0_waken+0x28>)
 80024d0:	0019      	movs	r1, r3
 80024d2:	f005 fc65 	bl	8007da0 <HAL_GPIO_WritePin>
                      state ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 80024d6:	46c0      	nop			; (mov r8, r8)
 80024d8:	46bd      	mov	sp, r7
 80024da:	b002      	add	sp, #8
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	46c0      	nop			; (mov r8, r8)
 80024e0:	48000400 	.word	0x48000400

080024e4 <ps1>:

static void ps1(bool state)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	0002      	movs	r2, r0
 80024ec:	1dfb      	adds	r3, r7, #7
 80024ee:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(PS1_PORT, PS1_PIN, 
 80024f0:	1dfb      	adds	r3, r7, #7
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	001a      	movs	r2, r3
 80024f6:	4b04      	ldr	r3, [pc, #16]	; (8002508 <ps1+0x24>)
 80024f8:	2101      	movs	r1, #1
 80024fa:	0018      	movs	r0, r3
 80024fc:	f005 fc50 	bl	8007da0 <HAL_GPIO_WritePin>
                      state ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8002500:	46c0      	nop			; (mov r8, r8)
 8002502:	46bd      	mov	sp, r7
 8002504:	b002      	add	sp, #8
 8002506:	bd80      	pop	{r7, pc}
 8002508:	48000400 	.word	0x48000400

0800250c <timeNowUs>:

static uint32_t timeNowUs(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
    return __HAL_TIM_GET_COUNTER(&tim2);
 8002510:	4b02      	ldr	r3, [pc, #8]	; (800251c <timeNowUs+0x10>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002516:	0018      	movs	r0, r3
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	2000004c 	.word	0x2000004c

08002520 <delay_us>:

static void delay_us(uint32_t t)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
    uint32_t now = timeNowUs();
 8002528:	f7ff fff0 	bl	800250c <timeNowUs>
 800252c:	0003      	movs	r3, r0
 800252e:	60fb      	str	r3, [r7, #12]
    uint32_t start = now;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	60bb      	str	r3, [r7, #8]
    while ((now - start) < t)
 8002534:	e003      	b.n	800253e <delay_us+0x1e>
    {
        now = timeNowUs();
 8002536:	f7ff ffe9 	bl	800250c <timeNowUs>
 800253a:	0003      	movs	r3, r0
 800253c:	60fb      	str	r3, [r7, #12]
    while ((now - start) < t)
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	429a      	cmp	r2, r3
 8002548:	d8f5      	bhi.n	8002536 <delay_us+0x16>
    }
}
 800254a:	46c0      	nop			; (mov r8, r8)
 800254c:	46c0      	nop			; (mov r8, r8)
 800254e:	46bd      	mov	sp, r7
 8002550:	b004      	add	sp, #16
 8002552:	bd80      	pop	{r7, pc}

08002554 <reset_delay_us>:

static void reset_delay_us(uint32_t t)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
    uint32_t now = timeNowUs();
 800255c:	f7ff ffd6 	bl	800250c <timeNowUs>
 8002560:	0003      	movs	r3, r0
 8002562:	60fb      	str	r3, [r7, #12]
    uint32_t start = now;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	60bb      	str	r3, [r7, #8]
    while (((now - start) < t) && (inReset))
 8002568:	e003      	b.n	8002572 <reset_delay_us+0x1e>
    {
        now = timeNowUs();
 800256a:	f7ff ffcf 	bl	800250c <timeNowUs>
 800256e:	0003      	movs	r3, r0
 8002570:	60fb      	str	r3, [r7, #12]
    while (((now - start) < t) && (inReset))
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	429a      	cmp	r2, r3
 800257c:	d904      	bls.n	8002588 <reset_delay_us+0x34>
 800257e:	4b04      	ldr	r3, [pc, #16]	; (8002590 <reset_delay_us+0x3c>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1f0      	bne.n	800256a <reset_delay_us+0x16>
    }
}
 8002588:	46c0      	nop			; (mov r8, r8)
 800258a:	46bd      	mov	sp, r7
 800258c:	b004      	add	sp, #16
 800258e:	bd80      	pop	{r7, pc}
 8002590:	2000038e 	.word	0x2000038e

08002594 <HAL_I2C_MasterRxCpltCallback>:
// ----------------------------------------------------------------------------------
// Callbacks for ISR, I2C Operations
// ----------------------------------------------------------------------------------

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *pI2c)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
    // read bus state just once for consistency.
    enum BusState_e busState = i2cBusState;
 800259c:	210f      	movs	r1, #15
 800259e:	187b      	adds	r3, r7, r1
 80025a0:	4a27      	ldr	r2, [pc, #156]	; (8002640 <HAL_I2C_MasterRxCpltCallback+0xac>)
 80025a2:	7812      	ldrb	r2, [r2, #0]
 80025a4:	701a      	strb	r2, [r3, #0]
    
    // Read completed
    if (busState == BUS_READING_LEN)
 80025a6:	187b      	adds	r3, r7, r1
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d125      	bne.n	80025fa <HAL_I2C_MasterRxCpltCallback+0x66>
    {
        // Len of payload is available, decide how long to do next read
        uint16_t len = (hdrBuf[0] + (hdrBuf[1] << 8)) & ~0x8000;
 80025ae:	4b25      	ldr	r3, [pc, #148]	; (8002644 <HAL_I2C_MasterRxCpltCallback+0xb0>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	4b23      	ldr	r3, [pc, #140]	; (8002644 <HAL_I2C_MasterRxCpltCallback+0xb0>)
 80025b6:	785b      	ldrb	r3, [r3, #1]
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	021b      	lsls	r3, r3, #8
 80025bc:	b29b      	uxth	r3, r3
 80025be:	18d3      	adds	r3, r2, r3
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	210c      	movs	r1, #12
 80025c4:	187b      	adds	r3, r7, r1
 80025c6:	0452      	lsls	r2, r2, #17
 80025c8:	0c52      	lsrs	r2, r2, #17
 80025ca:	801a      	strh	r2, [r3, #0]
        if (len > sizeof(rxBuf))
 80025cc:	187b      	adds	r3, r7, r1
 80025ce:	881a      	ldrh	r2, [r3, #0]
 80025d0:	23c0      	movs	r3, #192	; 0xc0
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d904      	bls.n	80025e2 <HAL_I2C_MasterRxCpltCallback+0x4e>
        {
            // read only what will fit in rxBuf
            payloadLen = sizeof(rxBuf);
 80025d8:	4b1b      	ldr	r3, [pc, #108]	; (8002648 <HAL_I2C_MasterRxCpltCallback+0xb4>)
 80025da:	22c0      	movs	r2, #192	; 0xc0
 80025dc:	0052      	lsls	r2, r2, #1
 80025de:	801a      	strh	r2, [r3, #0]
 80025e0:	e004      	b.n	80025ec <HAL_I2C_MasterRxCpltCallback+0x58>
        }
        else
        {
            payloadLen = len;
 80025e2:	4b19      	ldr	r3, [pc, #100]	; (8002648 <HAL_I2C_MasterRxCpltCallback+0xb4>)
 80025e4:	220c      	movs	r2, #12
 80025e6:	18ba      	adds	r2, r7, r2
 80025e8:	8812      	ldrh	r2, [r2, #0]
 80025ea:	801a      	strh	r2, [r3, #0]
        }

        hdrBufLen = READ_LEN;
 80025ec:	4b17      	ldr	r3, [pc, #92]	; (800264c <HAL_I2C_MasterRxCpltCallback+0xb8>)
 80025ee:	2204      	movs	r2, #4
 80025f0:	601a      	str	r2, [r3, #0]
        i2cBusState = BUS_GOT_LEN;
 80025f2:	4b13      	ldr	r3, [pc, #76]	; (8002640 <HAL_I2C_MasterRxCpltCallback+0xac>)
 80025f4:	2203      	movs	r2, #3
 80025f6:	701a      	strb	r2, [r3, #0]
        // Transition back to idle state
        hdrBufLen = 0;
        rxBufLen = payloadLen;
        i2cBusState = BUS_IDLE;
    }
}
 80025f8:	e01d      	b.n	8002636 <HAL_I2C_MasterRxCpltCallback+0xa2>
    else if (busState == BUS_READING_TRANSFER)
 80025fa:	230f      	movs	r3, #15
 80025fc:	18fb      	adds	r3, r7, r3
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b04      	cmp	r3, #4
 8002602:	d108      	bne.n	8002616 <HAL_I2C_MasterRxCpltCallback+0x82>
        rxBufLen = payloadLen;
 8002604:	4b10      	ldr	r3, [pc, #64]	; (8002648 <HAL_I2C_MasterRxCpltCallback+0xb4>)
 8002606:	881b      	ldrh	r3, [r3, #0]
 8002608:	001a      	movs	r2, r3
 800260a:	4b11      	ldr	r3, [pc, #68]	; (8002650 <HAL_I2C_MasterRxCpltCallback+0xbc>)
 800260c:	601a      	str	r2, [r3, #0]
        i2cBusState = BUS_IDLE;
 800260e:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <HAL_I2C_MasterRxCpltCallback+0xac>)
 8002610:	2201      	movs	r2, #1
 8002612:	701a      	strb	r2, [r3, #0]
}
 8002614:	e00f      	b.n	8002636 <HAL_I2C_MasterRxCpltCallback+0xa2>
    else if (busState == BUS_READING_DFU)
 8002616:	230f      	movs	r3, #15
 8002618:	18fb      	adds	r3, r7, r3
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b06      	cmp	r3, #6
 800261e:	d10a      	bne.n	8002636 <HAL_I2C_MasterRxCpltCallback+0xa2>
        hdrBufLen = 0;
 8002620:	4b0a      	ldr	r3, [pc, #40]	; (800264c <HAL_I2C_MasterRxCpltCallback+0xb8>)
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
        rxBufLen = payloadLen;
 8002626:	4b08      	ldr	r3, [pc, #32]	; (8002648 <HAL_I2C_MasterRxCpltCallback+0xb4>)
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	001a      	movs	r2, r3
 800262c:	4b08      	ldr	r3, [pc, #32]	; (8002650 <HAL_I2C_MasterRxCpltCallback+0xbc>)
 800262e:	601a      	str	r2, [r3, #0]
        i2cBusState = BUS_IDLE;
 8002630:	4b03      	ldr	r3, [pc, #12]	; (8002640 <HAL_I2C_MasterRxCpltCallback+0xac>)
 8002632:	2201      	movs	r2, #1
 8002634:	701a      	strb	r2, [r3, #0]
}
 8002636:	46c0      	nop			; (mov r8, r8)
 8002638:	46bd      	mov	sp, r7
 800263a:	b004      	add	sp, #16
 800263c:	bd80      	pop	{r7, pc}
 800263e:	46c0      	nop			; (mov r8, r8)
 8002640:	200000e8 	.word	0x200000e8
 8002644:	20000274 	.word	0x20000274
 8002648:	2000027c 	.word	0x2000027c
 800264c:	20000278 	.word	0x20000278
 8002650:	20000270 	.word	0x20000270

08002654 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *i2c)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
    // read bus state just once for consistency.
    enum BusState_e busState = i2cBusState;
 800265c:	210f      	movs	r1, #15
 800265e:	187b      	adds	r3, r7, r1
 8002660:	4a0b      	ldr	r2, [pc, #44]	; (8002690 <HAL_I2C_MasterTxCpltCallback+0x3c>)
 8002662:	7812      	ldrb	r2, [r2, #0]
 8002664:	701a      	strb	r2, [r3, #0]
    
    if (busState == BUS_WRITING)
 8002666:	187b      	adds	r3, r7, r1
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2b05      	cmp	r3, #5
 800266c:	d103      	bne.n	8002676 <HAL_I2C_MasterTxCpltCallback+0x22>
    {
        // Switch back to bus idle
        i2cBusState = BUS_IDLE;
 800266e:	4b08      	ldr	r3, [pc, #32]	; (8002690 <HAL_I2C_MasterTxCpltCallback+0x3c>)
 8002670:	2201      	movs	r2, #1
 8002672:	701a      	strb	r2, [r3, #0]
    else if (busState == BUS_WRITING_DFU)
    {
        // Switch back to bus idle
        i2cBusState = BUS_IDLE;
    }
}
 8002674:	e007      	b.n	8002686 <HAL_I2C_MasterTxCpltCallback+0x32>
    else if (busState == BUS_WRITING_DFU)
 8002676:	230f      	movs	r3, #15
 8002678:	18fb      	adds	r3, r7, r3
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b07      	cmp	r3, #7
 800267e:	d102      	bne.n	8002686 <HAL_I2C_MasterTxCpltCallback+0x32>
        i2cBusState = BUS_IDLE;
 8002680:	4b03      	ldr	r3, [pc, #12]	; (8002690 <HAL_I2C_MasterTxCpltCallback+0x3c>)
 8002682:	2201      	movs	r2, #1
 8002684:	701a      	strb	r2, [r3, #0]
}
 8002686:	46c0      	nop			; (mov r8, r8)
 8002688:	46bd      	mov	sp, r7
 800268a:	b004      	add	sp, #16
 800268c:	bd80      	pop	{r7, pc}
 800268e:	46c0      	nop			; (mov r8, r8)
 8002690:	200000e8 	.word	0x200000e8

08002694 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *i2c)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
    // Assume we will abort this operation.
    // (Gets reset if we determine we will retry.)
    bool abort = true;
 800269c:	230f      	movs	r3, #15
 800269e:	18fb      	adds	r3, r7, r3
 80026a0:	2201      	movs	r2, #1
 80026a2:	701a      	strb	r2, [r3, #0]

    if (i2cRetries < MAX_RETRIES) {
 80026a4:	4b29      	ldr	r3, [pc, #164]	; (800274c <HAL_I2C_ErrorCallback+0xb8>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	dc39      	bgt.n	8002720 <HAL_I2C_ErrorCallback+0x8c>
        // Re-issue the I2C operation
        i2cRetries++;
 80026ac:	4b27      	ldr	r3, [pc, #156]	; (800274c <HAL_I2C_ErrorCallback+0xb8>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	1c5a      	adds	r2, r3, #1
 80026b2:	4b26      	ldr	r3, [pc, #152]	; (800274c <HAL_I2C_ErrorCallback+0xb8>)
 80026b4:	601a      	str	r2, [r3, #0]

        switch (i2cBusState) {
 80026b6:	4b26      	ldr	r3, [pc, #152]	; (8002750 <HAL_I2C_ErrorCallback+0xbc>)
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b07      	cmp	r3, #7
 80026be:	d82e      	bhi.n	800271e <HAL_I2C_ErrorCallback+0x8a>
 80026c0:	009a      	lsls	r2, r3, #2
 80026c2:	4b24      	ldr	r3, [pc, #144]	; (8002754 <HAL_I2C_ErrorCallback+0xc0>)
 80026c4:	18d3      	adds	r3, r2, r3
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	469f      	mov	pc, r3
            case BUS_WRITING:
            case BUS_WRITING_DFU:
                // Set up write operation
                delay_us(I2C_WRITE_DELAY_US);
 80026ca:	200a      	movs	r0, #10
 80026cc:	f7ff ff28 	bl	8002520 <delay_us>
                HAL_I2C_Master_Transmit_IT(i2c, i2cAddr, txBuf, txBufLen);
 80026d0:	4b21      	ldr	r3, [pc, #132]	; (8002758 <HAL_I2C_ErrorCallback+0xc4>)
 80026d2:	8819      	ldrh	r1, [r3, #0]
 80026d4:	4b21      	ldr	r3, [pc, #132]	; (800275c <HAL_I2C_ErrorCallback+0xc8>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	b29b      	uxth	r3, r3
 80026da:	4a21      	ldr	r2, [pc, #132]	; (8002760 <HAL_I2C_ErrorCallback+0xcc>)
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f005 fc43 	bl	8007f68 <HAL_I2C_Master_Transmit_IT>
                abort = false;
 80026e2:	230f      	movs	r3, #15
 80026e4:	18fb      	adds	r3, r7, r3
 80026e6:	2200      	movs	r2, #0
 80026e8:	701a      	strb	r2, [r3, #0]
                break;
 80026ea:	e019      	b.n	8002720 <HAL_I2C_ErrorCallback+0x8c>
            case BUS_READING_LEN:
                // Restart Read operation for header
                HAL_I2C_Master_Receive_IT(i2c, i2cAddr, hdrBuf, READ_LEN);
 80026ec:	4b1a      	ldr	r3, [pc, #104]	; (8002758 <HAL_I2C_ErrorCallback+0xc4>)
 80026ee:	8819      	ldrh	r1, [r3, #0]
 80026f0:	4a1c      	ldr	r2, [pc, #112]	; (8002764 <HAL_I2C_ErrorCallback+0xd0>)
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	2304      	movs	r3, #4
 80026f6:	f005 fcb3 	bl	8008060 <HAL_I2C_Master_Receive_IT>
                abort = false;
 80026fa:	230f      	movs	r3, #15
 80026fc:	18fb      	adds	r3, r7, r3
 80026fe:	2200      	movs	r2, #0
 8002700:	701a      	strb	r2, [r3, #0]
                break;
 8002702:	e00d      	b.n	8002720 <HAL_I2C_ErrorCallback+0x8c>
            case BUS_READING_TRANSFER:
            case BUS_READING_DFU:
                // Restart read operation for transfer
                HAL_I2C_Master_Receive_IT(i2c, i2cAddr, rxBuf, payloadLen);
 8002704:	4b14      	ldr	r3, [pc, #80]	; (8002758 <HAL_I2C_ErrorCallback+0xc4>)
 8002706:	8819      	ldrh	r1, [r3, #0]
 8002708:	4b17      	ldr	r3, [pc, #92]	; (8002768 <HAL_I2C_ErrorCallback+0xd4>)
 800270a:	881b      	ldrh	r3, [r3, #0]
 800270c:	4a17      	ldr	r2, [pc, #92]	; (800276c <HAL_I2C_ErrorCallback+0xd8>)
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f005 fca6 	bl	8008060 <HAL_I2C_Master_Receive_IT>
                abort = false;
 8002714:	230f      	movs	r3, #15
 8002716:	18fb      	adds	r3, r7, r3
 8002718:	2200      	movs	r2, #0
 800271a:	701a      	strb	r2, [r3, #0]
                break;
 800271c:	e000      	b.n	8002720 <HAL_I2C_ErrorCallback+0x8c>
            default:
                // No operation in progress from other states.
                break;
 800271e:	46c0      	nop			; (mov r8, r8)
        }
    }

    // If we didn't retry above, we should abort now.
    if (abort) {
 8002720:	230f      	movs	r3, #15
 8002722:	18fb      	adds	r3, r7, r3
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00b      	beq.n	8002742 <HAL_I2C_ErrorCallback+0xae>
        hdrBufLen = 0;
 800272a:	4b11      	ldr	r3, [pc, #68]	; (8002770 <HAL_I2C_ErrorCallback+0xdc>)
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
        rxBufLen = 0;
 8002730:	4b10      	ldr	r3, [pc, #64]	; (8002774 <HAL_I2C_ErrorCallback+0xe0>)
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
        txBufLen = 0;
 8002736:	4b09      	ldr	r3, [pc, #36]	; (800275c <HAL_I2C_ErrorCallback+0xc8>)
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
        i2cBusState = BUS_IDLE;
 800273c:	4b04      	ldr	r3, [pc, #16]	; (8002750 <HAL_I2C_ErrorCallback+0xbc>)
 800273e:	2201      	movs	r2, #1
 8002740:	701a      	strb	r2, [r3, #0]
    }
}
 8002742:	46c0      	nop			; (mov r8, r8)
 8002744:	46bd      	mov	sp, r7
 8002746:	b004      	add	sp, #16
 8002748:	bd80      	pop	{r7, pc}
 800274a:	46c0      	nop			; (mov r8, r8)
 800274c:	20000388 	.word	0x20000388
 8002750:	200000e8 	.word	0x200000e8
 8002754:	0800abcc 	.word	0x0800abcc
 8002758:	2000038c 	.word	0x2000038c
 800275c:	20000380 	.word	0x20000380
 8002760:	20000280 	.word	0x20000280
 8002764:	20000274 	.word	0x20000274
 8002768:	2000027c 	.word	0x2000027c
 800276c:	200000f0 	.word	0x200000f0
 8002770:	20000278 	.word	0x20000278
 8002774:	20000270 	.word	0x20000270

08002778 <shtp_i2c_hal_open>:

// ------------------------------------------------------------------------
// SH2 HAL Methods

static int shtp_i2c_hal_open(sh2_Hal_t *self_)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
    // cast sh2_hal_t pointer to i2c_hal_t
    i2c_hal_t *self = (i2c_hal_t *)self_;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	60fb      	str	r3, [r7, #12]

    if (isOpen)
 8002784:	4b28      	ldr	r3, [pc, #160]	; (8002828 <shtp_i2c_hal_open+0xb0>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d002      	beq.n	8002792 <shtp_i2c_hal_open+0x1a>
    {
        return SH2_ERR;
 800278c:	2301      	movs	r3, #1
 800278e:	425b      	negs	r3, r3
 8002790:	e046      	b.n	8002820 <shtp_i2c_hal_open+0xa8>
    }

    i2cBusState = BUS_INIT;
 8002792:	4b26      	ldr	r3, [pc, #152]	; (800282c <shtp_i2c_hal_open+0xb4>)
 8002794:	2200      	movs	r2, #0
 8002796:	701a      	strb	r2, [r3, #0]
    i2cAddr = self->i2c_addr << 1;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	7d5b      	ldrb	r3, [r3, #21]
 800279c:	b29b      	uxth	r3, r3
 800279e:	18db      	adds	r3, r3, r3
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	4b23      	ldr	r3, [pc, #140]	; (8002830 <shtp_i2c_hal_open+0xb8>)
 80027a4:	801a      	strh	r2, [r3, #0]

    isOpen = true;
 80027a6:	4b20      	ldr	r3, [pc, #128]	; (8002828 <shtp_i2c_hal_open+0xb0>)
 80027a8:	2201      	movs	r2, #1
 80027aa:	701a      	strb	r2, [r3, #0]

    // Init hardware peripherals
    hal_init_hw();
 80027ac:	f7ff fe50 	bl	8002450 <hal_init_hw>

    // Hold in reset, not for DFU
    rstn(false);
 80027b0:	2000      	movs	r0, #0
 80027b2:	f7ff fe6d 	bl	8002490 <rstn>

    inReset = true;  // will change back to false when INTN serviced
 80027b6:	4b1f      	ldr	r3, [pc, #124]	; (8002834 <shtp_i2c_hal_open+0xbc>)
 80027b8:	2201      	movs	r2, #1
 80027ba:	701a      	strb	r2, [r3, #0]

    // transition to idle state
    i2cBusState = BUS_IDLE;
 80027bc:	4b1b      	ldr	r3, [pc, #108]	; (800282c <shtp_i2c_hal_open+0xb4>)
 80027be:	2201      	movs	r2, #1
 80027c0:	701a      	strb	r2, [r3, #0]

    // Clear rx, tx buffers
    rxBufLen = 0;
 80027c2:	4b1d      	ldr	r3, [pc, #116]	; (8002838 <shtp_i2c_hal_open+0xc0>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
    hdrBufLen = 0;
 80027c8:	4b1c      	ldr	r3, [pc, #112]	; (800283c <shtp_i2c_hal_open+0xc4>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]
    rxDataReady = false;
 80027ce:	4b1c      	ldr	r3, [pc, #112]	; (8002840 <shtp_i2c_hal_open+0xc8>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	701a      	strb	r2, [r3, #0]

    // To boot in SHTP-I2C mode, must have PS1=0, PS0=0.
    // PS1 is set via jumper.
    // PS0 will be 0 if PS0 jumper is 0 OR (PS1 jumper is 1 AND PS0_WAKEN sig is 0)
    // So we set PS0_WAKEN signal to 0 just in case PS1 jumper is in 1 position.
    ps0_waken(false);
 80027d4:	2000      	movs	r0, #0
 80027d6:	f7ff fe6f 	bl	80024b8 <ps0_waken>
    ps1(false);
 80027da:	2000      	movs	r0, #0
 80027dc:	f7ff fe82 	bl	80024e4 <ps1>

    // Set BOOTN according to whether we need to DFU
    bootn(!self->dfu);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	7d1b      	ldrb	r3, [r3, #20]
 80027e4:	1e5a      	subs	r2, r3, #1
 80027e6:	4193      	sbcs	r3, r2
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2201      	movs	r2, #1
 80027ec:	4053      	eors	r3, r2
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	1c1a      	adds	r2, r3, #0
 80027f2:	2301      	movs	r3, #1
 80027f4:	4013      	ands	r3, r2
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	0018      	movs	r0, r3
 80027fa:	f7ff fe35 	bl	8002468 <bootn>

    // Delay for RESET_DELAY_US to ensure reset takes effect
    delay_us(RESET_DELAY_US);
 80027fe:	4b11      	ldr	r3, [pc, #68]	; (8002844 <shtp_i2c_hal_open+0xcc>)
 8002800:	0018      	movs	r0, r3
 8002802:	f7ff fe8d 	bl	8002520 <delay_us>

    enableInts();
 8002806:	f7ff fc99 	bl	800213c <enableInts>

    // Deassert reset
    rstn(1);
 800280a:	2001      	movs	r0, #1
 800280c:	f7ff fe40 	bl	8002490 <rstn>

    // Wait for INTN to be asserted
    reset_delay_us(START_DELAY_US);
 8002810:	4b0d      	ldr	r3, [pc, #52]	; (8002848 <shtp_i2c_hal_open+0xd0>)
 8002812:	0018      	movs	r0, r3
 8002814:	f7ff fe9e 	bl	8002554 <reset_delay_us>

    // Deassert BOOTN after device is done rebooting
    bootn(true);
 8002818:	2001      	movs	r0, #1
 800281a:	f7ff fe25 	bl	8002468 <bootn>

    return SH2_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	0018      	movs	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	b004      	add	sp, #16
 8002826:	bd80      	pop	{r7, pc}
 8002828:	20000048 	.word	0x20000048
 800282c:	200000e8 	.word	0x200000e8
 8002830:	2000038c 	.word	0x2000038c
 8002834:	2000038e 	.word	0x2000038e
 8002838:	20000270 	.word	0x20000270
 800283c:	20000278 	.word	0x20000278
 8002840:	20000384 	.word	0x20000384
 8002844:	00002710 	.word	0x00002710
 8002848:	003d0900 	.word	0x003d0900

0800284c <shtp_i2c_hal_close>:

static void shtp_i2c_hal_close(sh2_Hal_t *self_)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
    i2cBusState = BUS_INIT;
 8002854:	4b17      	ldr	r3, [pc, #92]	; (80028b4 <shtp_i2c_hal_close+0x68>)
 8002856:	2200      	movs	r2, #0
 8002858:	701a      	strb	r2, [r3, #0]
    delay_us(1000);  // Give any in-flight I2C operations a chance to finish.
 800285a:	23fa      	movs	r3, #250	; 0xfa
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	0018      	movs	r0, r3
 8002860:	f7ff fe5e 	bl	8002520 <delay_us>

    // Hold sensor hub in reset
    rstn(false);
 8002864:	2000      	movs	r0, #0
 8002866:	f7ff fe13 	bl	8002490 <rstn>
    bootn(true);
 800286a:	2001      	movs	r0, #1
 800286c:	f7ff fdfc 	bl	8002468 <bootn>

    // Deinit I2C peripheral
    HAL_I2C_DeInit(&i2c);
 8002870:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <shtp_i2c_hal_close+0x6c>)
 8002872:	0018      	movs	r0, r3
 8002874:	f005 fb48 	bl	8007f08 <HAL_I2C_DeInit>

    // Disable interrupts
    disableInts();
 8002878:	f7ff fc6e 	bl	8002158 <disableInts>

    // Deinit timer
    __HAL_TIM_DISABLE(&tim2);
 800287c:	4b0f      	ldr	r3, [pc, #60]	; (80028bc <shtp_i2c_hal_close+0x70>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	4a0f      	ldr	r2, [pc, #60]	; (80028c0 <shtp_i2c_hal_close+0x74>)
 8002884:	4013      	ands	r3, r2
 8002886:	d10d      	bne.n	80028a4 <shtp_i2c_hal_close+0x58>
 8002888:	4b0c      	ldr	r3, [pc, #48]	; (80028bc <shtp_i2c_hal_close+0x70>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	4a0d      	ldr	r2, [pc, #52]	; (80028c4 <shtp_i2c_hal_close+0x78>)
 8002890:	4013      	ands	r3, r2
 8002892:	d107      	bne.n	80028a4 <shtp_i2c_hal_close+0x58>
 8002894:	4b09      	ldr	r3, [pc, #36]	; (80028bc <shtp_i2c_hal_close+0x70>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	4b08      	ldr	r3, [pc, #32]	; (80028bc <shtp_i2c_hal_close+0x70>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2101      	movs	r1, #1
 80028a0:	438a      	bics	r2, r1
 80028a2:	601a      	str	r2, [r3, #0]

    isOpen = false;
 80028a4:	4b08      	ldr	r3, [pc, #32]	; (80028c8 <shtp_i2c_hal_close+0x7c>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	701a      	strb	r2, [r3, #0]
}
 80028aa:	46c0      	nop			; (mov r8, r8)
 80028ac:	46bd      	mov	sp, r7
 80028ae:	b002      	add	sp, #8
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	46c0      	nop			; (mov r8, r8)
 80028b4:	200000e8 	.word	0x200000e8
 80028b8:	20000094 	.word	0x20000094
 80028bc:	2000004c 	.word	0x2000004c
 80028c0:	00001111 	.word	0x00001111
 80028c4:	00000444 	.word	0x00000444
 80028c8:	20000048 	.word	0x20000048

080028cc <shtp_i2c_hal_read>:

static int shtp_i2c_hal_read(sh2_Hal_t *self_, uint8_t *pBuffer, unsigned len, uint32_t *t)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
 80028d8:	603b      	str	r3, [r7, #0]
    int retval = 0;
 80028da:	2300      	movs	r3, #0
 80028dc:	617b      	str	r3, [r7, #20]

    disableInts();
 80028de:	f7ff fc3b 	bl	8002158 <disableInts>
    
    // read bus state just once for consistency.
    enum BusState_e busState = i2cBusState;
 80028e2:	2313      	movs	r3, #19
 80028e4:	18fb      	adds	r3, r7, r3
 80028e6:	4a4b      	ldr	r2, [pc, #300]	; (8002a14 <shtp_i2c_hal_read+0x148>)
 80028e8:	7812      	ldrb	r2, [r2, #0]
 80028ea:	701a      	strb	r2, [r3, #0]

    if (hdrBufLen > 0)
 80028ec:	4b4a      	ldr	r3, [pc, #296]	; (8002a18 <shtp_i2c_hal_read+0x14c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d01d      	beq.n	8002930 <shtp_i2c_hal_read+0x64>
    {
        // There is data in hdrBuf to return to SHTP layer
        if (len < hdrBufLen)
 80028f4:	4b48      	ldr	r3, [pc, #288]	; (8002a18 <shtp_i2c_hal_read+0x14c>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d206      	bcs.n	800290c <shtp_i2c_hal_read+0x40>
        {
            // Client buffer too small!
            // Discard what was read
            hdrBufLen = 0;
 80028fe:	4b46      	ldr	r3, [pc, #280]	; (8002a18 <shtp_i2c_hal_read+0x14c>)
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
            retval = SH2_ERR_BAD_PARAM;
 8002904:	2302      	movs	r3, #2
 8002906:	425b      	negs	r3, r3
 8002908:	617b      	str	r3, [r7, #20]
 800290a:	e032      	b.n	8002972 <shtp_i2c_hal_read+0xa6>
        }
        else
        {
            // Copy data to the client buffer
            memcpy(pBuffer, hdrBuf, hdrBufLen);
 800290c:	4b42      	ldr	r3, [pc, #264]	; (8002a18 <shtp_i2c_hal_read+0x14c>)
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	4942      	ldr	r1, [pc, #264]	; (8002a1c <shtp_i2c_hal_read+0x150>)
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	0018      	movs	r0, r3
 8002916:	f008 f8f9 	bl	800ab0c <memcpy>
            retval = hdrBufLen;
 800291a:	4b3f      	ldr	r3, [pc, #252]	; (8002a18 <shtp_i2c_hal_read+0x14c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	617b      	str	r3, [r7, #20]
            hdrBufLen = 0;
 8002920:	4b3d      	ldr	r3, [pc, #244]	; (8002a18 <shtp_i2c_hal_read+0x14c>)
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
            *t = rxTimestamp_uS;
 8002926:	4b3e      	ldr	r3, [pc, #248]	; (8002a20 <shtp_i2c_hal_read+0x154>)
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	e020      	b.n	8002972 <shtp_i2c_hal_read+0xa6>
        }
    }
    else if (rxBufLen > 0)
 8002930:	4b3c      	ldr	r3, [pc, #240]	; (8002a24 <shtp_i2c_hal_read+0x158>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d01c      	beq.n	8002972 <shtp_i2c_hal_read+0xa6>
    {
        // There is data in rxBuf to return to SHTP layer
        if (len < rxBufLen)
 8002938:	4b3a      	ldr	r3, [pc, #232]	; (8002a24 <shtp_i2c_hal_read+0x158>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	429a      	cmp	r2, r3
 8002940:	d206      	bcs.n	8002950 <shtp_i2c_hal_read+0x84>
        {
            // Client buffer too small!
            // Discard what was read
            rxBufLen = 0;
 8002942:	4b38      	ldr	r3, [pc, #224]	; (8002a24 <shtp_i2c_hal_read+0x158>)
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
            retval = SH2_ERR_BAD_PARAM;
 8002948:	2302      	movs	r3, #2
 800294a:	425b      	negs	r3, r3
 800294c:	617b      	str	r3, [r7, #20]
 800294e:	e010      	b.n	8002972 <shtp_i2c_hal_read+0xa6>
        }
        else
        {
            // Copy data to the client buffer
            memcpy(pBuffer, rxBuf, rxBufLen);
 8002950:	4b34      	ldr	r3, [pc, #208]	; (8002a24 <shtp_i2c_hal_read+0x158>)
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	4934      	ldr	r1, [pc, #208]	; (8002a28 <shtp_i2c_hal_read+0x15c>)
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	0018      	movs	r0, r3
 800295a:	f008 f8d7 	bl	800ab0c <memcpy>
            retval = rxBufLen;
 800295e:	4b31      	ldr	r3, [pc, #196]	; (8002a24 <shtp_i2c_hal_read+0x158>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	617b      	str	r3, [r7, #20]
            rxBufLen = 0;
 8002964:	4b2f      	ldr	r3, [pc, #188]	; (8002a24 <shtp_i2c_hal_read+0x158>)
 8002966:	2200      	movs	r2, #0
 8002968:	601a      	str	r2, [r3, #0]
            *t = rxTimestamp_uS;
 800296a:	4b2d      	ldr	r3, [pc, #180]	; (8002a20 <shtp_i2c_hal_read+0x154>)
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	601a      	str	r2, [r3, #0]
        }
    }
    enableInts();
 8002972:	f7ff fbe3 	bl	800213c <enableInts>

    // if sensor hub asserted INTN, data is ready
    if (rxDataReady)
 8002976:	4b2d      	ldr	r3, [pc, #180]	; (8002a2c <shtp_i2c_hal_read+0x160>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d044      	beq.n	8002a08 <shtp_i2c_hal_read+0x13c>
    {
        if ((busState == BUS_IDLE) && (hdrBufLen == 0))
 800297e:	2313      	movs	r3, #19
 8002980:	18fb      	adds	r3, r7, r3
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d114      	bne.n	80029b2 <shtp_i2c_hal_read+0xe6>
 8002988:	4b23      	ldr	r3, [pc, #140]	; (8002a18 <shtp_i2c_hal_read+0x14c>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d110      	bne.n	80029b2 <shtp_i2c_hal_read+0xe6>
        {
            i2cRetries = 0;
 8002990:	4b27      	ldr	r3, [pc, #156]	; (8002a30 <shtp_i2c_hal_read+0x164>)
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]
            rxDataReady = false;
 8002996:	4b25      	ldr	r3, [pc, #148]	; (8002a2c <shtp_i2c_hal_read+0x160>)
 8002998:	2200      	movs	r2, #0
 800299a:	701a      	strb	r2, [r3, #0]
            i2cBusState = BUS_READING_LEN;
 800299c:	4b1d      	ldr	r3, [pc, #116]	; (8002a14 <shtp_i2c_hal_read+0x148>)
 800299e:	2202      	movs	r2, #2
 80029a0:	701a      	strb	r2, [r3, #0]
            HAL_I2C_Master_Receive_IT(&i2c, i2cAddr, hdrBuf, READ_LEN);
 80029a2:	4b24      	ldr	r3, [pc, #144]	; (8002a34 <shtp_i2c_hal_read+0x168>)
 80029a4:	8819      	ldrh	r1, [r3, #0]
 80029a6:	4a1d      	ldr	r2, [pc, #116]	; (8002a1c <shtp_i2c_hal_read+0x150>)
 80029a8:	4823      	ldr	r0, [pc, #140]	; (8002a38 <shtp_i2c_hal_read+0x16c>)
 80029aa:	2304      	movs	r3, #4
 80029ac:	f005 fb58 	bl	8008060 <HAL_I2C_Master_Receive_IT>
 80029b0:	e02a      	b.n	8002a08 <shtp_i2c_hal_read+0x13c>
        }
        else if ((busState == BUS_GOT_LEN) && (rxBufLen == 0))
 80029b2:	2313      	movs	r3, #19
 80029b4:	18fb      	adds	r3, r7, r3
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	2b03      	cmp	r3, #3
 80029ba:	d125      	bne.n	8002a08 <shtp_i2c_hal_read+0x13c>
 80029bc:	4b19      	ldr	r3, [pc, #100]	; (8002a24 <shtp_i2c_hal_read+0x158>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d121      	bne.n	8002a08 <shtp_i2c_hal_read+0x13c>
        {
          // Copy the header from rxBuf to pBuffer.  retval = READ_LEN
            memcpy(pBuffer, hdrBuf, READ_LEN);
 80029c4:	68ba      	ldr	r2, [r7, #8]
 80029c6:	4b15      	ldr	r3, [pc, #84]	; (8002a1c <shtp_i2c_hal_read+0x150>)
 80029c8:	0010      	movs	r0, r2
 80029ca:	0019      	movs	r1, r3
 80029cc:	2304      	movs	r3, #4
 80029ce:	001a      	movs	r2, r3
 80029d0:	f008 f89c 	bl	800ab0c <memcpy>
            retval = READ_LEN;
 80029d4:	2304      	movs	r3, #4
 80029d6:	617b      	str	r3, [r7, #20]
            hdrBufLen = 0;
 80029d8:	4b0f      	ldr	r3, [pc, #60]	; (8002a18 <shtp_i2c_hal_read+0x14c>)
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]
            *t = rxTimestamp_uS;
 80029de:	4b10      	ldr	r3, [pc, #64]	; (8002a20 <shtp_i2c_hal_read+0x154>)
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	601a      	str	r2, [r3, #0]
            
            i2cRetries = 0;
 80029e6:	4b12      	ldr	r3, [pc, #72]	; (8002a30 <shtp_i2c_hal_read+0x164>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
            rxDataReady = false;
 80029ec:	4b0f      	ldr	r3, [pc, #60]	; (8002a2c <shtp_i2c_hal_read+0x160>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	701a      	strb	r2, [r3, #0]
            i2cBusState = BUS_READING_TRANSFER;
 80029f2:	4b08      	ldr	r3, [pc, #32]	; (8002a14 <shtp_i2c_hal_read+0x148>)
 80029f4:	2204      	movs	r2, #4
 80029f6:	701a      	strb	r2, [r3, #0]
            HAL_I2C_Master_Receive_IT(&i2c, i2cAddr, rxBuf, payloadLen);
 80029f8:	4b0e      	ldr	r3, [pc, #56]	; (8002a34 <shtp_i2c_hal_read+0x168>)
 80029fa:	8819      	ldrh	r1, [r3, #0]
 80029fc:	4b0f      	ldr	r3, [pc, #60]	; (8002a3c <shtp_i2c_hal_read+0x170>)
 80029fe:	881b      	ldrh	r3, [r3, #0]
 8002a00:	4a09      	ldr	r2, [pc, #36]	; (8002a28 <shtp_i2c_hal_read+0x15c>)
 8002a02:	480d      	ldr	r0, [pc, #52]	; (8002a38 <shtp_i2c_hal_read+0x16c>)
 8002a04:	f005 fb2c 	bl	8008060 <HAL_I2C_Master_Receive_IT>
        }
    }

    return retval;
 8002a08:	697b      	ldr	r3, [r7, #20]
}
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	b006      	add	sp, #24
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	46c0      	nop			; (mov r8, r8)
 8002a14:	200000e8 	.word	0x200000e8
 8002a18:	20000278 	.word	0x20000278
 8002a1c:	20000274 	.word	0x20000274
 8002a20:	200000ec 	.word	0x200000ec
 8002a24:	20000270 	.word	0x20000270
 8002a28:	200000f0 	.word	0x200000f0
 8002a2c:	20000384 	.word	0x20000384
 8002a30:	20000388 	.word	0x20000388
 8002a34:	2000038c 	.word	0x2000038c
 8002a38:	20000094 	.word	0x20000094
 8002a3c:	2000027c 	.word	0x2000027c

08002a40 <shtp_i2c_hal_write>:

static int shtp_i2c_hal_write(sh2_Hal_t *self, uint8_t *pBuffer, unsigned len)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
    int retval = 0;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	617b      	str	r3, [r7, #20]

    // Validate parameters
    if ((pBuffer == 0) || (len == 0) || (len > sizeof(txBuf)))
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d007      	beq.n	8002a66 <shtp_i2c_hal_write+0x26>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d004      	beq.n	8002a66 <shtp_i2c_hal_write+0x26>
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	2380      	movs	r3, #128	; 0x80
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d902      	bls.n	8002a6c <shtp_i2c_hal_write+0x2c>
    {
        return SH2_ERR_BAD_PARAM;
 8002a66:	2302      	movs	r3, #2
 8002a68:	425b      	negs	r3, r3
 8002a6a:	e026      	b.n	8002aba <shtp_i2c_hal_write+0x7a>
    }

    // Disable I2C Interrupt for a moment so busState can't change
    disableI2cInts();
 8002a6c:	f7ff fb8d 	bl	800218a <disableI2cInts>

    if (i2cBusState == BUS_IDLE)
 8002a70:	4b14      	ldr	r3, [pc, #80]	; (8002ac4 <shtp_i2c_hal_write+0x84>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d11c      	bne.n	8002ab4 <shtp_i2c_hal_write+0x74>
    {
        i2cBusState = BUS_WRITING;
 8002a7a:	4b12      	ldr	r3, [pc, #72]	; (8002ac4 <shtp_i2c_hal_write+0x84>)
 8002a7c:	2205      	movs	r2, #5
 8002a7e:	701a      	strb	r2, [r3, #0]

        // Set up write operation
        i2cRetries = 0;
 8002a80:	4b11      	ldr	r3, [pc, #68]	; (8002ac8 <shtp_i2c_hal_write+0x88>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	601a      	str	r2, [r3, #0]
        txBufLen = len;
 8002a86:	4b11      	ldr	r3, [pc, #68]	; (8002acc <shtp_i2c_hal_write+0x8c>)
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	601a      	str	r2, [r3, #0]
        memcpy(txBuf, pBuffer, len);
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	68b9      	ldr	r1, [r7, #8]
 8002a90:	4b0f      	ldr	r3, [pc, #60]	; (8002ad0 <shtp_i2c_hal_write+0x90>)
 8002a92:	0018      	movs	r0, r3
 8002a94:	f008 f83a 	bl	800ab0c <memcpy>
        delay_us(I2C_WRITE_DELAY_US);
 8002a98:	200a      	movs	r0, #10
 8002a9a:	f7ff fd41 	bl	8002520 <delay_us>
        HAL_I2C_Master_Transmit_IT(&i2c, i2cAddr, txBuf, txBufLen);
 8002a9e:	4b0d      	ldr	r3, [pc, #52]	; (8002ad4 <shtp_i2c_hal_write+0x94>)
 8002aa0:	8819      	ldrh	r1, [r3, #0]
 8002aa2:	4b0a      	ldr	r3, [pc, #40]	; (8002acc <shtp_i2c_hal_write+0x8c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	4a09      	ldr	r2, [pc, #36]	; (8002ad0 <shtp_i2c_hal_write+0x90>)
 8002aaa:	480b      	ldr	r0, [pc, #44]	; (8002ad8 <shtp_i2c_hal_write+0x98>)
 8002aac:	f005 fa5c 	bl	8007f68 <HAL_I2C_Master_Transmit_IT>

        retval = len;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	617b      	str	r3, [r7, #20]
    }

    // re-enable interrupts
    enableI2cInts();
 8002ab4:	f7ff fb5e 	bl	8002174 <enableI2cInts>

    return retval;
 8002ab8:	697b      	ldr	r3, [r7, #20]
}
 8002aba:	0018      	movs	r0, r3
 8002abc:	46bd      	mov	sp, r7
 8002abe:	b006      	add	sp, #24
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	46c0      	nop			; (mov r8, r8)
 8002ac4:	200000e8 	.word	0x200000e8
 8002ac8:	20000388 	.word	0x20000388
 8002acc:	20000380 	.word	0x20000380
 8002ad0:	20000280 	.word	0x20000280
 8002ad4:	2000038c 	.word	0x2000038c
 8002ad8:	20000094 	.word	0x20000094

08002adc <shtp_i2c_hal_getTimeUs>:

static uint32_t shtp_i2c_hal_getTimeUs(sh2_Hal_t *self)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
    return timeNowUs();
 8002ae4:	f7ff fd12 	bl	800250c <timeNowUs>
 8002ae8:	0003      	movs	r3, r0
}
 8002aea:	0018      	movs	r0, r3
 8002aec:	46bd      	mov	sp, r7
 8002aee:	b002      	add	sp, #8
 8002af0:	bd80      	pop	{r7, pc}
	...

08002af4 <shtp_i2c_hal_init>:
{
    return timeNowUs();
}

sh2_Hal_t *shtp_i2c_hal_init(i2c_hal_t *pHal, bool dfu, uint8_t addr)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	0008      	movs	r0, r1
 8002afe:	0011      	movs	r1, r2
 8002b00:	1cfb      	adds	r3, r7, #3
 8002b02:	1c02      	adds	r2, r0, #0
 8002b04:	701a      	strb	r2, [r3, #0]
 8002b06:	1cbb      	adds	r3, r7, #2
 8002b08:	1c0a      	adds	r2, r1, #0
 8002b0a:	701a      	strb	r2, [r3, #0]
    pHal->dfu = dfu;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	1cfa      	adds	r2, r7, #3
 8002b10:	7812      	ldrb	r2, [r2, #0]
 8002b12:	751a      	strb	r2, [r3, #20]
    pHal->i2c_addr = addr;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	1cba      	adds	r2, r7, #2
 8002b18:	7812      	ldrb	r2, [r2, #0]
 8002b1a:	755a      	strb	r2, [r3, #21]

    pHal->sh2_hal.open = shtp_i2c_hal_open;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a09      	ldr	r2, [pc, #36]	; (8002b44 <shtp_i2c_hal_init+0x50>)
 8002b20:	601a      	str	r2, [r3, #0]
    pHal->sh2_hal.close = shtp_i2c_hal_close;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a08      	ldr	r2, [pc, #32]	; (8002b48 <shtp_i2c_hal_init+0x54>)
 8002b26:	605a      	str	r2, [r3, #4]
    pHal->sh2_hal.read = shtp_i2c_hal_read;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a08      	ldr	r2, [pc, #32]	; (8002b4c <shtp_i2c_hal_init+0x58>)
 8002b2c:	609a      	str	r2, [r3, #8]
    pHal->sh2_hal.write = shtp_i2c_hal_write;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a07      	ldr	r2, [pc, #28]	; (8002b50 <shtp_i2c_hal_init+0x5c>)
 8002b32:	60da      	str	r2, [r3, #12]
    pHal->sh2_hal.getTimeUs = shtp_i2c_hal_getTimeUs;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a07      	ldr	r2, [pc, #28]	; (8002b54 <shtp_i2c_hal_init+0x60>)
 8002b38:	611a      	str	r2, [r3, #16]

    return &pHal->sh2_hal;
 8002b3a:	687b      	ldr	r3, [r7, #4]
}
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	b002      	add	sp, #8
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	08002779 	.word	0x08002779
 8002b48:	0800284d 	.word	0x0800284d
 8002b4c:	080028cd 	.word	0x080028cd
 8002b50:	08002a41 	.word	0x08002a41
 8002b54:	08002add 	.word	0x08002add

08002b58 <HAL_TIM_PeriodElapsedCallback>:
  return 1;
}

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
    // if (!ADC_CAN_Package(S1_Pin) || HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
    // {
    //   Error_Handler();
    // }
  }
}
 8002b60:	46c0      	nop			; (mov r8, r8)
 8002b62:	46bd      	mov	sp, r7
 8002b64:	b002      	add	sp, #8
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <sensorCallback>:

// Callback: Sensor Hub has data to read
void sensorCallback(void *cookie, sh2_SensorEvent_t *event)
{
 8002b68:	b590      	push	{r4, r7, lr}
 8002b6a:	b095      	sub	sp, #84	; 0x54
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  sh2_SensorValue_t value;
  float x, y, z;
  float t;
  static int skip = 0;

  rc = sh2_decodeSensorEvent(&value, event);
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	2408      	movs	r4, #8
 8002b76:	193b      	adds	r3, r7, r4
 8002b78:	0011      	movs	r1, r2
 8002b7a:	0018      	movs	r0, r3
 8002b7c:	f000 ffde 	bl	8003b3c <sh2_decodeSensorEvent>
 8002b80:	0003      	movs	r3, r0
 8002b82:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (rc != SH2_OK) {
 8002b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d175      	bne.n	8002c76 <sensorCallback+0x10e>
      return;
  }

  t = value.timestamp / 1000000.0;
 8002b8a:	193b      	adds	r3, r7, r4
 8002b8c:	689a      	ldr	r2, [r3, #8]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	0010      	movs	r0, r2
 8002b92:	0019      	movs	r1, r3
 8002b94:	f7fd fc58 	bl	8000448 <__aeabi_ul2d>
 8002b98:	2200      	movs	r2, #0
 8002b9a:	4b3a      	ldr	r3, [pc, #232]	; (8002c84 <sensorCallback+0x11c>)
 8002b9c:	f7fe fb2a 	bl	80011f4 <__aeabi_ddiv>
 8002ba0:	0002      	movs	r2, r0
 8002ba2:	000b      	movs	r3, r1
 8002ba4:	0010      	movs	r0, r2
 8002ba6:	0019      	movs	r1, r3
 8002ba8:	f7ff f8fa 	bl	8001da0 <__aeabi_d2f>
 8002bac:	1c03      	adds	r3, r0, #0
 8002bae:	64bb      	str	r3, [r7, #72]	; 0x48

  // package and send data over can
  switch (value.sensorId) {
 8002bb0:	193b      	adds	r3, r7, r4
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d161      	bne.n	8002c7c <sensorCallback+0x114>
    case SH2_ACCELEROMETER:
      x = value.un.accelerometer.x;
 8002bb8:	193b      	adds	r3, r7, r4
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	647b      	str	r3, [r7, #68]	; 0x44
      y = value.un.accelerometer.y;
 8002bbe:	193b      	adds	r3, r7, r4
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	643b      	str	r3, [r7, #64]	; 0x40
      z = value.un.accelerometer.z;
 8002bc4:	193b      	adds	r3, r7, r4
 8002bc6:	69db      	ldr	r3, [r3, #28]
 8002bc8:	63fb      	str	r3, [r7, #60]	; 0x3c

      TxData[0] = (uint8_t)x >> 8;
 8002bca:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002bcc:	f7fd fc24 	bl	8000418 <__aeabi_f2uiz>
 8002bd0:	0003      	movs	r3, r0
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	121b      	asrs	r3, r3, #8
 8002bd6:	b2da      	uxtb	r2, r3
 8002bd8:	4b2b      	ldr	r3, [pc, #172]	; (8002c88 <sensorCallback+0x120>)
 8002bda:	701a      	strb	r2, [r3, #0]
      TxData[1] = (uint8_t)x;
 8002bdc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002bde:	f7fd fc1b 	bl	8000418 <__aeabi_f2uiz>
 8002be2:	0003      	movs	r3, r0
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	4b28      	ldr	r3, [pc, #160]	; (8002c88 <sensorCallback+0x120>)
 8002be8:	705a      	strb	r2, [r3, #1]
      TxData[2] = (uint8_t)y >> 8;
 8002bea:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002bec:	f7fd fc14 	bl	8000418 <__aeabi_f2uiz>
 8002bf0:	0003      	movs	r3, r0
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	121b      	asrs	r3, r3, #8
 8002bf6:	b2da      	uxtb	r2, r3
 8002bf8:	4b23      	ldr	r3, [pc, #140]	; (8002c88 <sensorCallback+0x120>)
 8002bfa:	709a      	strb	r2, [r3, #2]
      TxData[3] = (uint8_t)y;
 8002bfc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002bfe:	f7fd fc0b 	bl	8000418 <__aeabi_f2uiz>
 8002c02:	0003      	movs	r3, r0
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	4b20      	ldr	r3, [pc, #128]	; (8002c88 <sensorCallback+0x120>)
 8002c08:	70da      	strb	r2, [r3, #3]
      TxData[4] = (uint8_t)z >> 8;
 8002c0a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002c0c:	f7fd fc04 	bl	8000418 <__aeabi_f2uiz>
 8002c10:	0003      	movs	r3, r0
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	121b      	asrs	r3, r3, #8
 8002c16:	b2da      	uxtb	r2, r3
 8002c18:	4b1b      	ldr	r3, [pc, #108]	; (8002c88 <sensorCallback+0x120>)
 8002c1a:	711a      	strb	r2, [r3, #4]
      TxData[5] = (uint8_t)z;
 8002c1c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002c1e:	f7fd fbfb 	bl	8000418 <__aeabi_f2uiz>
 8002c22:	0003      	movs	r3, r0
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	4b18      	ldr	r3, [pc, #96]	; (8002c88 <sensorCallback+0x120>)
 8002c28:	715a      	strb	r2, [r3, #5]
      TxData[6] = (uint8_t)t >> 8;
 8002c2a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002c2c:	f7fd fbf4 	bl	8000418 <__aeabi_f2uiz>
 8002c30:	0003      	movs	r3, r0
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	121b      	asrs	r3, r3, #8
 8002c36:	b2da      	uxtb	r2, r3
 8002c38:	4b13      	ldr	r3, [pc, #76]	; (8002c88 <sensorCallback+0x120>)
 8002c3a:	719a      	strb	r2, [r3, #6]
      TxData[7] = (uint8_t)t;
 8002c3c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002c3e:	f7fd fbeb 	bl	8000418 <__aeabi_f2uiz>
 8002c42:	0003      	movs	r3, r0
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	4b10      	ldr	r3, [pc, #64]	; (8002c88 <sensorCallback+0x120>)
 8002c48:	71da      	strb	r2, [r3, #7]

      if (skip++ % 100 == 0) {
 8002c4a:	4b10      	ldr	r3, [pc, #64]	; (8002c8c <sensorCallback+0x124>)
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	1c51      	adds	r1, r2, #1
 8002c50:	4b0e      	ldr	r3, [pc, #56]	; (8002c8c <sensorCallback+0x124>)
 8002c52:	6019      	str	r1, [r3, #0]
 8002c54:	2164      	movs	r1, #100	; 0x64
 8002c56:	0010      	movs	r0, r2
 8002c58:	f7fd fbd8 	bl	800040c <__aeabi_idivmod>
 8002c5c:	1e0b      	subs	r3, r1, #0
 8002c5e:	d10c      	bne.n	8002c7a <sensorCallback+0x112>
        if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8002c60:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <sensorCallback+0x128>)
 8002c62:	4a09      	ldr	r2, [pc, #36]	; (8002c88 <sensorCallback+0x120>)
 8002c64:	490b      	ldr	r1, [pc, #44]	; (8002c94 <sensorCallback+0x12c>)
 8002c66:	480c      	ldr	r0, [pc, #48]	; (8002c98 <sensorCallback+0x130>)
 8002c68:	f004 f9ee 	bl	8007048 <HAL_CAN_AddTxMessage>
 8002c6c:	1e03      	subs	r3, r0, #0
 8002c6e:	d004      	beq.n	8002c7a <sensorCallback+0x112>
        {
          Error_Handler();
 8002c70:	f000 fa8e 	bl	8003190 <Error_Handler>
        }
      }

      break;
 8002c74:	e001      	b.n	8002c7a <sensorCallback+0x112>
      return;
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	e000      	b.n	8002c7c <sensorCallback+0x114>
      break;
 8002c7a:	46c0      	nop			; (mov r8, r8)
  }

}
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	b015      	add	sp, #84	; 0x54
 8002c80:	bd90      	pop	{r4, r7, pc}
 8002c82:	46c0      	nop			; (mov r8, r8)
 8002c84:	412e8480 	.word	0x412e8480
 8002c88:	20000570 	.word	0x20000570
 8002c8c:	2000059c 	.word	0x2000059c
 8002c90:	20000578 	.word	0x20000578
 8002c94:	20000558 	.word	0x20000558
 8002c98:	20000414 	.word	0x20000414

08002c9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  TxHeader.StdId = 0x321;
 8002ca0:	4b1c      	ldr	r3, [pc, #112]	; (8002d14 <main+0x78>)
 8002ca2:	4a1d      	ldr	r2, [pc, #116]	; (8002d18 <main+0x7c>)
 8002ca4:	601a      	str	r2, [r3, #0]
  TxHeader.ExtId = 0;
 8002ca6:	4b1b      	ldr	r3, [pc, #108]	; (8002d14 <main+0x78>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	605a      	str	r2, [r3, #4]
  TxHeader.RTR = CAN_RTR_DATA;
 8002cac:	4b19      	ldr	r3, [pc, #100]	; (8002d14 <main+0x78>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 8002cb2:	4b18      	ldr	r3, [pc, #96]	; (8002d14 <main+0x78>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 8;
 8002cb8:	4b16      	ldr	r3, [pc, #88]	; (8002d14 <main+0x78>)
 8002cba:	2208      	movs	r2, #8
 8002cbc:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8002cbe:	4b15      	ldr	r3, [pc, #84]	; (8002d14 <main+0x78>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	751a      	strb	r2, [r3, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002cc4:	f003 faea 	bl	800629c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002cc8:	f000 f830 	bl	8002d2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ccc:	f000 fa0a 	bl	80030e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002cd0:	f000 f9e2 	bl	8003098 <MX_DMA_Init>
  MX_CAN_Init();
 8002cd4:	f000 f908 	bl	8002ee8 <MX_CAN_Init>
  MX_ADC_Init();
 8002cd8:	f000 f882 	bl	8002de0 <MX_ADC_Init>
  MX_TIM16_Init();
 8002cdc:	f000 f9a6 	bl	800302c <MX_TIM16_Init>
  MX_I2C1_Init();
 8002ce0:	f000 f964 	bl	8002fac <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_ADC_Start_DMA(&hadc, (uint32_t *)ADC_DMA_BUFF, NUM_ADC_CHANNELS * AVG_PER_CHANNEL) != HAL_OK)
 8002ce4:	490d      	ldr	r1, [pc, #52]	; (8002d1c <main+0x80>)
 8002ce6:	4b0e      	ldr	r3, [pc, #56]	; (8002d20 <main+0x84>)
 8002ce8:	2210      	movs	r2, #16
 8002cea:	0018      	movs	r0, r3
 8002cec:	f003 fc7a 	bl	80065e4 <HAL_ADC_Start_DMA>
 8002cf0:	1e03      	subs	r3, r0, #0
 8002cf2:	d001      	beq.n	8002cf8 <main+0x5c>
  {
    Error_Handler();
 8002cf4:	f000 fa4c 	bl	8003190 <Error_Handler>
  }

  if (HAL_TIM_Base_Start_IT(&htim16) != HAL_OK)
 8002cf8:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <main+0x88>)
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	f007 fcca 	bl	800a694 <HAL_TIM_Base_Start_IT>
 8002d00:	1e03      	subs	r3, r0, #0
 8002d02:	d001      	beq.n	8002d08 <main+0x6c>
  {
    Error_Handler();
 8002d04:	f000 fa44 	bl	8003190 <Error_Handler>
  }

  init_bno08x(&sensorCallback);
 8002d08:	4b07      	ldr	r3, [pc, #28]	; (8002d28 <main+0x8c>)
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	f7ff f9e8 	bl	80020e0 <init_bno08x>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002d10:	e7fe      	b.n	8002d10 <main+0x74>
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	20000558 	.word	0x20000558
 8002d18:	00000321 	.word	0x00000321
 8002d1c:	2000057c 	.word	0x2000057c
 8002d20:	20000390 	.word	0x20000390
 8002d24:	20000510 	.word	0x20000510
 8002d28:	08002b69 	.word	0x08002b69

08002d2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d2c:	b590      	push	{r4, r7, lr}
 8002d2e:	b099      	sub	sp, #100	; 0x64
 8002d30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d32:	242c      	movs	r4, #44	; 0x2c
 8002d34:	193b      	adds	r3, r7, r4
 8002d36:	0018      	movs	r0, r3
 8002d38:	2334      	movs	r3, #52	; 0x34
 8002d3a:	001a      	movs	r2, r3
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	f007 feb1 	bl	800aaa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d42:	231c      	movs	r3, #28
 8002d44:	18fb      	adds	r3, r7, r3
 8002d46:	0018      	movs	r0, r3
 8002d48:	2310      	movs	r3, #16
 8002d4a:	001a      	movs	r2, r3
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	f007 fea9 	bl	800aaa4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d52:	1d3b      	adds	r3, r7, #4
 8002d54:	0018      	movs	r0, r3
 8002d56:	2318      	movs	r3, #24
 8002d58:	001a      	movs	r2, r3
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	f007 fea2 	bl	800aaa4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002d60:	0021      	movs	r1, r4
 8002d62:	187b      	adds	r3, r7, r1
 8002d64:	2203      	movs	r2, #3
 8002d66:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d68:	187b      	adds	r3, r7, r1
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d6e:	187b      	adds	r3, r7, r1
 8002d70:	2201      	movs	r2, #1
 8002d72:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d74:	187b      	adds	r3, r7, r1
 8002d76:	2210      	movs	r2, #16
 8002d78:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002d7a:	187b      	adds	r3, r7, r1
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d80:	187b      	adds	r3, r7, r1
 8002d82:	0018      	movs	r0, r3
 8002d84:	f006 fe10 	bl	80099a8 <HAL_RCC_OscConfig>
 8002d88:	1e03      	subs	r3, r0, #0
 8002d8a:	d001      	beq.n	8002d90 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8002d8c:	f000 fa00 	bl	8003190 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d90:	211c      	movs	r1, #28
 8002d92:	187b      	adds	r3, r7, r1
 8002d94:	2207      	movs	r2, #7
 8002d96:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002d98:	187b      	adds	r3, r7, r1
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d9e:	187b      	adds	r3, r7, r1
 8002da0:	2200      	movs	r2, #0
 8002da2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002da4:	187b      	adds	r3, r7, r1
 8002da6:	2200      	movs	r2, #0
 8002da8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002daa:	187b      	adds	r3, r7, r1
 8002dac:	2100      	movs	r1, #0
 8002dae:	0018      	movs	r0, r3
 8002db0:	f007 f980 	bl	800a0b4 <HAL_RCC_ClockConfig>
 8002db4:	1e03      	subs	r3, r0, #0
 8002db6:	d001      	beq.n	8002dbc <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002db8:	f000 f9ea 	bl	8003190 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002dbc:	1d3b      	adds	r3, r7, #4
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002dc2:	1d3b      	adds	r3, r7, #4
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002dc8:	1d3b      	adds	r3, r7, #4
 8002dca:	0018      	movs	r0, r3
 8002dcc:	f007 fae0 	bl	800a390 <HAL_RCCEx_PeriphCLKConfig>
 8002dd0:	1e03      	subs	r3, r0, #0
 8002dd2:	d001      	beq.n	8002dd8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8002dd4:	f000 f9dc 	bl	8003190 <Error_Handler>
  }
}
 8002dd8:	46c0      	nop			; (mov r8, r8)
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	b019      	add	sp, #100	; 0x64
 8002dde:	bd90      	pop	{r4, r7, pc}

08002de0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002de6:	1d3b      	adds	r3, r7, #4
 8002de8:	0018      	movs	r0, r3
 8002dea:	230c      	movs	r3, #12
 8002dec:	001a      	movs	r2, r3
 8002dee:	2100      	movs	r1, #0
 8002df0:	f007 fe58 	bl	800aaa4 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002df4:	4b3a      	ldr	r3, [pc, #232]	; (8002ee0 <MX_ADC_Init+0x100>)
 8002df6:	4a3b      	ldr	r2, [pc, #236]	; (8002ee4 <MX_ADC_Init+0x104>)
 8002df8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002dfa:	4b39      	ldr	r3, [pc, #228]	; (8002ee0 <MX_ADC_Init+0x100>)
 8002dfc:	2280      	movs	r2, #128	; 0x80
 8002dfe:	0612      	lsls	r2, r2, #24
 8002e00:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002e02:	4b37      	ldr	r3, [pc, #220]	; (8002ee0 <MX_ADC_Init+0x100>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e08:	4b35      	ldr	r3, [pc, #212]	; (8002ee0 <MX_ADC_Init+0x100>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002e0e:	4b34      	ldr	r3, [pc, #208]	; (8002ee0 <MX_ADC_Init+0x100>)
 8002e10:	2201      	movs	r2, #1
 8002e12:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002e14:	4b32      	ldr	r3, [pc, #200]	; (8002ee0 <MX_ADC_Init+0x100>)
 8002e16:	2204      	movs	r2, #4
 8002e18:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002e1a:	4b31      	ldr	r3, [pc, #196]	; (8002ee0 <MX_ADC_Init+0x100>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002e20:	4b2f      	ldr	r3, [pc, #188]	; (8002ee0 <MX_ADC_Init+0x100>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8002e26:	4b2e      	ldr	r3, [pc, #184]	; (8002ee0 <MX_ADC_Init+0x100>)
 8002e28:	2201      	movs	r2, #1
 8002e2a:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002e2c:	4b2c      	ldr	r3, [pc, #176]	; (8002ee0 <MX_ADC_Init+0x100>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e32:	4b2b      	ldr	r3, [pc, #172]	; (8002ee0 <MX_ADC_Init+0x100>)
 8002e34:	22c2      	movs	r2, #194	; 0xc2
 8002e36:	32ff      	adds	r2, #255	; 0xff
 8002e38:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002e3a:	4b29      	ldr	r3, [pc, #164]	; (8002ee0 <MX_ADC_Init+0x100>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8002e40:	4b27      	ldr	r3, [pc, #156]	; (8002ee0 <MX_ADC_Init+0x100>)
 8002e42:	2224      	movs	r2, #36	; 0x24
 8002e44:	2101      	movs	r1, #1
 8002e46:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002e48:	4b25      	ldr	r3, [pc, #148]	; (8002ee0 <MX_ADC_Init+0x100>)
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002e4e:	4b24      	ldr	r3, [pc, #144]	; (8002ee0 <MX_ADC_Init+0x100>)
 8002e50:	0018      	movs	r0, r3
 8002e52:	f003 fa87 	bl	8006364 <HAL_ADC_Init>
 8002e56:	1e03      	subs	r3, r0, #0
 8002e58:	d001      	beq.n	8002e5e <MX_ADC_Init+0x7e>
  {
    Error_Handler();
 8002e5a:	f000 f999 	bl	8003190 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002e5e:	1d3b      	adds	r3, r7, #4
 8002e60:	2206      	movs	r2, #6
 8002e62:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002e64:	1d3b      	adds	r3, r7, #4
 8002e66:	2280      	movs	r2, #128	; 0x80
 8002e68:	0152      	lsls	r2, r2, #5
 8002e6a:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002e6c:	1d3b      	adds	r3, r7, #4
 8002e6e:	2280      	movs	r2, #128	; 0x80
 8002e70:	0552      	lsls	r2, r2, #21
 8002e72:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002e74:	1d3a      	adds	r2, r7, #4
 8002e76:	4b1a      	ldr	r3, [pc, #104]	; (8002ee0 <MX_ADC_Init+0x100>)
 8002e78:	0011      	movs	r1, r2
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	f003 fc4c 	bl	8006718 <HAL_ADC_ConfigChannel>
 8002e80:	1e03      	subs	r3, r0, #0
 8002e82:	d001      	beq.n	8002e88 <MX_ADC_Init+0xa8>
  {
    Error_Handler();
 8002e84:	f000 f984 	bl	8003190 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002e88:	1d3b      	adds	r3, r7, #4
 8002e8a:	2207      	movs	r2, #7
 8002e8c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002e8e:	1d3a      	adds	r2, r7, #4
 8002e90:	4b13      	ldr	r3, [pc, #76]	; (8002ee0 <MX_ADC_Init+0x100>)
 8002e92:	0011      	movs	r1, r2
 8002e94:	0018      	movs	r0, r3
 8002e96:	f003 fc3f 	bl	8006718 <HAL_ADC_ConfigChannel>
 8002e9a:	1e03      	subs	r3, r0, #0
 8002e9c:	d001      	beq.n	8002ea2 <MX_ADC_Init+0xc2>
  {
    Error_Handler();
 8002e9e:	f000 f977 	bl	8003190 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002ea2:	1d3b      	adds	r3, r7, #4
 8002ea4:	2208      	movs	r2, #8
 8002ea6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002ea8:	1d3a      	adds	r2, r7, #4
 8002eaa:	4b0d      	ldr	r3, [pc, #52]	; (8002ee0 <MX_ADC_Init+0x100>)
 8002eac:	0011      	movs	r1, r2
 8002eae:	0018      	movs	r0, r3
 8002eb0:	f003 fc32 	bl	8006718 <HAL_ADC_ConfigChannel>
 8002eb4:	1e03      	subs	r3, r0, #0
 8002eb6:	d001      	beq.n	8002ebc <MX_ADC_Init+0xdc>
  {
    Error_Handler();
 8002eb8:	f000 f96a 	bl	8003190 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002ebc:	1d3b      	adds	r3, r7, #4
 8002ebe:	2209      	movs	r2, #9
 8002ec0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002ec2:	1d3a      	adds	r2, r7, #4
 8002ec4:	4b06      	ldr	r3, [pc, #24]	; (8002ee0 <MX_ADC_Init+0x100>)
 8002ec6:	0011      	movs	r1, r2
 8002ec8:	0018      	movs	r0, r3
 8002eca:	f003 fc25 	bl	8006718 <HAL_ADC_ConfigChannel>
 8002ece:	1e03      	subs	r3, r0, #0
 8002ed0:	d001      	beq.n	8002ed6 <MX_ADC_Init+0xf6>
  {
    Error_Handler();
 8002ed2:	f000 f95d 	bl	8003190 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002ed6:	46c0      	nop			; (mov r8, r8)
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	b004      	add	sp, #16
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	46c0      	nop			; (mov r8, r8)
 8002ee0:	20000390 	.word	0x20000390
 8002ee4:	40012400 	.word	0x40012400

08002ee8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b08a      	sub	sp, #40	; 0x28
 8002eec:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8002eee:	4b2d      	ldr	r3, [pc, #180]	; (8002fa4 <MX_CAN_Init+0xbc>)
 8002ef0:	4a2d      	ldr	r2, [pc, #180]	; (8002fa8 <MX_CAN_Init+0xc0>)
 8002ef2:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 1;
 8002ef4:	4b2b      	ldr	r3, [pc, #172]	; (8002fa4 <MX_CAN_Init+0xbc>)
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002efa:	4b2a      	ldr	r3, [pc, #168]	; (8002fa4 <MX_CAN_Init+0xbc>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002f00:	4b28      	ldr	r3, [pc, #160]	; (8002fa4 <MX_CAN_Init+0xbc>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8002f06:	4b27      	ldr	r3, [pc, #156]	; (8002fa4 <MX_CAN_Init+0xbc>)
 8002f08:	22c0      	movs	r2, #192	; 0xc0
 8002f0a:	0312      	lsls	r2, r2, #12
 8002f0c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002f0e:	4b25      	ldr	r3, [pc, #148]	; (8002fa4 <MX_CAN_Init+0xbc>)
 8002f10:	2280      	movs	r2, #128	; 0x80
 8002f12:	0352      	lsls	r2, r2, #13
 8002f14:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002f16:	4b23      	ldr	r3, [pc, #140]	; (8002fa4 <MX_CAN_Init+0xbc>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8002f1c:	4b21      	ldr	r3, [pc, #132]	; (8002fa4 <MX_CAN_Init+0xbc>)
 8002f1e:	2201      	movs	r2, #1
 8002f20:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002f22:	4b20      	ldr	r3, [pc, #128]	; (8002fa4 <MX_CAN_Init+0xbc>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8002f28:	4b1e      	ldr	r3, [pc, #120]	; (8002fa4 <MX_CAN_Init+0xbc>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002f2e:	4b1d      	ldr	r3, [pc, #116]	; (8002fa4 <MX_CAN_Init+0xbc>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002f34:	4b1b      	ldr	r3, [pc, #108]	; (8002fa4 <MX_CAN_Init+0xbc>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002f3a:	4b1a      	ldr	r3, [pc, #104]	; (8002fa4 <MX_CAN_Init+0xbc>)
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	f003 fe01 	bl	8006b44 <HAL_CAN_Init>
 8002f42:	1e03      	subs	r3, r0, #0
 8002f44:	d001      	beq.n	8002f4a <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8002f46:	f000 f923 	bl	8003190 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  CAN_FilterTypeDef sFilterConfig;

  sFilterConfig.FilterActivation = ENABLE;
 8002f4a:	003b      	movs	r3, r7
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	621a      	str	r2, [r3, #32]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0; // set fifo assignment
 8002f50:	003b      	movs	r3, r7
 8002f52:	2200      	movs	r2, #0
 8002f54:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterIdHigh = 0;
 8002f56:	003b      	movs	r3, r7
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0;
 8002f5c:	003b      	movs	r3, r7
 8002f5e:	2200      	movs	r2, #0
 8002f60:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0;
 8002f62:	003b      	movs	r3, r7
 8002f64:	2200      	movs	r2, #0
 8002f66:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0;
 8002f68:	003b      	movs	r3, r7
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; // set filter scale
 8002f6e:	003b      	movs	r3, r7
 8002f70:	2201      	movs	r2, #1
 8002f72:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterBank = 0;
 8002f74:	003b      	movs	r3, r7
 8002f76:	2200      	movs	r2, #0
 8002f78:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002f7a:	003b      	movs	r3, r7
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	619a      	str	r2, [r3, #24]
  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 8002f80:	003a      	movs	r2, r7
 8002f82:	4b08      	ldr	r3, [pc, #32]	; (8002fa4 <MX_CAN_Init+0xbc>)
 8002f84:	0011      	movs	r1, r2
 8002f86:	0018      	movs	r0, r3
 8002f88:	f003 ff26 	bl	8006dd8 <HAL_CAN_ConfigFilter>

  if (HAL_CAN_Start(&hcan) != HAL_OK)
 8002f8c:	4b05      	ldr	r3, [pc, #20]	; (8002fa4 <MX_CAN_Init+0xbc>)
 8002f8e:	0018      	movs	r0, r3
 8002f90:	f004 f814 	bl	8006fbc <HAL_CAN_Start>
 8002f94:	1e03      	subs	r3, r0, #0
 8002f96:	d001      	beq.n	8002f9c <MX_CAN_Init+0xb4>
  {
    Error_Handler();
 8002f98:	f000 f8fa 	bl	8003190 <Error_Handler>
  }
  /* USER CODE END CAN_Init 2 */

}
 8002f9c:	46c0      	nop			; (mov r8, r8)
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	b00a      	add	sp, #40	; 0x28
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	20000414 	.word	0x20000414
 8002fa8:	40006400 	.word	0x40006400

08002fac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002fb0:	4b1b      	ldr	r3, [pc, #108]	; (8003020 <MX_I2C1_Init+0x74>)
 8002fb2:	4a1c      	ldr	r2, [pc, #112]	; (8003024 <MX_I2C1_Init+0x78>)
 8002fb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8002fb6:	4b1a      	ldr	r3, [pc, #104]	; (8003020 <MX_I2C1_Init+0x74>)
 8002fb8:	4a1b      	ldr	r2, [pc, #108]	; (8003028 <MX_I2C1_Init+0x7c>)
 8002fba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002fbc:	4b18      	ldr	r3, [pc, #96]	; (8003020 <MX_I2C1_Init+0x74>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002fc2:	4b17      	ldr	r3, [pc, #92]	; (8003020 <MX_I2C1_Init+0x74>)
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002fc8:	4b15      	ldr	r3, [pc, #84]	; (8003020 <MX_I2C1_Init+0x74>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002fce:	4b14      	ldr	r3, [pc, #80]	; (8003020 <MX_I2C1_Init+0x74>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002fd4:	4b12      	ldr	r3, [pc, #72]	; (8003020 <MX_I2C1_Init+0x74>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002fda:	4b11      	ldr	r3, [pc, #68]	; (8003020 <MX_I2C1_Init+0x74>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002fe0:	4b0f      	ldr	r3, [pc, #60]	; (8003020 <MX_I2C1_Init+0x74>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002fe6:	4b0e      	ldr	r3, [pc, #56]	; (8003020 <MX_I2C1_Init+0x74>)
 8002fe8:	0018      	movs	r0, r3
 8002fea:	f004 fef7 	bl	8007ddc <HAL_I2C_Init>
 8002fee:	1e03      	subs	r3, r0, #0
 8002ff0:	d001      	beq.n	8002ff6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002ff2:	f000 f8cd 	bl	8003190 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002ff6:	4b0a      	ldr	r3, [pc, #40]	; (8003020 <MX_I2C1_Init+0x74>)
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	f006 fc3c 	bl	8009878 <HAL_I2CEx_ConfigAnalogFilter>
 8003000:	1e03      	subs	r3, r0, #0
 8003002:	d001      	beq.n	8003008 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003004:	f000 f8c4 	bl	8003190 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003008:	4b05      	ldr	r3, [pc, #20]	; (8003020 <MX_I2C1_Init+0x74>)
 800300a:	2100      	movs	r1, #0
 800300c:	0018      	movs	r0, r3
 800300e:	f006 fc7f 	bl	8009910 <HAL_I2CEx_ConfigDigitalFilter>
 8003012:	1e03      	subs	r3, r0, #0
 8003014:	d001      	beq.n	800301a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003016:	f000 f8bb 	bl	8003190 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800301a:	46c0      	nop			; (mov r8, r8)
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	20000478 	.word	0x20000478
 8003024:	40005400 	.word	0x40005400
 8003028:	2000090e 	.word	0x2000090e

0800302c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003030:	4b15      	ldr	r3, [pc, #84]	; (8003088 <MX_TIM16_Init+0x5c>)
 8003032:	4a16      	ldr	r2, [pc, #88]	; (800308c <MX_TIM16_Init+0x60>)
 8003034:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1600;
 8003036:	4b14      	ldr	r3, [pc, #80]	; (8003088 <MX_TIM16_Init+0x5c>)
 8003038:	22c8      	movs	r2, #200	; 0xc8
 800303a:	00d2      	lsls	r2, r2, #3
 800303c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800303e:	4b12      	ldr	r3, [pc, #72]	; (8003088 <MX_TIM16_Init+0x5c>)
 8003040:	2200      	movs	r2, #0
 8003042:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000 - 1;
 8003044:	4b10      	ldr	r3, [pc, #64]	; (8003088 <MX_TIM16_Init+0x5c>)
 8003046:	4a12      	ldr	r2, [pc, #72]	; (8003090 <MX_TIM16_Init+0x64>)
 8003048:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800304a:	4b0f      	ldr	r3, [pc, #60]	; (8003088 <MX_TIM16_Init+0x5c>)
 800304c:	2200      	movs	r2, #0
 800304e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003050:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <MX_TIM16_Init+0x5c>)
 8003052:	2200      	movs	r2, #0
 8003054:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003056:	4b0c      	ldr	r3, [pc, #48]	; (8003088 <MX_TIM16_Init+0x5c>)
 8003058:	2200      	movs	r2, #0
 800305a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800305c:	4b0a      	ldr	r3, [pc, #40]	; (8003088 <MX_TIM16_Init+0x5c>)
 800305e:	0018      	movs	r0, r3
 8003060:	f007 fa84 	bl	800a56c <HAL_TIM_Base_Init>
 8003064:	1e03      	subs	r3, r0, #0
 8003066:	d001      	beq.n	800306c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8003068:	f000 f892 	bl	8003190 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  // Setting period manually and re-initing so I don't have to update every ioc change
  htim16.Init.Period = TIME_PERIOD - 1;
 800306c:	4b06      	ldr	r3, [pc, #24]	; (8003088 <MX_TIM16_Init+0x5c>)
 800306e:	4a09      	ldr	r2, [pc, #36]	; (8003094 <MX_TIM16_Init+0x68>)
 8003070:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003072:	4b05      	ldr	r3, [pc, #20]	; (8003088 <MX_TIM16_Init+0x5c>)
 8003074:	0018      	movs	r0, r3
 8003076:	f007 fa79 	bl	800a56c <HAL_TIM_Base_Init>
 800307a:	1e03      	subs	r3, r0, #0
 800307c:	d001      	beq.n	8003082 <MX_TIM16_Init+0x56>
  {
    Error_Handler();
 800307e:	f000 f887 	bl	8003190 <Error_Handler>
  }

  /* USER CODE END TIM16_Init 2 */

}
 8003082:	46c0      	nop			; (mov r8, r8)
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	20000510 	.word	0x20000510
 800308c:	40014400 	.word	0x40014400
 8003090:	0000270f 	.word	0x0000270f
 8003094:	000003e7 	.word	0x000003e7

08003098 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800309e:	4b10      	ldr	r3, [pc, #64]	; (80030e0 <MX_DMA_Init+0x48>)
 80030a0:	695a      	ldr	r2, [r3, #20]
 80030a2:	4b0f      	ldr	r3, [pc, #60]	; (80030e0 <MX_DMA_Init+0x48>)
 80030a4:	2101      	movs	r1, #1
 80030a6:	430a      	orrs	r2, r1
 80030a8:	615a      	str	r2, [r3, #20]
 80030aa:	4b0d      	ldr	r3, [pc, #52]	; (80030e0 <MX_DMA_Init+0x48>)
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	2201      	movs	r2, #1
 80030b0:	4013      	ands	r3, r2
 80030b2:	607b      	str	r3, [r7, #4]
 80030b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80030b6:	2200      	movs	r2, #0
 80030b8:	2100      	movs	r1, #0
 80030ba:	2009      	movs	r0, #9
 80030bc:	f004 f9cc 	bl	8007458 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80030c0:	2009      	movs	r0, #9
 80030c2:	f004 f9de 	bl	8007482 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80030c6:	2200      	movs	r2, #0
 80030c8:	2100      	movs	r1, #0
 80030ca:	200a      	movs	r0, #10
 80030cc:	f004 f9c4 	bl	8007458 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80030d0:	200a      	movs	r0, #10
 80030d2:	f004 f9d6 	bl	8007482 <HAL_NVIC_EnableIRQ>

}
 80030d6:	46c0      	nop			; (mov r8, r8)
 80030d8:	46bd      	mov	sp, r7
 80030da:	b002      	add	sp, #8
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	46c0      	nop			; (mov r8, r8)
 80030e0:	40021000 	.word	0x40021000

080030e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80030e4:	b590      	push	{r4, r7, lr}
 80030e6:	b089      	sub	sp, #36	; 0x24
 80030e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030ea:	240c      	movs	r4, #12
 80030ec:	193b      	adds	r3, r7, r4
 80030ee:	0018      	movs	r0, r3
 80030f0:	2314      	movs	r3, #20
 80030f2:	001a      	movs	r2, r3
 80030f4:	2100      	movs	r1, #0
 80030f6:	f007 fcd5 	bl	800aaa4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80030fa:	4b23      	ldr	r3, [pc, #140]	; (8003188 <MX_GPIO_Init+0xa4>)
 80030fc:	695a      	ldr	r2, [r3, #20]
 80030fe:	4b22      	ldr	r3, [pc, #136]	; (8003188 <MX_GPIO_Init+0xa4>)
 8003100:	2180      	movs	r1, #128	; 0x80
 8003102:	03c9      	lsls	r1, r1, #15
 8003104:	430a      	orrs	r2, r1
 8003106:	615a      	str	r2, [r3, #20]
 8003108:	4b1f      	ldr	r3, [pc, #124]	; (8003188 <MX_GPIO_Init+0xa4>)
 800310a:	695a      	ldr	r2, [r3, #20]
 800310c:	2380      	movs	r3, #128	; 0x80
 800310e:	03db      	lsls	r3, r3, #15
 8003110:	4013      	ands	r3, r2
 8003112:	60bb      	str	r3, [r7, #8]
 8003114:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003116:	4b1c      	ldr	r3, [pc, #112]	; (8003188 <MX_GPIO_Init+0xa4>)
 8003118:	695a      	ldr	r2, [r3, #20]
 800311a:	4b1b      	ldr	r3, [pc, #108]	; (8003188 <MX_GPIO_Init+0xa4>)
 800311c:	2180      	movs	r1, #128	; 0x80
 800311e:	0289      	lsls	r1, r1, #10
 8003120:	430a      	orrs	r2, r1
 8003122:	615a      	str	r2, [r3, #20]
 8003124:	4b18      	ldr	r3, [pc, #96]	; (8003188 <MX_GPIO_Init+0xa4>)
 8003126:	695a      	ldr	r2, [r3, #20]
 8003128:	2380      	movs	r3, #128	; 0x80
 800312a:	029b      	lsls	r3, r3, #10
 800312c:	4013      	ands	r3, r2
 800312e:	607b      	str	r3, [r7, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003132:	4b15      	ldr	r3, [pc, #84]	; (8003188 <MX_GPIO_Init+0xa4>)
 8003134:	695a      	ldr	r2, [r3, #20]
 8003136:	4b14      	ldr	r3, [pc, #80]	; (8003188 <MX_GPIO_Init+0xa4>)
 8003138:	2180      	movs	r1, #128	; 0x80
 800313a:	02c9      	lsls	r1, r1, #11
 800313c:	430a      	orrs	r2, r1
 800313e:	615a      	str	r2, [r3, #20]
 8003140:	4b11      	ldr	r3, [pc, #68]	; (8003188 <MX_GPIO_Init+0xa4>)
 8003142:	695a      	ldr	r2, [r3, #20]
 8003144:	2380      	movs	r3, #128	; 0x80
 8003146:	02db      	lsls	r3, r3, #11
 8003148:	4013      	ands	r3, r2
 800314a:	603b      	str	r3, [r7, #0]
 800314c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_SLEEP_GPIO_Port, CAN_SLEEP_Pin, GPIO_PIN_RESET);
 800314e:	4b0f      	ldr	r3, [pc, #60]	; (800318c <MX_GPIO_Init+0xa8>)
 8003150:	2200      	movs	r2, #0
 8003152:	2108      	movs	r1, #8
 8003154:	0018      	movs	r0, r3
 8003156:	f004 fe23 	bl	8007da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAN_SLEEP_Pin */
  GPIO_InitStruct.Pin = CAN_SLEEP_Pin;
 800315a:	0021      	movs	r1, r4
 800315c:	187b      	adds	r3, r7, r1
 800315e:	2208      	movs	r2, #8
 8003160:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003162:	187b      	adds	r3, r7, r1
 8003164:	2201      	movs	r2, #1
 8003166:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003168:	187b      	adds	r3, r7, r1
 800316a:	2202      	movs	r2, #2
 800316c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800316e:	187b      	adds	r3, r7, r1
 8003170:	2200      	movs	r2, #0
 8003172:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CAN_SLEEP_GPIO_Port, &GPIO_InitStruct);
 8003174:	187b      	adds	r3, r7, r1
 8003176:	4a05      	ldr	r2, [pc, #20]	; (800318c <MX_GPIO_Init+0xa8>)
 8003178:	0019      	movs	r1, r3
 800317a:	0010      	movs	r0, r2
 800317c:	f004 fbe0 	bl	8007940 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003180:	46c0      	nop			; (mov r8, r8)
 8003182:	46bd      	mov	sp, r7
 8003184:	b009      	add	sp, #36	; 0x24
 8003186:	bd90      	pop	{r4, r7, pc}
 8003188:	40021000 	.word	0x40021000
 800318c:	48000400 	.word	0x48000400

08003190 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003194:	b672      	cpsid	i
}
 8003196:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003198:	e7fe      	b.n	8003198 <Error_Handler+0x8>

0800319a <opRx>:

    return rc;
}

static void opRx(sh2_t *pSh2, const uint8_t *payload, uint16_t len)
{ 
 800319a:	b580      	push	{r7, lr}
 800319c:	b084      	sub	sp, #16
 800319e:	af00      	add	r7, sp, #0
 80031a0:	60f8      	str	r0, [r7, #12]
 80031a2:	60b9      	str	r1, [r7, #8]
 80031a4:	1dbb      	adds	r3, r7, #6
 80031a6:	801a      	strh	r2, [r3, #0]
    if ((pSh2->pOp != 0) &&                      // An operation is in progress
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	22a0      	movs	r2, #160	; 0xa0
 80031ac:	589b      	ldr	r3, [r3, r2]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00e      	beq.n	80031d0 <opRx+0x36>
        (pSh2->pOp->rx != 0)) {                  // and it has an rx method
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	22a0      	movs	r2, #160	; 0xa0
 80031b6:	589b      	ldr	r3, [r3, r2]
 80031b8:	689b      	ldr	r3, [r3, #8]
    if ((pSh2->pOp != 0) &&                      // An operation is in progress
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d008      	beq.n	80031d0 <opRx+0x36>
        pSh2->pOp->rx(pSh2, payload, len);  // Call receive method
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	22a0      	movs	r2, #160	; 0xa0
 80031c2:	589b      	ldr	r3, [r3, r2]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	1dba      	adds	r2, r7, #6
 80031c8:	8812      	ldrh	r2, [r2, #0]
 80031ca:	68b9      	ldr	r1, [r7, #8]
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	4798      	blx	r3
    }
}
 80031d0:	46c0      	nop			; (mov r8, r8)
 80031d2:	46bd      	mov	sp, r7
 80031d4:	b004      	add	sp, #16
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <sensorhubAdvertHdlr>:

static void sensorhubAdvertHdlr(void *cookie, uint8_t tag, uint8_t len, uint8_t *value)
{
 80031d8:	b590      	push	{r4, r7, lr}
 80031da:	b089      	sub	sp, #36	; 0x24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	0008      	movs	r0, r1
 80031e2:	0011      	movs	r1, r2
 80031e4:	607b      	str	r3, [r7, #4]
 80031e6:	240b      	movs	r4, #11
 80031e8:	193b      	adds	r3, r7, r4
 80031ea:	1c02      	adds	r2, r0, #0
 80031ec:	701a      	strb	r2, [r3, #0]
 80031ee:	230a      	movs	r3, #10
 80031f0:	18fb      	adds	r3, r7, r3
 80031f2:	1c0a      	adds	r2, r1, #0
 80031f4:	701a      	strb	r2, [r3, #0]
    sh2_t *pSh2 = (sh2_t *)cookie;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	617b      	str	r3, [r7, #20]
    
    switch (tag) {
 80031fa:	193b      	adds	r3, r7, r4
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	2b81      	cmp	r3, #129	; 0x81
 8003200:	d00c      	beq.n	800321c <sensorhubAdvertHdlr+0x44>
 8003202:	dc5c      	bgt.n	80032be <sensorhubAdvertHdlr+0xe6>
 8003204:	2b00      	cmp	r3, #0
 8003206:	d040      	beq.n	800328a <sensorhubAdvertHdlr+0xb2>
 8003208:	2b80      	cmp	r3, #128	; 0x80
 800320a:	d158      	bne.n	80032be <sensorhubAdvertHdlr+0xe6>
        case TAG_SH2_VERSION:
            strcpy(pSh2->version, (const char *)value);
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	330c      	adds	r3, #12
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	0011      	movs	r1, r2
 8003214:	0018      	movs	r0, r3
 8003216:	f007 fc71 	bl	800aafc <strcpy>
            break;
 800321a:	e051      	b.n	80032c0 <sensorhubAdvertHdlr+0xe8>

        case TAG_SH2_REPORT_LENGTHS:
        {
            uint8_t reports = len/2;
 800321c:	211f      	movs	r1, #31
 800321e:	187b      	adds	r3, r7, r1
 8003220:	220a      	movs	r2, #10
 8003222:	18ba      	adds	r2, r7, r2
 8003224:	7812      	ldrb	r2, [r2, #0]
 8003226:	0852      	lsrs	r2, r2, #1
 8003228:	701a      	strb	r2, [r3, #0]
            if (reports > SH2_MAX_REPORT_IDS) {
 800322a:	187b      	adds	r3, r7, r1
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	2b40      	cmp	r3, #64	; 0x40
 8003230:	d902      	bls.n	8003238 <sensorhubAdvertHdlr+0x60>
                // Hub gave us more report lengths than we can store!
                reports = SH2_MAX_REPORT_IDS;
 8003232:	187b      	adds	r3, r7, r1
 8003234:	2240      	movs	r2, #64	; 0x40
 8003236:	701a      	strb	r2, [r3, #0]
            }
        
            for (int n = 0; n < reports; n++) {
 8003238:	2300      	movs	r3, #0
 800323a:	61bb      	str	r3, [r7, #24]
 800323c:	e01e      	b.n	800327c <sensorhubAdvertHdlr+0xa4>
                pSh2->report[n].id = value[n*2];
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	001a      	movs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	189b      	adds	r3, r3, r2
 8003248:	7819      	ldrb	r1, [r3, #0]
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	330c      	adds	r3, #12
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	18d3      	adds	r3, r2, r3
 8003254:	3305      	adds	r3, #5
 8003256:	1c0a      	adds	r2, r1, #0
 8003258:	701a      	strb	r2, [r3, #0]
                pSh2->report[n].len = value[n*2 + 1];
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	3301      	adds	r3, #1
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	18d3      	adds	r3, r2, r3
 8003264:	7819      	ldrb	r1, [r3, #0]
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	330c      	adds	r3, #12
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	18d3      	adds	r3, r2, r3
 8003270:	3306      	adds	r3, #6
 8003272:	1c0a      	adds	r2, r1, #0
 8003274:	701a      	strb	r2, [r3, #0]
            for (int n = 0; n < reports; n++) {
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	3301      	adds	r3, #1
 800327a:	61bb      	str	r3, [r7, #24]
 800327c:	231f      	movs	r3, #31
 800327e:	18fb      	adds	r3, r7, r3
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	429a      	cmp	r2, r3
 8003286:	dbda      	blt.n	800323e <sensorhubAdvertHdlr+0x66>
            }
            break;
 8003288:	e01a      	b.n	80032c0 <sensorhubAdvertHdlr+0xe8>
    
        case 0:
        {
            // 0 tag indicates end of advertisements for this app
            // At this time, the SHTP layer can give us our channel numbers
            pSh2->executableChan = shtp_chanNo(pSh2->pShtp, "executable", "device");
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	4a0e      	ldr	r2, [pc, #56]	; (80032c8 <sensorhubAdvertHdlr+0xf0>)
 8003290:	490e      	ldr	r1, [pc, #56]	; (80032cc <sensorhubAdvertHdlr+0xf4>)
 8003292:	0018      	movs	r0, r3
 8003294:	f002 fcc0 	bl	8005c18 <shtp_chanNo>
 8003298:	0003      	movs	r3, r0
 800329a:	001a      	movs	r2, r3
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	729a      	strb	r2, [r3, #10]
            pSh2->controlChan = shtp_chanNo(pSh2->pShtp, "sensorhub", "control");
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	4a0a      	ldr	r2, [pc, #40]	; (80032d0 <sensorhubAdvertHdlr+0xf8>)
 80032a6:	490b      	ldr	r1, [pc, #44]	; (80032d4 <sensorhubAdvertHdlr+0xfc>)
 80032a8:	0018      	movs	r0, r3
 80032aa:	f002 fcb5 	bl	8005c18 <shtp_chanNo>
 80032ae:	0003      	movs	r3, r0
 80032b0:	001a      	movs	r2, r3
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	72da      	strb	r2, [r3, #11]

            pSh2->advertDone = true;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	2201      	movs	r2, #1
 80032ba:	725a      	strb	r2, [r3, #9]
            break;
 80032bc:	e000      	b.n	80032c0 <sensorhubAdvertHdlr+0xe8>
        }
        
        default:
            break;
 80032be:	46c0      	nop			; (mov r8, r8)
    }
}
 80032c0:	46c0      	nop			; (mov r8, r8)
 80032c2:	46bd      	mov	sp, r7
 80032c4:	b009      	add	sp, #36	; 0x24
 80032c6:	bd90      	pop	{r4, r7, pc}
 80032c8:	0800ab38 	.word	0x0800ab38
 80032cc:	0800ab40 	.word	0x0800ab40
 80032d0:	0800ab4c 	.word	0x0800ab4c
 80032d4:	0800ab54 	.word	0x0800ab54

080032d8 <sensorhubControlHdlr>:

static void sensorhubControlHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 80032d8:	b5b0      	push	{r4, r5, r7, lr}
 80032da:	b08c      	sub	sp, #48	; 0x30
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	603b      	str	r3, [r7, #0]
 80032e4:	1dbb      	adds	r3, r7, #6
 80032e6:	801a      	strh	r2, [r3, #0]
    sh2_t *pSh2 = (sh2_t *)cookie;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	61fb      	str	r3, [r7, #28]

    uint16_t cursor = 0;
 80032ec:	232e      	movs	r3, #46	; 0x2e
 80032ee:	18fb      	adds	r3, r7, r3
 80032f0:	2200      	movs	r2, #0
 80032f2:	801a      	strh	r2, [r3, #0]
    uint32_t count = 0;
 80032f4:	2300      	movs	r3, #0
 80032f6:	62bb      	str	r3, [r7, #40]	; 0x28
    CommandResp_t * pResp = 0;
 80032f8:	2300      	movs	r3, #0
 80032fa:	61bb      	str	r3, [r7, #24]
    
    if (len == 0) {
 80032fc:	1dbb      	adds	r3, r7, #6
 80032fe:	881b      	ldrh	r3, [r3, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d000      	beq.n	8003306 <sensorhubControlHdlr+0x2e>
 8003304:	e0e3      	b.n	80034ce <sensorhubControlHdlr+0x1f6>
        pSh2->emptyPayloads++;
 8003306:	69fa      	ldr	r2, [r7, #28]
 8003308:	23fa      	movs	r3, #250	; 0xfa
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	58d3      	ldr	r3, [r2, r3]
 800330e:	1c59      	adds	r1, r3, #1
 8003310:	69fa      	ldr	r2, [r7, #28]
 8003312:	23fa      	movs	r3, #250	; 0xfa
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	50d1      	str	r1, [r2, r3]
        return;
 8003318:	e0e1      	b.n	80034de <sensorhubControlHdlr+0x206>
    }

    while (cursor < len) {
        // Get next report id
        count++;
 800331a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331c:	3301      	adds	r3, #1
 800331e:	62bb      	str	r3, [r7, #40]	; 0x28
        uint8_t reportId = payload[cursor];
 8003320:	232e      	movs	r3, #46	; 0x2e
 8003322:	18fb      	adds	r3, r7, r3
 8003324:	881b      	ldrh	r3, [r3, #0]
 8003326:	68ba      	ldr	r2, [r7, #8]
 8003328:	18d2      	adds	r2, r2, r3
 800332a:	2317      	movs	r3, #23
 800332c:	18fb      	adds	r3, r7, r3
 800332e:	7812      	ldrb	r2, [r2, #0]
 8003330:	701a      	strb	r2, [r3, #0]

        // Determine report length
        uint8_t reportLen = 0;
 8003332:	2327      	movs	r3, #39	; 0x27
 8003334:	18fb      	adds	r3, r7, r3
 8003336:	2200      	movs	r2, #0
 8003338:	701a      	strb	r2, [r3, #0]
        for (int n = 0; n < SH2_MAX_REPORT_IDS; n++) {
 800333a:	2300      	movs	r3, #0
 800333c:	623b      	str	r3, [r7, #32]
 800333e:	e019      	b.n	8003374 <sensorhubControlHdlr+0x9c>
            if (pSh2->report[n].id == reportId) {
 8003340:	69fa      	ldr	r2, [r7, #28]
 8003342:	6a3b      	ldr	r3, [r7, #32]
 8003344:	330c      	adds	r3, #12
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	18d3      	adds	r3, r2, r3
 800334a:	3305      	adds	r3, #5
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	2217      	movs	r2, #23
 8003350:	18ba      	adds	r2, r7, r2
 8003352:	7812      	ldrb	r2, [r2, #0]
 8003354:	429a      	cmp	r2, r3
 8003356:	d10a      	bne.n	800336e <sensorhubControlHdlr+0x96>
                reportLen = pSh2->report[n].len;
 8003358:	2327      	movs	r3, #39	; 0x27
 800335a:	18fb      	adds	r3, r7, r3
 800335c:	69f9      	ldr	r1, [r7, #28]
 800335e:	6a3a      	ldr	r2, [r7, #32]
 8003360:	320c      	adds	r2, #12
 8003362:	0052      	lsls	r2, r2, #1
 8003364:	188a      	adds	r2, r1, r2
 8003366:	3206      	adds	r2, #6
 8003368:	7812      	ldrb	r2, [r2, #0]
 800336a:	701a      	strb	r2, [r3, #0]
                break;
 800336c:	e005      	b.n	800337a <sensorhubControlHdlr+0xa2>
        for (int n = 0; n < SH2_MAX_REPORT_IDS; n++) {
 800336e:	6a3b      	ldr	r3, [r7, #32]
 8003370:	3301      	adds	r3, #1
 8003372:	623b      	str	r3, [r7, #32]
 8003374:	6a3b      	ldr	r3, [r7, #32]
 8003376:	2b3f      	cmp	r3, #63	; 0x3f
 8003378:	dde2      	ble.n	8003340 <sensorhubControlHdlr+0x68>
            }
        }
        if (reportLen == 0) {
 800337a:	2327      	movs	r3, #39	; 0x27
 800337c:	18fb      	adds	r3, r7, r3
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d109      	bne.n	8003398 <sensorhubControlHdlr+0xc0>
            // An unrecognized report id
            pSh2->unknownReportIds++;
 8003384:	69fa      	ldr	r2, [r7, #28]
 8003386:	23fc      	movs	r3, #252	; 0xfc
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	58d3      	ldr	r3, [r2, r3]
 800338c:	1c59      	adds	r1, r3, #1
 800338e:	69fa      	ldr	r2, [r7, #28]
 8003390:	23fc      	movs	r3, #252	; 0xfc
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	50d1      	str	r1, [r2, r3]
            return;
 8003396:	e0a2      	b.n	80034de <sensorhubControlHdlr+0x206>
        }
        else {
            // Check for unsolicited initialize response
            if (reportId == SENSORHUB_COMMAND_RESP) {
 8003398:	2317      	movs	r3, #23
 800339a:	18fb      	adds	r3, r7, r3
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2bf1      	cmp	r3, #241	; 0xf1
 80033a0:	d106      	bne.n	80033b0 <sensorhubControlHdlr+0xd8>
                pResp = (CommandResp_t *)(payload+cursor);
 80033a2:	232e      	movs	r3, #46	; 0x2e
 80033a4:	18fb      	adds	r3, r7, r3
 80033a6:	881b      	ldrh	r3, [r3, #0]
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	18d3      	adds	r3, r2, r3
 80033ac:	61bb      	str	r3, [r7, #24]
 80033ae:	e079      	b.n	80034a4 <sensorhubControlHdlr+0x1cc>
                    // This is an unsolicited INIT message.
                    // Is it time to call reset callback?
                }

            } // Check for Get Feature Response
            else if (reportId == SENSORHUB_GET_FEATURE_RESP) {
 80033b0:	2317      	movs	r3, #23
 80033b2:	18fb      	adds	r3, r7, r3
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	2bfc      	cmp	r3, #252	; 0xfc
 80033b8:	d174      	bne.n	80034a4 <sensorhubControlHdlr+0x1cc>
                if (pSh2->eventCallback) {
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	22bc      	movs	r2, #188	; 0xbc
 80033be:	589b      	ldr	r3, [r3, r2]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d06f      	beq.n	80034a4 <sensorhubControlHdlr+0x1cc>
                    GetFeatureResp_t * pGetFeatureResp;
                    pGetFeatureResp = (GetFeatureResp_t *)(payload + cursor);
 80033c4:	232e      	movs	r3, #46	; 0x2e
 80033c6:	18fb      	adds	r3, r7, r3
 80033c8:	881b      	ldrh	r3, [r3, #0]
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	18d3      	adds	r3, r2, r3
 80033ce:	613b      	str	r3, [r7, #16]

                    sh2AsyncEvent.eventId = SH2_GET_FEATURE_RESP;
 80033d0:	4b44      	ldr	r3, [pc, #272]	; (80034e4 <sensorhubControlHdlr+0x20c>)
 80033d2:	2202      	movs	r2, #2
 80033d4:	601a      	str	r2, [r3, #0]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorId = pGetFeatureResp->featureReportId;
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	785a      	ldrb	r2, [r3, #1]
 80033da:	4b42      	ldr	r3, [pc, #264]	; (80034e4 <sensorhubControlHdlr+0x20c>)
 80033dc:	711a      	strb	r2, [r3, #4]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityEnabled = ((pGetFeatureResp->flags & FEAT_CHANGE_SENSITIVITY_ENABLED) != 0);
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	789b      	ldrb	r3, [r3, #2]
 80033e2:	001a      	movs	r2, r3
 80033e4:	2302      	movs	r3, #2
 80033e6:	4013      	ands	r3, r2
 80033e8:	1e5a      	subs	r2, r3, #1
 80033ea:	4193      	sbcs	r3, r2
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	4b3d      	ldr	r3, [pc, #244]	; (80034e4 <sensorhubControlHdlr+0x20c>)
 80033f0:	721a      	strb	r2, [r3, #8]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityRelative = ((pGetFeatureResp->flags & FEAT_CHANGE_SENSITIVITY_RELATIVE) != 0);
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	789b      	ldrb	r3, [r3, #2]
 80033f6:	001a      	movs	r2, r3
 80033f8:	2301      	movs	r3, #1
 80033fa:	4013      	ands	r3, r2
 80033fc:	1e5a      	subs	r2, r3, #1
 80033fe:	4193      	sbcs	r3, r2
 8003400:	b2da      	uxtb	r2, r3
 8003402:	4b38      	ldr	r3, [pc, #224]	; (80034e4 <sensorhubControlHdlr+0x20c>)
 8003404:	725a      	strb	r2, [r3, #9]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.wakeupEnabled = ((pGetFeatureResp->flags & FEAT_WAKE_ENABLED) != 0);
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	789b      	ldrb	r3, [r3, #2]
 800340a:	001a      	movs	r2, r3
 800340c:	2304      	movs	r3, #4
 800340e:	4013      	ands	r3, r2
 8003410:	1e5a      	subs	r2, r3, #1
 8003412:	4193      	sbcs	r3, r2
 8003414:	b2da      	uxtb	r2, r3
 8003416:	4b33      	ldr	r3, [pc, #204]	; (80034e4 <sensorhubControlHdlr+0x20c>)
 8003418:	729a      	strb	r2, [r3, #10]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.alwaysOnEnabled = ((pGetFeatureResp->flags & FEAT_ALWAYS_ON_ENABLED) != 0);
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	789b      	ldrb	r3, [r3, #2]
 800341e:	001a      	movs	r2, r3
 8003420:	2308      	movs	r3, #8
 8003422:	4013      	ands	r3, r2
 8003424:	1e5a      	subs	r2, r3, #1
 8003426:	4193      	sbcs	r3, r2
 8003428:	b2da      	uxtb	r2, r3
 800342a:	4b2e      	ldr	r3, [pc, #184]	; (80034e4 <sensorhubControlHdlr+0x20c>)
 800342c:	72da      	strb	r2, [r3, #11]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivity = pGetFeatureResp->changeSensitivity;
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	78da      	ldrb	r2, [r3, #3]
 8003432:	791b      	ldrb	r3, [r3, #4]
 8003434:	021b      	lsls	r3, r3, #8
 8003436:	4313      	orrs	r3, r2
 8003438:	b29a      	uxth	r2, r3
 800343a:	4b2a      	ldr	r3, [pc, #168]	; (80034e4 <sensorhubControlHdlr+0x20c>)
 800343c:	819a      	strh	r2, [r3, #12]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.reportInterval_us = pGetFeatureResp->reportInterval_uS;
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	795a      	ldrb	r2, [r3, #5]
 8003442:	7999      	ldrb	r1, [r3, #6]
 8003444:	0209      	lsls	r1, r1, #8
 8003446:	430a      	orrs	r2, r1
 8003448:	79d9      	ldrb	r1, [r3, #7]
 800344a:	0409      	lsls	r1, r1, #16
 800344c:	430a      	orrs	r2, r1
 800344e:	7a1b      	ldrb	r3, [r3, #8]
 8003450:	061b      	lsls	r3, r3, #24
 8003452:	4313      	orrs	r3, r2
 8003454:	001a      	movs	r2, r3
 8003456:	4b23      	ldr	r3, [pc, #140]	; (80034e4 <sensorhubControlHdlr+0x20c>)
 8003458:	611a      	str	r2, [r3, #16]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.batchInterval_us = pGetFeatureResp->batchInterval_uS;
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	7a5a      	ldrb	r2, [r3, #9]
 800345e:	7a99      	ldrb	r1, [r3, #10]
 8003460:	0209      	lsls	r1, r1, #8
 8003462:	430a      	orrs	r2, r1
 8003464:	7ad9      	ldrb	r1, [r3, #11]
 8003466:	0409      	lsls	r1, r1, #16
 8003468:	430a      	orrs	r2, r1
 800346a:	7b1b      	ldrb	r3, [r3, #12]
 800346c:	061b      	lsls	r3, r3, #24
 800346e:	4313      	orrs	r3, r2
 8003470:	001a      	movs	r2, r3
 8003472:	4b1c      	ldr	r3, [pc, #112]	; (80034e4 <sensorhubControlHdlr+0x20c>)
 8003474:	615a      	str	r2, [r3, #20]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.sensorSpecific = pGetFeatureResp->sensorSpecific;
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	7b5a      	ldrb	r2, [r3, #13]
 800347a:	7b99      	ldrb	r1, [r3, #14]
 800347c:	0209      	lsls	r1, r1, #8
 800347e:	430a      	orrs	r2, r1
 8003480:	7bd9      	ldrb	r1, [r3, #15]
 8003482:	0409      	lsls	r1, r1, #16
 8003484:	430a      	orrs	r2, r1
 8003486:	7c1b      	ldrb	r3, [r3, #16]
 8003488:	061b      	lsls	r3, r3, #24
 800348a:	4313      	orrs	r3, r2
 800348c:	001a      	movs	r2, r3
 800348e:	4b15      	ldr	r3, [pc, #84]	; (80034e4 <sensorhubControlHdlr+0x20c>)
 8003490:	619a      	str	r2, [r3, #24]

                    pSh2->eventCallback(pSh2->eventCookie, &sh2AsyncEvent);
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	22bc      	movs	r2, #188	; 0xbc
 8003496:	589b      	ldr	r3, [r3, r2]
 8003498:	69fa      	ldr	r2, [r7, #28]
 800349a:	21c0      	movs	r1, #192	; 0xc0
 800349c:	5852      	ldr	r2, [r2, r1]
 800349e:	4911      	ldr	r1, [pc, #68]	; (80034e4 <sensorhubControlHdlr+0x20c>)
 80034a0:	0010      	movs	r0, r2
 80034a2:	4798      	blx	r3
                }
            }

            // Hand off to operation in progress, if any
            opRx(pSh2, payload+cursor, reportLen);
 80034a4:	242e      	movs	r4, #46	; 0x2e
 80034a6:	193b      	adds	r3, r7, r4
 80034a8:	881b      	ldrh	r3, [r3, #0]
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	18d1      	adds	r1, r2, r3
 80034ae:	2527      	movs	r5, #39	; 0x27
 80034b0:	197b      	adds	r3, r7, r5
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	0018      	movs	r0, r3
 80034ba:	f7ff fe6e 	bl	800319a <opRx>
            cursor += reportLen;
 80034be:	197b      	adds	r3, r7, r5
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	b299      	uxth	r1, r3
 80034c4:	193b      	adds	r3, r7, r4
 80034c6:	193a      	adds	r2, r7, r4
 80034c8:	8812      	ldrh	r2, [r2, #0]
 80034ca:	188a      	adds	r2, r1, r2
 80034cc:	801a      	strh	r2, [r3, #0]
    while (cursor < len) {
 80034ce:	232e      	movs	r3, #46	; 0x2e
 80034d0:	18fa      	adds	r2, r7, r3
 80034d2:	1dbb      	adds	r3, r7, #6
 80034d4:	8812      	ldrh	r2, [r2, #0]
 80034d6:	881b      	ldrh	r3, [r3, #0]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d200      	bcs.n	80034de <sensorhubControlHdlr+0x206>
 80034dc:	e71d      	b.n	800331a <sensorhubControlHdlr+0x42>
        }
    }
}
 80034de:	46bd      	mov	sp, r7
 80034e0:	b00c      	add	sp, #48	; 0x30
 80034e2:	bdb0      	pop	{r4, r5, r7, pc}
 80034e4:	2000079c 	.word	0x2000079c

080034e8 <getReportLen>:

    return pSh2->opStatus;
}

static uint8_t getReportLen(sh2_t *pSh2, uint8_t reportId)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	000a      	movs	r2, r1
 80034f2:	1cfb      	adds	r3, r7, #3
 80034f4:	701a      	strb	r2, [r3, #0]
    for (int n = 0; n < SH2_MAX_REPORT_IDS; n++) {
 80034f6:	2300      	movs	r3, #0
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	e015      	b.n	8003528 <getReportLen+0x40>
        if (pSh2->report[n].id == reportId) {
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	330c      	adds	r3, #12
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	18d3      	adds	r3, r2, r3
 8003506:	3305      	adds	r3, #5
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	1cfa      	adds	r2, r7, #3
 800350c:	7812      	ldrb	r2, [r2, #0]
 800350e:	429a      	cmp	r2, r3
 8003510:	d107      	bne.n	8003522 <getReportLen+0x3a>
            return pSh2->report[n].len;
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	330c      	adds	r3, #12
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	18d3      	adds	r3, r2, r3
 800351c:	3306      	adds	r3, #6
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	e006      	b.n	8003530 <getReportLen+0x48>
    for (int n = 0; n < SH2_MAX_REPORT_IDS; n++) {
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	3301      	adds	r3, #1
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2b3f      	cmp	r3, #63	; 0x3f
 800352c:	dde6      	ble.n	80034fc <getReportLen+0x14>
        }
    }

    return 0;
 800352e:	2300      	movs	r3, #0
}
 8003530:	0018      	movs	r0, r3
 8003532:	46bd      	mov	sp, r7
 8003534:	b004      	add	sp, #16
 8003536:	bd80      	pop	{r7, pc}

08003538 <touSTimestamp>:

// Produce 64-bit microsecond timestamp for a sensor event
static uint64_t touSTimestamp(uint32_t hostInt, int32_t referenceDelta, uint16_t delay)
{
 8003538:	b5b0      	push	{r4, r5, r7, lr}
 800353a:	b088      	sub	sp, #32
 800353c:	af00      	add	r7, sp, #0
 800353e:	6178      	str	r0, [r7, #20]
 8003540:	6139      	str	r1, [r7, #16]
 8003542:	230e      	movs	r3, #14
 8003544:	18fb      	adds	r3, r7, r3
 8003546:	801a      	strh	r2, [r3, #0]
    static uint32_t lastHostInt = 0;
    static uint32_t rollovers = 0;
    uint64_t timestamp;

    // Count times hostInt timestamps rolled over to produce upper bits
    if (hostInt < lastHostInt) {
 8003548:	4b18      	ldr	r3, [pc, #96]	; (80035ac <touSTimestamp+0x74>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	429a      	cmp	r2, r3
 8003550:	d204      	bcs.n	800355c <touSTimestamp+0x24>
        rollovers++;
 8003552:	4b17      	ldr	r3, [pc, #92]	; (80035b0 <touSTimestamp+0x78>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	1c5a      	adds	r2, r3, #1
 8003558:	4b15      	ldr	r3, [pc, #84]	; (80035b0 <touSTimestamp+0x78>)
 800355a:	601a      	str	r2, [r3, #0]
    }
    lastHostInt = hostInt;
 800355c:	4b13      	ldr	r3, [pc, #76]	; (80035ac <touSTimestamp+0x74>)
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	601a      	str	r2, [r3, #0]
    
    timestamp = ((uint64_t)rollovers << 32);
 8003562:	4b13      	ldr	r3, [pc, #76]	; (80035b0 <touSTimestamp+0x78>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	603b      	str	r3, [r7, #0]
 8003568:	2300      	movs	r3, #0
 800356a:	607b      	str	r3, [r7, #4]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	001b      	movs	r3, r3
 8003570:	61fb      	str	r3, [r7, #28]
 8003572:	2300      	movs	r3, #0
 8003574:	61bb      	str	r3, [r7, #24]
    timestamp += hostInt + (referenceDelta + delay) * 100;
 8003576:	230e      	movs	r3, #14
 8003578:	18fb      	adds	r3, r7, r3
 800357a:	881a      	ldrh	r2, [r3, #0]
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	18d3      	adds	r3, r2, r3
 8003580:	2264      	movs	r2, #100	; 0x64
 8003582:	4353      	muls	r3, r2
 8003584:	001a      	movs	r2, r3
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	18d3      	adds	r3, r2, r3
 800358a:	001c      	movs	r4, r3
 800358c:	2300      	movs	r3, #0
 800358e:	001d      	movs	r5, r3
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	1912      	adds	r2, r2, r4
 8003596:	416b      	adcs	r3, r5
 8003598:	61ba      	str	r2, [r7, #24]
 800359a:	61fb      	str	r3, [r7, #28]

    return timestamp;
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	69fb      	ldr	r3, [r7, #28]
}
 80035a0:	0010      	movs	r0, r2
 80035a2:	0019      	movs	r1, r3
 80035a4:	46bd      	mov	sp, r7
 80035a6:	b008      	add	sp, #32
 80035a8:	bdb0      	pop	{r4, r5, r7, pc}
 80035aa:	46c0      	nop			; (mov r8, r8)
 80035ac:	200007b8 	.word	0x200007b8
 80035b0:	200007bc 	.word	0x200007bc

080035b4 <sensorhubInputHdlr>:

static void sensorhubInputHdlr(sh2_t *pSh2, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 80035b4:	b5b0      	push	{r4, r5, r7, lr}
 80035b6:	b094      	sub	sp, #80	; 0x50
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	603b      	str	r3, [r7, #0]
 80035c0:	1dbb      	adds	r3, r7, #6
 80035c2:	801a      	strh	r2, [r3, #0]
    sh2_SensorEvent_t event;
    uint16_t cursor = 0;
 80035c4:	234e      	movs	r3, #78	; 0x4e
 80035c6:	18fb      	adds	r3, r7, r3
 80035c8:	2200      	movs	r2, #0
 80035ca:	801a      	strh	r2, [r3, #0]

    uint32_t referenceDelta;

    referenceDelta = 0;
 80035cc:	2300      	movs	r3, #0
 80035ce:	64bb      	str	r3, [r7, #72]	; 0x48

    while (cursor < len) {
 80035d0:	e0b8      	b.n	8003744 <sensorhubInputHdlr+0x190>
        // Get next report id
        uint8_t reportId = payload[cursor];
 80035d2:	234e      	movs	r3, #78	; 0x4e
 80035d4:	18fb      	adds	r3, r7, r3
 80035d6:	881b      	ldrh	r3, [r3, #0]
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	18d2      	adds	r2, r2, r3
 80035dc:	2147      	movs	r1, #71	; 0x47
 80035de:	187b      	adds	r3, r7, r1
 80035e0:	7812      	ldrb	r2, [r2, #0]
 80035e2:	701a      	strb	r2, [r3, #0]

        // Determine report length
        uint8_t reportLen = getReportLen(pSh2, reportId);
 80035e4:	2546      	movs	r5, #70	; 0x46
 80035e6:	197c      	adds	r4, r7, r5
 80035e8:	187b      	adds	r3, r7, r1
 80035ea:	781a      	ldrb	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	0011      	movs	r1, r2
 80035f0:	0018      	movs	r0, r3
 80035f2:	f7ff ff79 	bl	80034e8 <getReportLen>
 80035f6:	0003      	movs	r3, r0
 80035f8:	7023      	strb	r3, [r4, #0]
        if (reportLen == 0) {
 80035fa:	197b      	adds	r3, r7, r5
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d109      	bne.n	8003616 <sensorhubInputHdlr+0x62>
            // An unrecognized report id
            pSh2->unknownReportIds++;
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	23fc      	movs	r3, #252	; 0xfc
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	58d3      	ldr	r3, [r2, r3]
 800360a:	1c59      	adds	r1, r3, #1
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	23fc      	movs	r3, #252	; 0xfc
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	50d1      	str	r1, [r2, r3]
 8003614:	e09e      	b.n	8003754 <sensorhubInputHdlr+0x1a0>
            return;
        }
        else {
            if (reportId == SENSORHUB_BASE_TIMESTAMP_REF) {
 8003616:	2347      	movs	r3, #71	; 0x47
 8003618:	18fb      	adds	r3, r7, r3
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	2bfb      	cmp	r3, #251	; 0xfb
 800361e:	d113      	bne.n	8003648 <sensorhubInputHdlr+0x94>
                const BaseTimestampRef_t *rpt = (const BaseTimestampRef_t *)(payload+cursor);
 8003620:	234e      	movs	r3, #78	; 0x4e
 8003622:	18fb      	adds	r3, r7, r3
 8003624:	881b      	ldrh	r3, [r3, #0]
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	18d3      	adds	r3, r2, r3
 800362a:	637b      	str	r3, [r7, #52]	; 0x34
                
                // store base timestamp reference
                referenceDelta = -rpt->timebase;
 800362c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800362e:	785a      	ldrb	r2, [r3, #1]
 8003630:	7899      	ldrb	r1, [r3, #2]
 8003632:	0209      	lsls	r1, r1, #8
 8003634:	430a      	orrs	r2, r1
 8003636:	78d9      	ldrb	r1, [r3, #3]
 8003638:	0409      	lsls	r1, r1, #16
 800363a:	430a      	orrs	r2, r1
 800363c:	791b      	ldrb	r3, [r3, #4]
 800363e:	061b      	lsls	r3, r3, #24
 8003640:	4313      	orrs	r3, r2
 8003642:	425b      	negs	r3, r3
 8003644:	64bb      	str	r3, [r7, #72]	; 0x48
 8003646:	e073      	b.n	8003730 <sensorhubInputHdlr+0x17c>
            }
            else if (reportId == SENSORHUB_TIMESTAMP_REBASE) {
 8003648:	2347      	movs	r3, #71	; 0x47
 800364a:	18fb      	adds	r3, r7, r3
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	2bfa      	cmp	r3, #250	; 0xfa
 8003650:	d115      	bne.n	800367e <sensorhubInputHdlr+0xca>
                const TimestampRebase_t *rpt = (const TimestampRebase_t *)(payload+cursor);
 8003652:	234e      	movs	r3, #78	; 0x4e
 8003654:	18fb      	adds	r3, r7, r3
 8003656:	881b      	ldrh	r3, [r3, #0]
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	18d3      	adds	r3, r2, r3
 800365c:	63bb      	str	r3, [r7, #56]	; 0x38

                referenceDelta += rpt->timebase;
 800365e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003660:	785a      	ldrb	r2, [r3, #1]
 8003662:	7899      	ldrb	r1, [r3, #2]
 8003664:	0209      	lsls	r1, r1, #8
 8003666:	430a      	orrs	r2, r1
 8003668:	78d9      	ldrb	r1, [r3, #3]
 800366a:	0409      	lsls	r1, r1, #16
 800366c:	430a      	orrs	r2, r1
 800366e:	791b      	ldrb	r3, [r3, #4]
 8003670:	061b      	lsls	r3, r3, #24
 8003672:	4313      	orrs	r3, r2
 8003674:	001a      	movs	r2, r3
 8003676:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003678:	189b      	adds	r3, r3, r2
 800367a:	64bb      	str	r3, [r7, #72]	; 0x48
 800367c:	e058      	b.n	8003730 <sensorhubInputHdlr+0x17c>
            }
            else if (reportId == SENSORHUB_FLUSH_COMPLETED) {
 800367e:	2347      	movs	r3, #71	; 0x47
 8003680:	18fb      	adds	r3, r7, r3
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	2bef      	cmp	r3, #239	; 0xef
 8003686:	d10d      	bne.n	80036a4 <sensorhubInputHdlr+0xf0>
                // Route this as if it arrived on command channel.
                opRx(pSh2, payload+cursor, reportLen);
 8003688:	234e      	movs	r3, #78	; 0x4e
 800368a:	18fb      	adds	r3, r7, r3
 800368c:	881b      	ldrh	r3, [r3, #0]
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	18d1      	adds	r1, r2, r3
 8003692:	2346      	movs	r3, #70	; 0x46
 8003694:	18fb      	adds	r3, r7, r3
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	b29a      	uxth	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	0018      	movs	r0, r3
 800369e:	f7ff fd7c 	bl	800319a <opRx>
 80036a2:	e045      	b.n	8003730 <sensorhubInputHdlr+0x17c>
            }
            else {
                uint8_t *pReport = payload+cursor;
 80036a4:	234e      	movs	r3, #78	; 0x4e
 80036a6:	18fb      	adds	r3, r7, r3
 80036a8:	881b      	ldrh	r3, [r3, #0]
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	18d3      	adds	r3, r2, r3
 80036ae:	643b      	str	r3, [r7, #64]	; 0x40
                uint16_t delay = ((pReport[2] & 0xFC) << 6) + pReport[3];
 80036b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036b2:	3302      	adds	r3, #2
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	019b      	lsls	r3, r3, #6
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	23fc      	movs	r3, #252	; 0xfc
 80036bc:	019b      	lsls	r3, r3, #6
 80036be:	4013      	ands	r3, r2
 80036c0:	b299      	uxth	r1, r3
 80036c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036c4:	3303      	adds	r3, #3
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	203e      	movs	r0, #62	; 0x3e
 80036cc:	183b      	adds	r3, r7, r0
 80036ce:	188a      	adds	r2, r1, r2
 80036d0:	801a      	strh	r2, [r3, #0]
                event.timestamp_uS = touSTimestamp(timestamp, referenceDelta, delay);
 80036d2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80036d4:	183b      	adds	r3, r7, r0
 80036d6:	881a      	ldrh	r2, [r3, #0]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	0018      	movs	r0, r3
 80036dc:	f7ff ff2c 	bl	8003538 <touSTimestamp>
 80036e0:	0002      	movs	r2, r0
 80036e2:	000b      	movs	r3, r1
 80036e4:	2010      	movs	r0, #16
 80036e6:	1839      	adds	r1, r7, r0
 80036e8:	600a      	str	r2, [r1, #0]
 80036ea:	604b      	str	r3, [r1, #4]
                event.reportId = reportId;
 80036ec:	183b      	adds	r3, r7, r0
 80036ee:	2247      	movs	r2, #71	; 0x47
 80036f0:	18ba      	adds	r2, r7, r2
 80036f2:	7812      	ldrb	r2, [r2, #0]
 80036f4:	725a      	strb	r2, [r3, #9]
                memcpy(event.report, pReport, reportLen);
 80036f6:	2546      	movs	r5, #70	; 0x46
 80036f8:	197b      	adds	r3, r7, r5
 80036fa:	781a      	ldrb	r2, [r3, #0]
 80036fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80036fe:	0004      	movs	r4, r0
 8003700:	183b      	adds	r3, r7, r0
 8003702:	330a      	adds	r3, #10
 8003704:	0018      	movs	r0, r3
 8003706:	f007 fa01 	bl	800ab0c <memcpy>
                event.len = reportLen;
 800370a:	0020      	movs	r0, r4
 800370c:	183b      	adds	r3, r7, r0
 800370e:	197a      	adds	r2, r7, r5
 8003710:	7812      	ldrb	r2, [r2, #0]
 8003712:	721a      	strb	r2, [r3, #8]
                if (pSh2->sensorCallback != 0) {
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	22c4      	movs	r2, #196	; 0xc4
 8003718:	589b      	ldr	r3, [r3, r2]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d008      	beq.n	8003730 <sensorhubInputHdlr+0x17c>
                    pSh2->sensorCallback(pSh2->sensorCookie, &event);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	22c4      	movs	r2, #196	; 0xc4
 8003722:	589b      	ldr	r3, [r3, r2]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	21c8      	movs	r1, #200	; 0xc8
 8003728:	5852      	ldr	r2, [r2, r1]
 800372a:	1839      	adds	r1, r7, r0
 800372c:	0010      	movs	r0, r2
 800372e:	4798      	blx	r3
                }
            }
            cursor += reportLen;
 8003730:	2346      	movs	r3, #70	; 0x46
 8003732:	18fb      	adds	r3, r7, r3
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	b299      	uxth	r1, r3
 8003738:	224e      	movs	r2, #78	; 0x4e
 800373a:	18bb      	adds	r3, r7, r2
 800373c:	18ba      	adds	r2, r7, r2
 800373e:	8812      	ldrh	r2, [r2, #0]
 8003740:	188a      	adds	r2, r1, r2
 8003742:	801a      	strh	r2, [r3, #0]
    while (cursor < len) {
 8003744:	234e      	movs	r3, #78	; 0x4e
 8003746:	18fa      	adds	r2, r7, r3
 8003748:	1dbb      	adds	r3, r7, #6
 800374a:	8812      	ldrh	r2, [r2, #0]
 800374c:	881b      	ldrh	r3, [r3, #0]
 800374e:	429a      	cmp	r2, r3
 8003750:	d200      	bcs.n	8003754 <sensorhubInputHdlr+0x1a0>
 8003752:	e73e      	b.n	80035d2 <sensorhubInputHdlr+0x1e>
        }
    }
}
 8003754:	46bd      	mov	sp, r7
 8003756:	b014      	add	sp, #80	; 0x50
 8003758:	bdb0      	pop	{r4, r5, r7, pc}

0800375a <sensorhubInputNormalHdlr>:

static void sensorhubInputNormalHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 800375a:	b590      	push	{r4, r7, lr}
 800375c:	b087      	sub	sp, #28
 800375e:	af00      	add	r7, sp, #0
 8003760:	60f8      	str	r0, [r7, #12]
 8003762:	60b9      	str	r1, [r7, #8]
 8003764:	603b      	str	r3, [r7, #0]
 8003766:	1dbb      	adds	r3, r7, #6
 8003768:	801a      	strh	r2, [r3, #0]
    sh2_t *pSh2 = (sh2_t *)cookie;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	617b      	str	r3, [r7, #20]

    sensorhubInputHdlr(pSh2, payload, len, timestamp);
 800376e:	683c      	ldr	r4, [r7, #0]
 8003770:	1dbb      	adds	r3, r7, #6
 8003772:	881a      	ldrh	r2, [r3, #0]
 8003774:	68b9      	ldr	r1, [r7, #8]
 8003776:	6978      	ldr	r0, [r7, #20]
 8003778:	0023      	movs	r3, r4
 800377a:	f7ff ff1b 	bl	80035b4 <sensorhubInputHdlr>
}
 800377e:	46c0      	nop			; (mov r8, r8)
 8003780:	46bd      	mov	sp, r7
 8003782:	b007      	add	sp, #28
 8003784:	bd90      	pop	{r4, r7, pc}

08003786 <sensorhubInputWakeHdlr>:

static void sensorhubInputWakeHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8003786:	b590      	push	{r4, r7, lr}
 8003788:	b087      	sub	sp, #28
 800378a:	af00      	add	r7, sp, #0
 800378c:	60f8      	str	r0, [r7, #12]
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	603b      	str	r3, [r7, #0]
 8003792:	1dbb      	adds	r3, r7, #6
 8003794:	801a      	strh	r2, [r3, #0]
    sh2_t *pSh2 = (sh2_t *)cookie;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	617b      	str	r3, [r7, #20]
    
    sensorhubInputHdlr(pSh2, payload, len, timestamp);
 800379a:	683c      	ldr	r4, [r7, #0]
 800379c:	1dbb      	adds	r3, r7, #6
 800379e:	881a      	ldrh	r2, [r3, #0]
 80037a0:	68b9      	ldr	r1, [r7, #8]
 80037a2:	6978      	ldr	r0, [r7, #20]
 80037a4:	0023      	movs	r3, r4
 80037a6:	f7ff ff05 	bl	80035b4 <sensorhubInputHdlr>
}
 80037aa:	46c0      	nop			; (mov r8, r8)
 80037ac:	46bd      	mov	sp, r7
 80037ae:	b007      	add	sp, #28
 80037b0:	bd90      	pop	{r4, r7, pc}

080037b2 <sensorhubInputGyroRvHdlr>:

static void sensorhubInputGyroRvHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 80037b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037b4:	b091      	sub	sp, #68	; 0x44
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	60f8      	str	r0, [r7, #12]
 80037ba:	60b9      	str	r1, [r7, #8]
 80037bc:	603b      	str	r3, [r7, #0]
 80037be:	1dbb      	adds	r3, r7, #6
 80037c0:	801a      	strh	r2, [r3, #0]
    sh2_t *pSh2 = (sh2_t *)cookie;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	63bb      	str	r3, [r7, #56]	; 0x38
    sh2_SensorEvent_t event;
    uint16_t cursor = 0;
 80037c6:	233e      	movs	r3, #62	; 0x3e
 80037c8:	18fb      	adds	r3, r7, r3
 80037ca:	2200      	movs	r2, #0
 80037cc:	801a      	strh	r2, [r3, #0]

    uint8_t reportId = SH2_GYRO_INTEGRATED_RV;
 80037ce:	2137      	movs	r1, #55	; 0x37
 80037d0:	187b      	adds	r3, r7, r1
 80037d2:	222a      	movs	r2, #42	; 0x2a
 80037d4:	701a      	strb	r2, [r3, #0]
    uint8_t reportLen = getReportLen(pSh2, reportId);
 80037d6:	2336      	movs	r3, #54	; 0x36
 80037d8:	18fe      	adds	r6, r7, r3
 80037da:	187b      	adds	r3, r7, r1
 80037dc:	781a      	ldrb	r2, [r3, #0]
 80037de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e0:	0011      	movs	r1, r2
 80037e2:	0018      	movs	r0, r3
 80037e4:	f7ff fe80 	bl	80034e8 <getReportLen>
 80037e8:	0003      	movs	r3, r0
 80037ea:	7033      	strb	r3, [r6, #0]

    while (cursor < len) {
 80037ec:	e038      	b.n	8003860 <sensorhubInputGyroRvHdlr+0xae>
        event.timestamp_uS = timestamp;
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	001c      	movs	r4, r3
 80037f2:	2300      	movs	r3, #0
 80037f4:	001d      	movs	r5, r3
 80037f6:	2010      	movs	r0, #16
 80037f8:	183b      	adds	r3, r7, r0
 80037fa:	601c      	str	r4, [r3, #0]
 80037fc:	605d      	str	r5, [r3, #4]
        event.reportId = reportId;
 80037fe:	183b      	adds	r3, r7, r0
 8003800:	2237      	movs	r2, #55	; 0x37
 8003802:	18ba      	adds	r2, r7, r2
 8003804:	7812      	ldrb	r2, [r2, #0]
 8003806:	725a      	strb	r2, [r3, #9]
        memcpy(event.report, payload+cursor, reportLen);
 8003808:	233e      	movs	r3, #62	; 0x3e
 800380a:	18fb      	adds	r3, r7, r3
 800380c:	881b      	ldrh	r3, [r3, #0]
 800380e:	68ba      	ldr	r2, [r7, #8]
 8003810:	18d1      	adds	r1, r2, r3
 8003812:	2336      	movs	r3, #54	; 0x36
 8003814:	18fb      	adds	r3, r7, r3
 8003816:	781a      	ldrb	r2, [r3, #0]
 8003818:	0006      	movs	r6, r0
 800381a:	183b      	adds	r3, r7, r0
 800381c:	330a      	adds	r3, #10
 800381e:	0018      	movs	r0, r3
 8003820:	f007 f974 	bl	800ab0c <memcpy>
        event.len = reportLen;
 8003824:	0030      	movs	r0, r6
 8003826:	183b      	adds	r3, r7, r0
 8003828:	2236      	movs	r2, #54	; 0x36
 800382a:	18ba      	adds	r2, r7, r2
 800382c:	7812      	ldrb	r2, [r2, #0]
 800382e:	721a      	strb	r2, [r3, #8]

        if (pSh2->sensorCallback != 0) {
 8003830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003832:	22c4      	movs	r2, #196	; 0xc4
 8003834:	589b      	ldr	r3, [r3, r2]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d008      	beq.n	800384c <sensorhubInputGyroRvHdlr+0x9a>
            pSh2->sensorCallback(pSh2->sensorCookie, &event);
 800383a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800383c:	22c4      	movs	r2, #196	; 0xc4
 800383e:	589b      	ldr	r3, [r3, r2]
 8003840:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003842:	21c8      	movs	r1, #200	; 0xc8
 8003844:	5852      	ldr	r2, [r2, r1]
 8003846:	1839      	adds	r1, r7, r0
 8003848:	0010      	movs	r0, r2
 800384a:	4798      	blx	r3
        }

        cursor += reportLen;
 800384c:	2336      	movs	r3, #54	; 0x36
 800384e:	18fb      	adds	r3, r7, r3
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	b299      	uxth	r1, r3
 8003854:	223e      	movs	r2, #62	; 0x3e
 8003856:	18bb      	adds	r3, r7, r2
 8003858:	18ba      	adds	r2, r7, r2
 800385a:	8812      	ldrh	r2, [r2, #0]
 800385c:	188a      	adds	r2, r1, r2
 800385e:	801a      	strh	r2, [r3, #0]
    while (cursor < len) {
 8003860:	233e      	movs	r3, #62	; 0x3e
 8003862:	18fa      	adds	r2, r7, r3
 8003864:	1dbb      	adds	r3, r7, #6
 8003866:	8812      	ldrh	r2, [r2, #0]
 8003868:	881b      	ldrh	r3, [r3, #0]
 800386a:	429a      	cmp	r2, r3
 800386c:	d3bf      	bcc.n	80037ee <sensorhubInputGyroRvHdlr+0x3c>
    }
}
 800386e:	46c0      	nop			; (mov r8, r8)
 8003870:	46c0      	nop			; (mov r8, r8)
 8003872:	46bd      	mov	sp, r7
 8003874:	b011      	add	sp, #68	; 0x44
 8003876:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003878 <executableAdvertHdlr>:

static void executableAdvertHdlr(void *cookie, uint8_t tag, uint8_t len, uint8_t *value)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	0008      	movs	r0, r1
 8003882:	0011      	movs	r1, r2
 8003884:	607b      	str	r3, [r7, #4]
 8003886:	230b      	movs	r3, #11
 8003888:	18fb      	adds	r3, r7, r3
 800388a:	1c02      	adds	r2, r0, #0
 800388c:	701a      	strb	r2, [r3, #0]
 800388e:	230a      	movs	r3, #10
 8003890:	18fb      	adds	r3, r7, r3
 8003892:	1c0a      	adds	r2, r1, #0
 8003894:	701a      	strb	r2, [r3, #0]
    // Ignore.  No known TLV tags for this app.
}
 8003896:	46c0      	nop			; (mov r8, r8)
 8003898:	46bd      	mov	sp, r7
 800389a:	b004      	add	sp, #16
 800389c:	bd80      	pop	{r7, pc}
	...

080038a0 <executableDeviceHdlr>:

static void executableDeviceHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	603b      	str	r3, [r7, #0]
 80038ac:	1dbb      	adds	r3, r7, #6
 80038ae:	801a      	strh	r2, [r3, #0]
    sh2_t *pSh2 = (sh2_t *)cookie;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	617b      	str	r3, [r7, #20]

    // Discard if length is bad
    if (len != 1) {
 80038b4:	1dbb      	adds	r3, r7, #6
 80038b6:	881b      	ldrh	r3, [r3, #0]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d009      	beq.n	80038d0 <executableDeviceHdlr+0x30>
        pSh2->execBadPayload++;
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	23f8      	movs	r3, #248	; 0xf8
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	58d3      	ldr	r3, [r2, r3]
 80038c4:	1c59      	adds	r1, r3, #1
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	23f8      	movs	r3, #248	; 0xf8
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	50d1      	str	r1, [r2, r3]
        return;
 80038ce:	e023      	b.n	8003918 <executableDeviceHdlr+0x78>
    }
    
    switch (payload[0]) {
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d114      	bne.n	8003902 <executableDeviceHdlr+0x62>
        case EXECUTABLE_DEVICE_RESP_RESET_COMPLETE:
            // reset process is now done.
            pSh2->resetComplete = true;
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	2201      	movs	r2, #1
 80038dc:	721a      	strb	r2, [r3, #8]
            
            // Notify client that reset is complete.
            sh2AsyncEvent.eventId = SH2_RESET;
 80038de:	4b10      	ldr	r3, [pc, #64]	; (8003920 <executableDeviceHdlr+0x80>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]
            if (pSh2->eventCallback) {
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	22bc      	movs	r2, #188	; 0xbc
 80038e8:	589b      	ldr	r3, [r3, r2]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d013      	beq.n	8003916 <executableDeviceHdlr+0x76>
                pSh2->eventCallback(pSh2->eventCookie, &sh2AsyncEvent);
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	22bc      	movs	r2, #188	; 0xbc
 80038f2:	589b      	ldr	r3, [r3, r2]
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	21c0      	movs	r1, #192	; 0xc0
 80038f8:	5852      	ldr	r2, [r2, r1]
 80038fa:	4909      	ldr	r1, [pc, #36]	; (8003920 <executableDeviceHdlr+0x80>)
 80038fc:	0010      	movs	r0, r2
 80038fe:	4798      	blx	r3
            }
            break;
 8003900:	e009      	b.n	8003916 <executableDeviceHdlr+0x76>
        default:
            pSh2->execBadPayload++;
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	23f8      	movs	r3, #248	; 0xf8
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	58d3      	ldr	r3, [r2, r3]
 800390a:	1c59      	adds	r1, r3, #1
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	23f8      	movs	r3, #248	; 0xf8
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	50d1      	str	r1, [r2, r3]
            break;
 8003914:	e000      	b.n	8003918 <executableDeviceHdlr+0x78>
            break;
 8003916:	46c0      	nop			; (mov r8, r8)
    }
}
 8003918:	46bd      	mov	sp, r7
 800391a:	b006      	add	sp, #24
 800391c:	bd80      	pop	{r7, pc}
 800391e:	46c0      	nop			; (mov r8, r8)
 8003920:	2000079c 	.word	0x2000079c

08003924 <shtpEventCallback>:


// ------------------------------------------------------------------------
// SHTP Event Callback

static void shtpEventCallback(void *cookie, shtp_Event_t shtpEvent) {
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	000a      	movs	r2, r1
 800392e:	1cfb      	adds	r3, r7, #3
 8003930:	701a      	strb	r2, [r3, #0]
    sh2_t *pSh2 = &_sh2;
 8003932:	4b0d      	ldr	r3, [pc, #52]	; (8003968 <shtpEventCallback+0x44>)
 8003934:	60fb      	str	r3, [r7, #12]

    sh2AsyncEvent.eventId = SH2_SHTP_EVENT;
 8003936:	4b0d      	ldr	r3, [pc, #52]	; (800396c <shtpEventCallback+0x48>)
 8003938:	2201      	movs	r2, #1
 800393a:	601a      	str	r2, [r3, #0]
    sh2AsyncEvent.shtpEvent = shtpEvent;
 800393c:	4b0b      	ldr	r3, [pc, #44]	; (800396c <shtpEventCallback+0x48>)
 800393e:	1cfa      	adds	r2, r7, #3
 8003940:	7812      	ldrb	r2, [r2, #0]
 8003942:	711a      	strb	r2, [r3, #4]
    if (pSh2->eventCallback) {
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	22bc      	movs	r2, #188	; 0xbc
 8003948:	589b      	ldr	r3, [r3, r2]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d008      	beq.n	8003960 <shtpEventCallback+0x3c>
        pSh2->eventCallback(pSh2->eventCookie, &sh2AsyncEvent);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	22bc      	movs	r2, #188	; 0xbc
 8003952:	589b      	ldr	r3, [r3, r2]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	21c0      	movs	r1, #192	; 0xc0
 8003958:	5852      	ldr	r2, [r2, r1]
 800395a:	4904      	ldr	r1, [pc, #16]	; (800396c <shtpEventCallback+0x48>)
 800395c:	0010      	movs	r0, r2
 800395e:	4798      	blx	r3
    }
}
 8003960:	46c0      	nop			; (mov r8, r8)
 8003962:	46bd      	mov	sp, r7
 8003964:	b004      	add	sp, #16
 8003966:	bd80      	pop	{r7, pc}
 8003968:	200005a0 	.word	0x200005a0
 800396c:	2000079c 	.word	0x2000079c

08003970 <sh2_open>:
 * @param  eventCookie Will be passed to eventCallback.
 * @return SH2_OK (0), on success.  Negative value from sh2_err.h on error.
 */
int sh2_open(sh2_Hal_t *pHal,
             sh2_EventCallback_t *eventCallback, void *eventCookie)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b08a      	sub	sp, #40	; 0x28
 8003974:	af02      	add	r7, sp, #8
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
    sh2_t *pSh2 = &_sh2;
 800397c:	4b55      	ldr	r3, [pc, #340]	; (8003ad4 <sh2_open+0x164>)
 800397e:	61bb      	str	r3, [r7, #24]
    
    // Validate parameters
    if (pHal == 0) return SH2_ERR_BAD_PARAM;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d102      	bne.n	800398c <sh2_open+0x1c>
 8003986:	2302      	movs	r3, #2
 8003988:	425b      	negs	r3, r3
 800398a:	e09e      	b.n	8003aca <sh2_open+0x15a>

    // Clear everything in sh2 structure.
    memset(&_sh2, 0, sizeof(_sh2));
 800398c:	23fe      	movs	r3, #254	; 0xfe
 800398e:	005a      	lsls	r2, r3, #1
 8003990:	4b50      	ldr	r3, [pc, #320]	; (8003ad4 <sh2_open+0x164>)
 8003992:	2100      	movs	r1, #0
 8003994:	0018      	movs	r0, r3
 8003996:	f007 f885 	bl	800aaa4 <memset>
        
    pSh2->resetComplete = false;  // will go true after reset response from SH.
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	2200      	movs	r2, #0
 800399e:	721a      	strb	r2, [r3, #8]
    pSh2->controlChan = 0xFF;  // An invalid value since we don't know yet.
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	22ff      	movs	r2, #255	; 0xff
 80039a4:	72da      	strb	r2, [r3, #11]
    
    // Store reference to HAL for future use.
    pSh2->pHal = pHal;
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	601a      	str	r2, [r3, #0]
    pSh2->eventCallback = eventCallback;
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	21bc      	movs	r1, #188	; 0xbc
 80039b0:	68ba      	ldr	r2, [r7, #8]
 80039b2:	505a      	str	r2, [r3, r1]
    pSh2->eventCookie = eventCookie;
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	21c0      	movs	r1, #192	; 0xc0
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	505a      	str	r2, [r3, r1]
    pSh2->sensorCallback = 0;
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	22c4      	movs	r2, #196	; 0xc4
 80039c0:	2100      	movs	r1, #0
 80039c2:	5099      	str	r1, [r3, r2]
    pSh2->sensorCookie = 0;
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	22c8      	movs	r2, #200	; 0xc8
 80039c8:	2100      	movs	r1, #0
 80039ca:	5099      	str	r1, [r3, r2]

    // Open SHTP layer
    pSh2->pShtp = shtp_open(pSh2->pHal);
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	0018      	movs	r0, r3
 80039d2:	f002 f85d 	bl	8005a90 <shtp_open>
 80039d6:	0002      	movs	r2, r0
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	605a      	str	r2, [r3, #4]
    if (pSh2->pShtp == 0) {
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d102      	bne.n	80039ea <sh2_open+0x7a>
        // Error opening SHTP
        return SH2_ERR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	425b      	negs	r3, r3
 80039e8:	e06f      	b.n	8003aca <sh2_open+0x15a>
    }

    // Register SHTP event callback
    shtp_setEventCallback(pSh2->pShtp, shtpEventCallback, &_sh2);
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	4a39      	ldr	r2, [pc, #228]	; (8003ad4 <sh2_open+0x164>)
 80039f0:	4939      	ldr	r1, [pc, #228]	; (8003ad8 <sh2_open+0x168>)
 80039f2:	0018      	movs	r0, r3
 80039f4:	f002 f8b4 	bl	8005b60 <shtp_setEventCallback>

    // Register with SHTP
    // Register SH2 handlers
    shtp_listenAdvert(pSh2->pShtp, GUID_SENSORHUB, sensorhubAdvertHdlr, &_sh2);
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	6858      	ldr	r0, [r3, #4]
 80039fc:	4b35      	ldr	r3, [pc, #212]	; (8003ad4 <sh2_open+0x164>)
 80039fe:	4a37      	ldr	r2, [pc, #220]	; (8003adc <sh2_open+0x16c>)
 8003a00:	2102      	movs	r1, #2
 8003a02:	f002 f8e5 	bl	8005bd0 <shtp_listenAdvert>
    shtp_listenChan(pSh2->pShtp, GUID_SENSORHUB, "control", sensorhubControlHdlr, &_sh2);
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	6858      	ldr	r0, [r3, #4]
 8003a0a:	4935      	ldr	r1, [pc, #212]	; (8003ae0 <sh2_open+0x170>)
 8003a0c:	4a35      	ldr	r2, [pc, #212]	; (8003ae4 <sh2_open+0x174>)
 8003a0e:	4b31      	ldr	r3, [pc, #196]	; (8003ad4 <sh2_open+0x164>)
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	000b      	movs	r3, r1
 8003a14:	2102      	movs	r1, #2
 8003a16:	f002 f8b5 	bl	8005b84 <shtp_listenChan>
    shtp_listenChan(pSh2->pShtp, GUID_SENSORHUB, "inputNormal", sensorhubInputNormalHdlr, &_sh2);
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	6858      	ldr	r0, [r3, #4]
 8003a1e:	4932      	ldr	r1, [pc, #200]	; (8003ae8 <sh2_open+0x178>)
 8003a20:	4a32      	ldr	r2, [pc, #200]	; (8003aec <sh2_open+0x17c>)
 8003a22:	4b2c      	ldr	r3, [pc, #176]	; (8003ad4 <sh2_open+0x164>)
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	000b      	movs	r3, r1
 8003a28:	2102      	movs	r1, #2
 8003a2a:	f002 f8ab 	bl	8005b84 <shtp_listenChan>
    shtp_listenChan(pSh2->pShtp, GUID_SENSORHUB, "inputWake", sensorhubInputWakeHdlr, &_sh2);
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	6858      	ldr	r0, [r3, #4]
 8003a32:	492f      	ldr	r1, [pc, #188]	; (8003af0 <sh2_open+0x180>)
 8003a34:	4a2f      	ldr	r2, [pc, #188]	; (8003af4 <sh2_open+0x184>)
 8003a36:	4b27      	ldr	r3, [pc, #156]	; (8003ad4 <sh2_open+0x164>)
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	000b      	movs	r3, r1
 8003a3c:	2102      	movs	r1, #2
 8003a3e:	f002 f8a1 	bl	8005b84 <shtp_listenChan>
    shtp_listenChan(pSh2->pShtp, GUID_SENSORHUB, "inputGyroRv", sensorhubInputGyroRvHdlr, &_sh2);
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	6858      	ldr	r0, [r3, #4]
 8003a46:	492c      	ldr	r1, [pc, #176]	; (8003af8 <sh2_open+0x188>)
 8003a48:	4a2c      	ldr	r2, [pc, #176]	; (8003afc <sh2_open+0x18c>)
 8003a4a:	4b22      	ldr	r3, [pc, #136]	; (8003ad4 <sh2_open+0x164>)
 8003a4c:	9300      	str	r3, [sp, #0]
 8003a4e:	000b      	movs	r3, r1
 8003a50:	2102      	movs	r1, #2
 8003a52:	f002 f897 	bl	8005b84 <shtp_listenChan>

    // Register EXECUTABLE handlers
    shtp_listenAdvert(pSh2->pShtp, GUID_EXECUTABLE, executableAdvertHdlr, &_sh2);
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	6858      	ldr	r0, [r3, #4]
 8003a5a:	4b1e      	ldr	r3, [pc, #120]	; (8003ad4 <sh2_open+0x164>)
 8003a5c:	4a28      	ldr	r2, [pc, #160]	; (8003b00 <sh2_open+0x190>)
 8003a5e:	2101      	movs	r1, #1
 8003a60:	f002 f8b6 	bl	8005bd0 <shtp_listenAdvert>
    shtp_listenChan(pSh2->pShtp, GUID_EXECUTABLE, "device", executableDeviceHdlr, &_sh2);
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	6858      	ldr	r0, [r3, #4]
 8003a68:	4926      	ldr	r1, [pc, #152]	; (8003b04 <sh2_open+0x194>)
 8003a6a:	4a27      	ldr	r2, [pc, #156]	; (8003b08 <sh2_open+0x198>)
 8003a6c:	4b19      	ldr	r3, [pc, #100]	; (8003ad4 <sh2_open+0x164>)
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	000b      	movs	r3, r1
 8003a72:	2101      	movs	r1, #1
 8003a74:	f002 f886 	bl	8005b84 <shtp_listenChan>

    // Wait for reset notifications to arrive.
    // The client can't talk to the sensor hub until that happens.
    uint32_t start_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	691a      	ldr	r2, [r3, #16]
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	0018      	movs	r0, r3
 8003a84:	4790      	blx	r2
 8003a86:	0003      	movs	r3, r0
 8003a88:	617b      	str	r3, [r7, #20]
    uint32_t now_us = start_us;
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	61fb      	str	r3, [r7, #28]
    while (((now_us - start_us) < ADVERT_TIMEOUT_US) &&
 8003a8e:	e00d      	b.n	8003aac <sh2_open+0x13c>
           (!pSh2->resetComplete))
    {
        shtp_service(pSh2->pShtp);
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	0018      	movs	r0, r3
 8003a96:	f002 f967 	bl	8005d68 <shtp_service>
        now_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	691a      	ldr	r2, [r3, #16]
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	0018      	movs	r0, r3
 8003aa6:	4790      	blx	r2
 8003aa8:	0003      	movs	r3, r0
 8003aaa:	61fb      	str	r3, [r7, #28]
    while (((now_us - start_us) < ADVERT_TIMEOUT_US) &&
 8003aac:	69fa      	ldr	r2, [r7, #28]
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	4a16      	ldr	r2, [pc, #88]	; (8003b0c <sh2_open+0x19c>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d807      	bhi.n	8003ac8 <sh2_open+0x158>
           (!pSh2->resetComplete))
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	7a1b      	ldrb	r3, [r3, #8]
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2201      	movs	r2, #1
 8003ac0:	4053      	eors	r3, r2
 8003ac2:	b2db      	uxtb	r3, r3
    while (((now_us - start_us) < ADVERT_TIMEOUT_US) &&
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1e3      	bne.n	8003a90 <sh2_open+0x120>
    }
    
    // No errors.
    return SH2_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	0018      	movs	r0, r3
 8003acc:	46bd      	mov	sp, r7
 8003ace:	b008      	add	sp, #32
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	46c0      	nop			; (mov r8, r8)
 8003ad4:	200005a0 	.word	0x200005a0
 8003ad8:	08003925 	.word	0x08003925
 8003adc:	080031d9 	.word	0x080031d9
 8003ae0:	080032d9 	.word	0x080032d9
 8003ae4:	0800ab4c 	.word	0x0800ab4c
 8003ae8:	0800375b 	.word	0x0800375b
 8003aec:	0800ab60 	.word	0x0800ab60
 8003af0:	08003787 	.word	0x08003787
 8003af4:	0800ab6c 	.word	0x0800ab6c
 8003af8:	080037b3 	.word	0x080037b3
 8003afc:	0800ab78 	.word	0x0800ab78
 8003b00:	08003879 	.word	0x08003879
 8003b04:	080038a1 	.word	0x080038a1
 8003b08:	0800ab38 	.word	0x0800ab38
 8003b0c:	00030d3f 	.word	0x00030d3f

08003b10 <sh2_setSensorCallback>:
 * @param  callback A function that will be called each time a sensor event is received.
 * @param  cookie  A value that will be passed to the sensor callback function.
 * @return SH2_OK (0), on success.  Negative value from sh2_err.h on error.
 */
int sh2_setSensorCallback(sh2_SensorCallback_t *callback, void *cookie)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
    sh2_t *pSh2 = &_sh2;
 8003b1a:	4b07      	ldr	r3, [pc, #28]	; (8003b38 <sh2_setSensorCallback+0x28>)
 8003b1c:	60fb      	str	r3, [r7, #12]
    
    pSh2->sensorCallback = callback;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	21c4      	movs	r1, #196	; 0xc4
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	505a      	str	r2, [r3, r1]
    pSh2->sensorCookie = cookie;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	21c8      	movs	r1, #200	; 0xc8
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	505a      	str	r2, [r3, r1]

    return SH2_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	0018      	movs	r0, r3
 8003b32:	46bd      	mov	sp, r7
 8003b34:	b004      	add	sp, #16
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	200005a0 	.word	0x200005a0

08003b3c <sh2_decodeSensorEvent>:

// ------------------------------------------------------------------------
// Public API

int sh2_decodeSensorEvent(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
    // Fill out fields of *value based on *event, converting data from message representation
    // to natural representation.

    int rc = SH2_OK;
 8003b46:	2300      	movs	r3, #0
 8003b48:	60fb      	str	r3, [r7, #12]

    value->sensorId = event->reportId;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	7a5a      	ldrb	r2, [r3, #9]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	701a      	strb	r2, [r3, #0]
    value->timestamp = event->timestamp_uS;
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	6879      	ldr	r1, [r7, #4]
 8003b5a:	608a      	str	r2, [r1, #8]
 8003b5c:	60cb      	str	r3, [r1, #12]

    if (value->sensorId != SH2_GYRO_INTEGRATED_RV) {
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	2b2a      	cmp	r3, #42	; 0x2a
 8003b64:	d00b      	beq.n	8003b7e <sh2_decodeSensorEvent+0x42>
        value->sequence = event->report[1];
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	7ada      	ldrb	r2, [r3, #11]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	705a      	strb	r2, [r3, #1]
        value->status = event->report[2] & 0x03;
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	7b1b      	ldrb	r3, [r3, #12]
 8003b72:	2203      	movs	r2, #3
 8003b74:	4013      	ands	r3, r2
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	709a      	strb	r2, [r3, #2]
 8003b7c:	e005      	b.n	8003b8a <sh2_decodeSensorEvent+0x4e>
    }
    else {
        value->sequence = 0;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	705a      	strb	r2, [r3, #1]
        value->status = 0;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	709a      	strb	r2, [r3, #2]
    }

    // extract delay field (100uS units)
    
    
    switch (value->sensorId) {
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	2b2b      	cmp	r3, #43	; 0x2b
 8003b90:	d900      	bls.n	8003b94 <sh2_decodeSensorEvent+0x58>
 8003b92:	e15a      	b.n	8003e4a <sh2_decodeSensorEvent+0x30e>
 8003b94:	009a      	lsls	r2, r3, #2
 8003b96:	4bb1      	ldr	r3, [pc, #708]	; (8003e5c <sh2_decodeSensorEvent+0x320>)
 8003b98:	18d3      	adds	r3, r2, r3
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	469f      	mov	pc, r3
        case SH2_RAW_ACCELEROMETER:
            rc = decodeRawAccelerometer(value, event);
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	0011      	movs	r1, r2
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	f000 f95b 	bl	8003e60 <decodeRawAccelerometer>
 8003baa:	0003      	movs	r3, r0
 8003bac:	60fb      	str	r3, [r7, #12]
            break;
 8003bae:	e150      	b.n	8003e52 <sh2_decodeSensorEvent+0x316>
        case SH2_ACCELEROMETER:
            rc = decodeAccelerometer(value, event);
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	0011      	movs	r1, r2
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	f000 f980 	bl	8003ebc <decodeAccelerometer>
 8003bbc:	0003      	movs	r3, r0
 8003bbe:	60fb      	str	r3, [r7, #12]
            break;
 8003bc0:	e147      	b.n	8003e52 <sh2_decodeSensorEvent+0x316>
        case SH2_LINEAR_ACCELERATION:
            rc = decodeLinearAcceleration(value, event);
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	0011      	movs	r1, r2
 8003bc8:	0018      	movs	r0, r3
 8003bca:	f000 f9ba 	bl	8003f42 <decodeLinearAcceleration>
 8003bce:	0003      	movs	r3, r0
 8003bd0:	60fb      	str	r3, [r7, #12]
            break;
 8003bd2:	e13e      	b.n	8003e52 <sh2_decodeSensorEvent+0x316>
        case SH2_GRAVITY:
            rc = decodeGravity(value, event);
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	0011      	movs	r1, r2
 8003bda:	0018      	movs	r0, r3
 8003bdc:	f000 f9f4 	bl	8003fc8 <decodeGravity>
 8003be0:	0003      	movs	r3, r0
 8003be2:	60fb      	str	r3, [r7, #12]
            break;
 8003be4:	e135      	b.n	8003e52 <sh2_decodeSensorEvent+0x316>
        case SH2_RAW_GYROSCOPE:
            rc = decodeRawGyroscope(value, event);
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	0011      	movs	r1, r2
 8003bec:	0018      	movs	r0, r3
 8003bee:	f000 fa2e 	bl	800404e <decodeRawGyroscope>
 8003bf2:	0003      	movs	r3, r0
 8003bf4:	60fb      	str	r3, [r7, #12]
            break;
 8003bf6:	e12c      	b.n	8003e52 <sh2_decodeSensorEvent+0x316>
        case SH2_GYROSCOPE_CALIBRATED:
            rc = decodeGyroscopeCalibrated(value, event);
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	0011      	movs	r1, r2
 8003bfe:	0018      	movs	r0, r3
 8003c00:	f000 fa5c 	bl	80040bc <decodeGyroscopeCalibrated>
 8003c04:	0003      	movs	r3, r0
 8003c06:	60fb      	str	r3, [r7, #12]
            break;
 8003c08:	e123      	b.n	8003e52 <sh2_decodeSensorEvent+0x316>
        case SH2_GYROSCOPE_UNCALIBRATED:
            rc = decodeGyroscopeUncal(value, event);
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	0011      	movs	r1, r2
 8003c10:	0018      	movs	r0, r3
 8003c12:	f000 fa96 	bl	8004142 <decodeGyroscopeUncal>
 8003c16:	0003      	movs	r3, r0
 8003c18:	60fb      	str	r3, [r7, #12]
            break;
 8003c1a:	e11a      	b.n	8003e52 <sh2_decodeSensorEvent+0x316>
        case SH2_RAW_MAGNETOMETER:
            rc = decodeRawMagnetometer(value, event);
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	0011      	movs	r1, r2
 8003c22:	0018      	movs	r0, r3
 8003c24:	f000 fb09 	bl	800423a <decodeRawMagnetometer>
 8003c28:	0003      	movs	r3, r0
 8003c2a:	60fb      	str	r3, [r7, #12]
            break;
 8003c2c:	e111      	b.n	8003e52 <sh2_decodeSensorEvent+0x316>
        case SH2_MAGNETIC_FIELD_CALIBRATED:
            rc = decodeMagneticFieldCalibrated(value, event);
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	0011      	movs	r1, r2
 8003c34:	0018      	movs	r0, r3
 8003c36:	f000 fb2e 	bl	8004296 <decodeMagneticFieldCalibrated>
 8003c3a:	0003      	movs	r3, r0
 8003c3c:	60fb      	str	r3, [r7, #12]
            break;
 8003c3e:	e108      	b.n	8003e52 <sh2_decodeSensorEvent+0x316>
        case SH2_MAGNETIC_FIELD_UNCALIBRATED:
            rc = decodeMagneticFieldUncal(value, event);
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	0011      	movs	r1, r2
 8003c46:	0018      	movs	r0, r3
 8003c48:	f000 fb68 	bl	800431c <decodeMagneticFieldUncal>
 8003c4c:	0003      	movs	r3, r0
 8003c4e:	60fb      	str	r3, [r7, #12]
            break;
 8003c50:	e0ff      	b.n	8003e52 <sh2_decodeSensorEvent+0x316>
        case SH2_ROTATION_VECTOR:
            rc = decodeRotationVector(value, event);
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	0011      	movs	r1, r2
 8003c58:	0018      	movs	r0, r3
 8003c5a:	f000 fbdb 	bl	8004414 <decodeRotationVector>
 8003c5e:	0003      	movs	r3, r0
 8003c60:	60fb      	str	r3, [r7, #12]
            break;
 8003c62:	e0f6      	b.n	8003e52 <sh2_decodeSensorEvent+0x316>
        case SH2_GAME_ROTATION_VECTOR:
            rc = decodeGameRotationVector(value, event);
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	0011      	movs	r1, r2
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	f000 fc3b 	bl	80044e6 <decodeGameRotationVector>
 8003c70:	0003      	movs	r3, r0
 8003c72:	60fb      	str	r3, [r7, #12]
            break;
 8003c74:	e0ed      	b.n	8003e52 <sh2_decodeSensorEvent+0x316>
        case SH2_GEOMAGNETIC_ROTATION_VECTOR:
            rc = decodeGeomagneticRotationVector(value, event);
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	0011      	movs	r1, r2
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	f000 fc88 	bl	8004592 <decodeGeomagneticRotationVector>
 8003c82:	0003      	movs	r3, r0
 8003c84:	60fb      	str	r3, [r7, #12]
            break;
 8003c86:	e0e4      	b.n	8003e52 <sh2_decodeSensorEvent+0x316>
        case SH2_PRESSURE:
            rc = decodePressure(value, event);
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	0011      	movs	r1, r2
 8003c8e:	0018      	movs	r0, r3
 8003c90:	f000 fce8 	bl	8004664 <decodePressure>
 8003c94:	0003      	movs	r3, r0
 8003c96:	60fb      	str	r3, [r7, #12]
            break;
 8003c98:	e0db      	b.n	8003e52 <sh2_decodeSensorEvent+0x316>
        case SH2_AMBIENT_LIGHT:
            rc = decodeAmbientLight(value, event);
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	0011      	movs	r1, r2
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	f000 fcfc 	bl	800469e <decodeAmbientLight>
 8003ca6:	0003      	movs	r3, r0
 8003ca8:	60fb      	str	r3, [r7, #12]
            break;
 8003caa:	e0d2      	b.n	8003e52 <sh2_decodeSensorEvent+0x316>
        case SH2_HUMIDITY:
            rc = decodeHumidity(value, event);
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	0011      	movs	r1, r2
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	f000 fd10 	bl	80046d8 <decodeHumidity>
 8003cb8:	0003      	movs	r3, r0
 8003cba:	60fb      	str	r3, [r7, #12]
            break;
 8003cbc:	e0c9      	b.n	8003e52 <sh2_decodeSensorEvent+0x316>
        case SH2_PROXIMITY:
            rc = decodeProximity(value, event);
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	0011      	movs	r1, r2
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	f000 fd24 	bl	8004712 <decodeProximity>
 8003cca:	0003      	movs	r3, r0
 8003ccc:	60fb      	str	r3, [r7, #12]
            break;
 8003cce:	e0c0      	b.n	8003e52 <sh2_decodeSensorEvent+0x316>
        case SH2_TEMPERATURE:
            rc = decodeTemperature(value, event);
 8003cd0:	683a      	ldr	r2, [r7, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	0011      	movs	r1, r2
 8003cd6:	0018      	movs	r0, r3
 8003cd8:	f000 fd38 	bl	800474c <decodeTemperature>
 8003cdc:	0003      	movs	r3, r0
 8003cde:	60fb      	str	r3, [r7, #12]
            break;
 8003ce0:	e0b7      	b.n	8003e52 <sh2_decodeSensorEvent+0x316>
        case SH2_RESERVED:
            rc = decodeReserved(value, event);
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	0011      	movs	r1, r2
 8003ce8:	0018      	movs	r0, r3
 8003cea:	f000 fd4c 	bl	8004786 <decodeReserved>
 8003cee:	0003      	movs	r3, r0
 8003cf0:	60fb      	str	r3, [r7, #12]
            break;
 8003cf2:	e0ae      	b.n	8003e52 <sh2_decodeSensorEvent+0x316>
        case SH2_TAP_DETECTOR:
            rc = decodeTapDetector(value, event);
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	0011      	movs	r1, r2
 8003cfa:	0018      	movs	r0, r3
 8003cfc:	f000 fd60 	bl	80047c0 <decodeTapDetector>
 8003d00:	0003      	movs	r3, r0
 8003d02:	60fb      	str	r3, [r7, #12]
            break;
 8003d04:	e0a5      	b.n	8003e52 <sh2_decodeSensorEvent+0x316>
        case SH2_STEP_DETECTOR:
            rc = decodeStepDetector(value, event);
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	0011      	movs	r1, r2
 8003d0c:	0018      	movs	r0, r3
 8003d0e:	f000 fd65 	bl	80047dc <decodeStepDetector>
 8003d12:	0003      	movs	r3, r0
 8003d14:	60fb      	str	r3, [r7, #12]
            break;
 8003d16:	e09c      	b.n	8003e52 <sh2_decodeSensorEvent+0x316>
        case SH2_STEP_COUNTER:
            rc = decodeStepCounter(value, event);
 8003d18:	683a      	ldr	r2, [r7, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	0011      	movs	r1, r2
 8003d1e:	0018      	movs	r0, r3
 8003d20:	f000 fd6e 	bl	8004800 <decodeStepCounter>
 8003d24:	0003      	movs	r3, r0
 8003d26:	60fb      	str	r3, [r7, #12]
            break;
 8003d28:	e093      	b.n	8003e52 <sh2_decodeSensorEvent+0x316>
        case SH2_SIGNIFICANT_MOTION:
            rc = decodeSignificantMotion(value, event);
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	0011      	movs	r1, r2
 8003d30:	0018      	movs	r0, r3
 8003d32:	f000 fd80 	bl	8004836 <decodeSignificantMotion>
 8003d36:	0003      	movs	r3, r0
 8003d38:	60fb      	str	r3, [r7, #12]
            break;
 8003d3a:	e08a      	b.n	8003e52 <sh2_decodeSensorEvent+0x316>
        case SH2_STABILITY_CLASSIFIER:
            rc = decodeStabilityClassifier(value, event);
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	0011      	movs	r1, r2
 8003d42:	0018      	movs	r0, r3
 8003d44:	f000 fd8a 	bl	800485c <decodeStabilityClassifier>
 8003d48:	0003      	movs	r3, r0
 8003d4a:	60fb      	str	r3, [r7, #12]
            break;
 8003d4c:	e081      	b.n	8003e52 <sh2_decodeSensorEvent+0x316>
        case SH2_SHAKE_DETECTOR:
            rc = decodeShakeDetector(value, event);
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	0011      	movs	r1, r2
 8003d54:	0018      	movs	r0, r3
 8003d56:	f000 fd8f 	bl	8004878 <decodeShakeDetector>
 8003d5a:	0003      	movs	r3, r0
 8003d5c:	60fb      	str	r3, [r7, #12]
            break;
 8003d5e:	e078      	b.n	8003e52 <sh2_decodeSensorEvent+0x316>
        case SH2_FLIP_DETECTOR:
            rc = decodeFlipDetector(value, event);
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	0011      	movs	r1, r2
 8003d66:	0018      	movs	r0, r3
 8003d68:	f000 fd99 	bl	800489e <decodeFlipDetector>
 8003d6c:	0003      	movs	r3, r0
 8003d6e:	60fb      	str	r3, [r7, #12]
            break;
 8003d70:	e06f      	b.n	8003e52 <sh2_decodeSensorEvent+0x316>
        case SH2_PICKUP_DETECTOR:
            rc = decodePickupDetector(value, event);
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	0011      	movs	r1, r2
 8003d78:	0018      	movs	r0, r3
 8003d7a:	f000 fda3 	bl	80048c4 <decodePickupDetector>
 8003d7e:	0003      	movs	r3, r0
 8003d80:	60fb      	str	r3, [r7, #12]
            break;
 8003d82:	e066      	b.n	8003e52 <sh2_decodeSensorEvent+0x316>
        case SH2_STABILITY_DETECTOR:
            rc = decodeStabilityDetector(value, event);
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	0011      	movs	r1, r2
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	f000 fdad 	bl	80048ea <decodeStabilityDetector>
 8003d90:	0003      	movs	r3, r0
 8003d92:	60fb      	str	r3, [r7, #12]
            break;
 8003d94:	e05d      	b.n	8003e52 <sh2_decodeSensorEvent+0x316>
        case SH2_PERSONAL_ACTIVITY_CLASSIFIER:
            rc = decodePersonalActivityClassifier(value, event);
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	0011      	movs	r1, r2
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	f000 fdb7 	bl	8004910 <decodePersonalActivityClassifier>
 8003da2:	0003      	movs	r3, r0
 8003da4:	60fb      	str	r3, [r7, #12]
            break;
 8003da6:	e054      	b.n	8003e52 <sh2_decodeSensorEvent+0x316>
        case SH2_SLEEP_DETECTOR:
            rc = decodeSleepDetector(value, event);
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	0011      	movs	r1, r2
 8003dae:	0018      	movs	r0, r3
 8003db0:	f000 fddf 	bl	8004972 <decodeSleepDetector>
 8003db4:	0003      	movs	r3, r0
 8003db6:	60fb      	str	r3, [r7, #12]
            break;
 8003db8:	e04b      	b.n	8003e52 <sh2_decodeSensorEvent+0x316>
        case SH2_TILT_DETECTOR:
            rc = decodeTiltDetector(value, event);
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	0011      	movs	r1, r2
 8003dc0:	0018      	movs	r0, r3
 8003dc2:	f000 fde4 	bl	800498e <decodeTiltDetector>
 8003dc6:	0003      	movs	r3, r0
 8003dc8:	60fb      	str	r3, [r7, #12]
            break;
 8003dca:	e042      	b.n	8003e52 <sh2_decodeSensorEvent+0x316>
        case SH2_POCKET_DETECTOR:
            rc = decodePocketDetector(value, event);
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	0011      	movs	r1, r2
 8003dd2:	0018      	movs	r0, r3
 8003dd4:	f000 fdee 	bl	80049b4 <decodePocketDetector>
 8003dd8:	0003      	movs	r3, r0
 8003dda:	60fb      	str	r3, [r7, #12]
            break;
 8003ddc:	e039      	b.n	8003e52 <sh2_decodeSensorEvent+0x316>
        case SH2_CIRCLE_DETECTOR:
            rc = decodeCircleDetector(value, event);
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	0011      	movs	r1, r2
 8003de4:	0018      	movs	r0, r3
 8003de6:	f000 fdf8 	bl	80049da <decodeCircleDetector>
 8003dea:	0003      	movs	r3, r0
 8003dec:	60fb      	str	r3, [r7, #12]
            break;
 8003dee:	e030      	b.n	8003e52 <sh2_decodeSensorEvent+0x316>
        case SH2_HEART_RATE_MONITOR:
            rc = decodeHeartRateMonitor(value, event);
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	0011      	movs	r1, r2
 8003df6:	0018      	movs	r0, r3
 8003df8:	f000 fe02 	bl	8004a00 <decodeHeartRateMonitor>
 8003dfc:	0003      	movs	r3, r0
 8003dfe:	60fb      	str	r3, [r7, #12]
            break;
 8003e00:	e027      	b.n	8003e52 <sh2_decodeSensorEvent+0x316>
        case SH2_ARVR_STABILIZED_RV:
            rc = decodeArvrStabilizedRV(value, event);
 8003e02:	683a      	ldr	r2, [r7, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	0011      	movs	r1, r2
 8003e08:	0018      	movs	r0, r3
 8003e0a:	f000 fe0c 	bl	8004a26 <decodeArvrStabilizedRV>
 8003e0e:	0003      	movs	r3, r0
 8003e10:	60fb      	str	r3, [r7, #12]
            break;
 8003e12:	e01e      	b.n	8003e52 <sh2_decodeSensorEvent+0x316>
        case SH2_ARVR_STABILIZED_GRV:
            rc = decodeArvrStabilizedGRV(value, event);
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	0011      	movs	r1, r2
 8003e1a:	0018      	movs	r0, r3
 8003e1c:	f000 fe6c 	bl	8004af8 <decodeArvrStabilizedGRV>
 8003e20:	0003      	movs	r3, r0
 8003e22:	60fb      	str	r3, [r7, #12]
            break;
 8003e24:	e015      	b.n	8003e52 <sh2_decodeSensorEvent+0x316>
        case SH2_GYRO_INTEGRATED_RV:
            rc = decodeGyroIntegratedRV(value, event);
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	0011      	movs	r1, r2
 8003e2c:	0018      	movs	r0, r3
 8003e2e:	f000 feb9 	bl	8004ba4 <decodeGyroIntegratedRV>
 8003e32:	0003      	movs	r3, r0
 8003e34:	60fb      	str	r3, [r7, #12]
            break;
 8003e36:	e00c      	b.n	8003e52 <sh2_decodeSensorEvent+0x316>
        case SH2_IZRO_MOTION_REQUEST:
            rc = decodeIZroRequest(value, event);
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	0011      	movs	r1, r2
 8003e3e:	0018      	movs	r0, r3
 8003e40:	f000 ff3f 	bl	8004cc2 <decodeIZroRequest>
 8003e44:	0003      	movs	r3, r0
 8003e46:	60fb      	str	r3, [r7, #12]
            break;
 8003e48:	e003      	b.n	8003e52 <sh2_decodeSensorEvent+0x316>
        default:
            // Unknown report id
            rc = SH2_ERR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	425b      	negs	r3, r3
 8003e4e:	60fb      	str	r3, [r7, #12]
            break;
 8003e50:	46c0      	nop			; (mov r8, r8)
    }

    return rc;
 8003e52:	68fb      	ldr	r3, [r7, #12]
}
 8003e54:	0018      	movs	r0, r3
 8003e56:	46bd      	mov	sp, r7
 8003e58:	b004      	add	sp, #16
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	0800abec 	.word	0x0800abec

08003e60 <decodeRawAccelerometer>:

// ------------------------------------------------------------------------
// Private utility functions

static int decodeRawAccelerometer(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
    value->un.rawAccelerometer.x = read16(&event->report[4]);
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	330e      	adds	r3, #14
 8003e6e:	0018      	movs	r0, r3
 8003e70:	f000 ff7b 	bl	8004d6a <read16>
 8003e74:	0003      	movs	r3, r0
 8003e76:	001a      	movs	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	829a      	strh	r2, [r3, #20]
    value->un.rawAccelerometer.y = read16(&event->report[6]);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	3310      	adds	r3, #16
 8003e80:	0018      	movs	r0, r3
 8003e82:	f000 ff72 	bl	8004d6a <read16>
 8003e86:	0003      	movs	r3, r0
 8003e88:	001a      	movs	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	82da      	strh	r2, [r3, #22]
    value->un.rawAccelerometer.z = read16(&event->report[8]);
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	3312      	adds	r3, #18
 8003e92:	0018      	movs	r0, r3
 8003e94:	f000 ff69 	bl	8004d6a <read16>
 8003e98:	0003      	movs	r3, r0
 8003e9a:	001a      	movs	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	831a      	strh	r2, [r3, #24]
    value->un.rawAccelerometer.timestamp = read32(&event->report[12]);
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	3316      	adds	r3, #22
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	f000 ff77 	bl	8004d98 <read32>
 8003eaa:	0003      	movs	r3, r0
 8003eac:	001a      	movs	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	b002      	add	sp, #8
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <decodeAccelerometer>:

static int decodeAccelerometer(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
    value->un.accelerometer.x = read16(&event->report[4]) * SCALE_Q(8);
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	330e      	adds	r3, #14
 8003eca:	0018      	movs	r0, r3
 8003ecc:	f000 ff4d 	bl	8004d6a <read16>
 8003ed0:	0003      	movs	r3, r0
 8003ed2:	0018      	movs	r0, r3
 8003ed4:	f7fc fddc 	bl	8000a90 <__aeabi_i2f>
 8003ed8:	1c03      	adds	r3, r0, #0
 8003eda:	21ee      	movs	r1, #238	; 0xee
 8003edc:	0589      	lsls	r1, r1, #22
 8003ede:	1c18      	adds	r0, r3, #0
 8003ee0:	f7fc fac8 	bl	8000474 <__aeabi_fmul>
 8003ee4:	1c03      	adds	r3, r0, #0
 8003ee6:	1c1a      	adds	r2, r3, #0
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	615a      	str	r2, [r3, #20]
    value->un.accelerometer.y = read16(&event->report[6]) * SCALE_Q(8);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	3310      	adds	r3, #16
 8003ef0:	0018      	movs	r0, r3
 8003ef2:	f000 ff3a 	bl	8004d6a <read16>
 8003ef6:	0003      	movs	r3, r0
 8003ef8:	0018      	movs	r0, r3
 8003efa:	f7fc fdc9 	bl	8000a90 <__aeabi_i2f>
 8003efe:	1c03      	adds	r3, r0, #0
 8003f00:	21ee      	movs	r1, #238	; 0xee
 8003f02:	0589      	lsls	r1, r1, #22
 8003f04:	1c18      	adds	r0, r3, #0
 8003f06:	f7fc fab5 	bl	8000474 <__aeabi_fmul>
 8003f0a:	1c03      	adds	r3, r0, #0
 8003f0c:	1c1a      	adds	r2, r3, #0
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	619a      	str	r2, [r3, #24]
    value->un.accelerometer.z = read16(&event->report[8]) * SCALE_Q(8);
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	3312      	adds	r3, #18
 8003f16:	0018      	movs	r0, r3
 8003f18:	f000 ff27 	bl	8004d6a <read16>
 8003f1c:	0003      	movs	r3, r0
 8003f1e:	0018      	movs	r0, r3
 8003f20:	f7fc fdb6 	bl	8000a90 <__aeabi_i2f>
 8003f24:	1c03      	adds	r3, r0, #0
 8003f26:	21ee      	movs	r1, #238	; 0xee
 8003f28:	0589      	lsls	r1, r1, #22
 8003f2a:	1c18      	adds	r0, r3, #0
 8003f2c:	f7fc faa2 	bl	8000474 <__aeabi_fmul>
 8003f30:	1c03      	adds	r3, r0, #0
 8003f32:	1c1a      	adds	r2, r3, #0
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	0018      	movs	r0, r3
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	b002      	add	sp, #8
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <decodeLinearAcceleration>:

static int decodeLinearAcceleration(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b082      	sub	sp, #8
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
 8003f4a:	6039      	str	r1, [r7, #0]
    value->un.linearAcceleration.x = read16(&event->report[4]) * SCALE_Q(8);
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	330e      	adds	r3, #14
 8003f50:	0018      	movs	r0, r3
 8003f52:	f000 ff0a 	bl	8004d6a <read16>
 8003f56:	0003      	movs	r3, r0
 8003f58:	0018      	movs	r0, r3
 8003f5a:	f7fc fd99 	bl	8000a90 <__aeabi_i2f>
 8003f5e:	1c03      	adds	r3, r0, #0
 8003f60:	21ee      	movs	r1, #238	; 0xee
 8003f62:	0589      	lsls	r1, r1, #22
 8003f64:	1c18      	adds	r0, r3, #0
 8003f66:	f7fc fa85 	bl	8000474 <__aeabi_fmul>
 8003f6a:	1c03      	adds	r3, r0, #0
 8003f6c:	1c1a      	adds	r2, r3, #0
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	615a      	str	r2, [r3, #20]
    value->un.linearAcceleration.y = read16(&event->report[6]) * SCALE_Q(8);
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	3310      	adds	r3, #16
 8003f76:	0018      	movs	r0, r3
 8003f78:	f000 fef7 	bl	8004d6a <read16>
 8003f7c:	0003      	movs	r3, r0
 8003f7e:	0018      	movs	r0, r3
 8003f80:	f7fc fd86 	bl	8000a90 <__aeabi_i2f>
 8003f84:	1c03      	adds	r3, r0, #0
 8003f86:	21ee      	movs	r1, #238	; 0xee
 8003f88:	0589      	lsls	r1, r1, #22
 8003f8a:	1c18      	adds	r0, r3, #0
 8003f8c:	f7fc fa72 	bl	8000474 <__aeabi_fmul>
 8003f90:	1c03      	adds	r3, r0, #0
 8003f92:	1c1a      	adds	r2, r3, #0
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	619a      	str	r2, [r3, #24]
    value->un.linearAcceleration.z = read16(&event->report[8]) * SCALE_Q(8);
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	3312      	adds	r3, #18
 8003f9c:	0018      	movs	r0, r3
 8003f9e:	f000 fee4 	bl	8004d6a <read16>
 8003fa2:	0003      	movs	r3, r0
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	f7fc fd73 	bl	8000a90 <__aeabi_i2f>
 8003faa:	1c03      	adds	r3, r0, #0
 8003fac:	21ee      	movs	r1, #238	; 0xee
 8003fae:	0589      	lsls	r1, r1, #22
 8003fb0:	1c18      	adds	r0, r3, #0
 8003fb2:	f7fc fa5f 	bl	8000474 <__aeabi_fmul>
 8003fb6:	1c03      	adds	r3, r0, #0
 8003fb8:	1c1a      	adds	r2, r3, #0
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	0018      	movs	r0, r3
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	b002      	add	sp, #8
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <decodeGravity>:

static int decodeGravity(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
    value->un.gravity.x = read16(&event->report[4]) * SCALE_Q(8);
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	330e      	adds	r3, #14
 8003fd6:	0018      	movs	r0, r3
 8003fd8:	f000 fec7 	bl	8004d6a <read16>
 8003fdc:	0003      	movs	r3, r0
 8003fde:	0018      	movs	r0, r3
 8003fe0:	f7fc fd56 	bl	8000a90 <__aeabi_i2f>
 8003fe4:	1c03      	adds	r3, r0, #0
 8003fe6:	21ee      	movs	r1, #238	; 0xee
 8003fe8:	0589      	lsls	r1, r1, #22
 8003fea:	1c18      	adds	r0, r3, #0
 8003fec:	f7fc fa42 	bl	8000474 <__aeabi_fmul>
 8003ff0:	1c03      	adds	r3, r0, #0
 8003ff2:	1c1a      	adds	r2, r3, #0
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	615a      	str	r2, [r3, #20]
    value->un.gravity.y = read16(&event->report[6]) * SCALE_Q(8);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	3310      	adds	r3, #16
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	f000 feb4 	bl	8004d6a <read16>
 8004002:	0003      	movs	r3, r0
 8004004:	0018      	movs	r0, r3
 8004006:	f7fc fd43 	bl	8000a90 <__aeabi_i2f>
 800400a:	1c03      	adds	r3, r0, #0
 800400c:	21ee      	movs	r1, #238	; 0xee
 800400e:	0589      	lsls	r1, r1, #22
 8004010:	1c18      	adds	r0, r3, #0
 8004012:	f7fc fa2f 	bl	8000474 <__aeabi_fmul>
 8004016:	1c03      	adds	r3, r0, #0
 8004018:	1c1a      	adds	r2, r3, #0
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	619a      	str	r2, [r3, #24]
    value->un.gravity.z = read16(&event->report[8]) * SCALE_Q(8);
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	3312      	adds	r3, #18
 8004022:	0018      	movs	r0, r3
 8004024:	f000 fea1 	bl	8004d6a <read16>
 8004028:	0003      	movs	r3, r0
 800402a:	0018      	movs	r0, r3
 800402c:	f7fc fd30 	bl	8000a90 <__aeabi_i2f>
 8004030:	1c03      	adds	r3, r0, #0
 8004032:	21ee      	movs	r1, #238	; 0xee
 8004034:	0589      	lsls	r1, r1, #22
 8004036:	1c18      	adds	r0, r3, #0
 8004038:	f7fc fa1c 	bl	8000474 <__aeabi_fmul>
 800403c:	1c03      	adds	r3, r0, #0
 800403e:	1c1a      	adds	r2, r3, #0
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	0018      	movs	r0, r3
 8004048:	46bd      	mov	sp, r7
 800404a:	b002      	add	sp, #8
 800404c:	bd80      	pop	{r7, pc}

0800404e <decodeRawGyroscope>:

static int decodeRawGyroscope(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b082      	sub	sp, #8
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
 8004056:	6039      	str	r1, [r7, #0]
    value->un.rawGyroscope.x = read16(&event->report[4]);
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	330e      	adds	r3, #14
 800405c:	0018      	movs	r0, r3
 800405e:	f000 fe84 	bl	8004d6a <read16>
 8004062:	0003      	movs	r3, r0
 8004064:	001a      	movs	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	829a      	strh	r2, [r3, #20]
    value->un.rawGyroscope.y = read16(&event->report[6]);
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	3310      	adds	r3, #16
 800406e:	0018      	movs	r0, r3
 8004070:	f000 fe7b 	bl	8004d6a <read16>
 8004074:	0003      	movs	r3, r0
 8004076:	001a      	movs	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	82da      	strh	r2, [r3, #22]
    value->un.rawGyroscope.z = read16(&event->report[8]);
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	3312      	adds	r3, #18
 8004080:	0018      	movs	r0, r3
 8004082:	f000 fe72 	bl	8004d6a <read16>
 8004086:	0003      	movs	r3, r0
 8004088:	001a      	movs	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	831a      	strh	r2, [r3, #24]
    value->un.rawGyroscope.temperature = read16(&event->report[10]);
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	3314      	adds	r3, #20
 8004092:	0018      	movs	r0, r3
 8004094:	f000 fe69 	bl	8004d6a <read16>
 8004098:	0003      	movs	r3, r0
 800409a:	001a      	movs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	835a      	strh	r2, [r3, #26]
    value->un.rawGyroscope.timestamp = read32(&event->report[12]);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	3316      	adds	r3, #22
 80040a4:	0018      	movs	r0, r3
 80040a6:	f000 fe77 	bl	8004d98 <read32>
 80040aa:	0003      	movs	r3, r0
 80040ac:	001a      	movs	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	0018      	movs	r0, r3
 80040b6:	46bd      	mov	sp, r7
 80040b8:	b002      	add	sp, #8
 80040ba:	bd80      	pop	{r7, pc}

080040bc <decodeGyroscopeCalibrated>:

static int decodeGyroscopeCalibrated(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
    value->un.gyroscope.x = read16(&event->report[4]) * SCALE_Q(9);
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	330e      	adds	r3, #14
 80040ca:	0018      	movs	r0, r3
 80040cc:	f000 fe4d 	bl	8004d6a <read16>
 80040d0:	0003      	movs	r3, r0
 80040d2:	0018      	movs	r0, r3
 80040d4:	f7fc fcdc 	bl	8000a90 <__aeabi_i2f>
 80040d8:	1c03      	adds	r3, r0, #0
 80040da:	21ec      	movs	r1, #236	; 0xec
 80040dc:	0589      	lsls	r1, r1, #22
 80040de:	1c18      	adds	r0, r3, #0
 80040e0:	f7fc f9c8 	bl	8000474 <__aeabi_fmul>
 80040e4:	1c03      	adds	r3, r0, #0
 80040e6:	1c1a      	adds	r2, r3, #0
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	615a      	str	r2, [r3, #20]
    value->un.gyroscope.y = read16(&event->report[6]) * SCALE_Q(9);
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	3310      	adds	r3, #16
 80040f0:	0018      	movs	r0, r3
 80040f2:	f000 fe3a 	bl	8004d6a <read16>
 80040f6:	0003      	movs	r3, r0
 80040f8:	0018      	movs	r0, r3
 80040fa:	f7fc fcc9 	bl	8000a90 <__aeabi_i2f>
 80040fe:	1c03      	adds	r3, r0, #0
 8004100:	21ec      	movs	r1, #236	; 0xec
 8004102:	0589      	lsls	r1, r1, #22
 8004104:	1c18      	adds	r0, r3, #0
 8004106:	f7fc f9b5 	bl	8000474 <__aeabi_fmul>
 800410a:	1c03      	adds	r3, r0, #0
 800410c:	1c1a      	adds	r2, r3, #0
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	619a      	str	r2, [r3, #24]
    value->un.gyroscope.z = read16(&event->report[8]) * SCALE_Q(9);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	3312      	adds	r3, #18
 8004116:	0018      	movs	r0, r3
 8004118:	f000 fe27 	bl	8004d6a <read16>
 800411c:	0003      	movs	r3, r0
 800411e:	0018      	movs	r0, r3
 8004120:	f7fc fcb6 	bl	8000a90 <__aeabi_i2f>
 8004124:	1c03      	adds	r3, r0, #0
 8004126:	21ec      	movs	r1, #236	; 0xec
 8004128:	0589      	lsls	r1, r1, #22
 800412a:	1c18      	adds	r0, r3, #0
 800412c:	f7fc f9a2 	bl	8000474 <__aeabi_fmul>
 8004130:	1c03      	adds	r3, r0, #0
 8004132:	1c1a      	adds	r2, r3, #0
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	0018      	movs	r0, r3
 800413c:	46bd      	mov	sp, r7
 800413e:	b002      	add	sp, #8
 8004140:	bd80      	pop	{r7, pc}

08004142 <decodeGyroscopeUncal>:

static int decodeGyroscopeUncal(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b082      	sub	sp, #8
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
 800414a:	6039      	str	r1, [r7, #0]
    value->un.gyroscopeUncal.x = read16(&event->report[4]) * SCALE_Q(9);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	330e      	adds	r3, #14
 8004150:	0018      	movs	r0, r3
 8004152:	f000 fe0a 	bl	8004d6a <read16>
 8004156:	0003      	movs	r3, r0
 8004158:	0018      	movs	r0, r3
 800415a:	f7fc fc99 	bl	8000a90 <__aeabi_i2f>
 800415e:	1c03      	adds	r3, r0, #0
 8004160:	21ec      	movs	r1, #236	; 0xec
 8004162:	0589      	lsls	r1, r1, #22
 8004164:	1c18      	adds	r0, r3, #0
 8004166:	f7fc f985 	bl	8000474 <__aeabi_fmul>
 800416a:	1c03      	adds	r3, r0, #0
 800416c:	1c1a      	adds	r2, r3, #0
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	615a      	str	r2, [r3, #20]
    value->un.gyroscopeUncal.y = read16(&event->report[6]) * SCALE_Q(9);
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	3310      	adds	r3, #16
 8004176:	0018      	movs	r0, r3
 8004178:	f000 fdf7 	bl	8004d6a <read16>
 800417c:	0003      	movs	r3, r0
 800417e:	0018      	movs	r0, r3
 8004180:	f7fc fc86 	bl	8000a90 <__aeabi_i2f>
 8004184:	1c03      	adds	r3, r0, #0
 8004186:	21ec      	movs	r1, #236	; 0xec
 8004188:	0589      	lsls	r1, r1, #22
 800418a:	1c18      	adds	r0, r3, #0
 800418c:	f7fc f972 	bl	8000474 <__aeabi_fmul>
 8004190:	1c03      	adds	r3, r0, #0
 8004192:	1c1a      	adds	r2, r3, #0
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	619a      	str	r2, [r3, #24]
    value->un.gyroscopeUncal.z = read16(&event->report[8]) * SCALE_Q(9);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	3312      	adds	r3, #18
 800419c:	0018      	movs	r0, r3
 800419e:	f000 fde4 	bl	8004d6a <read16>
 80041a2:	0003      	movs	r3, r0
 80041a4:	0018      	movs	r0, r3
 80041a6:	f7fc fc73 	bl	8000a90 <__aeabi_i2f>
 80041aa:	1c03      	adds	r3, r0, #0
 80041ac:	21ec      	movs	r1, #236	; 0xec
 80041ae:	0589      	lsls	r1, r1, #22
 80041b0:	1c18      	adds	r0, r3, #0
 80041b2:	f7fc f95f 	bl	8000474 <__aeabi_fmul>
 80041b6:	1c03      	adds	r3, r0, #0
 80041b8:	1c1a      	adds	r2, r3, #0
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	61da      	str	r2, [r3, #28]

    value->un.gyroscopeUncal.biasX = read16(&event->report[10]) * SCALE_Q(9);
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	3314      	adds	r3, #20
 80041c2:	0018      	movs	r0, r3
 80041c4:	f000 fdd1 	bl	8004d6a <read16>
 80041c8:	0003      	movs	r3, r0
 80041ca:	0018      	movs	r0, r3
 80041cc:	f7fc fc60 	bl	8000a90 <__aeabi_i2f>
 80041d0:	1c03      	adds	r3, r0, #0
 80041d2:	21ec      	movs	r1, #236	; 0xec
 80041d4:	0589      	lsls	r1, r1, #22
 80041d6:	1c18      	adds	r0, r3, #0
 80041d8:	f7fc f94c 	bl	8000474 <__aeabi_fmul>
 80041dc:	1c03      	adds	r3, r0, #0
 80041de:	1c1a      	adds	r2, r3, #0
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	621a      	str	r2, [r3, #32]
    value->un.gyroscopeUncal.biasY = read16(&event->report[12]) * SCALE_Q(9);
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	3316      	adds	r3, #22
 80041e8:	0018      	movs	r0, r3
 80041ea:	f000 fdbe 	bl	8004d6a <read16>
 80041ee:	0003      	movs	r3, r0
 80041f0:	0018      	movs	r0, r3
 80041f2:	f7fc fc4d 	bl	8000a90 <__aeabi_i2f>
 80041f6:	1c03      	adds	r3, r0, #0
 80041f8:	21ec      	movs	r1, #236	; 0xec
 80041fa:	0589      	lsls	r1, r1, #22
 80041fc:	1c18      	adds	r0, r3, #0
 80041fe:	f7fc f939 	bl	8000474 <__aeabi_fmul>
 8004202:	1c03      	adds	r3, r0, #0
 8004204:	1c1a      	adds	r2, r3, #0
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	625a      	str	r2, [r3, #36]	; 0x24
    value->un.gyroscopeUncal.biasZ = read16(&event->report[14]) * SCALE_Q(9);
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	3318      	adds	r3, #24
 800420e:	0018      	movs	r0, r3
 8004210:	f000 fdab 	bl	8004d6a <read16>
 8004214:	0003      	movs	r3, r0
 8004216:	0018      	movs	r0, r3
 8004218:	f7fc fc3a 	bl	8000a90 <__aeabi_i2f>
 800421c:	1c03      	adds	r3, r0, #0
 800421e:	21ec      	movs	r1, #236	; 0xec
 8004220:	0589      	lsls	r1, r1, #22
 8004222:	1c18      	adds	r0, r3, #0
 8004224:	f7fc f926 	bl	8000474 <__aeabi_fmul>
 8004228:	1c03      	adds	r3, r0, #0
 800422a:	1c1a      	adds	r2, r3, #0
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	629a      	str	r2, [r3, #40]	; 0x28

    return SH2_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	0018      	movs	r0, r3
 8004234:	46bd      	mov	sp, r7
 8004236:	b002      	add	sp, #8
 8004238:	bd80      	pop	{r7, pc}

0800423a <decodeRawMagnetometer>:

static int decodeRawMagnetometer(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b082      	sub	sp, #8
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
 8004242:	6039      	str	r1, [r7, #0]
    value->un.rawMagnetometer.x = read16(&event->report[4]);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	330e      	adds	r3, #14
 8004248:	0018      	movs	r0, r3
 800424a:	f000 fd8e 	bl	8004d6a <read16>
 800424e:	0003      	movs	r3, r0
 8004250:	001a      	movs	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	829a      	strh	r2, [r3, #20]
    value->un.rawMagnetometer.y = read16(&event->report[6]);
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	3310      	adds	r3, #16
 800425a:	0018      	movs	r0, r3
 800425c:	f000 fd85 	bl	8004d6a <read16>
 8004260:	0003      	movs	r3, r0
 8004262:	001a      	movs	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	82da      	strh	r2, [r3, #22]
    value->un.rawMagnetometer.z = read16(&event->report[8]);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	3312      	adds	r3, #18
 800426c:	0018      	movs	r0, r3
 800426e:	f000 fd7c 	bl	8004d6a <read16>
 8004272:	0003      	movs	r3, r0
 8004274:	001a      	movs	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	831a      	strh	r2, [r3, #24]
    value->un.rawMagnetometer.timestamp = read32(&event->report[12]);
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	3316      	adds	r3, #22
 800427e:	0018      	movs	r0, r3
 8004280:	f000 fd8a 	bl	8004d98 <read32>
 8004284:	0003      	movs	r3, r0
 8004286:	001a      	movs	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	0018      	movs	r0, r3
 8004290:	46bd      	mov	sp, r7
 8004292:	b002      	add	sp, #8
 8004294:	bd80      	pop	{r7, pc}

08004296 <decodeMagneticFieldCalibrated>:

static int decodeMagneticFieldCalibrated(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b082      	sub	sp, #8
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
 800429e:	6039      	str	r1, [r7, #0]
    value->un.magneticField.x = read16(&event->report[4]) * SCALE_Q(4);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	330e      	adds	r3, #14
 80042a4:	0018      	movs	r0, r3
 80042a6:	f000 fd60 	bl	8004d6a <read16>
 80042aa:	0003      	movs	r3, r0
 80042ac:	0018      	movs	r0, r3
 80042ae:	f7fc fbef 	bl	8000a90 <__aeabi_i2f>
 80042b2:	1c03      	adds	r3, r0, #0
 80042b4:	21f6      	movs	r1, #246	; 0xf6
 80042b6:	0589      	lsls	r1, r1, #22
 80042b8:	1c18      	adds	r0, r3, #0
 80042ba:	f7fc f8db 	bl	8000474 <__aeabi_fmul>
 80042be:	1c03      	adds	r3, r0, #0
 80042c0:	1c1a      	adds	r2, r3, #0
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	615a      	str	r2, [r3, #20]
    value->un.magneticField.y = read16(&event->report[6]) * SCALE_Q(4);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	3310      	adds	r3, #16
 80042ca:	0018      	movs	r0, r3
 80042cc:	f000 fd4d 	bl	8004d6a <read16>
 80042d0:	0003      	movs	r3, r0
 80042d2:	0018      	movs	r0, r3
 80042d4:	f7fc fbdc 	bl	8000a90 <__aeabi_i2f>
 80042d8:	1c03      	adds	r3, r0, #0
 80042da:	21f6      	movs	r1, #246	; 0xf6
 80042dc:	0589      	lsls	r1, r1, #22
 80042de:	1c18      	adds	r0, r3, #0
 80042e0:	f7fc f8c8 	bl	8000474 <__aeabi_fmul>
 80042e4:	1c03      	adds	r3, r0, #0
 80042e6:	1c1a      	adds	r2, r3, #0
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	619a      	str	r2, [r3, #24]
    value->un.magneticField.z = read16(&event->report[8]) * SCALE_Q(4);
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	3312      	adds	r3, #18
 80042f0:	0018      	movs	r0, r3
 80042f2:	f000 fd3a 	bl	8004d6a <read16>
 80042f6:	0003      	movs	r3, r0
 80042f8:	0018      	movs	r0, r3
 80042fa:	f7fc fbc9 	bl	8000a90 <__aeabi_i2f>
 80042fe:	1c03      	adds	r3, r0, #0
 8004300:	21f6      	movs	r1, #246	; 0xf6
 8004302:	0589      	lsls	r1, r1, #22
 8004304:	1c18      	adds	r0, r3, #0
 8004306:	f7fc f8b5 	bl	8000474 <__aeabi_fmul>
 800430a:	1c03      	adds	r3, r0, #0
 800430c:	1c1a      	adds	r2, r3, #0
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	0018      	movs	r0, r3
 8004316:	46bd      	mov	sp, r7
 8004318:	b002      	add	sp, #8
 800431a:	bd80      	pop	{r7, pc}

0800431c <decodeMagneticFieldUncal>:

static int decodeMagneticFieldUncal(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
    value->un.magneticFieldUncal.x = read16(&event->report[4]) * SCALE_Q(4);
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	330e      	adds	r3, #14
 800432a:	0018      	movs	r0, r3
 800432c:	f000 fd1d 	bl	8004d6a <read16>
 8004330:	0003      	movs	r3, r0
 8004332:	0018      	movs	r0, r3
 8004334:	f7fc fbac 	bl	8000a90 <__aeabi_i2f>
 8004338:	1c03      	adds	r3, r0, #0
 800433a:	21f6      	movs	r1, #246	; 0xf6
 800433c:	0589      	lsls	r1, r1, #22
 800433e:	1c18      	adds	r0, r3, #0
 8004340:	f7fc f898 	bl	8000474 <__aeabi_fmul>
 8004344:	1c03      	adds	r3, r0, #0
 8004346:	1c1a      	adds	r2, r3, #0
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	615a      	str	r2, [r3, #20]
    value->un.magneticFieldUncal.y = read16(&event->report[6]) * SCALE_Q(4);
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	3310      	adds	r3, #16
 8004350:	0018      	movs	r0, r3
 8004352:	f000 fd0a 	bl	8004d6a <read16>
 8004356:	0003      	movs	r3, r0
 8004358:	0018      	movs	r0, r3
 800435a:	f7fc fb99 	bl	8000a90 <__aeabi_i2f>
 800435e:	1c03      	adds	r3, r0, #0
 8004360:	21f6      	movs	r1, #246	; 0xf6
 8004362:	0589      	lsls	r1, r1, #22
 8004364:	1c18      	adds	r0, r3, #0
 8004366:	f7fc f885 	bl	8000474 <__aeabi_fmul>
 800436a:	1c03      	adds	r3, r0, #0
 800436c:	1c1a      	adds	r2, r3, #0
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	619a      	str	r2, [r3, #24]
    value->un.magneticFieldUncal.z = read16(&event->report[8]) * SCALE_Q(4);
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	3312      	adds	r3, #18
 8004376:	0018      	movs	r0, r3
 8004378:	f000 fcf7 	bl	8004d6a <read16>
 800437c:	0003      	movs	r3, r0
 800437e:	0018      	movs	r0, r3
 8004380:	f7fc fb86 	bl	8000a90 <__aeabi_i2f>
 8004384:	1c03      	adds	r3, r0, #0
 8004386:	21f6      	movs	r1, #246	; 0xf6
 8004388:	0589      	lsls	r1, r1, #22
 800438a:	1c18      	adds	r0, r3, #0
 800438c:	f7fc f872 	bl	8000474 <__aeabi_fmul>
 8004390:	1c03      	adds	r3, r0, #0
 8004392:	1c1a      	adds	r2, r3, #0
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	61da      	str	r2, [r3, #28]

    value->un.magneticFieldUncal.biasX = read16(&event->report[10]) * SCALE_Q(4);
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	3314      	adds	r3, #20
 800439c:	0018      	movs	r0, r3
 800439e:	f000 fce4 	bl	8004d6a <read16>
 80043a2:	0003      	movs	r3, r0
 80043a4:	0018      	movs	r0, r3
 80043a6:	f7fc fb73 	bl	8000a90 <__aeabi_i2f>
 80043aa:	1c03      	adds	r3, r0, #0
 80043ac:	21f6      	movs	r1, #246	; 0xf6
 80043ae:	0589      	lsls	r1, r1, #22
 80043b0:	1c18      	adds	r0, r3, #0
 80043b2:	f7fc f85f 	bl	8000474 <__aeabi_fmul>
 80043b6:	1c03      	adds	r3, r0, #0
 80043b8:	1c1a      	adds	r2, r3, #0
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	621a      	str	r2, [r3, #32]
    value->un.magneticFieldUncal.biasY = read16(&event->report[12]) * SCALE_Q(4);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	3316      	adds	r3, #22
 80043c2:	0018      	movs	r0, r3
 80043c4:	f000 fcd1 	bl	8004d6a <read16>
 80043c8:	0003      	movs	r3, r0
 80043ca:	0018      	movs	r0, r3
 80043cc:	f7fc fb60 	bl	8000a90 <__aeabi_i2f>
 80043d0:	1c03      	adds	r3, r0, #0
 80043d2:	21f6      	movs	r1, #246	; 0xf6
 80043d4:	0589      	lsls	r1, r1, #22
 80043d6:	1c18      	adds	r0, r3, #0
 80043d8:	f7fc f84c 	bl	8000474 <__aeabi_fmul>
 80043dc:	1c03      	adds	r3, r0, #0
 80043de:	1c1a      	adds	r2, r3, #0
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	625a      	str	r2, [r3, #36]	; 0x24
    value->un.magneticFieldUncal.biasZ = read16(&event->report[14]) * SCALE_Q(4);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	3318      	adds	r3, #24
 80043e8:	0018      	movs	r0, r3
 80043ea:	f000 fcbe 	bl	8004d6a <read16>
 80043ee:	0003      	movs	r3, r0
 80043f0:	0018      	movs	r0, r3
 80043f2:	f7fc fb4d 	bl	8000a90 <__aeabi_i2f>
 80043f6:	1c03      	adds	r3, r0, #0
 80043f8:	21f6      	movs	r1, #246	; 0xf6
 80043fa:	0589      	lsls	r1, r1, #22
 80043fc:	1c18      	adds	r0, r3, #0
 80043fe:	f7fc f839 	bl	8000474 <__aeabi_fmul>
 8004402:	1c03      	adds	r3, r0, #0
 8004404:	1c1a      	adds	r2, r3, #0
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	629a      	str	r2, [r3, #40]	; 0x28

    return SH2_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	0018      	movs	r0, r3
 800440e:	46bd      	mov	sp, r7
 8004410:	b002      	add	sp, #8
 8004412:	bd80      	pop	{r7, pc}

08004414 <decodeRotationVector>:

static int decodeRotationVector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
    value->un.rotationVector.i = read16(&event->report[4]) * SCALE_Q(14);
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	330e      	adds	r3, #14
 8004422:	0018      	movs	r0, r3
 8004424:	f000 fca1 	bl	8004d6a <read16>
 8004428:	0003      	movs	r3, r0
 800442a:	0018      	movs	r0, r3
 800442c:	f7fc fb30 	bl	8000a90 <__aeabi_i2f>
 8004430:	1c03      	adds	r3, r0, #0
 8004432:	21e2      	movs	r1, #226	; 0xe2
 8004434:	0589      	lsls	r1, r1, #22
 8004436:	1c18      	adds	r0, r3, #0
 8004438:	f7fc f81c 	bl	8000474 <__aeabi_fmul>
 800443c:	1c03      	adds	r3, r0, #0
 800443e:	1c1a      	adds	r2, r3, #0
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	615a      	str	r2, [r3, #20]
    value->un.rotationVector.j = read16(&event->report[6]) * SCALE_Q(14);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	3310      	adds	r3, #16
 8004448:	0018      	movs	r0, r3
 800444a:	f000 fc8e 	bl	8004d6a <read16>
 800444e:	0003      	movs	r3, r0
 8004450:	0018      	movs	r0, r3
 8004452:	f7fc fb1d 	bl	8000a90 <__aeabi_i2f>
 8004456:	1c03      	adds	r3, r0, #0
 8004458:	21e2      	movs	r1, #226	; 0xe2
 800445a:	0589      	lsls	r1, r1, #22
 800445c:	1c18      	adds	r0, r3, #0
 800445e:	f7fc f809 	bl	8000474 <__aeabi_fmul>
 8004462:	1c03      	adds	r3, r0, #0
 8004464:	1c1a      	adds	r2, r3, #0
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	619a      	str	r2, [r3, #24]
    value->un.rotationVector.k = read16(&event->report[8]) * SCALE_Q(14);
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	3312      	adds	r3, #18
 800446e:	0018      	movs	r0, r3
 8004470:	f000 fc7b 	bl	8004d6a <read16>
 8004474:	0003      	movs	r3, r0
 8004476:	0018      	movs	r0, r3
 8004478:	f7fc fb0a 	bl	8000a90 <__aeabi_i2f>
 800447c:	1c03      	adds	r3, r0, #0
 800447e:	21e2      	movs	r1, #226	; 0xe2
 8004480:	0589      	lsls	r1, r1, #22
 8004482:	1c18      	adds	r0, r3, #0
 8004484:	f7fb fff6 	bl	8000474 <__aeabi_fmul>
 8004488:	1c03      	adds	r3, r0, #0
 800448a:	1c1a      	adds	r2, r3, #0
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	61da      	str	r2, [r3, #28]
    value->un.rotationVector.real = read16(&event->report[10]) * SCALE_Q(14);
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	3314      	adds	r3, #20
 8004494:	0018      	movs	r0, r3
 8004496:	f000 fc68 	bl	8004d6a <read16>
 800449a:	0003      	movs	r3, r0
 800449c:	0018      	movs	r0, r3
 800449e:	f7fc faf7 	bl	8000a90 <__aeabi_i2f>
 80044a2:	1c03      	adds	r3, r0, #0
 80044a4:	21e2      	movs	r1, #226	; 0xe2
 80044a6:	0589      	lsls	r1, r1, #22
 80044a8:	1c18      	adds	r0, r3, #0
 80044aa:	f7fb ffe3 	bl	8000474 <__aeabi_fmul>
 80044ae:	1c03      	adds	r3, r0, #0
 80044b0:	1c1a      	adds	r2, r3, #0
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	621a      	str	r2, [r3, #32]
    value->un.rotationVector.accuracy = read16(&event->report[12]) * SCALE_Q(12);
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	3316      	adds	r3, #22
 80044ba:	0018      	movs	r0, r3
 80044bc:	f000 fc55 	bl	8004d6a <read16>
 80044c0:	0003      	movs	r3, r0
 80044c2:	0018      	movs	r0, r3
 80044c4:	f7fc fae4 	bl	8000a90 <__aeabi_i2f>
 80044c8:	1c03      	adds	r3, r0, #0
 80044ca:	21e6      	movs	r1, #230	; 0xe6
 80044cc:	0589      	lsls	r1, r1, #22
 80044ce:	1c18      	adds	r0, r3, #0
 80044d0:	f7fb ffd0 	bl	8000474 <__aeabi_fmul>
 80044d4:	1c03      	adds	r3, r0, #0
 80044d6:	1c1a      	adds	r2, r3, #0
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	625a      	str	r2, [r3, #36]	; 0x24

    return SH2_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	0018      	movs	r0, r3
 80044e0:	46bd      	mov	sp, r7
 80044e2:	b002      	add	sp, #8
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <decodeGameRotationVector>:

static int decodeGameRotationVector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b082      	sub	sp, #8
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
 80044ee:	6039      	str	r1, [r7, #0]
    value->un.gameRotationVector.i = read16(&event->report[4]) * SCALE_Q(14);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	330e      	adds	r3, #14
 80044f4:	0018      	movs	r0, r3
 80044f6:	f000 fc38 	bl	8004d6a <read16>
 80044fa:	0003      	movs	r3, r0
 80044fc:	0018      	movs	r0, r3
 80044fe:	f7fc fac7 	bl	8000a90 <__aeabi_i2f>
 8004502:	1c03      	adds	r3, r0, #0
 8004504:	21e2      	movs	r1, #226	; 0xe2
 8004506:	0589      	lsls	r1, r1, #22
 8004508:	1c18      	adds	r0, r3, #0
 800450a:	f7fb ffb3 	bl	8000474 <__aeabi_fmul>
 800450e:	1c03      	adds	r3, r0, #0
 8004510:	1c1a      	adds	r2, r3, #0
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	615a      	str	r2, [r3, #20]
    value->un.gameRotationVector.j = read16(&event->report[6]) * SCALE_Q(14);
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	3310      	adds	r3, #16
 800451a:	0018      	movs	r0, r3
 800451c:	f000 fc25 	bl	8004d6a <read16>
 8004520:	0003      	movs	r3, r0
 8004522:	0018      	movs	r0, r3
 8004524:	f7fc fab4 	bl	8000a90 <__aeabi_i2f>
 8004528:	1c03      	adds	r3, r0, #0
 800452a:	21e2      	movs	r1, #226	; 0xe2
 800452c:	0589      	lsls	r1, r1, #22
 800452e:	1c18      	adds	r0, r3, #0
 8004530:	f7fb ffa0 	bl	8000474 <__aeabi_fmul>
 8004534:	1c03      	adds	r3, r0, #0
 8004536:	1c1a      	adds	r2, r3, #0
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	619a      	str	r2, [r3, #24]
    value->un.gameRotationVector.k = read16(&event->report[8]) * SCALE_Q(14);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	3312      	adds	r3, #18
 8004540:	0018      	movs	r0, r3
 8004542:	f000 fc12 	bl	8004d6a <read16>
 8004546:	0003      	movs	r3, r0
 8004548:	0018      	movs	r0, r3
 800454a:	f7fc faa1 	bl	8000a90 <__aeabi_i2f>
 800454e:	1c03      	adds	r3, r0, #0
 8004550:	21e2      	movs	r1, #226	; 0xe2
 8004552:	0589      	lsls	r1, r1, #22
 8004554:	1c18      	adds	r0, r3, #0
 8004556:	f7fb ff8d 	bl	8000474 <__aeabi_fmul>
 800455a:	1c03      	adds	r3, r0, #0
 800455c:	1c1a      	adds	r2, r3, #0
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	61da      	str	r2, [r3, #28]
    value->un.gameRotationVector.real = read16(&event->report[10]) * SCALE_Q(14);
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	3314      	adds	r3, #20
 8004566:	0018      	movs	r0, r3
 8004568:	f000 fbff 	bl	8004d6a <read16>
 800456c:	0003      	movs	r3, r0
 800456e:	0018      	movs	r0, r3
 8004570:	f7fc fa8e 	bl	8000a90 <__aeabi_i2f>
 8004574:	1c03      	adds	r3, r0, #0
 8004576:	21e2      	movs	r1, #226	; 0xe2
 8004578:	0589      	lsls	r1, r1, #22
 800457a:	1c18      	adds	r0, r3, #0
 800457c:	f7fb ff7a 	bl	8000474 <__aeabi_fmul>
 8004580:	1c03      	adds	r3, r0, #0
 8004582:	1c1a      	adds	r2, r3, #0
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	621a      	str	r2, [r3, #32]

    return SH2_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	0018      	movs	r0, r3
 800458c:	46bd      	mov	sp, r7
 800458e:	b002      	add	sp, #8
 8004590:	bd80      	pop	{r7, pc}

08004592 <decodeGeomagneticRotationVector>:

static int decodeGeomagneticRotationVector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b082      	sub	sp, #8
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
 800459a:	6039      	str	r1, [r7, #0]
    value->un.geoMagRotationVector.i = read16(&event->report[4]) * SCALE_Q(14);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	330e      	adds	r3, #14
 80045a0:	0018      	movs	r0, r3
 80045a2:	f000 fbe2 	bl	8004d6a <read16>
 80045a6:	0003      	movs	r3, r0
 80045a8:	0018      	movs	r0, r3
 80045aa:	f7fc fa71 	bl	8000a90 <__aeabi_i2f>
 80045ae:	1c03      	adds	r3, r0, #0
 80045b0:	21e2      	movs	r1, #226	; 0xe2
 80045b2:	0589      	lsls	r1, r1, #22
 80045b4:	1c18      	adds	r0, r3, #0
 80045b6:	f7fb ff5d 	bl	8000474 <__aeabi_fmul>
 80045ba:	1c03      	adds	r3, r0, #0
 80045bc:	1c1a      	adds	r2, r3, #0
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	615a      	str	r2, [r3, #20]
    value->un.geoMagRotationVector.j = read16(&event->report[6]) * SCALE_Q(14);
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	3310      	adds	r3, #16
 80045c6:	0018      	movs	r0, r3
 80045c8:	f000 fbcf 	bl	8004d6a <read16>
 80045cc:	0003      	movs	r3, r0
 80045ce:	0018      	movs	r0, r3
 80045d0:	f7fc fa5e 	bl	8000a90 <__aeabi_i2f>
 80045d4:	1c03      	adds	r3, r0, #0
 80045d6:	21e2      	movs	r1, #226	; 0xe2
 80045d8:	0589      	lsls	r1, r1, #22
 80045da:	1c18      	adds	r0, r3, #0
 80045dc:	f7fb ff4a 	bl	8000474 <__aeabi_fmul>
 80045e0:	1c03      	adds	r3, r0, #0
 80045e2:	1c1a      	adds	r2, r3, #0
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	619a      	str	r2, [r3, #24]
    value->un.geoMagRotationVector.k = read16(&event->report[8]) * SCALE_Q(14);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	3312      	adds	r3, #18
 80045ec:	0018      	movs	r0, r3
 80045ee:	f000 fbbc 	bl	8004d6a <read16>
 80045f2:	0003      	movs	r3, r0
 80045f4:	0018      	movs	r0, r3
 80045f6:	f7fc fa4b 	bl	8000a90 <__aeabi_i2f>
 80045fa:	1c03      	adds	r3, r0, #0
 80045fc:	21e2      	movs	r1, #226	; 0xe2
 80045fe:	0589      	lsls	r1, r1, #22
 8004600:	1c18      	adds	r0, r3, #0
 8004602:	f7fb ff37 	bl	8000474 <__aeabi_fmul>
 8004606:	1c03      	adds	r3, r0, #0
 8004608:	1c1a      	adds	r2, r3, #0
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	61da      	str	r2, [r3, #28]
    value->un.geoMagRotationVector.real = read16(&event->report[10]) * SCALE_Q(14);
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	3314      	adds	r3, #20
 8004612:	0018      	movs	r0, r3
 8004614:	f000 fba9 	bl	8004d6a <read16>
 8004618:	0003      	movs	r3, r0
 800461a:	0018      	movs	r0, r3
 800461c:	f7fc fa38 	bl	8000a90 <__aeabi_i2f>
 8004620:	1c03      	adds	r3, r0, #0
 8004622:	21e2      	movs	r1, #226	; 0xe2
 8004624:	0589      	lsls	r1, r1, #22
 8004626:	1c18      	adds	r0, r3, #0
 8004628:	f7fb ff24 	bl	8000474 <__aeabi_fmul>
 800462c:	1c03      	adds	r3, r0, #0
 800462e:	1c1a      	adds	r2, r3, #0
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	621a      	str	r2, [r3, #32]
    value->un.geoMagRotationVector.accuracy = read16(&event->report[12]) * SCALE_Q(12);
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	3316      	adds	r3, #22
 8004638:	0018      	movs	r0, r3
 800463a:	f000 fb96 	bl	8004d6a <read16>
 800463e:	0003      	movs	r3, r0
 8004640:	0018      	movs	r0, r3
 8004642:	f7fc fa25 	bl	8000a90 <__aeabi_i2f>
 8004646:	1c03      	adds	r3, r0, #0
 8004648:	21e6      	movs	r1, #230	; 0xe6
 800464a:	0589      	lsls	r1, r1, #22
 800464c:	1c18      	adds	r0, r3, #0
 800464e:	f7fb ff11 	bl	8000474 <__aeabi_fmul>
 8004652:	1c03      	adds	r3, r0, #0
 8004654:	1c1a      	adds	r2, r3, #0
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	625a      	str	r2, [r3, #36]	; 0x24

    return SH2_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	0018      	movs	r0, r3
 800465e:	46bd      	mov	sp, r7
 8004660:	b002      	add	sp, #8
 8004662:	bd80      	pop	{r7, pc}

08004664 <decodePressure>:

static int decodePressure(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
    value->un.pressure.value = read32(&event->report[4]) * SCALE_Q(20);
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	330e      	adds	r3, #14
 8004672:	0018      	movs	r0, r3
 8004674:	f000 fb90 	bl	8004d98 <read32>
 8004678:	0003      	movs	r3, r0
 800467a:	0018      	movs	r0, r3
 800467c:	f7fc fa08 	bl	8000a90 <__aeabi_i2f>
 8004680:	1c03      	adds	r3, r0, #0
 8004682:	21d6      	movs	r1, #214	; 0xd6
 8004684:	0589      	lsls	r1, r1, #22
 8004686:	1c18      	adds	r0, r3, #0
 8004688:	f7fb fef4 	bl	8000474 <__aeabi_fmul>
 800468c:	1c03      	adds	r3, r0, #0
 800468e:	1c1a      	adds	r2, r3, #0
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	615a      	str	r2, [r3, #20]

    return SH2_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	0018      	movs	r0, r3
 8004698:	46bd      	mov	sp, r7
 800469a:	b002      	add	sp, #8
 800469c:	bd80      	pop	{r7, pc}

0800469e <decodeAmbientLight>:

static int decodeAmbientLight(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b082      	sub	sp, #8
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
 80046a6:	6039      	str	r1, [r7, #0]
    value->un.ambientLight.value = read32(&event->report[4]) * SCALE_Q(8);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	330e      	adds	r3, #14
 80046ac:	0018      	movs	r0, r3
 80046ae:	f000 fb73 	bl	8004d98 <read32>
 80046b2:	0003      	movs	r3, r0
 80046b4:	0018      	movs	r0, r3
 80046b6:	f7fc f9eb 	bl	8000a90 <__aeabi_i2f>
 80046ba:	1c03      	adds	r3, r0, #0
 80046bc:	21ee      	movs	r1, #238	; 0xee
 80046be:	0589      	lsls	r1, r1, #22
 80046c0:	1c18      	adds	r0, r3, #0
 80046c2:	f7fb fed7 	bl	8000474 <__aeabi_fmul>
 80046c6:	1c03      	adds	r3, r0, #0
 80046c8:	1c1a      	adds	r2, r3, #0
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	615a      	str	r2, [r3, #20]

    return SH2_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	0018      	movs	r0, r3
 80046d2:	46bd      	mov	sp, r7
 80046d4:	b002      	add	sp, #8
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <decodeHumidity>:

static int decodeHumidity(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
    value->un.humidity.value = read16(&event->report[4]) * SCALE_Q(8);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	330e      	adds	r3, #14
 80046e6:	0018      	movs	r0, r3
 80046e8:	f000 fb3f 	bl	8004d6a <read16>
 80046ec:	0003      	movs	r3, r0
 80046ee:	0018      	movs	r0, r3
 80046f0:	f7fc f9ce 	bl	8000a90 <__aeabi_i2f>
 80046f4:	1c03      	adds	r3, r0, #0
 80046f6:	21ee      	movs	r1, #238	; 0xee
 80046f8:	0589      	lsls	r1, r1, #22
 80046fa:	1c18      	adds	r0, r3, #0
 80046fc:	f7fb feba 	bl	8000474 <__aeabi_fmul>
 8004700:	1c03      	adds	r3, r0, #0
 8004702:	1c1a      	adds	r2, r3, #0
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	615a      	str	r2, [r3, #20]

    return SH2_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	0018      	movs	r0, r3
 800470c:	46bd      	mov	sp, r7
 800470e:	b002      	add	sp, #8
 8004710:	bd80      	pop	{r7, pc}

08004712 <decodeProximity>:

static int decodeProximity(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b082      	sub	sp, #8
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
 800471a:	6039      	str	r1, [r7, #0]
    value->un.proximity.value = read16(&event->report[4]) * SCALE_Q(4);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	330e      	adds	r3, #14
 8004720:	0018      	movs	r0, r3
 8004722:	f000 fb22 	bl	8004d6a <read16>
 8004726:	0003      	movs	r3, r0
 8004728:	0018      	movs	r0, r3
 800472a:	f7fc f9b1 	bl	8000a90 <__aeabi_i2f>
 800472e:	1c03      	adds	r3, r0, #0
 8004730:	21f6      	movs	r1, #246	; 0xf6
 8004732:	0589      	lsls	r1, r1, #22
 8004734:	1c18      	adds	r0, r3, #0
 8004736:	f7fb fe9d 	bl	8000474 <__aeabi_fmul>
 800473a:	1c03      	adds	r3, r0, #0
 800473c:	1c1a      	adds	r2, r3, #0
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	615a      	str	r2, [r3, #20]

    return SH2_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	0018      	movs	r0, r3
 8004746:	46bd      	mov	sp, r7
 8004748:	b002      	add	sp, #8
 800474a:	bd80      	pop	{r7, pc}

0800474c <decodeTemperature>:

static int decodeTemperature(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
    value->un.temperature.value = read16(&event->report[4]) * SCALE_Q(7);
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	330e      	adds	r3, #14
 800475a:	0018      	movs	r0, r3
 800475c:	f000 fb05 	bl	8004d6a <read16>
 8004760:	0003      	movs	r3, r0
 8004762:	0018      	movs	r0, r3
 8004764:	f7fc f994 	bl	8000a90 <__aeabi_i2f>
 8004768:	1c03      	adds	r3, r0, #0
 800476a:	21f0      	movs	r1, #240	; 0xf0
 800476c:	0589      	lsls	r1, r1, #22
 800476e:	1c18      	adds	r0, r3, #0
 8004770:	f7fb fe80 	bl	8000474 <__aeabi_fmul>
 8004774:	1c03      	adds	r3, r0, #0
 8004776:	1c1a      	adds	r2, r3, #0
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	615a      	str	r2, [r3, #20]

    return SH2_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	0018      	movs	r0, r3
 8004780:	46bd      	mov	sp, r7
 8004782:	b002      	add	sp, #8
 8004784:	bd80      	pop	{r7, pc}

08004786 <decodeReserved>:

static int decodeReserved(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b082      	sub	sp, #8
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
 800478e:	6039      	str	r1, [r7, #0]
    value->un.reserved.tbd = read16(&event->report[4]) * SCALE_Q(7);
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	330e      	adds	r3, #14
 8004794:	0018      	movs	r0, r3
 8004796:	f000 fae8 	bl	8004d6a <read16>
 800479a:	0003      	movs	r3, r0
 800479c:	0018      	movs	r0, r3
 800479e:	f7fc f977 	bl	8000a90 <__aeabi_i2f>
 80047a2:	1c03      	adds	r3, r0, #0
 80047a4:	21f0      	movs	r1, #240	; 0xf0
 80047a6:	0589      	lsls	r1, r1, #22
 80047a8:	1c18      	adds	r0, r3, #0
 80047aa:	f7fb fe63 	bl	8000474 <__aeabi_fmul>
 80047ae:	1c03      	adds	r3, r0, #0
 80047b0:	1c1a      	adds	r2, r3, #0
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	615a      	str	r2, [r3, #20]

    return SH2_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	0018      	movs	r0, r3
 80047ba:	46bd      	mov	sp, r7
 80047bc:	b002      	add	sp, #8
 80047be:	bd80      	pop	{r7, pc}

080047c0 <decodeTapDetector>:

static int decodeTapDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
    value->un.tapDetector.flags = event->report[4];
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	7b9a      	ldrb	r2, [r3, #14]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	751a      	strb	r2, [r3, #20]

    return SH2_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	0018      	movs	r0, r3
 80047d6:	46bd      	mov	sp, r7
 80047d8:	b002      	add	sp, #8
 80047da:	bd80      	pop	{r7, pc}

080047dc <decodeStepDetector>:

static int decodeStepDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
    value->un.stepDetector.latency = readu32(&event->report[4]);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	330e      	adds	r3, #14
 80047ea:	0018      	movs	r0, r3
 80047ec:	f000 faa1 	bl	8004d32 <readu32>
 80047f0:	0002      	movs	r2, r0
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	615a      	str	r2, [r3, #20]

    return SH2_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	0018      	movs	r0, r3
 80047fa:	46bd      	mov	sp, r7
 80047fc:	b002      	add	sp, #8
 80047fe:	bd80      	pop	{r7, pc}

08004800 <decodeStepCounter>:

static int decodeStepCounter(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
    value->un.stepCounter.latency = readu32(&event->report[4]);
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	330e      	adds	r3, #14
 800480e:	0018      	movs	r0, r3
 8004810:	f000 fa8f 	bl	8004d32 <readu32>
 8004814:	0002      	movs	r2, r0
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	615a      	str	r2, [r3, #20]
    value->un.stepCounter.steps = readu32(&event->report[8]);
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	3312      	adds	r3, #18
 800481e:	0018      	movs	r0, r3
 8004820:	f000 fa87 	bl	8004d32 <readu32>
 8004824:	0003      	movs	r3, r0
 8004826:	b29a      	uxth	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	831a      	strh	r2, [r3, #24]

    return SH2_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	0018      	movs	r0, r3
 8004830:	46bd      	mov	sp, r7
 8004832:	b002      	add	sp, #8
 8004834:	bd80      	pop	{r7, pc}

08004836 <decodeSignificantMotion>:

static int decodeSignificantMotion(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b082      	sub	sp, #8
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
 800483e:	6039      	str	r1, [r7, #0]
    value->un.sigMotion.motion = readu16(&event->report[4]);
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	330e      	adds	r3, #14
 8004844:	0018      	movs	r0, r3
 8004846:	f000 fa5d 	bl	8004d04 <readu16>
 800484a:	0003      	movs	r3, r0
 800484c:	001a      	movs	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	0018      	movs	r0, r3
 8004856:	46bd      	mov	sp, r7
 8004858:	b002      	add	sp, #8
 800485a:	bd80      	pop	{r7, pc}

0800485c <decodeStabilityClassifier>:

static int decodeStabilityClassifier(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
    value->un.stabilityClassifier.classification = event->report[4];
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	7b9a      	ldrb	r2, [r3, #14]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	751a      	strb	r2, [r3, #20]

    return SH2_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	0018      	movs	r0, r3
 8004872:	46bd      	mov	sp, r7
 8004874:	b002      	add	sp, #8
 8004876:	bd80      	pop	{r7, pc}

08004878 <decodeShakeDetector>:

static int decodeShakeDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
    value->un.shakeDetector.shake = readu16(&event->report[4]);
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	330e      	adds	r3, #14
 8004886:	0018      	movs	r0, r3
 8004888:	f000 fa3c 	bl	8004d04 <readu16>
 800488c:	0003      	movs	r3, r0
 800488e:	001a      	movs	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	0018      	movs	r0, r3
 8004898:	46bd      	mov	sp, r7
 800489a:	b002      	add	sp, #8
 800489c:	bd80      	pop	{r7, pc}

0800489e <decodeFlipDetector>:

static int decodeFlipDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b082      	sub	sp, #8
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
 80048a6:	6039      	str	r1, [r7, #0]
    value->un.flipDetector.flip = readu16(&event->report[4]);
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	330e      	adds	r3, #14
 80048ac:	0018      	movs	r0, r3
 80048ae:	f000 fa29 	bl	8004d04 <readu16>
 80048b2:	0003      	movs	r3, r0
 80048b4:	001a      	movs	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	0018      	movs	r0, r3
 80048be:	46bd      	mov	sp, r7
 80048c0:	b002      	add	sp, #8
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <decodePickupDetector>:

static int decodePickupDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
    value->un.pickupDetector.pickup = readu16(&event->report[4]);
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	330e      	adds	r3, #14
 80048d2:	0018      	movs	r0, r3
 80048d4:	f000 fa16 	bl	8004d04 <readu16>
 80048d8:	0003      	movs	r3, r0
 80048da:	001a      	movs	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	0018      	movs	r0, r3
 80048e4:	46bd      	mov	sp, r7
 80048e6:	b002      	add	sp, #8
 80048e8:	bd80      	pop	{r7, pc}

080048ea <decodeStabilityDetector>:

static int decodeStabilityDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b082      	sub	sp, #8
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
 80048f2:	6039      	str	r1, [r7, #0]
    value->un.stabilityDetector.stability = readu16(&event->report[4]);
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	330e      	adds	r3, #14
 80048f8:	0018      	movs	r0, r3
 80048fa:	f000 fa03 	bl	8004d04 <readu16>
 80048fe:	0003      	movs	r3, r0
 8004900:	001a      	movs	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	0018      	movs	r0, r3
 800490a:	46bd      	mov	sp, r7
 800490c:	b002      	add	sp, #8
 800490e:	bd80      	pop	{r7, pc}

08004910 <decodePersonalActivityClassifier>:

static int decodePersonalActivityClassifier(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
    value->un.personalActivityClassifier.page = event->report[4] & 0x7F;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	7b9b      	ldrb	r3, [r3, #14]
 800491e:	227f      	movs	r2, #127	; 0x7f
 8004920:	4013      	ands	r3, r2
 8004922:	b2da      	uxtb	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	751a      	strb	r2, [r3, #20]
    value->un.personalActivityClassifier.lastPage = ((event->report[4] & 0x80) != 0);
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	7b9b      	ldrb	r3, [r3, #14]
 800492c:	b25b      	sxtb	r3, r3
 800492e:	b2db      	uxtb	r3, r3
 8004930:	09db      	lsrs	r3, r3, #7
 8004932:	b2da      	uxtb	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	755a      	strb	r2, [r3, #21]
    value->un.personalActivityClassifier.mostLikelyState = event->report[5];
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	7bda      	ldrb	r2, [r3, #15]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	759a      	strb	r2, [r3, #22]
    for (int n = 0; n < 10; n++) {
 8004940:	2300      	movs	r3, #0
 8004942:	60fb      	str	r3, [r7, #12]
 8004944:	e00d      	b.n	8004962 <decodePersonalActivityClassifier+0x52>
        value->un.personalActivityClassifier.confidence[n] = event->report[6+n];
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	3306      	adds	r3, #6
 800494a:	683a      	ldr	r2, [r7, #0]
 800494c:	18d3      	adds	r3, r2, r3
 800494e:	7a99      	ldrb	r1, [r3, #10]
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	18d3      	adds	r3, r2, r3
 8004956:	3317      	adds	r3, #23
 8004958:	1c0a      	adds	r2, r1, #0
 800495a:	701a      	strb	r2, [r3, #0]
    for (int n = 0; n < 10; n++) {
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	3301      	adds	r3, #1
 8004960:	60fb      	str	r3, [r7, #12]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2b09      	cmp	r3, #9
 8004966:	ddee      	ble.n	8004946 <decodePersonalActivityClassifier+0x36>
    }
    
    return SH2_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	0018      	movs	r0, r3
 800496c:	46bd      	mov	sp, r7
 800496e:	b004      	add	sp, #16
 8004970:	bd80      	pop	{r7, pc}

08004972 <decodeSleepDetector>:

static int decodeSleepDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b082      	sub	sp, #8
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
 800497a:	6039      	str	r1, [r7, #0]
    value->un.sleepDetector.sleepState = event->report[4];
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	7b9a      	ldrb	r2, [r3, #14]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	751a      	strb	r2, [r3, #20]

    return SH2_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	0018      	movs	r0, r3
 8004988:	46bd      	mov	sp, r7
 800498a:	b002      	add	sp, #8
 800498c:	bd80      	pop	{r7, pc}

0800498e <decodeTiltDetector>:

static int decodeTiltDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b082      	sub	sp, #8
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
 8004996:	6039      	str	r1, [r7, #0]
    value->un.tiltDetector.tilt = readu16(&event->report[4]);
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	330e      	adds	r3, #14
 800499c:	0018      	movs	r0, r3
 800499e:	f000 f9b1 	bl	8004d04 <readu16>
 80049a2:	0003      	movs	r3, r0
 80049a4:	001a      	movs	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	0018      	movs	r0, r3
 80049ae:	46bd      	mov	sp, r7
 80049b0:	b002      	add	sp, #8
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <decodePocketDetector>:

static int decodePocketDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
    value->un.pocketDetector.pocket = readu16(&event->report[4]);
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	330e      	adds	r3, #14
 80049c2:	0018      	movs	r0, r3
 80049c4:	f000 f99e 	bl	8004d04 <readu16>
 80049c8:	0003      	movs	r3, r0
 80049ca:	001a      	movs	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	0018      	movs	r0, r3
 80049d4:	46bd      	mov	sp, r7
 80049d6:	b002      	add	sp, #8
 80049d8:	bd80      	pop	{r7, pc}

080049da <decodeCircleDetector>:

static int decodeCircleDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b082      	sub	sp, #8
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
 80049e2:	6039      	str	r1, [r7, #0]
    value->un.circleDetector.circle = readu16(&event->report[4]);
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	330e      	adds	r3, #14
 80049e8:	0018      	movs	r0, r3
 80049ea:	f000 f98b 	bl	8004d04 <readu16>
 80049ee:	0003      	movs	r3, r0
 80049f0:	001a      	movs	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	0018      	movs	r0, r3
 80049fa:	46bd      	mov	sp, r7
 80049fc:	b002      	add	sp, #8
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <decodeHeartRateMonitor>:

static int decodeHeartRateMonitor(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
    value->un.heartRateMonitor.heartRate = readu16(&event->report[4]);
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	330e      	adds	r3, #14
 8004a0e:	0018      	movs	r0, r3
 8004a10:	f000 f978 	bl	8004d04 <readu16>
 8004a14:	0003      	movs	r3, r0
 8004a16:	001a      	movs	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	0018      	movs	r0, r3
 8004a20:	46bd      	mov	sp, r7
 8004a22:	b002      	add	sp, #8
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <decodeArvrStabilizedRV>:

static int decodeArvrStabilizedRV(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b082      	sub	sp, #8
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
 8004a2e:	6039      	str	r1, [r7, #0]
    value->un.arvrStabilizedRV.i = read16(&event->report[4]) * SCALE_Q(14);
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	330e      	adds	r3, #14
 8004a34:	0018      	movs	r0, r3
 8004a36:	f000 f998 	bl	8004d6a <read16>
 8004a3a:	0003      	movs	r3, r0
 8004a3c:	0018      	movs	r0, r3
 8004a3e:	f7fc f827 	bl	8000a90 <__aeabi_i2f>
 8004a42:	1c03      	adds	r3, r0, #0
 8004a44:	21e2      	movs	r1, #226	; 0xe2
 8004a46:	0589      	lsls	r1, r1, #22
 8004a48:	1c18      	adds	r0, r3, #0
 8004a4a:	f7fb fd13 	bl	8000474 <__aeabi_fmul>
 8004a4e:	1c03      	adds	r3, r0, #0
 8004a50:	1c1a      	adds	r2, r3, #0
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	615a      	str	r2, [r3, #20]
    value->un.arvrStabilizedRV.j = read16(&event->report[6]) * SCALE_Q(14);
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	3310      	adds	r3, #16
 8004a5a:	0018      	movs	r0, r3
 8004a5c:	f000 f985 	bl	8004d6a <read16>
 8004a60:	0003      	movs	r3, r0
 8004a62:	0018      	movs	r0, r3
 8004a64:	f7fc f814 	bl	8000a90 <__aeabi_i2f>
 8004a68:	1c03      	adds	r3, r0, #0
 8004a6a:	21e2      	movs	r1, #226	; 0xe2
 8004a6c:	0589      	lsls	r1, r1, #22
 8004a6e:	1c18      	adds	r0, r3, #0
 8004a70:	f7fb fd00 	bl	8000474 <__aeabi_fmul>
 8004a74:	1c03      	adds	r3, r0, #0
 8004a76:	1c1a      	adds	r2, r3, #0
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	619a      	str	r2, [r3, #24]
    value->un.arvrStabilizedRV.k = read16(&event->report[8]) * SCALE_Q(14);
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	3312      	adds	r3, #18
 8004a80:	0018      	movs	r0, r3
 8004a82:	f000 f972 	bl	8004d6a <read16>
 8004a86:	0003      	movs	r3, r0
 8004a88:	0018      	movs	r0, r3
 8004a8a:	f7fc f801 	bl	8000a90 <__aeabi_i2f>
 8004a8e:	1c03      	adds	r3, r0, #0
 8004a90:	21e2      	movs	r1, #226	; 0xe2
 8004a92:	0589      	lsls	r1, r1, #22
 8004a94:	1c18      	adds	r0, r3, #0
 8004a96:	f7fb fced 	bl	8000474 <__aeabi_fmul>
 8004a9a:	1c03      	adds	r3, r0, #0
 8004a9c:	1c1a      	adds	r2, r3, #0
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	61da      	str	r2, [r3, #28]
    value->un.arvrStabilizedRV.real = read16(&event->report[10]) * SCALE_Q(14);
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	3314      	adds	r3, #20
 8004aa6:	0018      	movs	r0, r3
 8004aa8:	f000 f95f 	bl	8004d6a <read16>
 8004aac:	0003      	movs	r3, r0
 8004aae:	0018      	movs	r0, r3
 8004ab0:	f7fb ffee 	bl	8000a90 <__aeabi_i2f>
 8004ab4:	1c03      	adds	r3, r0, #0
 8004ab6:	21e2      	movs	r1, #226	; 0xe2
 8004ab8:	0589      	lsls	r1, r1, #22
 8004aba:	1c18      	adds	r0, r3, #0
 8004abc:	f7fb fcda 	bl	8000474 <__aeabi_fmul>
 8004ac0:	1c03      	adds	r3, r0, #0
 8004ac2:	1c1a      	adds	r2, r3, #0
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	621a      	str	r2, [r3, #32]
    value->un.arvrStabilizedRV.accuracy = read16(&event->report[12]) * SCALE_Q(12);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	3316      	adds	r3, #22
 8004acc:	0018      	movs	r0, r3
 8004ace:	f000 f94c 	bl	8004d6a <read16>
 8004ad2:	0003      	movs	r3, r0
 8004ad4:	0018      	movs	r0, r3
 8004ad6:	f7fb ffdb 	bl	8000a90 <__aeabi_i2f>
 8004ada:	1c03      	adds	r3, r0, #0
 8004adc:	21e6      	movs	r1, #230	; 0xe6
 8004ade:	0589      	lsls	r1, r1, #22
 8004ae0:	1c18      	adds	r0, r3, #0
 8004ae2:	f7fb fcc7 	bl	8000474 <__aeabi_fmul>
 8004ae6:	1c03      	adds	r3, r0, #0
 8004ae8:	1c1a      	adds	r2, r3, #0
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	625a      	str	r2, [r3, #36]	; 0x24

    return SH2_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	0018      	movs	r0, r3
 8004af2:	46bd      	mov	sp, r7
 8004af4:	b002      	add	sp, #8
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <decodeArvrStabilizedGRV>:

static int decodeArvrStabilizedGRV(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
    value->un.arvrStabilizedGRV.i = read16(&event->report[4]) * SCALE_Q(14);
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	330e      	adds	r3, #14
 8004b06:	0018      	movs	r0, r3
 8004b08:	f000 f92f 	bl	8004d6a <read16>
 8004b0c:	0003      	movs	r3, r0
 8004b0e:	0018      	movs	r0, r3
 8004b10:	f7fb ffbe 	bl	8000a90 <__aeabi_i2f>
 8004b14:	1c03      	adds	r3, r0, #0
 8004b16:	21e2      	movs	r1, #226	; 0xe2
 8004b18:	0589      	lsls	r1, r1, #22
 8004b1a:	1c18      	adds	r0, r3, #0
 8004b1c:	f7fb fcaa 	bl	8000474 <__aeabi_fmul>
 8004b20:	1c03      	adds	r3, r0, #0
 8004b22:	1c1a      	adds	r2, r3, #0
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	615a      	str	r2, [r3, #20]
    value->un.arvrStabilizedGRV.j = read16(&event->report[6]) * SCALE_Q(14);
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	3310      	adds	r3, #16
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	f000 f91c 	bl	8004d6a <read16>
 8004b32:	0003      	movs	r3, r0
 8004b34:	0018      	movs	r0, r3
 8004b36:	f7fb ffab 	bl	8000a90 <__aeabi_i2f>
 8004b3a:	1c03      	adds	r3, r0, #0
 8004b3c:	21e2      	movs	r1, #226	; 0xe2
 8004b3e:	0589      	lsls	r1, r1, #22
 8004b40:	1c18      	adds	r0, r3, #0
 8004b42:	f7fb fc97 	bl	8000474 <__aeabi_fmul>
 8004b46:	1c03      	adds	r3, r0, #0
 8004b48:	1c1a      	adds	r2, r3, #0
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	619a      	str	r2, [r3, #24]
    value->un.arvrStabilizedGRV.k = read16(&event->report[8]) * SCALE_Q(14);
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	3312      	adds	r3, #18
 8004b52:	0018      	movs	r0, r3
 8004b54:	f000 f909 	bl	8004d6a <read16>
 8004b58:	0003      	movs	r3, r0
 8004b5a:	0018      	movs	r0, r3
 8004b5c:	f7fb ff98 	bl	8000a90 <__aeabi_i2f>
 8004b60:	1c03      	adds	r3, r0, #0
 8004b62:	21e2      	movs	r1, #226	; 0xe2
 8004b64:	0589      	lsls	r1, r1, #22
 8004b66:	1c18      	adds	r0, r3, #0
 8004b68:	f7fb fc84 	bl	8000474 <__aeabi_fmul>
 8004b6c:	1c03      	adds	r3, r0, #0
 8004b6e:	1c1a      	adds	r2, r3, #0
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	61da      	str	r2, [r3, #28]
    value->un.arvrStabilizedGRV.real = read16(&event->report[10]) * SCALE_Q(14);
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	3314      	adds	r3, #20
 8004b78:	0018      	movs	r0, r3
 8004b7a:	f000 f8f6 	bl	8004d6a <read16>
 8004b7e:	0003      	movs	r3, r0
 8004b80:	0018      	movs	r0, r3
 8004b82:	f7fb ff85 	bl	8000a90 <__aeabi_i2f>
 8004b86:	1c03      	adds	r3, r0, #0
 8004b88:	21e2      	movs	r1, #226	; 0xe2
 8004b8a:	0589      	lsls	r1, r1, #22
 8004b8c:	1c18      	adds	r0, r3, #0
 8004b8e:	f7fb fc71 	bl	8000474 <__aeabi_fmul>
 8004b92:	1c03      	adds	r3, r0, #0
 8004b94:	1c1a      	adds	r2, r3, #0
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	621a      	str	r2, [r3, #32]

    return SH2_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	0018      	movs	r0, r3
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	b002      	add	sp, #8
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <decodeGyroIntegratedRV>:

static int decodeGyroIntegratedRV(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
    value->un.gyroIntegratedRV.i = read16(&event->report[0]) * SCALE_Q(14);
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	330a      	adds	r3, #10
 8004bb2:	0018      	movs	r0, r3
 8004bb4:	f000 f8d9 	bl	8004d6a <read16>
 8004bb8:	0003      	movs	r3, r0
 8004bba:	0018      	movs	r0, r3
 8004bbc:	f7fb ff68 	bl	8000a90 <__aeabi_i2f>
 8004bc0:	1c03      	adds	r3, r0, #0
 8004bc2:	21e2      	movs	r1, #226	; 0xe2
 8004bc4:	0589      	lsls	r1, r1, #22
 8004bc6:	1c18      	adds	r0, r3, #0
 8004bc8:	f7fb fc54 	bl	8000474 <__aeabi_fmul>
 8004bcc:	1c03      	adds	r3, r0, #0
 8004bce:	1c1a      	adds	r2, r3, #0
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	615a      	str	r2, [r3, #20]
    value->un.gyroIntegratedRV.j = read16(&event->report[2]) * SCALE_Q(14);
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	330c      	adds	r3, #12
 8004bd8:	0018      	movs	r0, r3
 8004bda:	f000 f8c6 	bl	8004d6a <read16>
 8004bde:	0003      	movs	r3, r0
 8004be0:	0018      	movs	r0, r3
 8004be2:	f7fb ff55 	bl	8000a90 <__aeabi_i2f>
 8004be6:	1c03      	adds	r3, r0, #0
 8004be8:	21e2      	movs	r1, #226	; 0xe2
 8004bea:	0589      	lsls	r1, r1, #22
 8004bec:	1c18      	adds	r0, r3, #0
 8004bee:	f7fb fc41 	bl	8000474 <__aeabi_fmul>
 8004bf2:	1c03      	adds	r3, r0, #0
 8004bf4:	1c1a      	adds	r2, r3, #0
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	619a      	str	r2, [r3, #24]
    value->un.gyroIntegratedRV.k = read16(&event->report[4]) * SCALE_Q(14);
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	330e      	adds	r3, #14
 8004bfe:	0018      	movs	r0, r3
 8004c00:	f000 f8b3 	bl	8004d6a <read16>
 8004c04:	0003      	movs	r3, r0
 8004c06:	0018      	movs	r0, r3
 8004c08:	f7fb ff42 	bl	8000a90 <__aeabi_i2f>
 8004c0c:	1c03      	adds	r3, r0, #0
 8004c0e:	21e2      	movs	r1, #226	; 0xe2
 8004c10:	0589      	lsls	r1, r1, #22
 8004c12:	1c18      	adds	r0, r3, #0
 8004c14:	f7fb fc2e 	bl	8000474 <__aeabi_fmul>
 8004c18:	1c03      	adds	r3, r0, #0
 8004c1a:	1c1a      	adds	r2, r3, #0
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	61da      	str	r2, [r3, #28]
    value->un.gyroIntegratedRV.real = read16(&event->report[6]) * SCALE_Q(14);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	3310      	adds	r3, #16
 8004c24:	0018      	movs	r0, r3
 8004c26:	f000 f8a0 	bl	8004d6a <read16>
 8004c2a:	0003      	movs	r3, r0
 8004c2c:	0018      	movs	r0, r3
 8004c2e:	f7fb ff2f 	bl	8000a90 <__aeabi_i2f>
 8004c32:	1c03      	adds	r3, r0, #0
 8004c34:	21e2      	movs	r1, #226	; 0xe2
 8004c36:	0589      	lsls	r1, r1, #22
 8004c38:	1c18      	adds	r0, r3, #0
 8004c3a:	f7fb fc1b 	bl	8000474 <__aeabi_fmul>
 8004c3e:	1c03      	adds	r3, r0, #0
 8004c40:	1c1a      	adds	r2, r3, #0
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	621a      	str	r2, [r3, #32]
    value->un.gyroIntegratedRV.angVelX = read16(&event->report[8]) * SCALE_Q(10);
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	3312      	adds	r3, #18
 8004c4a:	0018      	movs	r0, r3
 8004c4c:	f000 f88d 	bl	8004d6a <read16>
 8004c50:	0003      	movs	r3, r0
 8004c52:	0018      	movs	r0, r3
 8004c54:	f7fb ff1c 	bl	8000a90 <__aeabi_i2f>
 8004c58:	1c03      	adds	r3, r0, #0
 8004c5a:	21ea      	movs	r1, #234	; 0xea
 8004c5c:	0589      	lsls	r1, r1, #22
 8004c5e:	1c18      	adds	r0, r3, #0
 8004c60:	f7fb fc08 	bl	8000474 <__aeabi_fmul>
 8004c64:	1c03      	adds	r3, r0, #0
 8004c66:	1c1a      	adds	r2, r3, #0
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	625a      	str	r2, [r3, #36]	; 0x24
    value->un.gyroIntegratedRV.angVelY = read16(&event->report[10]) * SCALE_Q(10);
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	3314      	adds	r3, #20
 8004c70:	0018      	movs	r0, r3
 8004c72:	f000 f87a 	bl	8004d6a <read16>
 8004c76:	0003      	movs	r3, r0
 8004c78:	0018      	movs	r0, r3
 8004c7a:	f7fb ff09 	bl	8000a90 <__aeabi_i2f>
 8004c7e:	1c03      	adds	r3, r0, #0
 8004c80:	21ea      	movs	r1, #234	; 0xea
 8004c82:	0589      	lsls	r1, r1, #22
 8004c84:	1c18      	adds	r0, r3, #0
 8004c86:	f7fb fbf5 	bl	8000474 <__aeabi_fmul>
 8004c8a:	1c03      	adds	r3, r0, #0
 8004c8c:	1c1a      	adds	r2, r3, #0
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	629a      	str	r2, [r3, #40]	; 0x28
    value->un.gyroIntegratedRV.angVelZ = read16(&event->report[12]) * SCALE_Q(10);
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	3316      	adds	r3, #22
 8004c96:	0018      	movs	r0, r3
 8004c98:	f000 f867 	bl	8004d6a <read16>
 8004c9c:	0003      	movs	r3, r0
 8004c9e:	0018      	movs	r0, r3
 8004ca0:	f7fb fef6 	bl	8000a90 <__aeabi_i2f>
 8004ca4:	1c03      	adds	r3, r0, #0
 8004ca6:	21ea      	movs	r1, #234	; 0xea
 8004ca8:	0589      	lsls	r1, r1, #22
 8004caa:	1c18      	adds	r0, r3, #0
 8004cac:	f7fb fbe2 	bl	8000474 <__aeabi_fmul>
 8004cb0:	1c03      	adds	r3, r0, #0
 8004cb2:	1c1a      	adds	r2, r3, #0
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	62da      	str	r2, [r3, #44]	; 0x2c

    return SH2_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	0018      	movs	r0, r3
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	b002      	add	sp, #8
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <decodeIZroRequest>:

static int decodeIZroRequest(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b082      	sub	sp, #8
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
 8004cca:	6039      	str	r1, [r7, #0]
    value->un.izroRequest.intent = (sh2_IZroMotionIntent_t)event->report[4];
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	7b9a      	ldrb	r2, [r3, #14]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	751a      	strb	r2, [r3, #20]
    value->un.izroRequest.request = (sh2_IZroMotionRequest_t)event->report[5];
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	7bda      	ldrb	r2, [r3, #15]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	755a      	strb	r2, [r3, #21]

    return SH2_OK;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	0018      	movs	r0, r3
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	b002      	add	sp, #8
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <readu8>:
 */

#include "sh2_util.h"

uint8_t readu8(const uint8_t *p)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b084      	sub	sp, #16
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
    uint8_t retval = p[0];
 8004cee:	210f      	movs	r1, #15
 8004cf0:	187b      	adds	r3, r7, r1
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	7812      	ldrb	r2, [r2, #0]
 8004cf6:	701a      	strb	r2, [r3, #0]
    return retval;
 8004cf8:	187b      	adds	r3, r7, r1
 8004cfa:	781b      	ldrb	r3, [r3, #0]
}
 8004cfc:	0018      	movs	r0, r3
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	b004      	add	sp, #16
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <readu16>:
{
    *p = (uint8_t)(value & 0xFF);
}

uint16_t readu16(const uint8_t *p)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
    uint16_t retval = p[0] | (p[1] << 8);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	b21a      	sxth	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	3301      	adds	r3, #1
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	021b      	lsls	r3, r3, #8
 8004d1a:	b21b      	sxth	r3, r3
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	b21a      	sxth	r2, r3
 8004d20:	210e      	movs	r1, #14
 8004d22:	187b      	adds	r3, r7, r1
 8004d24:	801a      	strh	r2, [r3, #0]
    return retval;
 8004d26:	187b      	adds	r3, r7, r1
 8004d28:	881b      	ldrh	r3, [r3, #0]
}
 8004d2a:	0018      	movs	r0, r3
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	b004      	add	sp, #16
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <readu32>:
    value >>= 8;
    *p = (uint8_t)(value & 0xFF);
}

uint32_t readu32(const uint8_t *p)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b084      	sub	sp, #16
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
    uint32_t retval = p[0] | (p[1] << 8) | (p[2] << 16) | (p[3] << 24);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	001a      	movs	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	3301      	adds	r3, #1
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	021b      	lsls	r3, r3, #8
 8004d48:	431a      	orrs	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	3302      	adds	r3, #2
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	041b      	lsls	r3, r3, #16
 8004d52:	431a      	orrs	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	3303      	adds	r3, #3
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	061b      	lsls	r3, r3, #24
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	60fb      	str	r3, [r7, #12]
    return retval;
 8004d60:	68fb      	ldr	r3, [r7, #12]
}
 8004d62:	0018      	movs	r0, r3
 8004d64:	46bd      	mov	sp, r7
 8004d66:	b004      	add	sp, #16
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <read16>:
{
    *p = (uint8_t)(value & 0xFF);
}

int16_t read16(const uint8_t *p)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b084      	sub	sp, #16
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
    int16_t retval = p[0] | (p[1] << 8);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	b219      	sxth	r1, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	021b      	lsls	r3, r3, #8
 8004d80:	b21a      	sxth	r2, r3
 8004d82:	200e      	movs	r0, #14
 8004d84:	183b      	adds	r3, r7, r0
 8004d86:	430a      	orrs	r2, r1
 8004d88:	801a      	strh	r2, [r3, #0]
    return retval;
 8004d8a:	183b      	adds	r3, r7, r0
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	5e9b      	ldrsh	r3, [r3, r2]
}
 8004d90:	0018      	movs	r0, r3
 8004d92:	46bd      	mov	sp, r7
 8004d94:	b004      	add	sp, #16
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <read32>:
    value >>= 8;
    *p = (uint8_t)(value & 0xFF);
}

int32_t read32(const uint8_t *p)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
    int32_t retval = p[0] | (p[1] << 8) | (p[2] << 16) | (p[3] << 24);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	001a      	movs	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	3301      	adds	r3, #1
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	021b      	lsls	r3, r3, #8
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	3302      	adds	r3, #2
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	041b      	lsls	r3, r3, #16
 8004db8:	431a      	orrs	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	3303      	adds	r3, #3
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	061b      	lsls	r3, r3, #24
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	60fb      	str	r3, [r7, #12]
    return retval;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
}
 8004dc8:	0018      	movs	r0, r3
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	b004      	add	sp, #16
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <shtp_init>:

// ------------------------------------------------------------------------
// Private functions

static void shtp_init(void)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	af00      	add	r7, sp, #0
    // clear instance memory.
    // In particular, this clears the pHal pointers which are used
    // to determine if an instance is open and in-use.
    memset(instances, 0, sizeof(instances));
 8004dd4:	4a05      	ldr	r2, [pc, #20]	; (8004dec <shtp_init+0x1c>)
 8004dd6:	4b06      	ldr	r3, [pc, #24]	; (8004df0 <shtp_init+0x20>)
 8004dd8:	2100      	movs	r1, #0
 8004dda:	0018      	movs	r0, r3
 8004ddc:	f005 fe62 	bl	800aaa4 <memset>

    // Set the initialized flag so this doesn't happen again.
    shtp_initialized = true;
 8004de0:	4b04      	ldr	r3, [pc, #16]	; (8004df4 <shtp_init+0x24>)
 8004de2:	2201      	movs	r2, #1
 8004de4:	701a      	strb	r2, [r3, #0]
}
 8004de6:	46c0      	nop			; (mov r8, r8)
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	00000834 	.word	0x00000834
 8004df0:	200007c0 	.word	0x200007c0
 8004df4:	20000ff4 	.word	0x20000ff4

08004df8 <getInstance>:

static shtp_t *getInstance(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
    for (int n = 0; n < MAX_INSTANCES; n++) {
 8004dfe:	2300      	movs	r3, #0
 8004e00:	607b      	str	r3, [r7, #4]
 8004e02:	e00f      	b.n	8004e24 <getInstance+0x2c>
        if (instances[n].pHal == 0) {
 8004e04:	4b0b      	ldr	r3, [pc, #44]	; (8004e34 <getInstance+0x3c>)
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	490b      	ldr	r1, [pc, #44]	; (8004e38 <getInstance+0x40>)
 8004e0a:	434a      	muls	r2, r1
 8004e0c:	58d3      	ldr	r3, [r2, r3]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d105      	bne.n	8004e1e <getInstance+0x26>
            // This instance is free
            return &instances[n];
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a08      	ldr	r2, [pc, #32]	; (8004e38 <getInstance+0x40>)
 8004e16:	435a      	muls	r2, r3
 8004e18:	4b06      	ldr	r3, [pc, #24]	; (8004e34 <getInstance+0x3c>)
 8004e1a:	18d3      	adds	r3, r2, r3
 8004e1c:	e006      	b.n	8004e2c <getInstance+0x34>
    for (int n = 0; n < MAX_INSTANCES; n++) {
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	3301      	adds	r3, #1
 8004e22:	607b      	str	r3, [r7, #4]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	ddec      	ble.n	8004e04 <getInstance+0xc>
        }
    }

    // Can't give an instance, none are free
    return 0;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	0018      	movs	r0, r3
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	b002      	add	sp, #8
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	200007c0 	.word	0x200007c0
 8004e38:	00000834 	.word	0x00000834

08004e3c <addAdvertListener>:

// Register a listener for an app (advertisement listener)
static void addAdvertListener(shtp_t *pShtp, uint16_t guid,
                              shtp_AdvertCallback_t *callback, void * cookie)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b086      	sub	sp, #24
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	607a      	str	r2, [r7, #4]
 8004e46:	603b      	str	r3, [r7, #0]
 8004e48:	200a      	movs	r0, #10
 8004e4a:	183b      	adds	r3, r7, r0
 8004e4c:	1c0a      	adds	r2, r1, #0
 8004e4e:	801a      	strh	r2, [r3, #0]
    shtp_AppListener_t *pAppListener = 0;
 8004e50:	2300      	movs	r3, #0
 8004e52:	617b      	str	r3, [r7, #20]

    // Bail out if no space for more apps
    if (pShtp->nextAppListener >= SH2_MAX_APPS) return;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	4a15      	ldr	r2, [pc, #84]	; (8004eac <addAdvertListener+0x70>)
 8004e58:	5c9b      	ldrb	r3, [r3, r2]
 8004e5a:	2b04      	cmp	r3, #4
 8004e5c:	d821      	bhi.n	8004ea2 <addAdvertListener+0x66>

    // Register this app
    pAppListener = &pShtp->appListener[pShtp->nextAppListener];
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	4a12      	ldr	r2, [pc, #72]	; (8004eac <addAdvertListener+0x70>)
 8004e62:	5c9b      	ldrb	r3, [r3, r2]
 8004e64:	001a      	movs	r2, r3
 8004e66:	0013      	movs	r3, r2
 8004e68:	005b      	lsls	r3, r3, #1
 8004e6a:	189b      	adds	r3, r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	229c      	movs	r2, #156	; 0x9c
 8004e70:	00d2      	lsls	r2, r2, #3
 8004e72:	4694      	mov	ip, r2
 8004e74:	4463      	add	r3, ip
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	18d3      	adds	r3, r2, r3
 8004e7a:	617b      	str	r3, [r7, #20]
    pShtp->nextAppListener++;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	4a0b      	ldr	r2, [pc, #44]	; (8004eac <addAdvertListener+0x70>)
 8004e80:	5c9b      	ldrb	r3, [r3, r2]
 8004e82:	3301      	adds	r3, #1
 8004e84:	b2d9      	uxtb	r1, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	4a08      	ldr	r2, [pc, #32]	; (8004eac <addAdvertListener+0x70>)
 8004e8a:	5499      	strb	r1, [r3, r2]
    pAppListener->guid = guid;
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	183a      	adds	r2, r7, r0
 8004e90:	8812      	ldrh	r2, [r2, #0]
 8004e92:	801a      	strh	r2, [r3, #0]
    pAppListener->callback = callback;
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	605a      	str	r2, [r3, #4]
    pAppListener->cookie = cookie;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	683a      	ldr	r2, [r7, #0]
 8004e9e:	609a      	str	r2, [r3, #8]
 8004ea0:	e000      	b.n	8004ea4 <addAdvertListener+0x68>
    if (pShtp->nextAppListener >= SH2_MAX_APPS) return;
 8004ea2:	46c0      	nop			; (mov r8, r8)
}
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	b006      	add	sp, #24
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	46c0      	nop			; (mov r8, r8)
 8004eac:	000004dd 	.word	0x000004dd

08004eb0 <updateCallbacks>:

// Try to match registered listeners with their channels.
// This is performed every time the underlying Channel, App, Listener data structures are updated.
// As a result, channel number to callback association is fast when receiving packets
static void updateCallbacks(shtp_t *pShtp)
{
 8004eb0:	b590      	push	{r4, r7, lr}
 8004eb2:	b087      	sub	sp, #28
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
    //   Channel -> (GUID, Chan name).
    //   GUID -> App name.
    //   (App name, Chan name) -> Callback

    uint32_t guid;
    const char * chanName = 0;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	60fb      	str	r3, [r7, #12]
    
    for (int chanNo = 0; chanNo < SH2_MAX_CHANS; chanNo++) {
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	617b      	str	r3, [r7, #20]
 8004ec0:	e082      	b.n	8004fc8 <updateCallbacks+0x118>
        // Reset callback for this channel until we find the right one.
        pShtp->chan[chanNo].callback = 0;
 8004ec2:	6879      	ldr	r1, [r7, #4]
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	23a9      	movs	r3, #169	; 0xa9
 8004ec8:	00db      	lsls	r3, r3, #3
 8004eca:	2034      	movs	r0, #52	; 0x34
 8004ecc:	4342      	muls	r2, r0
 8004ece:	188a      	adds	r2, r1, r2
 8004ed0:	18d3      	adds	r3, r2, r3
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	601a      	str	r2, [r3, #0]
            
        if (pShtp->chan[chanNo].guid == 0xFFFFFFFF) {
 8004ed6:	6879      	ldr	r1, [r7, #4]
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	23a4      	movs	r3, #164	; 0xa4
 8004edc:	00db      	lsls	r3, r3, #3
 8004ede:	2034      	movs	r0, #52	; 0x34
 8004ee0:	4342      	muls	r2, r0
 8004ee2:	188a      	adds	r2, r1, r2
 8004ee4:	18d3      	adds	r3, r2, r3
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	3301      	adds	r3, #1
 8004eea:	d069      	beq.n	8004fc0 <updateCallbacks+0x110>
            // This channel entry not used.
            continue;
        }

        // Get GUID and Channel Name for this channel
        guid = pShtp->chan[chanNo].guid;
 8004eec:	6879      	ldr	r1, [r7, #4]
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	23a4      	movs	r3, #164	; 0xa4
 8004ef2:	00db      	lsls	r3, r3, #3
 8004ef4:	2034      	movs	r0, #52	; 0x34
 8004ef6:	4342      	muls	r2, r0
 8004ef8:	188a      	adds	r2, r1, r2
 8004efa:	18d3      	adds	r3, r2, r3
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	60bb      	str	r3, [r7, #8]
        chanName = pShtp->chan[chanNo].chanName;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	2234      	movs	r2, #52	; 0x34
 8004f04:	4353      	muls	r3, r2
 8004f06:	22a4      	movs	r2, #164	; 0xa4
 8004f08:	00d2      	lsls	r2, r2, #3
 8004f0a:	4694      	mov	ip, r2
 8004f0c:	4463      	add	r3, ip
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	18d3      	adds	r3, r2, r3
 8004f12:	3304      	adds	r3, #4
 8004f14:	60fb      	str	r3, [r7, #12]

        // Look for a listener registered with this guid, channel name
        for (int listenerNo = 0; listenerNo < SH2_MAX_CHANS; listenerNo++)
 8004f16:	2300      	movs	r3, #0
 8004f18:	613b      	str	r3, [r7, #16]
 8004f1a:	e04d      	b.n	8004fb8 <updateCallbacks+0x108>
        {
            if ((pShtp->chanListener[listenerNo].callback != 0) &&
 8004f1c:	6879      	ldr	r1, [r7, #4]
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	23dc      	movs	r3, #220	; 0xdc
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	202c      	movs	r0, #44	; 0x2c
 8004f26:	4342      	muls	r2, r0
 8004f28:	188a      	adds	r2, r1, r2
 8004f2a:	18d3      	adds	r3, r2, r3
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d03f      	beq.n	8004fb2 <updateCallbacks+0x102>
                (pShtp->chanListener[listenerNo].guid == guid) &&
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	4929      	ldr	r1, [pc, #164]	; (8004fdc <updateCallbacks+0x12c>)
 8004f38:	202c      	movs	r0, #44	; 0x2c
 8004f3a:	4343      	muls	r3, r0
 8004f3c:	18d3      	adds	r3, r2, r3
 8004f3e:	185b      	adds	r3, r3, r1
 8004f40:	881b      	ldrh	r3, [r3, #0]
 8004f42:	001a      	movs	r2, r3
            if ((pShtp->chanListener[listenerNo].callback != 0) &&
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d133      	bne.n	8004fb2 <updateCallbacks+0x102>
                (strcmp(chanName, pShtp->chanListener[listenerNo].chanName) == 0))
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	222c      	movs	r2, #44	; 0x2c
 8004f4e:	4353      	muls	r3, r2
 8004f50:	22d7      	movs	r2, #215	; 0xd7
 8004f52:	00d2      	lsls	r2, r2, #3
 8004f54:	4694      	mov	ip, r2
 8004f56:	4463      	add	r3, ip
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	18d3      	adds	r3, r2, r3
 8004f5c:	1d9a      	adds	r2, r3, #6
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	0011      	movs	r1, r2
 8004f62:	0018      	movs	r0, r3
 8004f64:	f7fb f8d0 	bl	8000108 <strcmp>
 8004f68:	1e03      	subs	r3, r0, #0
                (pShtp->chanListener[listenerNo].guid == guid) &&
 8004f6a:	d122      	bne.n	8004fb2 <updateCallbacks+0x102>
            {
            
                // This listener is the one for this channel
                pShtp->chan[chanNo].callback = pShtp->chanListener[listenerNo].callback;
 8004f6c:	6879      	ldr	r1, [r7, #4]
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	23dc      	movs	r3, #220	; 0xdc
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	202c      	movs	r0, #44	; 0x2c
 8004f76:	4342      	muls	r2, r0
 8004f78:	188a      	adds	r2, r1, r2
 8004f7a:	18d3      	adds	r3, r2, r3
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	6979      	ldr	r1, [r7, #20]
 8004f82:	23a9      	movs	r3, #169	; 0xa9
 8004f84:	00db      	lsls	r3, r3, #3
 8004f86:	2434      	movs	r4, #52	; 0x34
 8004f88:	4361      	muls	r1, r4
 8004f8a:	1841      	adds	r1, r0, r1
 8004f8c:	18cb      	adds	r3, r1, r3
 8004f8e:	601a      	str	r2, [r3, #0]
                pShtp->chan[chanNo].cookie = pShtp->chanListener[listenerNo].cookie;
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	4912      	ldr	r1, [pc, #72]	; (8004fe0 <updateCallbacks+0x130>)
 8004f96:	202c      	movs	r0, #44	; 0x2c
 8004f98:	4343      	muls	r3, r0
 8004f9a:	18d3      	adds	r3, r2, r3
 8004f9c:	185b      	adds	r3, r3, r1
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	6879      	ldr	r1, [r7, #4]
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	480f      	ldr	r0, [pc, #60]	; (8004fe4 <updateCallbacks+0x134>)
 8004fa6:	2434      	movs	r4, #52	; 0x34
 8004fa8:	4363      	muls	r3, r4
 8004faa:	18cb      	adds	r3, r1, r3
 8004fac:	181b      	adds	r3, r3, r0
 8004fae:	601a      	str	r2, [r3, #0]
                break;
 8004fb0:	e007      	b.n	8004fc2 <updateCallbacks+0x112>
        for (int listenerNo = 0; listenerNo < SH2_MAX_CHANS; listenerNo++)
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	613b      	str	r3, [r7, #16]
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	2b07      	cmp	r3, #7
 8004fbc:	ddae      	ble.n	8004f1c <updateCallbacks+0x6c>
 8004fbe:	e000      	b.n	8004fc2 <updateCallbacks+0x112>
            continue;
 8004fc0:	46c0      	nop			; (mov r8, r8)
    for (int chanNo = 0; chanNo < SH2_MAX_CHANS; chanNo++) {
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	617b      	str	r3, [r7, #20]
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	2b07      	cmp	r3, #7
 8004fcc:	dc00      	bgt.n	8004fd0 <updateCallbacks+0x120>
 8004fce:	e778      	b.n	8004ec2 <updateCallbacks+0x12>
            }
        }
    }
}
 8004fd0:	46c0      	nop			; (mov r8, r8)
 8004fd2:	46c0      	nop			; (mov r8, r8)
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	b007      	add	sp, #28
 8004fd8:	bd90      	pop	{r4, r7, pc}
 8004fda:	46c0      	nop			; (mov r8, r8)
 8004fdc:	000006bc 	.word	0x000006bc
 8004fe0:	000006e4 	.word	0x000006e4
 8004fe4:	0000054c 	.word	0x0000054c

08004fe8 <addChanListener>:

// Register a new channel listener
static int addChanListener(shtp_t *pShtp,
                           uint16_t guid, const char * chanName,
                           shtp_Callback_t *callback, void *cookie)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	607a      	str	r2, [r7, #4]
 8004ff2:	603b      	str	r3, [r7, #0]
 8004ff4:	230a      	movs	r3, #10
 8004ff6:	18fb      	adds	r3, r7, r3
 8004ff8:	1c0a      	adds	r2, r1, #0
 8004ffa:	801a      	strh	r2, [r3, #0]
    shtp_ChanListener_t *pListener = 0;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	617b      	str	r3, [r7, #20]

    // Bail out if there are too many listeners registered
    if (pShtp->nextChanListener >= SH2_MAX_CHANS) return SH2_ERR;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	4a1c      	ldr	r2, [pc, #112]	; (8005074 <addChanListener+0x8c>)
 8005004:	5c9b      	ldrb	r3, [r3, r2]
 8005006:	2b07      	cmp	r3, #7
 8005008:	d902      	bls.n	8005010 <addChanListener+0x28>
 800500a:	2301      	movs	r3, #1
 800500c:	425b      	negs	r3, r3
 800500e:	e02c      	b.n	800506a <addChanListener+0x82>

    // Register channel listener
    pListener = &pShtp->chanListener[pShtp->nextChanListener];
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	4a18      	ldr	r2, [pc, #96]	; (8005074 <addChanListener+0x8c>)
 8005014:	5c9b      	ldrb	r3, [r3, r2]
 8005016:	001a      	movs	r2, r3
 8005018:	232c      	movs	r3, #44	; 0x2c
 800501a:	4353      	muls	r3, r2
 800501c:	22d7      	movs	r2, #215	; 0xd7
 800501e:	00d2      	lsls	r2, r2, #3
 8005020:	4694      	mov	ip, r2
 8005022:	4463      	add	r3, ip
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	18d3      	adds	r3, r2, r3
 8005028:	3304      	adds	r3, #4
 800502a:	617b      	str	r3, [r7, #20]
    pShtp->nextChanListener++;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	4a11      	ldr	r2, [pc, #68]	; (8005074 <addChanListener+0x8c>)
 8005030:	5c9b      	ldrb	r3, [r3, r2]
 8005032:	3301      	adds	r3, #1
 8005034:	b2d9      	uxtb	r1, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	4a0e      	ldr	r2, [pc, #56]	; (8005074 <addChanListener+0x8c>)
 800503a:	5499      	strb	r1, [r3, r2]
    pListener->guid = guid;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	220a      	movs	r2, #10
 8005040:	18ba      	adds	r2, r7, r2
 8005042:	8812      	ldrh	r2, [r2, #0]
 8005044:	801a      	strh	r2, [r3, #0]
    strcpy(pListener->chanName, chanName);
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	3302      	adds	r3, #2
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	0011      	movs	r1, r2
 800504e:	0018      	movs	r0, r3
 8005050:	f005 fd54 	bl	800aafc <strcpy>
    pListener->callback = callback;
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	683a      	ldr	r2, [r7, #0]
 8005058:	625a      	str	r2, [r3, #36]	; 0x24
    pListener->cookie = cookie;
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	6a3a      	ldr	r2, [r7, #32]
 800505e:	629a      	str	r2, [r3, #40]	; 0x28

    // re-evaluate channel callbacks
    updateCallbacks(pShtp);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	0018      	movs	r0, r3
 8005064:	f7ff ff24 	bl	8004eb0 <updateCallbacks>

    return SH2_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	0018      	movs	r0, r3
 800506c:	46bd      	mov	sp, r7
 800506e:	b006      	add	sp, #24
 8005070:	bd80      	pop	{r7, pc}
 8005072:	46c0      	nop			; (mov r8, r8)
 8005074:	0000081c 	.word	0x0000081c

08005078 <min_u16>:

static inline uint16_t min_u16(uint16_t a, uint16_t b)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	0002      	movs	r2, r0
 8005080:	1dbb      	adds	r3, r7, #6
 8005082:	801a      	strh	r2, [r3, #0]
 8005084:	1d3b      	adds	r3, r7, #4
 8005086:	1c0a      	adds	r2, r1, #0
 8005088:	801a      	strh	r2, [r3, #0]
    if (a < b) {
 800508a:	1dba      	adds	r2, r7, #6
 800508c:	1d3b      	adds	r3, r7, #4
 800508e:	8812      	ldrh	r2, [r2, #0]
 8005090:	881b      	ldrh	r3, [r3, #0]
 8005092:	429a      	cmp	r2, r3
 8005094:	d202      	bcs.n	800509c <min_u16+0x24>
        return a;
 8005096:	1dbb      	adds	r3, r7, #6
 8005098:	881b      	ldrh	r3, [r3, #0]
 800509a:	e001      	b.n	80050a0 <min_u16+0x28>
    }
    else {
        return b;
 800509c:	1d3b      	adds	r3, r7, #4
 800509e:	881b      	ldrh	r3, [r3, #0]
    }
}
 80050a0:	0018      	movs	r0, r3
 80050a2:	46bd      	mov	sp, r7
 80050a4:	b002      	add	sp, #8
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <txProcess>:

// Send a cargo as a sequence of transports
static int txProcess(shtp_t *pShtp, uint8_t chan, const uint8_t* pData, uint32_t len)
{
 80050a8:	b5b0      	push	{r4, r5, r7, lr}
 80050aa:	b088      	sub	sp, #32
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	607a      	str	r2, [r7, #4]
 80050b2:	603b      	str	r3, [r7, #0]
 80050b4:	230b      	movs	r3, #11
 80050b6:	18fb      	adds	r3, r7, r3
 80050b8:	1c0a      	adds	r2, r1, #0
 80050ba:	701a      	strb	r2, [r3, #0]
    int status = SH2_OK;
 80050bc:	2300      	movs	r3, #0
 80050be:	61fb      	str	r3, [r7, #28]
    
    bool continuation = false;
 80050c0:	231b      	movs	r3, #27
 80050c2:	18fb      	adds	r3, r7, r3
 80050c4:	2200      	movs	r2, #0
 80050c6:	701a      	strb	r2, [r3, #0]
    uint16_t cursor = 0;
 80050c8:	2118      	movs	r1, #24
 80050ca:	187b      	adds	r3, r7, r1
 80050cc:	2200      	movs	r2, #0
 80050ce:	801a      	strh	r2, [r3, #0]
    uint16_t remaining;
    uint16_t transferLen;  // length of transfer, minus the header
    uint16_t lenField;

    cursor = 0;
 80050d0:	187b      	adds	r3, r7, r1
 80050d2:	2200      	movs	r2, #0
 80050d4:	801a      	strh	r2, [r3, #0]
    remaining = len;
 80050d6:	2316      	movs	r3, #22
 80050d8:	18fb      	adds	r3, r7, r3
 80050da:	683a      	ldr	r2, [r7, #0]
 80050dc:	801a      	strh	r2, [r3, #0]
    while (remaining > 0) {
 80050de:	e09d      	b.n	800521c <txProcess+0x174>
        // How much data (not header) can we send in next transfer
        transferLen = min_u16(remaining, pShtp->outMaxTransfer-SHTP_HDR_LEN);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	8adb      	ldrh	r3, [r3, #22]
 80050e4:	3b04      	subs	r3, #4
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	2514      	movs	r5, #20
 80050ea:	197c      	adds	r4, r7, r5
 80050ec:	2316      	movs	r3, #22
 80050ee:	18fb      	adds	r3, r7, r3
 80050f0:	881b      	ldrh	r3, [r3, #0]
 80050f2:	0011      	movs	r1, r2
 80050f4:	0018      	movs	r0, r3
 80050f6:	f7ff ffbf 	bl	8005078 <min_u16>
 80050fa:	0003      	movs	r3, r0
 80050fc:	8023      	strh	r3, [r4, #0]
        
        // Length field will be transferLen + SHTP_HDR_LEN
        lenField = transferLen + SHTP_HDR_LEN;
 80050fe:	2112      	movs	r1, #18
 8005100:	187b      	adds	r3, r7, r1
 8005102:	197a      	adds	r2, r7, r5
 8005104:	8812      	ldrh	r2, [r2, #0]
 8005106:	3204      	adds	r2, #4
 8005108:	801a      	strh	r2, [r3, #0]

        // Put the header in the out buffer
        pShtp->outTransfer[0] = lenField & 0xFF;
 800510a:	187b      	adds	r3, r7, r1
 800510c:	881b      	ldrh	r3, [r3, #0]
 800510e:	b2da      	uxtb	r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	761a      	strb	r2, [r3, #24]
        pShtp->outTransfer[1] = (lenField >> 8) & 0xFF;
 8005114:	187b      	adds	r3, r7, r1
 8005116:	881b      	ldrh	r3, [r3, #0]
 8005118:	0a1b      	lsrs	r3, r3, #8
 800511a:	b29b      	uxth	r3, r3
 800511c:	b2da      	uxtb	r2, r3
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	765a      	strb	r2, [r3, #25]
        if (continuation) {
 8005122:	231b      	movs	r3, #27
 8005124:	18fb      	adds	r3, r7, r3
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d007      	beq.n	800513c <txProcess+0x94>
            pShtp->outTransfer[1] |= 0x80;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	7e5b      	ldrb	r3, [r3, #25]
 8005130:	2280      	movs	r2, #128	; 0x80
 8005132:	4252      	negs	r2, r2
 8005134:	4313      	orrs	r3, r2
 8005136:	b2da      	uxtb	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	765a      	strb	r2, [r3, #25]
        }
        pShtp->outTransfer[2] = chan;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	210b      	movs	r1, #11
 8005140:	187a      	adds	r2, r7, r1
 8005142:	7812      	ldrb	r2, [r2, #0]
 8005144:	769a      	strb	r2, [r3, #26]
        pShtp->outTransfer[3] = pShtp->chan[chan].nextOutSeq++;
 8005146:	187b      	adds	r3, r7, r1
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	68f9      	ldr	r1, [r7, #12]
 800514c:	4839      	ldr	r0, [pc, #228]	; (8005234 <txProcess+0x18c>)
 800514e:	2234      	movs	r2, #52	; 0x34
 8005150:	435a      	muls	r2, r3
 8005152:	188a      	adds	r2, r1, r2
 8005154:	1812      	adds	r2, r2, r0
 8005156:	7812      	ldrb	r2, [r2, #0]
 8005158:	1c51      	adds	r1, r2, #1
 800515a:	b2cd      	uxtb	r5, r1
 800515c:	68f9      	ldr	r1, [r7, #12]
 800515e:	4835      	ldr	r0, [pc, #212]	; (8005234 <txProcess+0x18c>)
 8005160:	2434      	movs	r4, #52	; 0x34
 8005162:	4363      	muls	r3, r4
 8005164:	18cb      	adds	r3, r1, r3
 8005166:	181b      	adds	r3, r3, r0
 8005168:	1c29      	adds	r1, r5, #0
 800516a:	7019      	strb	r1, [r3, #0]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	76da      	strb	r2, [r3, #27]

        // Stage one tranfer in the out buffer
        memcpy(pShtp->outTransfer+SHTP_HDR_LEN, pData+cursor, transferLen);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	3318      	adds	r3, #24
 8005174:	1d18      	adds	r0, r3, #4
 8005176:	2418      	movs	r4, #24
 8005178:	193b      	adds	r3, r7, r4
 800517a:	881b      	ldrh	r3, [r3, #0]
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	18d1      	adds	r1, r2, r3
 8005180:	2514      	movs	r5, #20
 8005182:	197b      	adds	r3, r7, r5
 8005184:	881b      	ldrh	r3, [r3, #0]
 8005186:	001a      	movs	r2, r3
 8005188:	f005 fcc0 	bl	800ab0c <memcpy>
        remaining -= transferLen;
 800518c:	2216      	movs	r2, #22
 800518e:	18bb      	adds	r3, r7, r2
 8005190:	18b9      	adds	r1, r7, r2
 8005192:	0028      	movs	r0, r5
 8005194:	183a      	adds	r2, r7, r0
 8005196:	8809      	ldrh	r1, [r1, #0]
 8005198:	8812      	ldrh	r2, [r2, #0]
 800519a:	1a8a      	subs	r2, r1, r2
 800519c:	801a      	strh	r2, [r3, #0]
        cursor += transferLen;
 800519e:	193b      	adds	r3, r7, r4
 80051a0:	1939      	adds	r1, r7, r4
 80051a2:	183a      	adds	r2, r7, r0
 80051a4:	8809      	ldrh	r1, [r1, #0]
 80051a6:	8812      	ldrh	r2, [r2, #0]
 80051a8:	188a      	adds	r2, r1, r2
 80051aa:	801a      	strh	r2, [r3, #0]

        // Transmit (try repeatedly while HAL write returns 0)
        status = pShtp->pHal->write(pShtp->pHal, pShtp->outTransfer, lenField);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68dc      	ldr	r4, [r3, #12]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6818      	ldr	r0, [r3, #0]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	3318      	adds	r3, #24
 80051ba:	0019      	movs	r1, r3
 80051bc:	2312      	movs	r3, #18
 80051be:	18fb      	adds	r3, r7, r3
 80051c0:	881b      	ldrh	r3, [r3, #0]
 80051c2:	001a      	movs	r2, r3
 80051c4:	47a0      	blx	r4
 80051c6:	0003      	movs	r3, r0
 80051c8:	61fb      	str	r3, [r7, #28]
        while (status == 0)
 80051ca:	e012      	b.n	80051f2 <txProcess+0x14a>
        {
            shtp_service(pShtp);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	0018      	movs	r0, r3
 80051d0:	f000 fdca 	bl	8005d68 <shtp_service>
            status = pShtp->pHal->write(pShtp->pHal, pShtp->outTransfer, lenField);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68dc      	ldr	r4, [r3, #12]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6818      	ldr	r0, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	3318      	adds	r3, #24
 80051e2:	0019      	movs	r1, r3
 80051e4:	2312      	movs	r3, #18
 80051e6:	18fb      	adds	r3, r7, r3
 80051e8:	881b      	ldrh	r3, [r3, #0]
 80051ea:	001a      	movs	r2, r3
 80051ec:	47a0      	blx	r4
 80051ee:	0003      	movs	r3, r0
 80051f0:	61fb      	str	r3, [r7, #28]
        while (status == 0)
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d0e9      	beq.n	80051cc <txProcess+0x124>
        }
        
        if (status < 0)
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	da0a      	bge.n	8005214 <txProcess+0x16c>
        {
            // Error, throw away this cargo
            pShtp->txDiscards++;
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	2382      	movs	r3, #130	; 0x82
 8005202:	011b      	lsls	r3, r3, #4
 8005204:	58d3      	ldr	r3, [r2, r3]
 8005206:	1c59      	adds	r1, r3, #1
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	2382      	movs	r3, #130	; 0x82
 800520c:	011b      	lsls	r3, r3, #4
 800520e:	50d1      	str	r1, [r2, r3]
            return status;
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	e00a      	b.n	800522a <txProcess+0x182>
        }

        // For the rest of this transmission, packets are continuations.
        continuation = true;
 8005214:	231b      	movs	r3, #27
 8005216:	18fb      	adds	r3, r7, r3
 8005218:	2201      	movs	r2, #1
 800521a:	701a      	strb	r2, [r3, #0]
    while (remaining > 0) {
 800521c:	2316      	movs	r3, #22
 800521e:	18fb      	adds	r3, r7, r3
 8005220:	881b      	ldrh	r3, [r3, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d000      	beq.n	8005228 <txProcess+0x180>
 8005226:	e75b      	b.n	80050e0 <txProcess+0x38>
    }

    return SH2_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	0018      	movs	r0, r3
 800522c:	46bd      	mov	sp, r7
 800522e:	b008      	add	sp, #32
 8005230:	bdb0      	pop	{r4, r5, r7, pc}
 8005232:	46c0      	nop			; (mov r8, r8)
 8005234:	0000051c 	.word	0x0000051c

08005238 <shtpAdvertHdlr>:

// Callback for SHTP app-specific advertisement tags
static void shtpAdvertHdlr(void *cookie, uint8_t tag, uint8_t len, uint8_t *val)
{
 8005238:	b590      	push	{r4, r7, lr}
 800523a:	b087      	sub	sp, #28
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	0008      	movs	r0, r1
 8005242:	0011      	movs	r1, r2
 8005244:	607b      	str	r3, [r7, #4]
 8005246:	240b      	movs	r4, #11
 8005248:	193b      	adds	r3, r7, r4
 800524a:	1c02      	adds	r2, r0, #0
 800524c:	701a      	strb	r2, [r3, #0]
 800524e:	230a      	movs	r3, #10
 8005250:	18fb      	adds	r3, r7, r3
 8005252:	1c0a      	adds	r2, r1, #0
 8005254:	701a      	strb	r2, [r3, #0]
    shtp_t *pShtp = (shtp_t *)cookie;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	617b      	str	r3, [r7, #20]

    switch (tag) {
 800525a:	193b      	adds	r3, r7, r4
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	2b80      	cmp	r3, #128	; 0x80
 8005260:	d10e      	bne.n	8005280 <shtpAdvertHdlr+0x48>
        case TAG_SHTP_VERSION:
            if (strlen((const char *)val) < sizeof(pShtp->shtpVersion)) {
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	0018      	movs	r0, r3
 8005266:	f7fa ff59 	bl	800011c <strlen>
 800526a:	0003      	movs	r3, r0
 800526c:	2b07      	cmp	r3, #7
 800526e:	d809      	bhi.n	8005284 <shtpAdvertHdlr+0x4c>
                strcpy(pShtp->shtpVersion, (const char *)val);
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	330c      	adds	r3, #12
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	0011      	movs	r1, r2
 8005278:	0018      	movs	r0, r3
 800527a:	f005 fc3f 	bl	800aafc <strcpy>
            }
            break;
 800527e:	e001      	b.n	8005284 <shtpAdvertHdlr+0x4c>
        default:
            break;
 8005280:	46c0      	nop			; (mov r8, r8)
 8005282:	e000      	b.n	8005286 <shtpAdvertHdlr+0x4e>
            break;
 8005284:	46c0      	nop			; (mov r8, r8)
    }
}
 8005286:	46c0      	nop			; (mov r8, r8)
 8005288:	46bd      	mov	sp, r7
 800528a:	b007      	add	sp, #28
 800528c:	bd90      	pop	{r4, r7, pc}
	...

08005290 <addApp>:

// Add one to the set of known Apps
static void addApp(shtp_t *pShtp, uint32_t guid)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
    shtp_App_t *pApp = 0;
 800529a:	2300      	movs	r3, #0
 800529c:	60bb      	str	r3, [r7, #8]

    // Bail out if this GUID is already registered
    for (int n = 0; n < pShtp->nextApp; n++) {
 800529e:	2300      	movs	r3, #0
 80052a0:	60fb      	str	r3, [r7, #12]
 80052a2:	e010      	b.n	80052c6 <addApp+0x36>
        if (pShtp->app[n].guid == guid) return;
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	2385      	movs	r3, #133	; 0x85
 80052aa:	00d9      	lsls	r1, r3, #3
 80052ac:	0013      	movs	r3, r2
 80052ae:	00db      	lsls	r3, r3, #3
 80052b0:	189b      	adds	r3, r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	18c3      	adds	r3, r0, r3
 80052b6:	185b      	adds	r3, r3, r1
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d031      	beq.n	8005324 <addApp+0x94>
    for (int n = 0; n < pShtp->nextApp; n++) {
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	3301      	adds	r3, #1
 80052c4:	60fb      	str	r3, [r7, #12]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a19      	ldr	r2, [pc, #100]	; (8005330 <addApp+0xa0>)
 80052ca:	5c9b      	ldrb	r3, [r3, r2]
 80052cc:	001a      	movs	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	4293      	cmp	r3, r2
 80052d2:	dbe7      	blt.n	80052a4 <addApp+0x14>
    }

    // Bail out if no space for more apps
    if (pShtp->nextApp >= SH2_MAX_APPS) return;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a16      	ldr	r2, [pc, #88]	; (8005330 <addApp+0xa0>)
 80052d8:	5c9b      	ldrb	r3, [r3, r2]
 80052da:	2b04      	cmp	r3, #4
 80052dc:	d824      	bhi.n	8005328 <addApp+0x98>

    // Register this app
    pApp = &pShtp->app[pShtp->nextApp];
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a13      	ldr	r2, [pc, #76]	; (8005330 <addApp+0xa0>)
 80052e2:	5c9b      	ldrb	r3, [r3, r2]
 80052e4:	001a      	movs	r2, r3
 80052e6:	0013      	movs	r3, r2
 80052e8:	00db      	lsls	r3, r3, #3
 80052ea:	189b      	adds	r3, r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	2285      	movs	r2, #133	; 0x85
 80052f0:	00d2      	lsls	r2, r2, #3
 80052f2:	4694      	mov	ip, r2
 80052f4:	4463      	add	r3, ip
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	18d3      	adds	r3, r2, r3
 80052fa:	60bb      	str	r3, [r7, #8]
    pShtp->nextApp++;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a0c      	ldr	r2, [pc, #48]	; (8005330 <addApp+0xa0>)
 8005300:	5c9b      	ldrb	r3, [r3, r2]
 8005302:	3301      	adds	r3, #1
 8005304:	b2d9      	uxtb	r1, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a09      	ldr	r2, [pc, #36]	; (8005330 <addApp+0xa0>)
 800530a:	5499      	strb	r1, [r3, r2]
    pApp->guid = guid;
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	601a      	str	r2, [r3, #0]
    strcpy(pApp->appName, "");
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	3304      	adds	r3, #4
 8005316:	2200      	movs	r2, #0
 8005318:	701a      	strb	r2, [r3, #0]

    // Re-evaluate channel callbacks
    updateCallbacks(pShtp);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	0018      	movs	r0, r3
 800531e:	f7ff fdc7 	bl	8004eb0 <updateCallbacks>
 8005322:	e002      	b.n	800532a <addApp+0x9a>
        if (pShtp->app[n].guid == guid) return;
 8005324:	46c0      	nop			; (mov r8, r8)
 8005326:	e000      	b.n	800532a <addApp+0x9a>
    if (pShtp->nextApp >= SH2_MAX_APPS) return;
 8005328:	46c0      	nop			; (mov r8, r8)
}
 800532a:	46bd      	mov	sp, r7
 800532c:	b004      	add	sp, #16
 800532e:	bd80      	pop	{r7, pc}
 8005330:	000004dc 	.word	0x000004dc

08005334 <setAppName>:

static void setAppName(shtp_t *pShtp, uint32_t guid, const char * appName)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
    shtp_App_t *pApp = 0;
 8005340:	2300      	movs	r3, #0
 8005342:	613b      	str	r3, [r7, #16]
    
    // Find the app entry with this GUID
    for (unsigned n = 0; n < pShtp->nextApp; n++) {
 8005344:	2300      	movs	r3, #0
 8005346:	617b      	str	r3, [r7, #20]
 8005348:	e024      	b.n	8005394 <setAppName+0x60>
        if (pShtp->app[n].guid == guid) {
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	2385      	movs	r3, #133	; 0x85
 8005350:	00d9      	lsls	r1, r3, #3
 8005352:	0013      	movs	r3, r2
 8005354:	00db      	lsls	r3, r3, #3
 8005356:	189b      	adds	r3, r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	18c3      	adds	r3, r0, r3
 800535c:	185b      	adds	r3, r3, r1
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	429a      	cmp	r2, r3
 8005364:	d113      	bne.n	800538e <setAppName+0x5a>
            pApp = &pShtp->app[n];
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	0013      	movs	r3, r2
 800536a:	00db      	lsls	r3, r3, #3
 800536c:	189b      	adds	r3, r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	2285      	movs	r2, #133	; 0x85
 8005372:	00d2      	lsls	r2, r2, #3
 8005374:	4694      	mov	ip, r2
 8005376:	4463      	add	r3, ip
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	18d3      	adds	r3, r2, r3
 800537c:	613b      	str	r3, [r7, #16]
            strcpy(pApp->appName, appName);
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	3304      	adds	r3, #4
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	0011      	movs	r1, r2
 8005386:	0018      	movs	r0, r3
 8005388:	f005 fbb8 	bl	800aafc <strcpy>
            return;
 800538c:	e009      	b.n	80053a2 <setAppName+0x6e>
    for (unsigned n = 0; n < pShtp->nextApp; n++) {
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	3301      	adds	r3, #1
 8005392:	617b      	str	r3, [r7, #20]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	4a04      	ldr	r2, [pc, #16]	; (80053a8 <setAppName+0x74>)
 8005398:	5c9b      	ldrb	r3, [r3, r2]
 800539a:	001a      	movs	r2, r3
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	4293      	cmp	r3, r2
 80053a0:	d3d3      	bcc.n	800534a <setAppName+0x16>
        }
    }
}
 80053a2:	46bd      	mov	sp, r7
 80053a4:	b006      	add	sp, #24
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	000004dc 	.word	0x000004dc

080053ac <addChannel>:

// Add one to the set of known channels
static void addChannel(shtp_t *pShtp, uint8_t chanNo, uint32_t guid, const char * chanName, bool wake)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b086      	sub	sp, #24
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	607a      	str	r2, [r7, #4]
 80053b6:	603b      	str	r3, [r7, #0]
 80053b8:	200b      	movs	r0, #11
 80053ba:	183b      	adds	r3, r7, r0
 80053bc:	1c0a      	adds	r2, r1, #0
 80053be:	701a      	strb	r2, [r3, #0]
    if (chanNo >= SH2_MAX_CHANS) return;
 80053c0:	0002      	movs	r2, r0
 80053c2:	18bb      	adds	r3, r7, r2
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	2b07      	cmp	r3, #7
 80053c8:	d82c      	bhi.n	8005424 <addChannel+0x78>

    shtp_Channel_t * pChan = &pShtp->chan[chanNo];
 80053ca:	18bb      	adds	r3, r7, r2
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	2234      	movs	r2, #52	; 0x34
 80053d0:	4353      	muls	r3, r2
 80053d2:	22a3      	movs	r2, #163	; 0xa3
 80053d4:	00d2      	lsls	r2, r2, #3
 80053d6:	4694      	mov	ip, r2
 80053d8:	4463      	add	r3, ip
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	18d3      	adds	r3, r2, r3
 80053de:	3304      	adds	r3, #4
 80053e0:	617b      	str	r3, [r7, #20]

    // Store channel definition
    pChan->guid = guid;
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	605a      	str	r2, [r3, #4]
    strcpy(pChan->chanName, chanName);
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	3308      	adds	r3, #8
 80053ec:	683a      	ldr	r2, [r7, #0]
 80053ee:	0011      	movs	r1, r2
 80053f0:	0018      	movs	r0, r3
 80053f2:	f005 fb83 	bl	800aafc <strcpy>
    pChan->wake = wake;
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	2320      	movs	r3, #32
 80053fa:	18fb      	adds	r3, r7, r3
 80053fc:	2128      	movs	r1, #40	; 0x28
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	5453      	strb	r3, [r2, r1]

    // Init channel-associated data
    pChan->nextOutSeq = 0;
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	2200      	movs	r2, #0
 8005406:	701a      	strb	r2, [r3, #0]
    pChan->nextInSeq = 0;
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	2200      	movs	r2, #0
 800540c:	705a      	strb	r2, [r3, #1]
    pChan->callback = 0;
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	2200      	movs	r2, #0
 8005412:	62da      	str	r2, [r3, #44]	; 0x2c
    pChan->cookie = 0;
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	2200      	movs	r2, #0
 8005418:	631a      	str	r2, [r3, #48]	; 0x30

    // Re-evaluate channel callbacks
    updateCallbacks(pShtp);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	0018      	movs	r0, r3
 800541e:	f7ff fd47 	bl	8004eb0 <updateCallbacks>
 8005422:	e000      	b.n	8005426 <addChannel+0x7a>
    if (chanNo >= SH2_MAX_CHANS) return;
 8005424:	46c0      	nop			; (mov r8, r8)
}
 8005426:	46bd      	mov	sp, r7
 8005428:	b006      	add	sp, #24
 800542a:	bd80      	pop	{r7, pc}

0800542c <callAdvertHandler>:

static void callAdvertHandler(shtp_t *pShtp, uint32_t guid,
                              uint8_t tag, uint8_t len, uint8_t *val)
{
 800542c:	b5b0      	push	{r4, r5, r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	0019      	movs	r1, r3
 8005438:	1dfb      	adds	r3, r7, #7
 800543a:	701a      	strb	r2, [r3, #0]
 800543c:	1dbb      	adds	r3, r7, #6
 800543e:	1c0a      	adds	r2, r1, #0
 8005440:	701a      	strb	r2, [r3, #0]
    // Find listener for this app
    for (int n = 0; n < SH2_MAX_APPS; n++)
 8005442:	2300      	movs	r3, #0
 8005444:	617b      	str	r3, [r7, #20]
 8005446:	e03a      	b.n	80054be <callAdvertHandler+0x92>
    {
        if (pShtp->appListener[n].guid == guid) {
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	239c      	movs	r3, #156	; 0x9c
 800544e:	00d9      	lsls	r1, r3, #3
 8005450:	0013      	movs	r3, r2
 8005452:	005b      	lsls	r3, r3, #1
 8005454:	189b      	adds	r3, r3, r2
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	18c3      	adds	r3, r0, r3
 800545a:	185b      	adds	r3, r3, r1
 800545c:	881b      	ldrh	r3, [r3, #0]
 800545e:	001a      	movs	r2, r3
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	4293      	cmp	r3, r2
 8005464:	d128      	bne.n	80054b8 <callAdvertHandler+0x8c>
            // Found matching App entry
            if (pShtp->appListener[n].callback != 0) {
 8005466:	68f9      	ldr	r1, [r7, #12]
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	4818      	ldr	r0, [pc, #96]	; (80054cc <callAdvertHandler+0xa0>)
 800546c:	0013      	movs	r3, r2
 800546e:	005b      	lsls	r3, r3, #1
 8005470:	189b      	adds	r3, r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	18cb      	adds	r3, r1, r3
 8005476:	181b      	adds	r3, r3, r0
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d01c      	beq.n	80054b8 <callAdvertHandler+0x8c>
                pShtp->appListener[n].callback(pShtp->appListener[n].cookie, tag, len, val);
 800547e:	68f9      	ldr	r1, [r7, #12]
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	4812      	ldr	r0, [pc, #72]	; (80054cc <callAdvertHandler+0xa0>)
 8005484:	0013      	movs	r3, r2
 8005486:	005b      	lsls	r3, r3, #1
 8005488:	189b      	adds	r3, r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	18cb      	adds	r3, r1, r3
 800548e:	181b      	adds	r3, r3, r0
 8005490:	681c      	ldr	r4, [r3, #0]
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	697a      	ldr	r2, [r7, #20]
 8005496:	239d      	movs	r3, #157	; 0x9d
 8005498:	00d9      	lsls	r1, r3, #3
 800549a:	0013      	movs	r3, r2
 800549c:	005b      	lsls	r3, r3, #1
 800549e:	189b      	adds	r3, r3, r2
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	18c3      	adds	r3, r0, r3
 80054a4:	185b      	adds	r3, r3, r1
 80054a6:	6818      	ldr	r0, [r3, #0]
 80054a8:	6abd      	ldr	r5, [r7, #40]	; 0x28
 80054aa:	1dbb      	adds	r3, r7, #6
 80054ac:	781a      	ldrb	r2, [r3, #0]
 80054ae:	1dfb      	adds	r3, r7, #7
 80054b0:	7819      	ldrb	r1, [r3, #0]
 80054b2:	002b      	movs	r3, r5
 80054b4:	47a0      	blx	r4
                return;
 80054b6:	e005      	b.n	80054c4 <callAdvertHandler+0x98>
    for (int n = 0; n < SH2_MAX_APPS; n++)
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	3301      	adds	r3, #1
 80054bc:	617b      	str	r3, [r7, #20]
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	2b04      	cmp	r3, #4
 80054c2:	ddc1      	ble.n	8005448 <callAdvertHandler+0x1c>
            }
        }
    }
}
 80054c4:	46bd      	mov	sp, r7
 80054c6:	b006      	add	sp, #24
 80054c8:	bdb0      	pop	{r4, r5, r7, pc}
 80054ca:	46c0      	nop			; (mov r8, r8)
 80054cc:	000004e4 	.word	0x000004e4

080054d0 <processAdvertisement>:

static void processAdvertisement(shtp_t *pShtp, uint8_t *payload, uint16_t payloadLen)
{
 80054d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054d2:	b09d      	sub	sp, #116	; 0x74
 80054d4:	af02      	add	r7, sp, #8
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	1dbb      	adds	r3, r7, #6
 80054dc:	801a      	strh	r2, [r3, #0]
    uint16_t x;
    uint8_t tag;
    uint8_t len;
    uint8_t *val;
    uint16_t cursor = 1;
 80054de:	2366      	movs	r3, #102	; 0x66
 80054e0:	18fb      	adds	r3, r7, r3
 80054e2:	2201      	movs	r2, #1
 80054e4:	801a      	strh	r2, [r3, #0]
    uint32_t guid = 0;
 80054e6:	2300      	movs	r3, #0
 80054e8:	663b      	str	r3, [r7, #96]	; 0x60
    char appName[SHTP_APP_NAME_LEN];
    char chanName[SHTP_CHAN_NAME_LEN];
    uint8_t chanNo = 0;
 80054ea:	235f      	movs	r3, #95	; 0x5f
 80054ec:	18fb      	adds	r3, r7, r3
 80054ee:	2200      	movs	r2, #0
 80054f0:	701a      	strb	r2, [r3, #0]
    bool wake = false;
 80054f2:	235e      	movs	r3, #94	; 0x5e
 80054f4:	18fb      	adds	r3, r7, r3
 80054f6:	2200      	movs	r2, #0
 80054f8:	701a      	strb	r2, [r3, #0]

    strcpy(appName, "");
 80054fa:	2334      	movs	r3, #52	; 0x34
 80054fc:	18fb      	adds	r3, r7, r3
 80054fe:	2200      	movs	r2, #0
 8005500:	701a      	strb	r2, [r3, #0]
    strcpy(chanName, "");
 8005502:	2314      	movs	r3, #20
 8005504:	18fb      	adds	r3, r7, r3
 8005506:	2200      	movs	r2, #0
 8005508:	701a      	strb	r2, [r3, #0]

    pShtp->advertPhase = ADVERT_IDLE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	4a9a      	ldr	r2, [pc, #616]	; (8005778 <processAdvertisement+0x2a8>)
 800550e:	2102      	movs	r1, #2
 8005510:	5499      	strb	r1, [r3, r2]
        
    while (cursor < payloadLen) {
 8005512:	e11c      	b.n	800574e <processAdvertisement+0x27e>
        tag = payload[cursor++];
 8005514:	2066      	movs	r0, #102	; 0x66
 8005516:	183b      	adds	r3, r7, r0
 8005518:	881b      	ldrh	r3, [r3, #0]
 800551a:	183a      	adds	r2, r7, r0
 800551c:	1c59      	adds	r1, r3, #1
 800551e:	8011      	strh	r1, [r2, #0]
 8005520:	001a      	movs	r2, r3
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	189a      	adds	r2, r3, r2
 8005526:	245d      	movs	r4, #93	; 0x5d
 8005528:	193b      	adds	r3, r7, r4
 800552a:	7812      	ldrb	r2, [r2, #0]
 800552c:	701a      	strb	r2, [r3, #0]
        len = payload[cursor++];
 800552e:	183b      	adds	r3, r7, r0
 8005530:	881b      	ldrh	r3, [r3, #0]
 8005532:	183a      	adds	r2, r7, r0
 8005534:	1c59      	adds	r1, r3, #1
 8005536:	8011      	strh	r1, [r2, #0]
 8005538:	001a      	movs	r2, r3
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	189a      	adds	r2, r3, r2
 800553e:	215c      	movs	r1, #92	; 0x5c
 8005540:	187b      	adds	r3, r7, r1
 8005542:	7812      	ldrb	r2, [r2, #0]
 8005544:	701a      	strb	r2, [r3, #0]
        val = payload+cursor;
 8005546:	183b      	adds	r3, r7, r0
 8005548:	881b      	ldrh	r3, [r3, #0]
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	18d3      	adds	r3, r2, r3
 800554e:	65bb      	str	r3, [r7, #88]	; 0x58
        cursor += len;
 8005550:	187b      	adds	r3, r7, r1
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	b299      	uxth	r1, r3
 8005556:	183b      	adds	r3, r7, r0
 8005558:	183a      	adds	r2, r7, r0
 800555a:	8812      	ldrh	r2, [r2, #0]
 800555c:	188a      	adds	r2, r1, r2
 800555e:	801a      	strh	r2, [r3, #0]

        // Process tag
        switch (tag) {
 8005560:	193b      	adds	r3, r7, r4
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	2b0a      	cmp	r3, #10
 8005566:	d900      	bls.n	800556a <processAdvertisement+0x9a>
 8005568:	e0db      	b.n	8005722 <processAdvertisement+0x252>
 800556a:	009a      	lsls	r2, r3, #2
 800556c:	4b83      	ldr	r3, [pc, #524]	; (800577c <processAdvertisement+0x2ac>)
 800556e:	18d3      	adds	r3, r2, r3
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	469f      	mov	pc, r3
            case TAG_NULL:
                // Reserved value, not a valid tag.
                break;
            case TAG_GUID:
                // A new GUID is being established so terminate advertisement process with earlier app, if any.
                callAdvertHandler(pShtp, guid, TAG_NULL, 0, 0);
 8005574:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	2300      	movs	r3, #0
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	2300      	movs	r3, #0
 800557e:	2200      	movs	r2, #0
 8005580:	f7ff ff54 	bl	800542c <callAdvertHandler>
                
                guid = readu32(val);
 8005584:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005586:	0018      	movs	r0, r3
 8005588:	f7ff fbd3 	bl	8004d32 <readu32>
 800558c:	0003      	movs	r3, r0
 800558e:	663b      	str	r3, [r7, #96]	; 0x60
                addApp(pShtp, guid);
 8005590:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	0011      	movs	r1, r2
 8005596:	0018      	movs	r0, r3
 8005598:	f7ff fe7a 	bl	8005290 <addApp>
            
                strcpy(appName, "");
 800559c:	2334      	movs	r3, #52	; 0x34
 800559e:	18fb      	adds	r3, r7, r3
 80055a0:	2200      	movs	r2, #0
 80055a2:	701a      	strb	r2, [r3, #0]
                strcpy(chanName, "");
 80055a4:	2314      	movs	r3, #20
 80055a6:	18fb      	adds	r3, r7, r3
 80055a8:	2200      	movs	r2, #0
 80055aa:	701a      	strb	r2, [r3, #0]
                break;
 80055ac:	e0c2      	b.n	8005734 <processAdvertisement+0x264>
            case TAG_MAX_CARGO_PLUS_HEADER_WRITE:
                x = readu16(val) - SHTP_HDR_LEN;
 80055ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055b0:	0018      	movs	r0, r3
 80055b2:	f7ff fba7 	bl	8004d04 <readu16>
 80055b6:	0003      	movs	r3, r0
 80055b8:	001a      	movs	r2, r3
 80055ba:	2156      	movs	r1, #86	; 0x56
 80055bc:	187b      	adds	r3, r7, r1
 80055be:	3a04      	subs	r2, #4
 80055c0:	801a      	strh	r2, [r3, #0]
            
                if (x < SH2_HAL_MAX_PAYLOAD_OUT) {
 80055c2:	000a      	movs	r2, r1
 80055c4:	18bb      	adds	r3, r7, r2
 80055c6:	881b      	ldrh	r3, [r3, #0]
 80055c8:	2bff      	cmp	r3, #255	; 0xff
 80055ca:	d900      	bls.n	80055ce <processAdvertisement+0xfe>
 80055cc:	e0ad      	b.n	800572a <processAdvertisement+0x25a>
                    pShtp->outMaxPayload = x;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	18ba      	adds	r2, r7, r2
 80055d2:	8812      	ldrh	r2, [r2, #0]
 80055d4:	829a      	strh	r2, [r3, #20]
                }
                break;
 80055d6:	e0a8      	b.n	800572a <processAdvertisement+0x25a>
            case TAG_MAX_CARGO_PLUS_HEADER_READ:
                x = readu16(val) - SHTP_HDR_LEN;
 80055d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055da:	0018      	movs	r0, r3
 80055dc:	f7ff fb92 	bl	8004d04 <readu16>
 80055e0:	0003      	movs	r3, r0
 80055e2:	001a      	movs	r2, r3
 80055e4:	2356      	movs	r3, #86	; 0x56
 80055e6:	18fb      	adds	r3, r7, r3
 80055e8:	3a04      	subs	r2, #4
 80055ea:	801a      	strh	r2, [r3, #0]
                // No need to store this!
                break;
 80055ec:	e0a2      	b.n	8005734 <processAdvertisement+0x264>
            case TAG_MAX_TRANSFER_WRITE:
                x = readu16(val) - SHTP_HDR_LEN;
 80055ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055f0:	0018      	movs	r0, r3
 80055f2:	f7ff fb87 	bl	8004d04 <readu16>
 80055f6:	0003      	movs	r3, r0
 80055f8:	001a      	movs	r2, r3
 80055fa:	2156      	movs	r1, #86	; 0x56
 80055fc:	187b      	adds	r3, r7, r1
 80055fe:	3a04      	subs	r2, #4
 8005600:	801a      	strh	r2, [r3, #0]
                if (x < SH2_HAL_MAX_TRANSFER_OUT) {
 8005602:	000a      	movs	r2, r1
 8005604:	18bb      	adds	r3, r7, r2
 8005606:	881b      	ldrh	r3, [r3, #0]
 8005608:	2bff      	cmp	r3, #255	; 0xff
 800560a:	d804      	bhi.n	8005616 <processAdvertisement+0x146>
                    pShtp->outMaxTransfer = x;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	18ba      	adds	r2, r7, r2
 8005610:	8812      	ldrh	r2, [r2, #0]
 8005612:	82da      	strh	r2, [r3, #22]
                } else {
                    pShtp->outMaxTransfer = SH2_HAL_MAX_TRANSFER_OUT;
                }
                break;
 8005614:	e08e      	b.n	8005734 <processAdvertisement+0x264>
                    pShtp->outMaxTransfer = SH2_HAL_MAX_TRANSFER_OUT;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2280      	movs	r2, #128	; 0x80
 800561a:	0052      	lsls	r2, r2, #1
 800561c:	82da      	strh	r2, [r3, #22]
                break;
 800561e:	e089      	b.n	8005734 <processAdvertisement+0x264>
            case TAG_MAX_TRANSFER_READ:
                x = readu16(val) - SHTP_HDR_LEN;
 8005620:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005622:	0018      	movs	r0, r3
 8005624:	f7ff fb6e 	bl	8004d04 <readu16>
 8005628:	0003      	movs	r3, r0
 800562a:	001a      	movs	r2, r3
 800562c:	2156      	movs	r1, #86	; 0x56
 800562e:	187b      	adds	r3, r7, r1
 8005630:	3a04      	subs	r2, #4
 8005632:	801a      	strh	r2, [r3, #0]
                if (x < SH2_HAL_MAX_TRANSFER_IN) {
 8005634:	187b      	adds	r3, r7, r1
 8005636:	881a      	ldrh	r2, [r3, #0]
 8005638:	23c0      	movs	r3, #192	; 0xc0
 800563a:	005b      	lsls	r3, r3, #1
 800563c:	429a      	cmp	r2, r3
 800563e:	d300      	bcc.n	8005642 <processAdvertisement+0x172>
 8005640:	e075      	b.n	800572e <processAdvertisement+0x25e>
                    pShtp->inMaxTransfer = x;
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	1879      	adds	r1, r7, r1
 8005646:	238c      	movs	r3, #140	; 0x8c
 8005648:	005b      	lsls	r3, r3, #1
 800564a:	8809      	ldrh	r1, [r1, #0]
 800564c:	52d1      	strh	r1, [r2, r3]
                }
                break;
 800564e:	e06e      	b.n	800572e <processAdvertisement+0x25e>
            case TAG_NORMAL_CHANNEL:
                chanNo = readu8(val);
 8005650:	235f      	movs	r3, #95	; 0x5f
 8005652:	18fc      	adds	r4, r7, r3
 8005654:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005656:	0018      	movs	r0, r3
 8005658:	f7ff fb45 	bl	8004ce6 <readu8>
 800565c:	0003      	movs	r3, r0
 800565e:	7023      	strb	r3, [r4, #0]
                wake = false;
 8005660:	235e      	movs	r3, #94	; 0x5e
 8005662:	18fb      	adds	r3, r7, r3
 8005664:	2200      	movs	r2, #0
 8005666:	701a      	strb	r2, [r3, #0]
                break;
 8005668:	e064      	b.n	8005734 <processAdvertisement+0x264>
            case TAG_WAKE_CHANNEL:
                chanNo = readu8(val);
 800566a:	235f      	movs	r3, #95	; 0x5f
 800566c:	18fc      	adds	r4, r7, r3
 800566e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005670:	0018      	movs	r0, r3
 8005672:	f7ff fb38 	bl	8004ce6 <readu8>
 8005676:	0003      	movs	r3, r0
 8005678:	7023      	strb	r3, [r4, #0]
                wake = true;
 800567a:	235e      	movs	r3, #94	; 0x5e
 800567c:	18fb      	adds	r3, r7, r3
 800567e:	2201      	movs	r2, #1
 8005680:	701a      	strb	r2, [r3, #0]
                break;
 8005682:	e057      	b.n	8005734 <processAdvertisement+0x264>
            case TAG_APP_NAME:
                strcpy(appName, (const char *)val);
 8005684:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005686:	2434      	movs	r4, #52	; 0x34
 8005688:	193b      	adds	r3, r7, r4
 800568a:	0011      	movs	r1, r2
 800568c:	0018      	movs	r0, r3
 800568e:	f005 fa35 	bl	800aafc <strcpy>
                setAppName(pShtp, guid, appName);
 8005692:	193a      	adds	r2, r7, r4
 8005694:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	0018      	movs	r0, r3
 800569a:	f7ff fe4b 	bl	8005334 <setAppName>
            
                break;
 800569e:	e049      	b.n	8005734 <processAdvertisement+0x264>
            case TAG_CHANNEL_NAME:
                strcpy(chanName, (const char *)val);
 80056a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056a2:	2614      	movs	r6, #20
 80056a4:	19bb      	adds	r3, r7, r6
 80056a6:	0011      	movs	r1, r2
 80056a8:	0018      	movs	r0, r3
 80056aa:	f005 fa27 	bl	800aafc <strcpy>
                addChannel(pShtp, chanNo, guid, (const char *)val, wake);
 80056ae:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80056b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80056b2:	255f      	movs	r5, #95	; 0x5f
 80056b4:	197b      	adds	r3, r7, r5
 80056b6:	7819      	ldrb	r1, [r3, #0]
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	235e      	movs	r3, #94	; 0x5e
 80056bc:	18fb      	adds	r3, r7, r3
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	9300      	str	r3, [sp, #0]
 80056c2:	0023      	movs	r3, r4
 80056c4:	f7ff fe72 	bl	80053ac <addChannel>

                // Store channel metadata
                if (chanNo < SH2_MAX_CHANS) {
 80056c8:	002c      	movs	r4, r5
 80056ca:	193b      	adds	r3, r7, r4
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	2b07      	cmp	r3, #7
 80056d0:	d82f      	bhi.n	8005732 <processAdvertisement+0x262>
                    pShtp->chan[chanNo].guid = guid;
 80056d2:	193b      	adds	r3, r7, r4
 80056d4:	781a      	ldrb	r2, [r3, #0]
 80056d6:	68f9      	ldr	r1, [r7, #12]
 80056d8:	23a4      	movs	r3, #164	; 0xa4
 80056da:	00db      	lsls	r3, r3, #3
 80056dc:	2034      	movs	r0, #52	; 0x34
 80056de:	4342      	muls	r2, r0
 80056e0:	188a      	adds	r2, r1, r2
 80056e2:	18d3      	adds	r3, r2, r3
 80056e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80056e6:	601a      	str	r2, [r3, #0]
                    strcpy(pShtp->chan[chanNo].chanName, chanName);
 80056e8:	193b      	adds	r3, r7, r4
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	2234      	movs	r2, #52	; 0x34
 80056ee:	4353      	muls	r3, r2
 80056f0:	21a4      	movs	r1, #164	; 0xa4
 80056f2:	00c9      	lsls	r1, r1, #3
 80056f4:	468c      	mov	ip, r1
 80056f6:	4463      	add	r3, ip
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	18d3      	adds	r3, r2, r3
 80056fc:	3304      	adds	r3, #4
 80056fe:	19ba      	adds	r2, r7, r6
 8005700:	0011      	movs	r1, r2
 8005702:	0018      	movs	r0, r3
 8005704:	f005 f9fa 	bl	800aafc <strcpy>
                    pShtp->chan[chanNo].wake = wake;
 8005708:	193b      	adds	r3, r7, r4
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	491c      	ldr	r1, [pc, #112]	; (8005780 <processAdvertisement+0x2b0>)
 8005710:	2034      	movs	r0, #52	; 0x34
 8005712:	4343      	muls	r3, r0
 8005714:	18d3      	adds	r3, r2, r3
 8005716:	185b      	adds	r3, r3, r1
 8005718:	225e      	movs	r2, #94	; 0x5e
 800571a:	18ba      	adds	r2, r7, r2
 800571c:	7812      	ldrb	r2, [r2, #0]
 800571e:	701a      	strb	r2, [r3, #0]
                }
                break;
 8005720:	e007      	b.n	8005732 <processAdvertisement+0x262>
            case TAG_ADV_COUNT:
                // Not yet supported.
                break;
            default:
                // Nothing special needs to be done with this tag.
                break;
 8005722:	46c0      	nop			; (mov r8, r8)
 8005724:	e006      	b.n	8005734 <processAdvertisement+0x264>
                break;
 8005726:	46c0      	nop			; (mov r8, r8)
 8005728:	e004      	b.n	8005734 <processAdvertisement+0x264>
                break;
 800572a:	46c0      	nop			; (mov r8, r8)
 800572c:	e002      	b.n	8005734 <processAdvertisement+0x264>
                break;
 800572e:	46c0      	nop			; (mov r8, r8)
 8005730:	e000      	b.n	8005734 <processAdvertisement+0x264>
                break;
 8005732:	46c0      	nop			; (mov r8, r8)
        }
        
        // Deliver a TLV entry to the app's handler
        callAdvertHandler(pShtp, guid, tag, len, val);
 8005734:	235c      	movs	r3, #92	; 0x5c
 8005736:	18fb      	adds	r3, r7, r3
 8005738:	781c      	ldrb	r4, [r3, #0]
 800573a:	235d      	movs	r3, #93	; 0x5d
 800573c:	18fb      	adds	r3, r7, r3
 800573e:	781a      	ldrb	r2, [r3, #0]
 8005740:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005746:	9300      	str	r3, [sp, #0]
 8005748:	0023      	movs	r3, r4
 800574a:	f7ff fe6f 	bl	800542c <callAdvertHandler>
    while (cursor < payloadLen) {
 800574e:	2366      	movs	r3, #102	; 0x66
 8005750:	18fa      	adds	r2, r7, r3
 8005752:	1dbb      	adds	r3, r7, #6
 8005754:	8812      	ldrh	r2, [r2, #0]
 8005756:	881b      	ldrh	r3, [r3, #0]
 8005758:	429a      	cmp	r2, r3
 800575a:	d200      	bcs.n	800575e <processAdvertisement+0x28e>
 800575c:	e6da      	b.n	8005514 <processAdvertisement+0x44>
    }

    // terminate advertisement process with last app
    callAdvertHandler(pShtp, guid, TAG_NULL, 0, 0);
 800575e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	2300      	movs	r3, #0
 8005764:	9300      	str	r3, [sp, #0]
 8005766:	2300      	movs	r3, #0
 8005768:	2200      	movs	r2, #0
 800576a:	f7ff fe5f 	bl	800542c <callAdvertHandler>
}
 800576e:	46c0      	nop			; (mov r8, r8)
 8005770:	46bd      	mov	sp, r7
 8005772:	b01b      	add	sp, #108	; 0x6c
 8005774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005776:	46c0      	nop			; (mov r8, r8)
 8005778:	00000424 	.word	0x00000424
 800577c:	0800aca0 	.word	0x0800aca0
 8005780:	00000544 	.word	0x00000544

08005784 <shtpCmdListener>:

// Callback for SHTP command channel
static void shtpCmdListener(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b086      	sub	sp, #24
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	603b      	str	r3, [r7, #0]
 8005790:	1dbb      	adds	r3, r7, #6
 8005792:	801a      	strh	r2, [r3, #0]
    shtp_t *pShtp = (shtp_t *)cookie;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	617b      	str	r3, [r7, #20]
    
    if ((payload == 0) || (len == 0)) return;
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d014      	beq.n	80057c8 <shtpCmdListener+0x44>
 800579e:	1dbb      	adds	r3, r7, #6
 80057a0:	881b      	ldrh	r3, [r3, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d010      	beq.n	80057c8 <shtpCmdListener+0x44>
    
    uint8_t response = payload[0];
 80057a6:	2113      	movs	r1, #19
 80057a8:	187b      	adds	r3, r7, r1
 80057aa:	68ba      	ldr	r2, [r7, #8]
 80057ac:	7812      	ldrb	r2, [r2, #0]
 80057ae:	701a      	strb	r2, [r3, #0]

    switch (response) {
 80057b0:	187b      	adds	r3, r7, r1
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d109      	bne.n	80057cc <shtpCmdListener+0x48>
        case RESP_ADVERTISE:
            processAdvertisement(pShtp, payload, len);
 80057b8:	1dbb      	adds	r3, r7, #6
 80057ba:	881a      	ldrh	r2, [r3, #0]
 80057bc:	68b9      	ldr	r1, [r7, #8]
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	0018      	movs	r0, r3
 80057c2:	f7ff fe85 	bl	80054d0 <processAdvertisement>
            break;
 80057c6:	e002      	b.n	80057ce <shtpCmdListener+0x4a>
    if ((payload == 0) || (len == 0)) return;
 80057c8:	46c0      	nop			; (mov r8, r8)
 80057ca:	e000      	b.n	80057ce <shtpCmdListener+0x4a>
        default:
            // unknown response
            break;
 80057cc:	46c0      	nop			; (mov r8, r8)
    }
}
 80057ce:	46bd      	mov	sp, r7
 80057d0:	b006      	add	sp, #24
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <rxAssemble>:

static void rxAssemble(shtp_t *pShtp, uint8_t *in, uint16_t len, uint32_t t_us)
{
 80057d4:	b5b0      	push	{r4, r5, r7, lr}
 80057d6:	b086      	sub	sp, #24
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	603b      	str	r3, [r7, #0]
 80057e0:	1dbb      	adds	r3, r7, #6
 80057e2:	801a      	strh	r2, [r3, #0]
    uint16_t payloadLen;
    bool continuation;
    uint8_t chan = 0;
 80057e4:	2317      	movs	r3, #23
 80057e6:	18fb      	adds	r3, r7, r3
 80057e8:	2200      	movs	r2, #0
 80057ea:	701a      	strb	r2, [r3, #0]
    uint8_t seq = 0;
 80057ec:	2316      	movs	r3, #22
 80057ee:	18fb      	adds	r3, r7, r3
 80057f0:	2200      	movs	r2, #0
 80057f2:	701a      	strb	r2, [r3, #0]

    // discard invalid short fragments
    if (len < SHTP_HDR_LEN) {
 80057f4:	1dbb      	adds	r3, r7, #6
 80057f6:	881b      	ldrh	r3, [r3, #0]
 80057f8:	2b03      	cmp	r3, #3
 80057fa:	d807      	bhi.n	800580c <rxAssemble+0x38>
        pShtp->shortFragments++;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	4a9d      	ldr	r2, [pc, #628]	; (8005a74 <rxAssemble+0x2a0>)
 8005800:	589b      	ldr	r3, [r3, r2]
 8005802:	1c5a      	adds	r2, r3, #1
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	499b      	ldr	r1, [pc, #620]	; (8005a74 <rxAssemble+0x2a0>)
 8005808:	505a      	str	r2, [r3, r1]
        return;
 800580a:	e12f      	b.n	8005a6c <rxAssemble+0x298>
    }
    
    // Interpret header fields
    payloadLen = (in[0] + (in[1] << 8)) & (~0x8000);
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	b29a      	uxth	r2, r3
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	3301      	adds	r3, #1
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	b29b      	uxth	r3, r3
 800581a:	021b      	lsls	r3, r3, #8
 800581c:	b29b      	uxth	r3, r3
 800581e:	18d3      	adds	r3, r2, r3
 8005820:	b29a      	uxth	r2, r3
 8005822:	2114      	movs	r1, #20
 8005824:	187b      	adds	r3, r7, r1
 8005826:	0452      	lsls	r2, r2, #17
 8005828:	0c52      	lsrs	r2, r2, #17
 800582a:	801a      	strh	r2, [r3, #0]
    continuation = ((in[1] & 0x80) != 0);
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	3301      	adds	r3, #1
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	b25a      	sxtb	r2, r3
 8005834:	2313      	movs	r3, #19
 8005836:	18fb      	adds	r3, r7, r3
 8005838:	b2d2      	uxtb	r2, r2
 800583a:	09d2      	lsrs	r2, r2, #7
 800583c:	701a      	strb	r2, [r3, #0]
    chan = in[2];
 800583e:	2317      	movs	r3, #23
 8005840:	18fb      	adds	r3, r7, r3
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	7892      	ldrb	r2, [r2, #2]
 8005846:	701a      	strb	r2, [r3, #0]
    seq = in[3];
 8005848:	2316      	movs	r3, #22
 800584a:	18fb      	adds	r3, r7, r3
 800584c:	68ba      	ldr	r2, [r7, #8]
 800584e:	78d2      	ldrb	r2, [r2, #3]
 8005850:	701a      	strb	r2, [r3, #0]
    
    if (payloadLen < SHTP_HDR_LEN) {
 8005852:	187b      	adds	r3, r7, r1
 8005854:	881b      	ldrh	r3, [r3, #0]
 8005856:	2b03      	cmp	r3, #3
 8005858:	d813      	bhi.n	8005882 <rxAssemble+0xae>
      pShtp->shortFragments++;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	4a85      	ldr	r2, [pc, #532]	; (8005a74 <rxAssemble+0x2a0>)
 800585e:	589b      	ldr	r3, [r3, r2]
 8005860:	1c5a      	adds	r2, r3, #1
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	4983      	ldr	r1, [pc, #524]	; (8005a74 <rxAssemble+0x2a0>)
 8005866:	505a      	str	r2, [r3, r1]

      if (pShtp->eventCallback) {
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d100      	bne.n	8005872 <rxAssemble+0x9e>
 8005870:	e0f7      	b.n	8005a62 <rxAssemble+0x28e>
          pShtp->eventCallback(pShtp->eventCookie, SHTP_SHORT_FRAGMENT);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	2101      	movs	r1, #1
 800587c:	0018      	movs	r0, r3
 800587e:	4790      	blx	r2
      }
      return;
 8005880:	e0ef      	b.n	8005a62 <rxAssemble+0x28e>
    }
        
    if ((chan >= SH2_MAX_CHANS) ||
 8005882:	2117      	movs	r1, #23
 8005884:	187b      	adds	r3, r7, r1
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	2b07      	cmp	r3, #7
 800588a:	d806      	bhi.n	800589a <rxAssemble+0xc6>
        (chan >= pShtp->nextChanListener)) {
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	4a7a      	ldr	r2, [pc, #488]	; (8005a78 <rxAssemble+0x2a4>)
 8005890:	5c9b      	ldrb	r3, [r3, r2]
    if ((chan >= SH2_MAX_CHANS) ||
 8005892:	187a      	adds	r2, r7, r1
 8005894:	7812      	ldrb	r2, [r2, #0]
 8005896:	429a      	cmp	r2, r3
 8005898:	d313      	bcc.n	80058c2 <rxAssemble+0xee>
        // Invalid channel id.
        pShtp->badRxChan++;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	4a77      	ldr	r2, [pc, #476]	; (8005a7c <rxAssemble+0x2a8>)
 800589e:	589b      	ldr	r3, [r3, r2]
 80058a0:	1c5a      	adds	r2, r3, #1
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	4975      	ldr	r1, [pc, #468]	; (8005a7c <rxAssemble+0x2a8>)
 80058a6:	505a      	str	r2, [r3, r1]

        if (pShtp->eventCallback) {
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d100      	bne.n	80058b2 <rxAssemble+0xde>
 80058b0:	e0d9      	b.n	8005a66 <rxAssemble+0x292>
            pShtp->eventCallback(pShtp->eventCookie, SHTP_BAD_RX_CHAN);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	685a      	ldr	r2, [r3, #4]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	2103      	movs	r1, #3
 80058bc:	0018      	movs	r0, r3
 80058be:	4790      	blx	r2
        }
        return;
 80058c0:	e0d1      	b.n	8005a66 <rxAssemble+0x292>
    }

    // Discard earlier assembly in progress if the received data doesn't match it.
    if (pShtp->inRemaining) {
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	238d      	movs	r3, #141	; 0x8d
 80058c6:	005b      	lsls	r3, r3, #1
 80058c8:	5ad3      	ldrh	r3, [r2, r3]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d023      	beq.n	8005916 <rxAssemble+0x142>
        // Check this against previously received data.
        if (!continuation ||
 80058ce:	2313      	movs	r3, #19
 80058d0:	18fb      	adds	r3, r7, r3
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	2201      	movs	r2, #1
 80058d6:	4053      	eors	r3, r2
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d116      	bne.n	800590c <rxAssemble+0x138>
            (chan != pShtp->inChan) ||
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	238e      	movs	r3, #142	; 0x8e
 80058e2:	005b      	lsls	r3, r3, #1
 80058e4:	5cd3      	ldrb	r3, [r2, r3]
        if (!continuation ||
 80058e6:	2117      	movs	r1, #23
 80058e8:	187a      	adds	r2, r7, r1
 80058ea:	7812      	ldrb	r2, [r2, #0]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d10d      	bne.n	800590c <rxAssemble+0x138>
            (seq != pShtp->chan[chan].nextInSeq)) {
 80058f0:	187b      	adds	r3, r7, r1
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	4962      	ldr	r1, [pc, #392]	; (8005a80 <rxAssemble+0x2ac>)
 80058f8:	2034      	movs	r0, #52	; 0x34
 80058fa:	4343      	muls	r3, r0
 80058fc:	18d3      	adds	r3, r2, r3
 80058fe:	185b      	adds	r3, r3, r1
 8005900:	781b      	ldrb	r3, [r3, #0]
            (chan != pShtp->inChan) ||
 8005902:	2216      	movs	r2, #22
 8005904:	18ba      	adds	r2, r7, r2
 8005906:	7812      	ldrb	r2, [r2, #0]
 8005908:	429a      	cmp	r2, r3
 800590a:	d004      	beq.n	8005916 <rxAssemble+0x142>
            // This fragment doesn't fit with previous one, discard earlier data
            pShtp->inRemaining = 0;
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	238d      	movs	r3, #141	; 0x8d
 8005910:	005b      	lsls	r3, r3, #1
 8005912:	2100      	movs	r1, #0
 8005914:	52d1      	strh	r1, [r2, r3]
        }
    }

    if (pShtp->inRemaining == 0) {
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	238d      	movs	r3, #141	; 0x8d
 800591a:	005b      	lsls	r3, r3, #1
 800591c:	5ad3      	ldrh	r3, [r2, r3]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d12a      	bne.n	8005978 <rxAssemble+0x1a4>
        if (payloadLen > sizeof(pShtp->inPayload)) {
 8005922:	2314      	movs	r3, #20
 8005924:	18fb      	adds	r3, r7, r3
 8005926:	881a      	ldrh	r2, [r3, #0]
 8005928:	23c0      	movs	r3, #192	; 0xc0
 800592a:	005b      	lsls	r3, r3, #1
 800592c:	429a      	cmp	r2, r3
 800592e:	d913      	bls.n	8005958 <rxAssemble+0x184>
            // Error: This payload won't fit! Discard it.
            pShtp->tooLargePayloads++;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	4a54      	ldr	r2, [pc, #336]	; (8005a84 <rxAssemble+0x2b0>)
 8005934:	589b      	ldr	r3, [r3, r2]
 8005936:	1c5a      	adds	r2, r3, #1
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	4952      	ldr	r1, [pc, #328]	; (8005a84 <rxAssemble+0x2b0>)
 800593c:	505a      	str	r2, [r3, r1]
            
            if (pShtp->eventCallback) {
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d100      	bne.n	8005948 <rxAssemble+0x174>
 8005946:	e090      	b.n	8005a6a <rxAssemble+0x296>
                pShtp->eventCallback(pShtp->eventCookie, SHTP_TOO_LARGE_PAYLOADS);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	685a      	ldr	r2, [r3, #4]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	2102      	movs	r1, #2
 8005952:	0018      	movs	r0, r3
 8005954:	4790      	blx	r2
            }
            return;
 8005956:	e088      	b.n	8005a6a <rxAssemble+0x296>
        }

        // This represents a new payload

        // Store timestamp
        pShtp->inTimestamp = t_us;
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	23a8      	movs	r3, #168	; 0xa8
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	6839      	ldr	r1, [r7, #0]
 8005960:	50d1      	str	r1, [r2, r3]

        // Start a new assembly.
        pShtp->inCursor = 0;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	4a48      	ldr	r2, [pc, #288]	; (8005a88 <rxAssemble+0x2b4>)
 8005966:	2100      	movs	r1, #0
 8005968:	5299      	strh	r1, [r3, r2]
        pShtp->inChan = chan;
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	2317      	movs	r3, #23
 800596e:	18f9      	adds	r1, r7, r3
 8005970:	238e      	movs	r3, #142	; 0x8e
 8005972:	005b      	lsls	r3, r3, #1
 8005974:	7809      	ldrb	r1, [r1, #0]
 8005976:	54d1      	strb	r1, [r2, r3]
    }

    // Append the new fragment to the payload under construction.
    if (len > payloadLen) {
 8005978:	1dba      	adds	r2, r7, #6
 800597a:	2114      	movs	r1, #20
 800597c:	187b      	adds	r3, r7, r1
 800597e:	8812      	ldrh	r2, [r2, #0]
 8005980:	881b      	ldrh	r3, [r3, #0]
 8005982:	429a      	cmp	r2, r3
 8005984:	d903      	bls.n	800598e <rxAssemble+0x1ba>
        // Only use the valid portion of the transfer
        len = payloadLen;
 8005986:	1dbb      	adds	r3, r7, #6
 8005988:	187a      	adds	r2, r7, r1
 800598a:	8812      	ldrh	r2, [r2, #0]
 800598c:	801a      	strh	r2, [r3, #0]
    }
    memcpy(pShtp->inPayload + pShtp->inCursor, in+SHTP_HDR_LEN, len-SHTP_HDR_LEN);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	331e      	adds	r3, #30
 8005992:	33ff      	adds	r3, #255	; 0xff
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	493c      	ldr	r1, [pc, #240]	; (8005a88 <rxAssemble+0x2b4>)
 8005998:	5a52      	ldrh	r2, [r2, r1]
 800599a:	1898      	adds	r0, r3, r2
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	1d19      	adds	r1, r3, #4
 80059a0:	1dbb      	adds	r3, r7, #6
 80059a2:	881b      	ldrh	r3, [r3, #0]
 80059a4:	3b04      	subs	r3, #4
 80059a6:	001a      	movs	r2, r3
 80059a8:	f005 f8b0 	bl	800ab0c <memcpy>
    pShtp->inCursor += len-SHTP_HDR_LEN;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	4a36      	ldr	r2, [pc, #216]	; (8005a88 <rxAssemble+0x2b4>)
 80059b0:	5a9a      	ldrh	r2, [r3, r2]
 80059b2:	1dbb      	adds	r3, r7, #6
 80059b4:	881b      	ldrh	r3, [r3, #0]
 80059b6:	18d3      	adds	r3, r2, r3
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	3b04      	subs	r3, #4
 80059bc:	b299      	uxth	r1, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	4a31      	ldr	r2, [pc, #196]	; (8005a88 <rxAssemble+0x2b4>)
 80059c2:	5299      	strh	r1, [r3, r2]
    pShtp->inRemaining = payloadLen - len;
 80059c4:	2314      	movs	r3, #20
 80059c6:	18fa      	adds	r2, r7, r3
 80059c8:	1dbb      	adds	r3, r7, #6
 80059ca:	8812      	ldrh	r2, [r2, #0]
 80059cc:	881b      	ldrh	r3, [r3, #0]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	b299      	uxth	r1, r3
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	238d      	movs	r3, #141	; 0x8d
 80059d6:	005b      	lsls	r3, r3, #1
 80059d8:	52d1      	strh	r1, [r2, r3]

    // If whole payload received, deliver it to channel listener.
    if (pShtp->inRemaining == 0) {
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	238d      	movs	r3, #141	; 0x8d
 80059de:	005b      	lsls	r3, r3, #1
 80059e0:	5ad3      	ldrh	r3, [r2, r3]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d12c      	bne.n	8005a40 <rxAssemble+0x26c>

        // Call callback if there is one.
        if (pShtp->chan[chan].callback != 0) {
 80059e6:	2517      	movs	r5, #23
 80059e8:	197b      	adds	r3, r7, r5
 80059ea:	781a      	ldrb	r2, [r3, #0]
 80059ec:	68f9      	ldr	r1, [r7, #12]
 80059ee:	23a9      	movs	r3, #169	; 0xa9
 80059f0:	00db      	lsls	r3, r3, #3
 80059f2:	2034      	movs	r0, #52	; 0x34
 80059f4:	4342      	muls	r2, r0
 80059f6:	188a      	adds	r2, r1, r2
 80059f8:	18d3      	adds	r3, r2, r3
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d01f      	beq.n	8005a40 <rxAssemble+0x26c>
            pShtp->chan[chan].callback(pShtp->chan[chan].cookie,
 8005a00:	197b      	adds	r3, r7, r5
 8005a02:	781a      	ldrb	r2, [r3, #0]
 8005a04:	68f9      	ldr	r1, [r7, #12]
 8005a06:	23a9      	movs	r3, #169	; 0xa9
 8005a08:	00db      	lsls	r3, r3, #3
 8005a0a:	2034      	movs	r0, #52	; 0x34
 8005a0c:	4342      	muls	r2, r0
 8005a0e:	188a      	adds	r2, r1, r2
 8005a10:	18d3      	adds	r3, r2, r3
 8005a12:	681c      	ldr	r4, [r3, #0]
 8005a14:	197b      	adds	r3, r7, r5
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	491c      	ldr	r1, [pc, #112]	; (8005a8c <rxAssemble+0x2b8>)
 8005a1c:	2034      	movs	r0, #52	; 0x34
 8005a1e:	4343      	muls	r3, r0
 8005a20:	18d3      	adds	r3, r2, r3
 8005a22:	185b      	adds	r3, r3, r1
 8005a24:	6818      	ldr	r0, [r3, #0]
                                       pShtp->inPayload, pShtp->inCursor,
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	331e      	adds	r3, #30
 8005a2a:	33ff      	adds	r3, #255	; 0xff
 8005a2c:	0019      	movs	r1, r3
            pShtp->chan[chan].callback(pShtp->chan[chan].cookie,
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	4a15      	ldr	r2, [pc, #84]	; (8005a88 <rxAssemble+0x2b4>)
 8005a32:	5a9d      	ldrh	r5, [r3, r2]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	23a8      	movs	r3, #168	; 0xa8
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	58d3      	ldr	r3, [r2, r3]
 8005a3c:	002a      	movs	r2, r5
 8005a3e:	47a0      	blx	r4
                                       pShtp->inTimestamp);
        }
    }

    // Remember next sequence number we expect for this channel.
    pShtp->chan[chan].nextInSeq = seq + 1;
 8005a40:	2317      	movs	r3, #23
 8005a42:	18fb      	adds	r3, r7, r3
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	2216      	movs	r2, #22
 8005a48:	18ba      	adds	r2, r7, r2
 8005a4a:	7812      	ldrb	r2, [r2, #0]
 8005a4c:	3201      	adds	r2, #1
 8005a4e:	b2d4      	uxtb	r4, r2
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	490b      	ldr	r1, [pc, #44]	; (8005a80 <rxAssemble+0x2ac>)
 8005a54:	2034      	movs	r0, #52	; 0x34
 8005a56:	4343      	muls	r3, r0
 8005a58:	18d3      	adds	r3, r2, r3
 8005a5a:	185b      	adds	r3, r3, r1
 8005a5c:	1c22      	adds	r2, r4, #0
 8005a5e:	701a      	strb	r2, [r3, #0]
 8005a60:	e004      	b.n	8005a6c <rxAssemble+0x298>
      return;
 8005a62:	46c0      	nop			; (mov r8, r8)
 8005a64:	e002      	b.n	8005a6c <rxAssemble+0x298>
        return;
 8005a66:	46c0      	nop			; (mov r8, r8)
 8005a68:	e000      	b.n	8005a6c <rxAssemble+0x298>
            return;
 8005a6a:	46c0      	nop			; (mov r8, r8)
}
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	b006      	add	sp, #24
 8005a70:	bdb0      	pop	{r4, r5, r7, pc}
 8005a72:	46c0      	nop			; (mov r8, r8)
 8005a74:	00000824 	.word	0x00000824
 8005a78:	0000081c 	.word	0x0000081c
 8005a7c:	0000082c 	.word	0x0000082c
 8005a80:	0000051d 	.word	0x0000051d
 8005a84:	00000828 	.word	0x00000828
 8005a88:	0000029e 	.word	0x0000029e
 8005a8c:	0000054c 	.word	0x0000054c

08005a90 <shtp_open>:
// Public functions

// Takes HAL pointer, returns shtp ID for use in future calls.
// HAL will be opened by this call.
void *shtp_open(sh2_Hal_t *pHal)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af02      	add	r7, sp, #8
 8005a96:	6078      	str	r0, [r7, #4]
    if (!shtp_initialized) {
 8005a98:	4b2b      	ldr	r3, [pc, #172]	; (8005b48 <shtp_open+0xb8>)
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	4053      	eors	r3, r2
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d001      	beq.n	8005aaa <shtp_open+0x1a>
        // Perform one-time module initialization
        shtp_init();
 8005aa6:	f7ff f993 	bl	8004dd0 <shtp_init>
    }
    
    // Validate params
    if (pHal == 0) {
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d101      	bne.n	8005ab4 <shtp_open+0x24>
        // Error
        return 0;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	e045      	b.n	8005b40 <shtp_open+0xb0>
    }

    // Find an available instance for this open
    shtp_t *pShtp = getInstance();
 8005ab4:	f7ff f9a0 	bl	8004df8 <getInstance>
 8005ab8:	0003      	movs	r3, r0
 8005aba:	60fb      	str	r3, [r7, #12]
    if (pShtp == 0) {
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d101      	bne.n	8005ac6 <shtp_open+0x36>
        // No instances available, return error
        return 0;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	e03c      	b.n	8005b40 <shtp_open+0xb0>
    }

    // Clear the SHTP instance as a shortcut to initializing all fields
    memset(pShtp, 0, sizeof(shtp_t));
 8005ac6:	4a21      	ldr	r2, [pc, #132]	; (8005b4c <shtp_open+0xbc>)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2100      	movs	r1, #0
 8005acc:	0018      	movs	r0, r3
 8005ace:	f004 ffe9 	bl	800aaa4 <memset>
    
    // Store reference to the HAL
    pShtp->pHal = pHal;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	601a      	str	r2, [r3, #0]

    // Clear the asynchronous event callback point
    pShtp->eventCallback = 0;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	605a      	str	r2, [r3, #4]
    pShtp->eventCookie = 0;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	609a      	str	r2, [r3, #8]

    // Initialize state vars (be prepared for adverts)
    pShtp->outMaxPayload = SH2_HAL_MAX_PAYLOAD_OUT;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2280      	movs	r2, #128	; 0x80
 8005ae8:	0052      	lsls	r2, r2, #1
 8005aea:	829a      	strh	r2, [r3, #20]
    pShtp->outMaxTransfer = SH2_HAL_MAX_TRANSFER_OUT;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2280      	movs	r2, #128	; 0x80
 8005af0:	0052      	lsls	r2, r2, #1
 8005af2:	82da      	strh	r2, [r3, #22]

    // Establish SHTP App and command channel a priori
    addApp(pShtp, GUID_SHTP);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2100      	movs	r1, #0
 8005af8:	0018      	movs	r0, r3
 8005afa:	f7ff fbc9 	bl	8005290 <addApp>
    addChannel(pShtp, 0, GUID_SHTP, "command", false);
 8005afe:	4b14      	ldr	r3, [pc, #80]	; (8005b50 <shtp_open+0xc0>)
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	9200      	str	r2, [sp, #0]
 8005b06:	2200      	movs	r2, #0
 8005b08:	2100      	movs	r1, #0
 8005b0a:	f7ff fc4f 	bl	80053ac <addChannel>
    
    // Register SHTP advert listener and command channel listener
    shtp_listenAdvert(pShtp, GUID_SHTP, shtpAdvertHdlr, pShtp);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	4a10      	ldr	r2, [pc, #64]	; (8005b54 <shtp_open+0xc4>)
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	2100      	movs	r1, #0
 8005b16:	f000 f85b 	bl	8005bd0 <shtp_listenAdvert>
    shtp_listenChan(pShtp, GUID_SHTP, "command", shtpCmdListener, pShtp);
 8005b1a:	490f      	ldr	r1, [pc, #60]	; (8005b58 <shtp_open+0xc8>)
 8005b1c:	4a0c      	ldr	r2, [pc, #48]	; (8005b50 <shtp_open+0xc0>)
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	9300      	str	r3, [sp, #0]
 8005b24:	000b      	movs	r3, r1
 8005b26:	2100      	movs	r1, #0
 8005b28:	f000 f82c 	bl	8005b84 <shtp_listenChan>

    // When we open the HAL, it resets the device and adverts are sent automatically.
    // So we go to ADVERT_REQUESTED state.  They are on the way.
    pShtp->advertPhase = ADVERT_REQUESTED;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4a0b      	ldr	r2, [pc, #44]	; (8005b5c <shtp_open+0xcc>)
 8005b30:	2101      	movs	r1, #1
 8005b32:	5499      	strb	r1, [r3, r2]

    // Open HAL
    pHal->open(pHal);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	0010      	movs	r0, r2
 8005b3c:	4798      	blx	r3

    return pShtp;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
}
 8005b40:	0018      	movs	r0, r3
 8005b42:	46bd      	mov	sp, r7
 8005b44:	b004      	add	sp, #16
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	20000ff4 	.word	0x20000ff4
 8005b4c:	00000834 	.word	0x00000834
 8005b50:	0800ab84 	.word	0x0800ab84
 8005b54:	08005239 	.word	0x08005239
 8005b58:	08005785 	.word	0x08005785
 8005b5c:	00000424 	.word	0x00000424

08005b60 <shtp_setEventCallback>:
}

// Register the pointer of the callback function for reporting asynchronous events
void shtp_setEventCallback(void *pInstance, 
                           shtp_EventCallback_t * eventCallback, 
                           void *eventCookie) {
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	607a      	str	r2, [r7, #4]
    shtp_t *pShtp = (shtp_t *)pInstance;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	617b      	str	r3, [r7, #20]

    pShtp->eventCallback = eventCallback;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	605a      	str	r2, [r3, #4]
    pShtp->eventCookie = eventCookie;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	609a      	str	r2, [r3, #8]
}
 8005b7c:	46c0      	nop			; (mov r8, r8)
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	b006      	add	sp, #24
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <shtp_listenChan>:

// Register a listener for an SHTP channel
int shtp_listenChan(void *pInstance,
                    uint16_t guid, const char * chan,
                    shtp_Callback_t *callback, void * cookie)
{
 8005b84:	b590      	push	{r4, r7, lr}
 8005b86:	b089      	sub	sp, #36	; 0x24
 8005b88:	af02      	add	r7, sp, #8
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	607a      	str	r2, [r7, #4]
 8005b8e:	603b      	str	r3, [r7, #0]
 8005b90:	230a      	movs	r3, #10
 8005b92:	18fb      	adds	r3, r7, r3
 8005b94:	1c0a      	adds	r2, r1, #0
 8005b96:	801a      	strh	r2, [r3, #0]
    shtp_t *pShtp = (shtp_t *)pInstance;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	617b      	str	r3, [r7, #20]
    
    // Balk if channel name isn't valid
    if ((chan == 0) || (strlen(chan) == 0)) return SH2_ERR_BAD_PARAM;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d003      	beq.n	8005baa <shtp_listenChan+0x26>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d102      	bne.n	8005bb0 <shtp_listenChan+0x2c>
 8005baa:	2302      	movs	r3, #2
 8005bac:	425b      	negs	r3, r3
 8005bae:	e00b      	b.n	8005bc8 <shtp_listenChan+0x44>

    return addChanListener(pShtp, guid, chan, callback, cookie);
 8005bb0:	683c      	ldr	r4, [r7, #0]
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	230a      	movs	r3, #10
 8005bb6:	18fb      	adds	r3, r7, r3
 8005bb8:	8819      	ldrh	r1, [r3, #0]
 8005bba:	6978      	ldr	r0, [r7, #20]
 8005bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bbe:	9300      	str	r3, [sp, #0]
 8005bc0:	0023      	movs	r3, r4
 8005bc2:	f7ff fa11 	bl	8004fe8 <addChanListener>
 8005bc6:	0003      	movs	r3, r0
}
 8005bc8:	0018      	movs	r0, r3
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	b007      	add	sp, #28
 8005bce:	bd90      	pop	{r4, r7, pc}

08005bd0 <shtp_listenAdvert>:

// Register a listener for SHTP advertisements 
int shtp_listenAdvert(void *pInstance,
                      uint16_t guid,
                      shtp_AdvertCallback_t *advertCallback, void * cookie)
{
 8005bd0:	b590      	push	{r4, r7, lr}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	607a      	str	r2, [r7, #4]
 8005bda:	603b      	str	r3, [r7, #0]
 8005bdc:	200a      	movs	r0, #10
 8005bde:	183b      	adds	r3, r7, r0
 8005be0:	1c0a      	adds	r2, r1, #0
 8005be2:	801a      	strh	r2, [r3, #0]
    shtp_t *pShtp = (shtp_t *)pInstance;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	617b      	str	r3, [r7, #20]
    
    // Register the advert listener
    addAdvertListener(pShtp, guid, advertCallback, cookie);
 8005be8:	683c      	ldr	r4, [r7, #0]
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	183b      	adds	r3, r7, r0
 8005bee:	8819      	ldrh	r1, [r3, #0]
 8005bf0:	6978      	ldr	r0, [r7, #20]
 8005bf2:	0023      	movs	r3, r4
 8005bf4:	f7ff f922 	bl	8004e3c <addAdvertListener>

    // Arrange for a new set of advertisements, for this listener
    if (pShtp->advertPhase == ADVERT_IDLE) {
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	4a06      	ldr	r2, [pc, #24]	; (8005c14 <shtp_listenAdvert+0x44>)
 8005bfc:	5c9b      	ldrb	r3, [r3, r2]
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d103      	bne.n	8005c0a <shtp_listenAdvert+0x3a>
        pShtp->advertPhase = ADVERT_NEEDED;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	4a03      	ldr	r2, [pc, #12]	; (8005c14 <shtp_listenAdvert+0x44>)
 8005c06:	2100      	movs	r1, #0
 8005c08:	5499      	strb	r1, [r3, r2]
    }

    return SH2_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	0018      	movs	r0, r3
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	b007      	add	sp, #28
 8005c12:	bd90      	pop	{r4, r7, pc}
 8005c14:	00000424 	.word	0x00000424

08005c18 <shtp_chanNo>:

// Look up the channel number for a particular app, channel.
uint8_t shtp_chanNo(void *pInstance,
                    const char * appName, const char * chanName)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b088      	sub	sp, #32
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
    shtp_t *pShtp = (shtp_t *)pInstance;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	613b      	str	r3, [r7, #16]
    
    int chan = 0;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	61fb      	str	r3, [r7, #28]
    uint32_t guid = 0xFFFFFFFF;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	425b      	negs	r3, r3
 8005c30:	61bb      	str	r3, [r7, #24]

    // Determine GUID for this appname
    for (int n = 0; n < SH2_MAX_APPS; n++) {
 8005c32:	2300      	movs	r3, #0
 8005c34:	617b      	str	r3, [r7, #20]
 8005c36:	e022      	b.n	8005c7e <shtp_chanNo+0x66>
        if (strcmp(pShtp->app[n].appName, appName) == 0) {
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	0013      	movs	r3, r2
 8005c3c:	00db      	lsls	r3, r3, #3
 8005c3e:	189b      	adds	r3, r3, r2
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	2285      	movs	r2, #133	; 0x85
 8005c44:	00d2      	lsls	r2, r2, #3
 8005c46:	4694      	mov	ip, r2
 8005c48:	4463      	add	r3, ip
 8005c4a:	693a      	ldr	r2, [r7, #16]
 8005c4c:	18d3      	adds	r3, r2, r3
 8005c4e:	3304      	adds	r3, #4
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	0011      	movs	r1, r2
 8005c54:	0018      	movs	r0, r3
 8005c56:	f7fa fa57 	bl	8000108 <strcmp>
 8005c5a:	1e03      	subs	r3, r0, #0
 8005c5c:	d10c      	bne.n	8005c78 <shtp_chanNo+0x60>
            guid = pShtp->app[n].guid;
 8005c5e:	6938      	ldr	r0, [r7, #16]
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	2385      	movs	r3, #133	; 0x85
 8005c64:	00d9      	lsls	r1, r3, #3
 8005c66:	0013      	movs	r3, r2
 8005c68:	00db      	lsls	r3, r3, #3
 8005c6a:	189b      	adds	r3, r3, r2
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	18c3      	adds	r3, r0, r3
 8005c70:	185b      	adds	r3, r3, r1
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	61bb      	str	r3, [r7, #24]
            break;
 8005c76:	e005      	b.n	8005c84 <shtp_chanNo+0x6c>
    for (int n = 0; n < SH2_MAX_APPS; n++) {
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	617b      	str	r3, [r7, #20]
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	2b04      	cmp	r3, #4
 8005c82:	ddd9      	ble.n	8005c38 <shtp_chanNo+0x20>
        }
    }
    if (guid == 0xFFFFFFFF) return -1;
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	3301      	adds	r3, #1
 8005c88:	d101      	bne.n	8005c8e <shtp_chanNo+0x76>
 8005c8a:	23ff      	movs	r3, #255	; 0xff
 8005c8c:	e029      	b.n	8005ce2 <shtp_chanNo+0xca>

    for (chan = 0; chan < SH2_MAX_CHANS; chan++) {
 8005c8e:	2300      	movs	r3, #0
 8005c90:	61fb      	str	r3, [r7, #28]
 8005c92:	e022      	b.n	8005cda <shtp_chanNo+0xc2>
        if ((strcmp(pShtp->chan[chan].chanName, chanName) == 0) &&
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	2234      	movs	r2, #52	; 0x34
 8005c98:	4353      	muls	r3, r2
 8005c9a:	22a4      	movs	r2, #164	; 0xa4
 8005c9c:	00d2      	lsls	r2, r2, #3
 8005c9e:	4694      	mov	ip, r2
 8005ca0:	4463      	add	r3, ip
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	18d3      	adds	r3, r2, r3
 8005ca6:	3304      	adds	r3, #4
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	0011      	movs	r1, r2
 8005cac:	0018      	movs	r0, r3
 8005cae:	f7fa fa2b 	bl	8000108 <strcmp>
 8005cb2:	1e03      	subs	r3, r0, #0
 8005cb4:	d10e      	bne.n	8005cd4 <shtp_chanNo+0xbc>
            pShtp->chan[chan].guid == guid) {
 8005cb6:	6939      	ldr	r1, [r7, #16]
 8005cb8:	69fa      	ldr	r2, [r7, #28]
 8005cba:	23a4      	movs	r3, #164	; 0xa4
 8005cbc:	00db      	lsls	r3, r3, #3
 8005cbe:	2034      	movs	r0, #52	; 0x34
 8005cc0:	4342      	muls	r2, r0
 8005cc2:	188a      	adds	r2, r1, r2
 8005cc4:	18d3      	adds	r3, r2, r3
 8005cc6:	681b      	ldr	r3, [r3, #0]
        if ((strcmp(pShtp->chan[chan].chanName, chanName) == 0) &&
 8005cc8:	69ba      	ldr	r2, [r7, #24]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d102      	bne.n	8005cd4 <shtp_chanNo+0xbc>
            // Found match
            return chan;
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	e006      	b.n	8005ce2 <shtp_chanNo+0xca>
    for (chan = 0; chan < SH2_MAX_CHANS; chan++) {
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	61fb      	str	r3, [r7, #28]
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	2b07      	cmp	r3, #7
 8005cde:	ddd9      	ble.n	8005c94 <shtp_chanNo+0x7c>
        }
    }

    // Not found
    return 0xFF;
 8005ce0:	23ff      	movs	r3, #255	; 0xff
}
 8005ce2:	0018      	movs	r0, r3
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	b008      	add	sp, #32
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <shtp_send>:

// Send an SHTP payload on a particular channel
int shtp_send(void *pInstance,
              uint8_t channel, const uint8_t *payload, uint16_t len)
{
 8005cea:	b590      	push	{r4, r7, lr}
 8005cec:	b087      	sub	sp, #28
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	60f8      	str	r0, [r7, #12]
 8005cf2:	0008      	movs	r0, r1
 8005cf4:	607a      	str	r2, [r7, #4]
 8005cf6:	0019      	movs	r1, r3
 8005cf8:	230b      	movs	r3, #11
 8005cfa:	18fb      	adds	r3, r7, r3
 8005cfc:	1c02      	adds	r2, r0, #0
 8005cfe:	701a      	strb	r2, [r3, #0]
 8005d00:	2008      	movs	r0, #8
 8005d02:	183b      	adds	r3, r7, r0
 8005d04:	1c0a      	adds	r2, r1, #0
 8005d06:	801a      	strh	r2, [r3, #0]
    shtp_t *pShtp = (shtp_t *)pInstance;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	617b      	str	r3, [r7, #20]
    int ret = SH2_OK;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	613b      	str	r3, [r7, #16]
    
    if (len > pShtp->outMaxPayload) {
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	8a9b      	ldrh	r3, [r3, #20]
 8005d14:	183a      	adds	r2, r7, r0
 8005d16:	8812      	ldrh	r2, [r2, #0]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d902      	bls.n	8005d22 <shtp_send+0x38>
        return SH2_ERR_BAD_PARAM;
 8005d1c:	2302      	movs	r3, #2
 8005d1e:	425b      	negs	r3, r3
 8005d20:	e01e      	b.n	8005d60 <shtp_send+0x76>
    }
    if (channel >= SH2_MAX_CHANS) {
 8005d22:	230b      	movs	r3, #11
 8005d24:	18fb      	adds	r3, r7, r3
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	2b07      	cmp	r3, #7
 8005d2a:	d90b      	bls.n	8005d44 <shtp_send+0x5a>
        pShtp->badTxChan++;
 8005d2c:	697a      	ldr	r2, [r7, #20]
 8005d2e:	2383      	movs	r3, #131	; 0x83
 8005d30:	011b      	lsls	r3, r3, #4
 8005d32:	58d3      	ldr	r3, [r2, r3]
 8005d34:	1c59      	adds	r1, r3, #1
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	2383      	movs	r3, #131	; 0x83
 8005d3a:	011b      	lsls	r3, r3, #4
 8005d3c:	50d1      	str	r1, [r2, r3]
        return SH2_ERR_BAD_PARAM;
 8005d3e:	2302      	movs	r3, #2
 8005d40:	425b      	negs	r3, r3
 8005d42:	e00d      	b.n	8005d60 <shtp_send+0x76>
    }
    
    ret = txProcess(pShtp, channel, payload, len);
 8005d44:	2308      	movs	r3, #8
 8005d46:	18fb      	adds	r3, r7, r3
 8005d48:	881c      	ldrh	r4, [r3, #0]
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	230b      	movs	r3, #11
 8005d4e:	18fb      	adds	r3, r7, r3
 8005d50:	7819      	ldrb	r1, [r3, #0]
 8005d52:	6978      	ldr	r0, [r7, #20]
 8005d54:	0023      	movs	r3, r4
 8005d56:	f7ff f9a7 	bl	80050a8 <txProcess>
 8005d5a:	0003      	movs	r3, r0
 8005d5c:	613b      	str	r3, [r7, #16]

    return ret;
 8005d5e:	693b      	ldr	r3, [r7, #16]
}
 8005d60:	0018      	movs	r0, r3
 8005d62:	46bd      	mov	sp, r7
 8005d64:	b007      	add	sp, #28
 8005d66:	bd90      	pop	{r4, r7, pc}

08005d68 <shtp_service>:

// Check for received data and process it.
void shtp_service(void *pInstance)
{
 8005d68:	b5b0      	push	{r4, r5, r7, lr}
 8005d6a:	b086      	sub	sp, #24
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
    shtp_t *pShtp = (shtp_t *)pInstance;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	617b      	str	r3, [r7, #20]
    uint32_t t_us = 0;
 8005d74:	2300      	movs	r3, #0
 8005d76:	60bb      	str	r3, [r7, #8]

    if (pShtp->advertPhase == ADVERT_NEEDED) {
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	4a1b      	ldr	r2, [pc, #108]	; (8005de8 <shtp_service+0x80>)
 8005d7c:	5c9b      	ldrb	r3, [r3, r2]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d112      	bne.n	8005da8 <shtp_service+0x40>
        pShtp->advertPhase = ADVERT_REQUESTED;  // do this before send, to avoid recursion.
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	4a18      	ldr	r2, [pc, #96]	; (8005de8 <shtp_service+0x80>)
 8005d86:	2101      	movs	r1, #1
 8005d88:	5499      	strb	r1, [r3, r2]
        int status = shtp_send(pShtp, SHTP_CHAN_COMMAND, advertise, sizeof(advertise));
 8005d8a:	4a18      	ldr	r2, [pc, #96]	; (8005dec <shtp_service+0x84>)
 8005d8c:	6978      	ldr	r0, [r7, #20]
 8005d8e:	2302      	movs	r3, #2
 8005d90:	2100      	movs	r1, #0
 8005d92:	f7ff ffaa 	bl	8005cea <shtp_send>
 8005d96:	0003      	movs	r3, r0
 8005d98:	613b      	str	r3, [r7, #16]
        if (status != SH2_OK) {
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d003      	beq.n	8005da8 <shtp_service+0x40>
            // Oops, advert request failed.  Go back to needing one.
            pShtp->advertPhase = ADVERT_NEEDED;
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	4a11      	ldr	r2, [pc, #68]	; (8005de8 <shtp_service+0x80>)
 8005da4:	2100      	movs	r1, #0
 8005da6:	5499      	strb	r1, [r3, r2]
        }
    }

    int len = pShtp->pHal->read(pShtp->pHal, pShtp->inTransfer, sizeof(pShtp->inTransfer), &t_us);
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	689c      	ldr	r4, [r3, #8]
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	6818      	ldr	r0, [r3, #0]
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	25a9      	movs	r5, #169	; 0xa9
 8005db6:	00ad      	lsls	r5, r5, #2
 8005db8:	1959      	adds	r1, r3, r5
 8005dba:	2308      	movs	r3, #8
 8005dbc:	18fb      	adds	r3, r7, r3
 8005dbe:	22c0      	movs	r2, #192	; 0xc0
 8005dc0:	0052      	lsls	r2, r2, #1
 8005dc2:	47a0      	blx	r4
 8005dc4:	0003      	movs	r3, r0
 8005dc6:	60fb      	str	r3, [r7, #12]
    if (len) {
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d007      	beq.n	8005dde <shtp_service+0x76>
        rxAssemble(pShtp, pShtp->inTransfer, len, t_us);
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	1959      	adds	r1, r3, r5
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	6978      	ldr	r0, [r7, #20]
 8005dda:	f7ff fcfb 	bl	80057d4 <rxAssemble>
    }
 8005dde:	46c0      	nop			; (mov r8, r8)
 8005de0:	46bd      	mov	sp, r7
 8005de2:	b006      	add	sp, #24
 8005de4:	bdb0      	pop	{r4, r5, r7, pc}
 8005de6:	46c0      	nop			; (mov r8, r8)
 8005de8:	00000424 	.word	0x00000424
 8005dec:	0800ac9c 	.word	0x0800ac9c

08005df0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005df6:	4b0f      	ldr	r3, [pc, #60]	; (8005e34 <HAL_MspInit+0x44>)
 8005df8:	699a      	ldr	r2, [r3, #24]
 8005dfa:	4b0e      	ldr	r3, [pc, #56]	; (8005e34 <HAL_MspInit+0x44>)
 8005dfc:	2101      	movs	r1, #1
 8005dfe:	430a      	orrs	r2, r1
 8005e00:	619a      	str	r2, [r3, #24]
 8005e02:	4b0c      	ldr	r3, [pc, #48]	; (8005e34 <HAL_MspInit+0x44>)
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	2201      	movs	r2, #1
 8005e08:	4013      	ands	r3, r2
 8005e0a:	607b      	str	r3, [r7, #4]
 8005e0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e0e:	4b09      	ldr	r3, [pc, #36]	; (8005e34 <HAL_MspInit+0x44>)
 8005e10:	69da      	ldr	r2, [r3, #28]
 8005e12:	4b08      	ldr	r3, [pc, #32]	; (8005e34 <HAL_MspInit+0x44>)
 8005e14:	2180      	movs	r1, #128	; 0x80
 8005e16:	0549      	lsls	r1, r1, #21
 8005e18:	430a      	orrs	r2, r1
 8005e1a:	61da      	str	r2, [r3, #28]
 8005e1c:	4b05      	ldr	r3, [pc, #20]	; (8005e34 <HAL_MspInit+0x44>)
 8005e1e:	69da      	ldr	r2, [r3, #28]
 8005e20:	2380      	movs	r3, #128	; 0x80
 8005e22:	055b      	lsls	r3, r3, #21
 8005e24:	4013      	ands	r3, r2
 8005e26:	603b      	str	r3, [r7, #0]
 8005e28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005e2a:	46c0      	nop			; (mov r8, r8)
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	b002      	add	sp, #8
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	46c0      	nop			; (mov r8, r8)
 8005e34:	40021000 	.word	0x40021000

08005e38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005e38:	b590      	push	{r4, r7, lr}
 8005e3a:	b08b      	sub	sp, #44	; 0x2c
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e40:	2414      	movs	r4, #20
 8005e42:	193b      	adds	r3, r7, r4
 8005e44:	0018      	movs	r0, r3
 8005e46:	2314      	movs	r3, #20
 8005e48:	001a      	movs	r2, r3
 8005e4a:	2100      	movs	r1, #0
 8005e4c:	f004 fe2a 	bl	800aaa4 <memset>
  if(hadc->Instance==ADC1)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a3b      	ldr	r2, [pc, #236]	; (8005f44 <HAL_ADC_MspInit+0x10c>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d170      	bne.n	8005f3c <HAL_ADC_MspInit+0x104>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005e5a:	4b3b      	ldr	r3, [pc, #236]	; (8005f48 <HAL_ADC_MspInit+0x110>)
 8005e5c:	699a      	ldr	r2, [r3, #24]
 8005e5e:	4b3a      	ldr	r3, [pc, #232]	; (8005f48 <HAL_ADC_MspInit+0x110>)
 8005e60:	2180      	movs	r1, #128	; 0x80
 8005e62:	0089      	lsls	r1, r1, #2
 8005e64:	430a      	orrs	r2, r1
 8005e66:	619a      	str	r2, [r3, #24]
 8005e68:	4b37      	ldr	r3, [pc, #220]	; (8005f48 <HAL_ADC_MspInit+0x110>)
 8005e6a:	699a      	ldr	r2, [r3, #24]
 8005e6c:	2380      	movs	r3, #128	; 0x80
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	4013      	ands	r3, r2
 8005e72:	613b      	str	r3, [r7, #16]
 8005e74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e76:	4b34      	ldr	r3, [pc, #208]	; (8005f48 <HAL_ADC_MspInit+0x110>)
 8005e78:	695a      	ldr	r2, [r3, #20]
 8005e7a:	4b33      	ldr	r3, [pc, #204]	; (8005f48 <HAL_ADC_MspInit+0x110>)
 8005e7c:	2180      	movs	r1, #128	; 0x80
 8005e7e:	0289      	lsls	r1, r1, #10
 8005e80:	430a      	orrs	r2, r1
 8005e82:	615a      	str	r2, [r3, #20]
 8005e84:	4b30      	ldr	r3, [pc, #192]	; (8005f48 <HAL_ADC_MspInit+0x110>)
 8005e86:	695a      	ldr	r2, [r3, #20]
 8005e88:	2380      	movs	r3, #128	; 0x80
 8005e8a:	029b      	lsls	r3, r3, #10
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	60fb      	str	r3, [r7, #12]
 8005e90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e92:	4b2d      	ldr	r3, [pc, #180]	; (8005f48 <HAL_ADC_MspInit+0x110>)
 8005e94:	695a      	ldr	r2, [r3, #20]
 8005e96:	4b2c      	ldr	r3, [pc, #176]	; (8005f48 <HAL_ADC_MspInit+0x110>)
 8005e98:	2180      	movs	r1, #128	; 0x80
 8005e9a:	02c9      	lsls	r1, r1, #11
 8005e9c:	430a      	orrs	r2, r1
 8005e9e:	615a      	str	r2, [r3, #20]
 8005ea0:	4b29      	ldr	r3, [pc, #164]	; (8005f48 <HAL_ADC_MspInit+0x110>)
 8005ea2:	695a      	ldr	r2, [r3, #20]
 8005ea4:	2380      	movs	r3, #128	; 0x80
 8005ea6:	02db      	lsls	r3, r3, #11
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	60bb      	str	r3, [r7, #8]
 8005eac:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = S1_Pin|S2_Pin;
 8005eae:	193b      	adds	r3, r7, r4
 8005eb0:	22c0      	movs	r2, #192	; 0xc0
 8005eb2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005eb4:	193b      	adds	r3, r7, r4
 8005eb6:	2203      	movs	r2, #3
 8005eb8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005eba:	193b      	adds	r3, r7, r4
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ec0:	193a      	adds	r2, r7, r4
 8005ec2:	2390      	movs	r3, #144	; 0x90
 8005ec4:	05db      	lsls	r3, r3, #23
 8005ec6:	0011      	movs	r1, r2
 8005ec8:	0018      	movs	r0, r3
 8005eca:	f001 fd39 	bl	8007940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = S3_Pin|S4_Pin;
 8005ece:	193b      	adds	r3, r7, r4
 8005ed0:	2203      	movs	r2, #3
 8005ed2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005ed4:	193b      	adds	r3, r7, r4
 8005ed6:	2203      	movs	r2, #3
 8005ed8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005eda:	193b      	adds	r3, r7, r4
 8005edc:	2200      	movs	r2, #0
 8005ede:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ee0:	193b      	adds	r3, r7, r4
 8005ee2:	4a1a      	ldr	r2, [pc, #104]	; (8005f4c <HAL_ADC_MspInit+0x114>)
 8005ee4:	0019      	movs	r1, r3
 8005ee6:	0010      	movs	r0, r2
 8005ee8:	f001 fd2a 	bl	8007940 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8005eec:	4b18      	ldr	r3, [pc, #96]	; (8005f50 <HAL_ADC_MspInit+0x118>)
 8005eee:	4a19      	ldr	r2, [pc, #100]	; (8005f54 <HAL_ADC_MspInit+0x11c>)
 8005ef0:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005ef2:	4b17      	ldr	r3, [pc, #92]	; (8005f50 <HAL_ADC_MspInit+0x118>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ef8:	4b15      	ldr	r3, [pc, #84]	; (8005f50 <HAL_ADC_MspInit+0x118>)
 8005efa:	2200      	movs	r2, #0
 8005efc:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8005efe:	4b14      	ldr	r3, [pc, #80]	; (8005f50 <HAL_ADC_MspInit+0x118>)
 8005f00:	2280      	movs	r2, #128	; 0x80
 8005f02:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005f04:	4b12      	ldr	r3, [pc, #72]	; (8005f50 <HAL_ADC_MspInit+0x118>)
 8005f06:	2280      	movs	r2, #128	; 0x80
 8005f08:	0052      	lsls	r2, r2, #1
 8005f0a:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005f0c:	4b10      	ldr	r3, [pc, #64]	; (8005f50 <HAL_ADC_MspInit+0x118>)
 8005f0e:	2280      	movs	r2, #128	; 0x80
 8005f10:	00d2      	lsls	r2, r2, #3
 8005f12:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8005f14:	4b0e      	ldr	r3, [pc, #56]	; (8005f50 <HAL_ADC_MspInit+0x118>)
 8005f16:	2220      	movs	r2, #32
 8005f18:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8005f1a:	4b0d      	ldr	r3, [pc, #52]	; (8005f50 <HAL_ADC_MspInit+0x118>)
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8005f20:	4b0b      	ldr	r3, [pc, #44]	; (8005f50 <HAL_ADC_MspInit+0x118>)
 8005f22:	0018      	movs	r0, r3
 8005f24:	f001 fada 	bl	80074dc <HAL_DMA_Init>
 8005f28:	1e03      	subs	r3, r0, #0
 8005f2a:	d001      	beq.n	8005f30 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8005f2c:	f7fd f930 	bl	8003190 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a07      	ldr	r2, [pc, #28]	; (8005f50 <HAL_ADC_MspInit+0x118>)
 8005f34:	631a      	str	r2, [r3, #48]	; 0x30
 8005f36:	4b06      	ldr	r3, [pc, #24]	; (8005f50 <HAL_ADC_MspInit+0x118>)
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005f3c:	46c0      	nop			; (mov r8, r8)
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	b00b      	add	sp, #44	; 0x2c
 8005f42:	bd90      	pop	{r4, r7, pc}
 8005f44:	40012400 	.word	0x40012400
 8005f48:	40021000 	.word	0x40021000
 8005f4c:	48000400 	.word	0x48000400
 8005f50:	200003d0 	.word	0x200003d0
 8005f54:	40020008 	.word	0x40020008

08005f58 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8005f58:	b590      	push	{r4, r7, lr}
 8005f5a:	b08b      	sub	sp, #44	; 0x2c
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f60:	2414      	movs	r4, #20
 8005f62:	193b      	adds	r3, r7, r4
 8005f64:	0018      	movs	r0, r3
 8005f66:	2314      	movs	r3, #20
 8005f68:	001a      	movs	r2, r3
 8005f6a:	2100      	movs	r1, #0
 8005f6c:	f004 fd9a 	bl	800aaa4 <memset>
  if(hcan->Instance==CAN)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a1d      	ldr	r2, [pc, #116]	; (8005fec <HAL_CAN_MspInit+0x94>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d133      	bne.n	8005fe2 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8005f7a:	4b1d      	ldr	r3, [pc, #116]	; (8005ff0 <HAL_CAN_MspInit+0x98>)
 8005f7c:	69da      	ldr	r2, [r3, #28]
 8005f7e:	4b1c      	ldr	r3, [pc, #112]	; (8005ff0 <HAL_CAN_MspInit+0x98>)
 8005f80:	2180      	movs	r1, #128	; 0x80
 8005f82:	0489      	lsls	r1, r1, #18
 8005f84:	430a      	orrs	r2, r1
 8005f86:	61da      	str	r2, [r3, #28]
 8005f88:	4b19      	ldr	r3, [pc, #100]	; (8005ff0 <HAL_CAN_MspInit+0x98>)
 8005f8a:	69da      	ldr	r2, [r3, #28]
 8005f8c:	2380      	movs	r3, #128	; 0x80
 8005f8e:	049b      	lsls	r3, r3, #18
 8005f90:	4013      	ands	r3, r2
 8005f92:	613b      	str	r3, [r7, #16]
 8005f94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f96:	4b16      	ldr	r3, [pc, #88]	; (8005ff0 <HAL_CAN_MspInit+0x98>)
 8005f98:	695a      	ldr	r2, [r3, #20]
 8005f9a:	4b15      	ldr	r3, [pc, #84]	; (8005ff0 <HAL_CAN_MspInit+0x98>)
 8005f9c:	2180      	movs	r1, #128	; 0x80
 8005f9e:	0289      	lsls	r1, r1, #10
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	615a      	str	r2, [r3, #20]
 8005fa4:	4b12      	ldr	r3, [pc, #72]	; (8005ff0 <HAL_CAN_MspInit+0x98>)
 8005fa6:	695a      	ldr	r2, [r3, #20]
 8005fa8:	2380      	movs	r3, #128	; 0x80
 8005faa:	029b      	lsls	r3, r3, #10
 8005fac:	4013      	ands	r3, r2
 8005fae:	60fb      	str	r3, [r7, #12]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005fb2:	193b      	adds	r3, r7, r4
 8005fb4:	22c0      	movs	r2, #192	; 0xc0
 8005fb6:	0152      	lsls	r2, r2, #5
 8005fb8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fba:	0021      	movs	r1, r4
 8005fbc:	187b      	adds	r3, r7, r1
 8005fbe:	2202      	movs	r2, #2
 8005fc0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fc2:	187b      	adds	r3, r7, r1
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005fc8:	187b      	adds	r3, r7, r1
 8005fca:	2203      	movs	r2, #3
 8005fcc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8005fce:	187b      	adds	r3, r7, r1
 8005fd0:	2204      	movs	r2, #4
 8005fd2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fd4:	187a      	adds	r2, r7, r1
 8005fd6:	2390      	movs	r3, #144	; 0x90
 8005fd8:	05db      	lsls	r3, r3, #23
 8005fda:	0011      	movs	r1, r2
 8005fdc:	0018      	movs	r0, r3
 8005fde:	f001 fcaf 	bl	8007940 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8005fe2:	46c0      	nop			; (mov r8, r8)
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	b00b      	add	sp, #44	; 0x2c
 8005fe8:	bd90      	pop	{r4, r7, pc}
 8005fea:	46c0      	nop			; (mov r8, r8)
 8005fec:	40006400 	.word	0x40006400
 8005ff0:	40021000 	.word	0x40021000

08005ff4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005ff4:	b590      	push	{r4, r7, lr}
 8005ff6:	b08b      	sub	sp, #44	; 0x2c
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ffc:	2414      	movs	r4, #20
 8005ffe:	193b      	adds	r3, r7, r4
 8006000:	0018      	movs	r0, r3
 8006002:	2314      	movs	r3, #20
 8006004:	001a      	movs	r2, r3
 8006006:	2100      	movs	r1, #0
 8006008:	f004 fd4c 	bl	800aaa4 <memset>
  if(hi2c->Instance==I2C1)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a31      	ldr	r2, [pc, #196]	; (80060d8 <HAL_I2C_MspInit+0xe4>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d15b      	bne.n	80060ce <HAL_I2C_MspInit+0xda>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006016:	4b31      	ldr	r3, [pc, #196]	; (80060dc <HAL_I2C_MspInit+0xe8>)
 8006018:	695a      	ldr	r2, [r3, #20]
 800601a:	4b30      	ldr	r3, [pc, #192]	; (80060dc <HAL_I2C_MspInit+0xe8>)
 800601c:	2180      	movs	r1, #128	; 0x80
 800601e:	0289      	lsls	r1, r1, #10
 8006020:	430a      	orrs	r2, r1
 8006022:	615a      	str	r2, [r3, #20]
 8006024:	4b2d      	ldr	r3, [pc, #180]	; (80060dc <HAL_I2C_MspInit+0xe8>)
 8006026:	695a      	ldr	r2, [r3, #20]
 8006028:	2380      	movs	r3, #128	; 0x80
 800602a:	029b      	lsls	r3, r3, #10
 800602c:	4013      	ands	r3, r2
 800602e:	613b      	str	r3, [r7, #16]
 8006030:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006032:	193b      	adds	r3, r7, r4
 8006034:	22c0      	movs	r2, #192	; 0xc0
 8006036:	00d2      	lsls	r2, r2, #3
 8006038:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800603a:	0021      	movs	r1, r4
 800603c:	187b      	adds	r3, r7, r1
 800603e:	2212      	movs	r2, #18
 8006040:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006042:	187b      	adds	r3, r7, r1
 8006044:	2200      	movs	r2, #0
 8006046:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006048:	187b      	adds	r3, r7, r1
 800604a:	2203      	movs	r2, #3
 800604c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800604e:	187b      	adds	r3, r7, r1
 8006050:	2204      	movs	r2, #4
 8006052:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006054:	187a      	adds	r2, r7, r1
 8006056:	2390      	movs	r3, #144	; 0x90
 8006058:	05db      	lsls	r3, r3, #23
 800605a:	0011      	movs	r1, r2
 800605c:	0018      	movs	r0, r3
 800605e:	f001 fc6f 	bl	8007940 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006062:	4b1e      	ldr	r3, [pc, #120]	; (80060dc <HAL_I2C_MspInit+0xe8>)
 8006064:	69da      	ldr	r2, [r3, #28]
 8006066:	4b1d      	ldr	r3, [pc, #116]	; (80060dc <HAL_I2C_MspInit+0xe8>)
 8006068:	2180      	movs	r1, #128	; 0x80
 800606a:	0389      	lsls	r1, r1, #14
 800606c:	430a      	orrs	r2, r1
 800606e:	61da      	str	r2, [r3, #28]
 8006070:	4b1a      	ldr	r3, [pc, #104]	; (80060dc <HAL_I2C_MspInit+0xe8>)
 8006072:	69da      	ldr	r2, [r3, #28]
 8006074:	2380      	movs	r3, #128	; 0x80
 8006076:	039b      	lsls	r3, r3, #14
 8006078:	4013      	ands	r3, r2
 800607a:	60fb      	str	r3, [r7, #12]
 800607c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 800607e:	4b18      	ldr	r3, [pc, #96]	; (80060e0 <HAL_I2C_MspInit+0xec>)
 8006080:	4a18      	ldr	r2, [pc, #96]	; (80060e4 <HAL_I2C_MspInit+0xf0>)
 8006082:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006084:	4b16      	ldr	r3, [pc, #88]	; (80060e0 <HAL_I2C_MspInit+0xec>)
 8006086:	2200      	movs	r2, #0
 8006088:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800608a:	4b15      	ldr	r3, [pc, #84]	; (80060e0 <HAL_I2C_MspInit+0xec>)
 800608c:	2200      	movs	r2, #0
 800608e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006090:	4b13      	ldr	r3, [pc, #76]	; (80060e0 <HAL_I2C_MspInit+0xec>)
 8006092:	2280      	movs	r2, #128	; 0x80
 8006094:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006096:	4b12      	ldr	r3, [pc, #72]	; (80060e0 <HAL_I2C_MspInit+0xec>)
 8006098:	2280      	movs	r2, #128	; 0x80
 800609a:	0052      	lsls	r2, r2, #1
 800609c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800609e:	4b10      	ldr	r3, [pc, #64]	; (80060e0 <HAL_I2C_MspInit+0xec>)
 80060a0:	2280      	movs	r2, #128	; 0x80
 80060a2:	00d2      	lsls	r2, r2, #3
 80060a4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_CIRCULAR;
 80060a6:	4b0e      	ldr	r3, [pc, #56]	; (80060e0 <HAL_I2C_MspInit+0xec>)
 80060a8:	2220      	movs	r2, #32
 80060aa:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80060ac:	4b0c      	ldr	r3, [pc, #48]	; (80060e0 <HAL_I2C_MspInit+0xec>)
 80060ae:	2200      	movs	r2, #0
 80060b0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80060b2:	4b0b      	ldr	r3, [pc, #44]	; (80060e0 <HAL_I2C_MspInit+0xec>)
 80060b4:	0018      	movs	r0, r3
 80060b6:	f001 fa11 	bl	80074dc <HAL_DMA_Init>
 80060ba:	1e03      	subs	r3, r0, #0
 80060bc:	d001      	beq.n	80060c2 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 80060be:	f7fd f867 	bl	8003190 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a06      	ldr	r2, [pc, #24]	; (80060e0 <HAL_I2C_MspInit+0xec>)
 80060c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80060c8:	4b05      	ldr	r3, [pc, #20]	; (80060e0 <HAL_I2C_MspInit+0xec>)
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80060ce:	46c0      	nop			; (mov r8, r8)
 80060d0:	46bd      	mov	sp, r7
 80060d2:	b00b      	add	sp, #44	; 0x2c
 80060d4:	bd90      	pop	{r4, r7, pc}
 80060d6:	46c0      	nop			; (mov r8, r8)
 80060d8:	40005400 	.word	0x40005400
 80060dc:	40021000 	.word	0x40021000
 80060e0:	200004cc 	.word	0x200004cc
 80060e4:	40020030 	.word	0x40020030

080060e8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a10      	ldr	r2, [pc, #64]	; (8006138 <HAL_I2C_MspDeInit+0x50>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d11a      	bne.n	8006130 <HAL_I2C_MspDeInit+0x48>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80060fa:	4b10      	ldr	r3, [pc, #64]	; (800613c <HAL_I2C_MspDeInit+0x54>)
 80060fc:	69da      	ldr	r2, [r3, #28]
 80060fe:	4b0f      	ldr	r3, [pc, #60]	; (800613c <HAL_I2C_MspDeInit+0x54>)
 8006100:	490f      	ldr	r1, [pc, #60]	; (8006140 <HAL_I2C_MspDeInit+0x58>)
 8006102:	400a      	ands	r2, r1
 8006104:	61da      	str	r2, [r3, #28]

    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9);
 8006106:	2380      	movs	r3, #128	; 0x80
 8006108:	009a      	lsls	r2, r3, #2
 800610a:	2390      	movs	r3, #144	; 0x90
 800610c:	05db      	lsls	r3, r3, #23
 800610e:	0011      	movs	r1, r2
 8006110:	0018      	movs	r0, r3
 8006112:	f001 fd7d 	bl	8007c10 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10);
 8006116:	2380      	movs	r3, #128	; 0x80
 8006118:	00da      	lsls	r2, r3, #3
 800611a:	2390      	movs	r3, #144	; 0x90
 800611c:	05db      	lsls	r3, r3, #23
 800611e:	0011      	movs	r1, r2
 8006120:	0018      	movs	r0, r3
 8006122:	f001 fd75 	bl	8007c10 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmarx);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800612a:	0018      	movs	r0, r3
 800612c:	f001 fa1e 	bl	800756c <HAL_DMA_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8006130:	46c0      	nop			; (mov r8, r8)
 8006132:	46bd      	mov	sp, r7
 8006134:	b002      	add	sp, #8
 8006136:	bd80      	pop	{r7, pc}
 8006138:	40005400 	.word	0x40005400
 800613c:	40021000 	.word	0x40021000
 8006140:	ffdfffff 	.word	0xffdfffff

08006144 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a0e      	ldr	r2, [pc, #56]	; (800618c <HAL_TIM_Base_MspInit+0x48>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d115      	bne.n	8006182 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8006156:	4b0e      	ldr	r3, [pc, #56]	; (8006190 <HAL_TIM_Base_MspInit+0x4c>)
 8006158:	699a      	ldr	r2, [r3, #24]
 800615a:	4b0d      	ldr	r3, [pc, #52]	; (8006190 <HAL_TIM_Base_MspInit+0x4c>)
 800615c:	2180      	movs	r1, #128	; 0x80
 800615e:	0289      	lsls	r1, r1, #10
 8006160:	430a      	orrs	r2, r1
 8006162:	619a      	str	r2, [r3, #24]
 8006164:	4b0a      	ldr	r3, [pc, #40]	; (8006190 <HAL_TIM_Base_MspInit+0x4c>)
 8006166:	699a      	ldr	r2, [r3, #24]
 8006168:	2380      	movs	r3, #128	; 0x80
 800616a:	029b      	lsls	r3, r3, #10
 800616c:	4013      	ands	r3, r2
 800616e:	60fb      	str	r3, [r7, #12]
 8006170:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8006172:	2200      	movs	r2, #0
 8006174:	2100      	movs	r1, #0
 8006176:	2015      	movs	r0, #21
 8006178:	f001 f96e 	bl	8007458 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800617c:	2015      	movs	r0, #21
 800617e:	f001 f980 	bl	8007482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8006182:	46c0      	nop			; (mov r8, r8)
 8006184:	46bd      	mov	sp, r7
 8006186:	b004      	add	sp, #16
 8006188:	bd80      	pop	{r7, pc}
 800618a:	46c0      	nop			; (mov r8, r8)
 800618c:	40014400 	.word	0x40014400
 8006190:	40021000 	.word	0x40021000

08006194 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006198:	e7fe      	b.n	8006198 <NMI_Handler+0x4>

0800619a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800619a:	b580      	push	{r7, lr}
 800619c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800619e:	e7fe      	b.n	800619e <HardFault_Handler+0x4>

080061a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80061a4:	46c0      	nop			; (mov r8, r8)
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80061ae:	46c0      	nop			; (mov r8, r8)
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80061b8:	f000 f8b8 	bl	800632c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80061bc:	46c0      	nop			; (mov r8, r8)
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
	...

080061c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80061c8:	4b03      	ldr	r3, [pc, #12]	; (80061d8 <DMA1_Channel1_IRQHandler+0x14>)
 80061ca:	0018      	movs	r0, r3
 80061cc:	f001 fac2 	bl	8007754 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80061d0:	46c0      	nop			; (mov r8, r8)
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	46c0      	nop			; (mov r8, r8)
 80061d8:	200003d0 	.word	0x200003d0

080061dc <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80061e0:	4b03      	ldr	r3, [pc, #12]	; (80061f0 <DMA1_Channel2_3_IRQHandler+0x14>)
 80061e2:	0018      	movs	r0, r3
 80061e4:	f001 fab6 	bl	8007754 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80061e8:	46c0      	nop			; (mov r8, r8)
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	46c0      	nop			; (mov r8, r8)
 80061f0:	200004cc 	.word	0x200004cc

080061f4 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80061f8:	4b03      	ldr	r3, [pc, #12]	; (8006208 <TIM16_IRQHandler+0x14>)
 80061fa:	0018      	movs	r0, r3
 80061fc:	f004 fa96 	bl	800a72c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8006200:	46c0      	nop			; (mov r8, r8)
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	46c0      	nop			; (mov r8, r8)
 8006208:	20000510 	.word	0x20000510

0800620c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8006210:	46c0      	nop			; (mov r8, r8)
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
	...

08006218 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006218:	4813      	ldr	r0, [pc, #76]	; (8006268 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800621a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800621c:	f7ff fff6 	bl	800620c <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8006220:	4812      	ldr	r0, [pc, #72]	; (800626c <LoopForever+0x6>)
    LDR R1, [R0]
 8006222:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8006224:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8006226:	4a12      	ldr	r2, [pc, #72]	; (8006270 <LoopForever+0xa>)
    CMP R1, R2
 8006228:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800622a:	d105      	bne.n	8006238 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 800622c:	4811      	ldr	r0, [pc, #68]	; (8006274 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800622e:	4912      	ldr	r1, [pc, #72]	; (8006278 <LoopForever+0x12>)
    STR R1, [R0]
 8006230:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8006232:	4812      	ldr	r0, [pc, #72]	; (800627c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8006234:	4912      	ldr	r1, [pc, #72]	; (8006280 <LoopForever+0x1a>)
    STR R1, [R0]
 8006236:	6001      	str	r1, [r0, #0]

08006238 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006238:	4812      	ldr	r0, [pc, #72]	; (8006284 <LoopForever+0x1e>)
  ldr r1, =_edata
 800623a:	4913      	ldr	r1, [pc, #76]	; (8006288 <LoopForever+0x22>)
  ldr r2, =_sidata
 800623c:	4a13      	ldr	r2, [pc, #76]	; (800628c <LoopForever+0x26>)
  movs r3, #0
 800623e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006240:	e002      	b.n	8006248 <LoopCopyDataInit>

08006242 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006242:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006244:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006246:	3304      	adds	r3, #4

08006248 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006248:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800624a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800624c:	d3f9      	bcc.n	8006242 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800624e:	4a10      	ldr	r2, [pc, #64]	; (8006290 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8006250:	4c10      	ldr	r4, [pc, #64]	; (8006294 <LoopForever+0x2e>)
  movs r3, #0
 8006252:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006254:	e001      	b.n	800625a <LoopFillZerobss>

08006256 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006256:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006258:	3204      	adds	r2, #4

0800625a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800625a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800625c:	d3fb      	bcc.n	8006256 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800625e:	f004 fc29 	bl	800aab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006262:	f7fc fd1b 	bl	8002c9c <main>

08006266 <LoopForever>:

LoopForever:
    b LoopForever
 8006266:	e7fe      	b.n	8006266 <LoopForever>
  ldr   r0, =_estack
 8006268:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 800626c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8006270:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8006274:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8006278:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 800627c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8006280:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8006284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006288:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800628c:	0800ad0c 	.word	0x0800ad0c
  ldr r2, =_sbss
 8006290:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8006294:	20000ffc 	.word	0x20000ffc

08006298 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006298:	e7fe      	b.n	8006298 <ADC1_IRQHandler>
	...

0800629c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80062a0:	4b07      	ldr	r3, [pc, #28]	; (80062c0 <HAL_Init+0x24>)
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	4b06      	ldr	r3, [pc, #24]	; (80062c0 <HAL_Init+0x24>)
 80062a6:	2110      	movs	r1, #16
 80062a8:	430a      	orrs	r2, r1
 80062aa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80062ac:	2003      	movs	r0, #3
 80062ae:	f000 f809 	bl	80062c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80062b2:	f7ff fd9d 	bl	8005df0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	0018      	movs	r0, r3
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	46c0      	nop			; (mov r8, r8)
 80062c0:	40022000 	.word	0x40022000

080062c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80062c4:	b590      	push	{r4, r7, lr}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80062cc:	4b14      	ldr	r3, [pc, #80]	; (8006320 <HAL_InitTick+0x5c>)
 80062ce:	681c      	ldr	r4, [r3, #0]
 80062d0:	4b14      	ldr	r3, [pc, #80]	; (8006324 <HAL_InitTick+0x60>)
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	0019      	movs	r1, r3
 80062d6:	23fa      	movs	r3, #250	; 0xfa
 80062d8:	0098      	lsls	r0, r3, #2
 80062da:	f7f9 ff27 	bl	800012c <__udivsi3>
 80062de:	0003      	movs	r3, r0
 80062e0:	0019      	movs	r1, r3
 80062e2:	0020      	movs	r0, r4
 80062e4:	f7f9 ff22 	bl	800012c <__udivsi3>
 80062e8:	0003      	movs	r3, r0
 80062ea:	0018      	movs	r0, r3
 80062ec:	f001 f8e9 	bl	80074c2 <HAL_SYSTICK_Config>
 80062f0:	1e03      	subs	r3, r0, #0
 80062f2:	d001      	beq.n	80062f8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e00f      	b.n	8006318 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2b03      	cmp	r3, #3
 80062fc:	d80b      	bhi.n	8006316 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80062fe:	6879      	ldr	r1, [r7, #4]
 8006300:	2301      	movs	r3, #1
 8006302:	425b      	negs	r3, r3
 8006304:	2200      	movs	r2, #0
 8006306:	0018      	movs	r0, r3
 8006308:	f001 f8a6 	bl	8007458 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800630c:	4b06      	ldr	r3, [pc, #24]	; (8006328 <HAL_InitTick+0x64>)
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8006312:	2300      	movs	r3, #0
 8006314:	e000      	b.n	8006318 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
}
 8006318:	0018      	movs	r0, r3
 800631a:	46bd      	mov	sp, r7
 800631c:	b003      	add	sp, #12
 800631e:	bd90      	pop	{r4, r7, pc}
 8006320:	20000000 	.word	0x20000000
 8006324:	20000008 	.word	0x20000008
 8006328:	20000004 	.word	0x20000004

0800632c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006330:	4b05      	ldr	r3, [pc, #20]	; (8006348 <HAL_IncTick+0x1c>)
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	001a      	movs	r2, r3
 8006336:	4b05      	ldr	r3, [pc, #20]	; (800634c <HAL_IncTick+0x20>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	18d2      	adds	r2, r2, r3
 800633c:	4b03      	ldr	r3, [pc, #12]	; (800634c <HAL_IncTick+0x20>)
 800633e:	601a      	str	r2, [r3, #0]
}
 8006340:	46c0      	nop			; (mov r8, r8)
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	46c0      	nop			; (mov r8, r8)
 8006348:	20000008 	.word	0x20000008
 800634c:	20000ff8 	.word	0x20000ff8

08006350 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	af00      	add	r7, sp, #0
  return uwTick;
 8006354:	4b02      	ldr	r3, [pc, #8]	; (8006360 <HAL_GetTick+0x10>)
 8006356:	681b      	ldr	r3, [r3, #0]
}
 8006358:	0018      	movs	r0, r3
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	46c0      	nop			; (mov r8, r8)
 8006360:	20000ff8 	.word	0x20000ff8

08006364 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800636c:	230f      	movs	r3, #15
 800636e:	18fb      	adds	r3, r7, r3
 8006370:	2200      	movs	r2, #0
 8006372:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8006374:	2300      	movs	r3, #0
 8006376:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d101      	bne.n	8006382 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e125      	b.n	80065ce <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10a      	bne.n	80063a0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2234      	movs	r2, #52	; 0x34
 8006394:	2100      	movs	r1, #0
 8006396:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	0018      	movs	r0, r3
 800639c:	f7ff fd4c 	bl	8005e38 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a4:	2210      	movs	r2, #16
 80063a6:	4013      	ands	r3, r2
 80063a8:	d000      	beq.n	80063ac <HAL_ADC_Init+0x48>
 80063aa:	e103      	b.n	80065b4 <HAL_ADC_Init+0x250>
 80063ac:	230f      	movs	r3, #15
 80063ae:	18fb      	adds	r3, r7, r3
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d000      	beq.n	80063b8 <HAL_ADC_Init+0x54>
 80063b6:	e0fd      	b.n	80065b4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	2204      	movs	r2, #4
 80063c0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80063c2:	d000      	beq.n	80063c6 <HAL_ADC_Init+0x62>
 80063c4:	e0f6      	b.n	80065b4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ca:	4a83      	ldr	r2, [pc, #524]	; (80065d8 <HAL_ADC_Init+0x274>)
 80063cc:	4013      	ands	r3, r2
 80063ce:	2202      	movs	r2, #2
 80063d0:	431a      	orrs	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	2203      	movs	r2, #3
 80063de:	4013      	ands	r3, r2
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d112      	bne.n	800640a <HAL_ADC_Init+0xa6>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2201      	movs	r2, #1
 80063ec:	4013      	ands	r3, r2
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d009      	beq.n	8006406 <HAL_ADC_Init+0xa2>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68da      	ldr	r2, [r3, #12]
 80063f8:	2380      	movs	r3, #128	; 0x80
 80063fa:	021b      	lsls	r3, r3, #8
 80063fc:	401a      	ands	r2, r3
 80063fe:	2380      	movs	r3, #128	; 0x80
 8006400:	021b      	lsls	r3, r3, #8
 8006402:	429a      	cmp	r2, r3
 8006404:	d101      	bne.n	800640a <HAL_ADC_Init+0xa6>
 8006406:	2301      	movs	r3, #1
 8006408:	e000      	b.n	800640c <HAL_ADC_Init+0xa8>
 800640a:	2300      	movs	r3, #0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d116      	bne.n	800643e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	2218      	movs	r2, #24
 8006418:	4393      	bics	r3, r2
 800641a:	0019      	movs	r1, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	689a      	ldr	r2, [r3, #8]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	430a      	orrs	r2, r1
 8006426:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	0899      	lsrs	r1, r3, #2
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	685a      	ldr	r2, [r3, #4]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	430a      	orrs	r2, r1
 800643c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68da      	ldr	r2, [r3, #12]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4964      	ldr	r1, [pc, #400]	; (80065dc <HAL_ADC_Init+0x278>)
 800644a:	400a      	ands	r2, r1
 800644c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	7e1b      	ldrb	r3, [r3, #24]
 8006452:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	7e5b      	ldrb	r3, [r3, #25]
 8006458:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800645a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	7e9b      	ldrb	r3, [r3, #26]
 8006460:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8006462:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006468:	2b01      	cmp	r3, #1
 800646a:	d002      	beq.n	8006472 <HAL_ADC_Init+0x10e>
 800646c:	2380      	movs	r3, #128	; 0x80
 800646e:	015b      	lsls	r3, r3, #5
 8006470:	e000      	b.n	8006474 <HAL_ADC_Init+0x110>
 8006472:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8006474:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800647a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	2b02      	cmp	r3, #2
 8006482:	d101      	bne.n	8006488 <HAL_ADC_Init+0x124>
 8006484:	2304      	movs	r3, #4
 8006486:	e000      	b.n	800648a <HAL_ADC_Init+0x126>
 8006488:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800648a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2124      	movs	r1, #36	; 0x24
 8006490:	5c5b      	ldrb	r3, [r3, r1]
 8006492:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8006494:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	4313      	orrs	r3, r2
 800649a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	7edb      	ldrb	r3, [r3, #27]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d115      	bne.n	80064d0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	7e9b      	ldrb	r3, [r3, #26]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d105      	bne.n	80064b8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	2280      	movs	r2, #128	; 0x80
 80064b0:	0252      	lsls	r2, r2, #9
 80064b2:	4313      	orrs	r3, r2
 80064b4:	60bb      	str	r3, [r7, #8]
 80064b6:	e00b      	b.n	80064d0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064bc:	2220      	movs	r2, #32
 80064be:	431a      	orrs	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c8:	2201      	movs	r2, #1
 80064ca:	431a      	orrs	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	69da      	ldr	r2, [r3, #28]
 80064d4:	23c2      	movs	r3, #194	; 0xc2
 80064d6:	33ff      	adds	r3, #255	; 0xff
 80064d8:	429a      	cmp	r2, r3
 80064da:	d007      	beq.n	80064ec <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80064e4:	4313      	orrs	r3, r2
 80064e6:	68ba      	ldr	r2, [r7, #8]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	68d9      	ldr	r1, [r3, #12]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68ba      	ldr	r2, [r7, #8]
 80064f8:	430a      	orrs	r2, r1
 80064fa:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006500:	2380      	movs	r3, #128	; 0x80
 8006502:	055b      	lsls	r3, r3, #21
 8006504:	429a      	cmp	r2, r3
 8006506:	d01b      	beq.n	8006540 <HAL_ADC_Init+0x1dc>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800650c:	2b01      	cmp	r3, #1
 800650e:	d017      	beq.n	8006540 <HAL_ADC_Init+0x1dc>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006514:	2b02      	cmp	r3, #2
 8006516:	d013      	beq.n	8006540 <HAL_ADC_Init+0x1dc>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651c:	2b03      	cmp	r3, #3
 800651e:	d00f      	beq.n	8006540 <HAL_ADC_Init+0x1dc>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006524:	2b04      	cmp	r3, #4
 8006526:	d00b      	beq.n	8006540 <HAL_ADC_Init+0x1dc>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652c:	2b05      	cmp	r3, #5
 800652e:	d007      	beq.n	8006540 <HAL_ADC_Init+0x1dc>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006534:	2b06      	cmp	r3, #6
 8006536:	d003      	beq.n	8006540 <HAL_ADC_Init+0x1dc>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653c:	2b07      	cmp	r3, #7
 800653e:	d112      	bne.n	8006566 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	695a      	ldr	r2, [r3, #20]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2107      	movs	r1, #7
 800654c:	438a      	bics	r2, r1
 800654e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	6959      	ldr	r1, [r3, #20]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655a:	2207      	movs	r2, #7
 800655c:	401a      	ands	r2, r3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	430a      	orrs	r2, r1
 8006564:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	4a1c      	ldr	r2, [pc, #112]	; (80065e0 <HAL_ADC_Init+0x27c>)
 800656e:	4013      	ands	r3, r2
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	429a      	cmp	r2, r3
 8006574:	d10b      	bne.n	800658e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006580:	2203      	movs	r2, #3
 8006582:	4393      	bics	r3, r2
 8006584:	2201      	movs	r2, #1
 8006586:	431a      	orrs	r2, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800658c:	e01c      	b.n	80065c8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006592:	2212      	movs	r2, #18
 8006594:	4393      	bics	r3, r2
 8006596:	2210      	movs	r2, #16
 8006598:	431a      	orrs	r2, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065a2:	2201      	movs	r2, #1
 80065a4:	431a      	orrs	r2, r3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80065aa:	230f      	movs	r3, #15
 80065ac:	18fb      	adds	r3, r7, r3
 80065ae:	2201      	movs	r2, #1
 80065b0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80065b2:	e009      	b.n	80065c8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b8:	2210      	movs	r2, #16
 80065ba:	431a      	orrs	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80065c0:	230f      	movs	r3, #15
 80065c2:	18fb      	adds	r3, r7, r3
 80065c4:	2201      	movs	r2, #1
 80065c6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80065c8:	230f      	movs	r3, #15
 80065ca:	18fb      	adds	r3, r7, r3
 80065cc:	781b      	ldrb	r3, [r3, #0]
}
 80065ce:	0018      	movs	r0, r3
 80065d0:	46bd      	mov	sp, r7
 80065d2:	b004      	add	sp, #16
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	46c0      	nop			; (mov r8, r8)
 80065d8:	fffffefd 	.word	0xfffffefd
 80065dc:	fffe0219 	.word	0xfffe0219
 80065e0:	833fffe7 	.word	0x833fffe7

080065e4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80065e4:	b590      	push	{r4, r7, lr}
 80065e6:	b087      	sub	sp, #28
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80065f0:	2317      	movs	r3, #23
 80065f2:	18fb      	adds	r3, r7, r3
 80065f4:	2200      	movs	r2, #0
 80065f6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	2204      	movs	r2, #4
 8006600:	4013      	ands	r3, r2
 8006602:	d15e      	bne.n	80066c2 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2234      	movs	r2, #52	; 0x34
 8006608:	5c9b      	ldrb	r3, [r3, r2]
 800660a:	2b01      	cmp	r3, #1
 800660c:	d101      	bne.n	8006612 <HAL_ADC_Start_DMA+0x2e>
 800660e:	2302      	movs	r3, #2
 8006610:	e05e      	b.n	80066d0 <HAL_ADC_Start_DMA+0xec>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2234      	movs	r2, #52	; 0x34
 8006616:	2101      	movs	r1, #1
 8006618:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	7e5b      	ldrb	r3, [r3, #25]
 800661e:	2b01      	cmp	r3, #1
 8006620:	d007      	beq.n	8006632 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8006622:	2317      	movs	r3, #23
 8006624:	18fc      	adds	r4, r7, r3
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	0018      	movs	r0, r3
 800662a:	f000 f983 	bl	8006934 <ADC_Enable>
 800662e:	0003      	movs	r3, r0
 8006630:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006632:	2317      	movs	r3, #23
 8006634:	18fb      	adds	r3, r7, r3
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d146      	bne.n	80066ca <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006640:	4a25      	ldr	r2, [pc, #148]	; (80066d8 <HAL_ADC_Start_DMA+0xf4>)
 8006642:	4013      	ands	r3, r2
 8006644:	2280      	movs	r2, #128	; 0x80
 8006646:	0052      	lsls	r2, r2, #1
 8006648:	431a      	orrs	r2, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2200      	movs	r2, #0
 8006652:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2234      	movs	r2, #52	; 0x34
 8006658:	2100      	movs	r1, #0
 800665a:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006660:	4a1e      	ldr	r2, [pc, #120]	; (80066dc <HAL_ADC_Start_DMA+0xf8>)
 8006662:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006668:	4a1d      	ldr	r2, [pc, #116]	; (80066e0 <HAL_ADC_Start_DMA+0xfc>)
 800666a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006670:	4a1c      	ldr	r2, [pc, #112]	; (80066e4 <HAL_ADC_Start_DMA+0x100>)
 8006672:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	221c      	movs	r2, #28
 800667a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	685a      	ldr	r2, [r3, #4]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2110      	movs	r1, #16
 8006688:	430a      	orrs	r2, r1
 800668a:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68da      	ldr	r2, [r3, #12]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2101      	movs	r1, #1
 8006698:	430a      	orrs	r2, r1
 800669a:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	3340      	adds	r3, #64	; 0x40
 80066a6:	0019      	movs	r1, r3
 80066a8:	68ba      	ldr	r2, [r7, #8]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f000 ffa7 	bl	80075fe <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	689a      	ldr	r2, [r3, #8]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2104      	movs	r1, #4
 80066bc:	430a      	orrs	r2, r1
 80066be:	609a      	str	r2, [r3, #8]
 80066c0:	e003      	b.n	80066ca <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80066c2:	2317      	movs	r3, #23
 80066c4:	18fb      	adds	r3, r7, r3
 80066c6:	2202      	movs	r2, #2
 80066c8:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 80066ca:	2317      	movs	r3, #23
 80066cc:	18fb      	adds	r3, r7, r3
 80066ce:	781b      	ldrb	r3, [r3, #0]
}
 80066d0:	0018      	movs	r0, r3
 80066d2:	46bd      	mov	sp, r7
 80066d4:	b007      	add	sp, #28
 80066d6:	bd90      	pop	{r4, r7, pc}
 80066d8:	fffff0fe 	.word	0xfffff0fe
 80066dc:	08006a3d 	.word	0x08006a3d
 80066e0:	08006af1 	.word	0x08006af1
 80066e4:	08006b0f 	.word	0x08006b0f

080066e8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80066f0:	46c0      	nop			; (mov r8, r8)
 80066f2:	46bd      	mov	sp, r7
 80066f4:	b002      	add	sp, #8
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006700:	46c0      	nop			; (mov r8, r8)
 8006702:	46bd      	mov	sp, r7
 8006704:	b002      	add	sp, #8
 8006706:	bd80      	pop	{r7, pc}

08006708 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006710:	46c0      	nop			; (mov r8, r8)
 8006712:	46bd      	mov	sp, r7
 8006714:	b002      	add	sp, #8
 8006716:	bd80      	pop	{r7, pc}

08006718 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006722:	230f      	movs	r3, #15
 8006724:	18fb      	adds	r3, r7, r3
 8006726:	2200      	movs	r2, #0
 8006728:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800672a:	2300      	movs	r3, #0
 800672c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006732:	2380      	movs	r3, #128	; 0x80
 8006734:	055b      	lsls	r3, r3, #21
 8006736:	429a      	cmp	r2, r3
 8006738:	d011      	beq.n	800675e <HAL_ADC_ConfigChannel+0x46>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800673e:	2b01      	cmp	r3, #1
 8006740:	d00d      	beq.n	800675e <HAL_ADC_ConfigChannel+0x46>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006746:	2b02      	cmp	r3, #2
 8006748:	d009      	beq.n	800675e <HAL_ADC_ConfigChannel+0x46>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674e:	2b03      	cmp	r3, #3
 8006750:	d005      	beq.n	800675e <HAL_ADC_ConfigChannel+0x46>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006756:	2b04      	cmp	r3, #4
 8006758:	d001      	beq.n	800675e <HAL_ADC_ConfigChannel+0x46>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2234      	movs	r2, #52	; 0x34
 8006762:	5c9b      	ldrb	r3, [r3, r2]
 8006764:	2b01      	cmp	r3, #1
 8006766:	d101      	bne.n	800676c <HAL_ADC_ConfigChannel+0x54>
 8006768:	2302      	movs	r3, #2
 800676a:	e0d0      	b.n	800690e <HAL_ADC_ConfigChannel+0x1f6>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2234      	movs	r2, #52	; 0x34
 8006770:	2101      	movs	r1, #1
 8006772:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	2204      	movs	r2, #4
 800677c:	4013      	ands	r3, r2
 800677e:	d000      	beq.n	8006782 <HAL_ADC_ConfigChannel+0x6a>
 8006780:	e0b4      	b.n	80068ec <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	4a64      	ldr	r2, [pc, #400]	; (8006918 <HAL_ADC_ConfigChannel+0x200>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d100      	bne.n	800678e <HAL_ADC_ConfigChannel+0x76>
 800678c:	e082      	b.n	8006894 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2201      	movs	r2, #1
 800679a:	409a      	lsls	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	430a      	orrs	r2, r1
 80067a2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067a8:	2380      	movs	r3, #128	; 0x80
 80067aa:	055b      	lsls	r3, r3, #21
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d037      	beq.n	8006820 <HAL_ADC_ConfigChannel+0x108>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d033      	beq.n	8006820 <HAL_ADC_ConfigChannel+0x108>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d02f      	beq.n	8006820 <HAL_ADC_ConfigChannel+0x108>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c4:	2b03      	cmp	r3, #3
 80067c6:	d02b      	beq.n	8006820 <HAL_ADC_ConfigChannel+0x108>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067cc:	2b04      	cmp	r3, #4
 80067ce:	d027      	beq.n	8006820 <HAL_ADC_ConfigChannel+0x108>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d4:	2b05      	cmp	r3, #5
 80067d6:	d023      	beq.n	8006820 <HAL_ADC_ConfigChannel+0x108>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067dc:	2b06      	cmp	r3, #6
 80067de:	d01f      	beq.n	8006820 <HAL_ADC_ConfigChannel+0x108>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e4:	2b07      	cmp	r3, #7
 80067e6:	d01b      	beq.n	8006820 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	689a      	ldr	r2, [r3, #8]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	2107      	movs	r1, #7
 80067f4:	400b      	ands	r3, r1
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d012      	beq.n	8006820 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	695a      	ldr	r2, [r3, #20]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2107      	movs	r1, #7
 8006806:	438a      	bics	r2, r1
 8006808:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	6959      	ldr	r1, [r3, #20]
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	2207      	movs	r2, #7
 8006816:	401a      	ands	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	430a      	orrs	r2, r1
 800681e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2b10      	cmp	r3, #16
 8006826:	d007      	beq.n	8006838 <HAL_ADC_ConfigChannel+0x120>
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2b11      	cmp	r3, #17
 800682e:	d003      	beq.n	8006838 <HAL_ADC_ConfigChannel+0x120>
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2b12      	cmp	r3, #18
 8006836:	d163      	bne.n	8006900 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8006838:	4b38      	ldr	r3, [pc, #224]	; (800691c <HAL_ADC_ConfigChannel+0x204>)
 800683a:	6819      	ldr	r1, [r3, #0]
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2b10      	cmp	r3, #16
 8006842:	d009      	beq.n	8006858 <HAL_ADC_ConfigChannel+0x140>
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2b11      	cmp	r3, #17
 800684a:	d102      	bne.n	8006852 <HAL_ADC_ConfigChannel+0x13a>
 800684c:	2380      	movs	r3, #128	; 0x80
 800684e:	03db      	lsls	r3, r3, #15
 8006850:	e004      	b.n	800685c <HAL_ADC_ConfigChannel+0x144>
 8006852:	2380      	movs	r3, #128	; 0x80
 8006854:	045b      	lsls	r3, r3, #17
 8006856:	e001      	b.n	800685c <HAL_ADC_ConfigChannel+0x144>
 8006858:	2380      	movs	r3, #128	; 0x80
 800685a:	041b      	lsls	r3, r3, #16
 800685c:	4a2f      	ldr	r2, [pc, #188]	; (800691c <HAL_ADC_ConfigChannel+0x204>)
 800685e:	430b      	orrs	r3, r1
 8006860:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2b10      	cmp	r3, #16
 8006868:	d14a      	bne.n	8006900 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800686a:	4b2d      	ldr	r3, [pc, #180]	; (8006920 <HAL_ADC_ConfigChannel+0x208>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	492d      	ldr	r1, [pc, #180]	; (8006924 <HAL_ADC_ConfigChannel+0x20c>)
 8006870:	0018      	movs	r0, r3
 8006872:	f7f9 fc5b 	bl	800012c <__udivsi3>
 8006876:	0003      	movs	r3, r0
 8006878:	001a      	movs	r2, r3
 800687a:	0013      	movs	r3, r2
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	189b      	adds	r3, r3, r2
 8006880:	005b      	lsls	r3, r3, #1
 8006882:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006884:	e002      	b.n	800688c <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	3b01      	subs	r3, #1
 800688a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1f9      	bne.n	8006886 <HAL_ADC_ConfigChannel+0x16e>
 8006892:	e035      	b.n	8006900 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2101      	movs	r1, #1
 80068a0:	4099      	lsls	r1, r3
 80068a2:	000b      	movs	r3, r1
 80068a4:	43d9      	mvns	r1, r3
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	400a      	ands	r2, r1
 80068ac:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2b10      	cmp	r3, #16
 80068b4:	d007      	beq.n	80068c6 <HAL_ADC_ConfigChannel+0x1ae>
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2b11      	cmp	r3, #17
 80068bc:	d003      	beq.n	80068c6 <HAL_ADC_ConfigChannel+0x1ae>
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2b12      	cmp	r3, #18
 80068c4:	d11c      	bne.n	8006900 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80068c6:	4b15      	ldr	r3, [pc, #84]	; (800691c <HAL_ADC_ConfigChannel+0x204>)
 80068c8:	6819      	ldr	r1, [r3, #0]
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2b10      	cmp	r3, #16
 80068d0:	d007      	beq.n	80068e2 <HAL_ADC_ConfigChannel+0x1ca>
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2b11      	cmp	r3, #17
 80068d8:	d101      	bne.n	80068de <HAL_ADC_ConfigChannel+0x1c6>
 80068da:	4b13      	ldr	r3, [pc, #76]	; (8006928 <HAL_ADC_ConfigChannel+0x210>)
 80068dc:	e002      	b.n	80068e4 <HAL_ADC_ConfigChannel+0x1cc>
 80068de:	4b13      	ldr	r3, [pc, #76]	; (800692c <HAL_ADC_ConfigChannel+0x214>)
 80068e0:	e000      	b.n	80068e4 <HAL_ADC_ConfigChannel+0x1cc>
 80068e2:	4b13      	ldr	r3, [pc, #76]	; (8006930 <HAL_ADC_ConfigChannel+0x218>)
 80068e4:	4a0d      	ldr	r2, [pc, #52]	; (800691c <HAL_ADC_ConfigChannel+0x204>)
 80068e6:	400b      	ands	r3, r1
 80068e8:	6013      	str	r3, [r2, #0]
 80068ea:	e009      	b.n	8006900 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f0:	2220      	movs	r2, #32
 80068f2:	431a      	orrs	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80068f8:	230f      	movs	r3, #15
 80068fa:	18fb      	adds	r3, r7, r3
 80068fc:	2201      	movs	r2, #1
 80068fe:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2234      	movs	r2, #52	; 0x34
 8006904:	2100      	movs	r1, #0
 8006906:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8006908:	230f      	movs	r3, #15
 800690a:	18fb      	adds	r3, r7, r3
 800690c:	781b      	ldrb	r3, [r3, #0]
}
 800690e:	0018      	movs	r0, r3
 8006910:	46bd      	mov	sp, r7
 8006912:	b004      	add	sp, #16
 8006914:	bd80      	pop	{r7, pc}
 8006916:	46c0      	nop			; (mov r8, r8)
 8006918:	00001001 	.word	0x00001001
 800691c:	40012708 	.word	0x40012708
 8006920:	20000000 	.word	0x20000000
 8006924:	000f4240 	.word	0x000f4240
 8006928:	ffbfffff 	.word	0xffbfffff
 800692c:	feffffff 	.word	0xfeffffff
 8006930:	ff7fffff 	.word	0xff7fffff

08006934 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800693c:	2300      	movs	r3, #0
 800693e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8006940:	2300      	movs	r3, #0
 8006942:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	2203      	movs	r2, #3
 800694c:	4013      	ands	r3, r2
 800694e:	2b01      	cmp	r3, #1
 8006950:	d112      	bne.n	8006978 <ADC_Enable+0x44>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2201      	movs	r2, #1
 800695a:	4013      	ands	r3, r2
 800695c:	2b01      	cmp	r3, #1
 800695e:	d009      	beq.n	8006974 <ADC_Enable+0x40>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68da      	ldr	r2, [r3, #12]
 8006966:	2380      	movs	r3, #128	; 0x80
 8006968:	021b      	lsls	r3, r3, #8
 800696a:	401a      	ands	r2, r3
 800696c:	2380      	movs	r3, #128	; 0x80
 800696e:	021b      	lsls	r3, r3, #8
 8006970:	429a      	cmp	r2, r3
 8006972:	d101      	bne.n	8006978 <ADC_Enable+0x44>
 8006974:	2301      	movs	r3, #1
 8006976:	e000      	b.n	800697a <ADC_Enable+0x46>
 8006978:	2300      	movs	r3, #0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d152      	bne.n	8006a24 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	4a2a      	ldr	r2, [pc, #168]	; (8006a30 <ADC_Enable+0xfc>)
 8006986:	4013      	ands	r3, r2
 8006988:	d00d      	beq.n	80069a6 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698e:	2210      	movs	r2, #16
 8006990:	431a      	orrs	r2, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800699a:	2201      	movs	r2, #1
 800699c:	431a      	orrs	r2, r3
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e03f      	b.n	8006a26 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	689a      	ldr	r2, [r3, #8]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2101      	movs	r1, #1
 80069b2:	430a      	orrs	r2, r1
 80069b4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80069b6:	4b1f      	ldr	r3, [pc, #124]	; (8006a34 <ADC_Enable+0x100>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	491f      	ldr	r1, [pc, #124]	; (8006a38 <ADC_Enable+0x104>)
 80069bc:	0018      	movs	r0, r3
 80069be:	f7f9 fbb5 	bl	800012c <__udivsi3>
 80069c2:	0003      	movs	r3, r0
 80069c4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80069c6:	e002      	b.n	80069ce <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	3b01      	subs	r3, #1
 80069cc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1f9      	bne.n	80069c8 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80069d4:	f7ff fcbc 	bl	8006350 <HAL_GetTick>
 80069d8:	0003      	movs	r3, r0
 80069da:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80069dc:	e01b      	b.n	8006a16 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80069de:	f7ff fcb7 	bl	8006350 <HAL_GetTick>
 80069e2:	0002      	movs	r2, r0
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	1ad3      	subs	r3, r2, r3
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	d914      	bls.n	8006a16 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2201      	movs	r2, #1
 80069f4:	4013      	ands	r3, r2
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d00d      	beq.n	8006a16 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069fe:	2210      	movs	r2, #16
 8006a00:	431a      	orrs	r2, r3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	431a      	orrs	r2, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e007      	b.n	8006a26 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	4013      	ands	r3, r2
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d1dc      	bne.n	80069de <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	0018      	movs	r0, r3
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	b004      	add	sp, #16
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	46c0      	nop			; (mov r8, r8)
 8006a30:	80000017 	.word	0x80000017
 8006a34:	20000000 	.word	0x20000000
 8006a38:	000f4240 	.word	0x000f4240

08006a3c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a48:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a4e:	2250      	movs	r2, #80	; 0x50
 8006a50:	4013      	ands	r3, r2
 8006a52:	d140      	bne.n	8006ad6 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a58:	2280      	movs	r2, #128	; 0x80
 8006a5a:	0092      	lsls	r2, r2, #2
 8006a5c:	431a      	orrs	r2, r3
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68da      	ldr	r2, [r3, #12]
 8006a68:	23c0      	movs	r3, #192	; 0xc0
 8006a6a:	011b      	lsls	r3, r3, #4
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	d12d      	bne.n	8006acc <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d129      	bne.n	8006acc <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2208      	movs	r2, #8
 8006a80:	4013      	ands	r3, r2
 8006a82:	2b08      	cmp	r3, #8
 8006a84:	d122      	bne.n	8006acc <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	2204      	movs	r2, #4
 8006a8e:	4013      	ands	r3, r2
 8006a90:	d110      	bne.n	8006ab4 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	685a      	ldr	r2, [r3, #4]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	210c      	movs	r1, #12
 8006a9e:	438a      	bics	r2, r1
 8006aa0:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa6:	4a11      	ldr	r2, [pc, #68]	; (8006aec <ADC_DMAConvCplt+0xb0>)
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	2201      	movs	r2, #1
 8006aac:	431a      	orrs	r2, r3
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	639a      	str	r2, [r3, #56]	; 0x38
 8006ab2:	e00b      	b.n	8006acc <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab8:	2220      	movs	r2, #32
 8006aba:	431a      	orrs	r2, r3
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	431a      	orrs	r2, r3
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	0018      	movs	r0, r3
 8006ad0:	f7ff fe0a 	bl	80066e8 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8006ad4:	e005      	b.n	8006ae2 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	0010      	movs	r0, r2
 8006ae0:	4798      	blx	r3
}
 8006ae2:	46c0      	nop			; (mov r8, r8)
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	b004      	add	sp, #16
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	46c0      	nop			; (mov r8, r8)
 8006aec:	fffffefe 	.word	0xfffffefe

08006af0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afc:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	0018      	movs	r0, r3
 8006b02:	f7ff fdf9 	bl	80066f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006b06:	46c0      	nop			; (mov r8, r8)
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	b004      	add	sp, #16
 8006b0c:	bd80      	pop	{r7, pc}

08006b0e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	b084      	sub	sp, #16
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b20:	2240      	movs	r2, #64	; 0x40
 8006b22:	431a      	orrs	r2, r3
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b2c:	2204      	movs	r2, #4
 8006b2e:	431a      	orrs	r2, r3
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	0018      	movs	r0, r3
 8006b38:	f7ff fde6 	bl	8006708 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006b3c:	46c0      	nop			; (mov r8, r8)
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	b004      	add	sp, #16
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d101      	bne.n	8006b56 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e11f      	b.n	8006d96 <HAL_CAN_Init+0x252>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2220      	movs	r2, #32
 8006b5a:	5c9b      	ldrb	r3, [r3, r2]
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d132      	bne.n	8006bc8 <HAL_CAN_Init+0x84>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a8e      	ldr	r2, [pc, #568]	; (8006da0 <HAL_CAN_Init+0x25c>)
 8006b66:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a8e      	ldr	r2, [pc, #568]	; (8006da4 <HAL_CAN_Init+0x260>)
 8006b6c:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a8d      	ldr	r2, [pc, #564]	; (8006da8 <HAL_CAN_Init+0x264>)
 8006b72:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a8d      	ldr	r2, [pc, #564]	; (8006dac <HAL_CAN_Init+0x268>)
 8006b78:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a8c      	ldr	r2, [pc, #560]	; (8006db0 <HAL_CAN_Init+0x26c>)
 8006b7e:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a8c      	ldr	r2, [pc, #560]	; (8006db4 <HAL_CAN_Init+0x270>)
 8006b84:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a8b      	ldr	r2, [pc, #556]	; (8006db8 <HAL_CAN_Init+0x274>)
 8006b8a:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4a8b      	ldr	r2, [pc, #556]	; (8006dbc <HAL_CAN_Init+0x278>)
 8006b90:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a8a      	ldr	r2, [pc, #552]	; (8006dc0 <HAL_CAN_Init+0x27c>)
 8006b96:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a8a      	ldr	r2, [pc, #552]	; (8006dc4 <HAL_CAN_Init+0x280>)
 8006b9c:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a89      	ldr	r2, [pc, #548]	; (8006dc8 <HAL_CAN_Init+0x284>)
 8006ba2:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a89      	ldr	r2, [pc, #548]	; (8006dcc <HAL_CAN_Init+0x288>)
 8006ba8:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a88      	ldr	r2, [pc, #544]	; (8006dd0 <HAL_CAN_Init+0x28c>)
 8006bae:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d102      	bne.n	8006bbe <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4a86      	ldr	r2, [pc, #536]	; (8006dd4 <HAL_CAN_Init+0x290>)
 8006bbc:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	0010      	movs	r0, r2
 8006bc6:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2101      	movs	r1, #1
 8006bd4:	430a      	orrs	r2, r1
 8006bd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006bd8:	f7ff fbba 	bl	8006350 <HAL_GetTick>
 8006bdc:	0003      	movs	r3, r0
 8006bde:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006be0:	e013      	b.n	8006c0a <HAL_CAN_Init+0xc6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006be2:	f7ff fbb5 	bl	8006350 <HAL_GetTick>
 8006be6:	0002      	movs	r2, r0
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	1ad3      	subs	r3, r2, r3
 8006bec:	2b0a      	cmp	r3, #10
 8006bee:	d90c      	bls.n	8006c0a <HAL_CAN_Init+0xc6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf4:	2280      	movs	r2, #128	; 0x80
 8006bf6:	0292      	lsls	r2, r2, #10
 8006bf8:	431a      	orrs	r2, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2220      	movs	r2, #32
 8006c02:	2105      	movs	r1, #5
 8006c04:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e0c5      	b.n	8006d96 <HAL_CAN_Init+0x252>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	2201      	movs	r2, #1
 8006c12:	4013      	ands	r3, r2
 8006c14:	d0e5      	beq.n	8006be2 <HAL_CAN_Init+0x9e>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2102      	movs	r1, #2
 8006c22:	438a      	bics	r2, r1
 8006c24:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006c26:	f7ff fb93 	bl	8006350 <HAL_GetTick>
 8006c2a:	0003      	movs	r3, r0
 8006c2c:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006c2e:	e013      	b.n	8006c58 <HAL_CAN_Init+0x114>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006c30:	f7ff fb8e 	bl	8006350 <HAL_GetTick>
 8006c34:	0002      	movs	r2, r0
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	2b0a      	cmp	r3, #10
 8006c3c:	d90c      	bls.n	8006c58 <HAL_CAN_Init+0x114>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c42:	2280      	movs	r2, #128	; 0x80
 8006c44:	0292      	lsls	r2, r2, #10
 8006c46:	431a      	orrs	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2220      	movs	r2, #32
 8006c50:	2105      	movs	r1, #5
 8006c52:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	e09e      	b.n	8006d96 <HAL_CAN_Init+0x252>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	2202      	movs	r2, #2
 8006c60:	4013      	ands	r3, r2
 8006c62:	d1e5      	bne.n	8006c30 <HAL_CAN_Init+0xec>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	7e1b      	ldrb	r3, [r3, #24]
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d108      	bne.n	8006c7e <HAL_CAN_Init+0x13a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2180      	movs	r1, #128	; 0x80
 8006c78:	430a      	orrs	r2, r1
 8006c7a:	601a      	str	r2, [r3, #0]
 8006c7c:	e007      	b.n	8006c8e <HAL_CAN_Init+0x14a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2180      	movs	r1, #128	; 0x80
 8006c8a:	438a      	bics	r2, r1
 8006c8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	7e5b      	ldrb	r3, [r3, #25]
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d108      	bne.n	8006ca8 <HAL_CAN_Init+0x164>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2140      	movs	r1, #64	; 0x40
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	601a      	str	r2, [r3, #0]
 8006ca6:	e007      	b.n	8006cb8 <HAL_CAN_Init+0x174>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2140      	movs	r1, #64	; 0x40
 8006cb4:	438a      	bics	r2, r1
 8006cb6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	7e9b      	ldrb	r3, [r3, #26]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d108      	bne.n	8006cd2 <HAL_CAN_Init+0x18e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2120      	movs	r1, #32
 8006ccc:	430a      	orrs	r2, r1
 8006cce:	601a      	str	r2, [r3, #0]
 8006cd0:	e007      	b.n	8006ce2 <HAL_CAN_Init+0x19e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2120      	movs	r1, #32
 8006cde:	438a      	bics	r2, r1
 8006ce0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	7edb      	ldrb	r3, [r3, #27]
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d108      	bne.n	8006cfc <HAL_CAN_Init+0x1b8>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2110      	movs	r1, #16
 8006cf6:	438a      	bics	r2, r1
 8006cf8:	601a      	str	r2, [r3, #0]
 8006cfa:	e007      	b.n	8006d0c <HAL_CAN_Init+0x1c8>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2110      	movs	r1, #16
 8006d08:	430a      	orrs	r2, r1
 8006d0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	7f1b      	ldrb	r3, [r3, #28]
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d108      	bne.n	8006d26 <HAL_CAN_Init+0x1e2>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2108      	movs	r1, #8
 8006d20:	430a      	orrs	r2, r1
 8006d22:	601a      	str	r2, [r3, #0]
 8006d24:	e007      	b.n	8006d36 <HAL_CAN_Init+0x1f2>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2108      	movs	r1, #8
 8006d32:	438a      	bics	r2, r1
 8006d34:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	7f5b      	ldrb	r3, [r3, #29]
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d108      	bne.n	8006d50 <HAL_CAN_Init+0x20c>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2104      	movs	r1, #4
 8006d4a:	430a      	orrs	r2, r1
 8006d4c:	601a      	str	r2, [r3, #0]
 8006d4e:	e007      	b.n	8006d60 <HAL_CAN_Init+0x21c>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2104      	movs	r1, #4
 8006d5c:	438a      	bics	r2, r1
 8006d5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	689a      	ldr	r2, [r3, #8]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	431a      	orrs	r2, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	431a      	orrs	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	695b      	ldr	r3, [r3, #20]
 8006d74:	431a      	orrs	r2, r3
 8006d76:	0011      	movs	r1, r2
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	1e5a      	subs	r2, r3, #1
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	430a      	orrs	r2, r1
 8006d84:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2220      	movs	r2, #32
 8006d90:	2101      	movs	r1, #1
 8006d92:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006d94:	2300      	movs	r3, #0
}
 8006d96:	0018      	movs	r0, r3
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	b004      	add	sp, #16
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	46c0      	nop			; (mov r8, r8)
 8006da0:	0800724d 	.word	0x0800724d
 8006da4:	0800725d 	.word	0x0800725d
 8006da8:	0800726d 	.word	0x0800726d
 8006dac:	0800727d 	.word	0x0800727d
 8006db0:	080071ed 	.word	0x080071ed
 8006db4:	080071fd 	.word	0x080071fd
 8006db8:	0800720d 	.word	0x0800720d
 8006dbc:	0800721d 	.word	0x0800721d
 8006dc0:	0800722d 	.word	0x0800722d
 8006dc4:	0800723d 	.word	0x0800723d
 8006dc8:	0800728d 	.word	0x0800728d
 8006dcc:	0800729d 	.word	0x0800729d
 8006dd0:	080072ad 	.word	0x080072ad
 8006dd4:	08005f59 	.word	0x08005f59

08006dd8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b086      	sub	sp, #24
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006de8:	2013      	movs	r0, #19
 8006dea:	183b      	adds	r3, r7, r0
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	2120      	movs	r1, #32
 8006df0:	5c52      	ldrb	r2, [r2, r1]
 8006df2:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8006df4:	0002      	movs	r2, r0
 8006df6:	18bb      	adds	r3, r7, r2
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d004      	beq.n	8006e08 <HAL_CAN_ConfigFilter+0x30>
 8006dfe:	18bb      	adds	r3, r7, r2
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d000      	beq.n	8006e08 <HAL_CAN_ConfigFilter+0x30>
 8006e06:	e0cd      	b.n	8006fa4 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006e08:	697a      	ldr	r2, [r7, #20]
 8006e0a:	2380      	movs	r3, #128	; 0x80
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	58d3      	ldr	r3, [r2, r3]
 8006e10:	2201      	movs	r2, #1
 8006e12:	431a      	orrs	r2, r3
 8006e14:	0011      	movs	r1, r2
 8006e16:	697a      	ldr	r2, [r7, #20]
 8006e18:	2380      	movs	r3, #128	; 0x80
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	221f      	movs	r2, #31
 8006e24:	4013      	ands	r3, r2
 8006e26:	2201      	movs	r2, #1
 8006e28:	409a      	lsls	r2, r3
 8006e2a:	0013      	movs	r3, r2
 8006e2c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8006e2e:	697a      	ldr	r2, [r7, #20]
 8006e30:	2387      	movs	r3, #135	; 0x87
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	58d3      	ldr	r3, [r2, r3]
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	43d2      	mvns	r2, r2
 8006e3a:	401a      	ands	r2, r3
 8006e3c:	0011      	movs	r1, r2
 8006e3e:	697a      	ldr	r2, [r7, #20]
 8006e40:	2387      	movs	r3, #135	; 0x87
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	69db      	ldr	r3, [r3, #28]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d129      	bne.n	8006ea2 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8006e4e:	697a      	ldr	r2, [r7, #20]
 8006e50:	2383      	movs	r3, #131	; 0x83
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	58d3      	ldr	r3, [r2, r3]
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	43d2      	mvns	r2, r2
 8006e5a:	401a      	ands	r2, r3
 8006e5c:	0011      	movs	r1, r2
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	2383      	movs	r3, #131	; 0x83
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	041b      	lsls	r3, r3, #16
 8006e72:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006e78:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	3248      	adds	r2, #72	; 0x48
 8006e7e:	00d2      	lsls	r2, r2, #3
 8006e80:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	041b      	lsls	r3, r3, #16
 8006e8e:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006e94:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006e96:	6979      	ldr	r1, [r7, #20]
 8006e98:	3348      	adds	r3, #72	; 0x48
 8006e9a:	00db      	lsls	r3, r3, #3
 8006e9c:	18cb      	adds	r3, r1, r3
 8006e9e:	3304      	adds	r3, #4
 8006ea0:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	69db      	ldr	r3, [r3, #28]
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d128      	bne.n	8006efc <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8006eaa:	697a      	ldr	r2, [r7, #20]
 8006eac:	2383      	movs	r3, #131	; 0x83
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	58d2      	ldr	r2, [r2, r3]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	431a      	orrs	r2, r3
 8006eb6:	0011      	movs	r1, r2
 8006eb8:	697a      	ldr	r2, [r7, #20]
 8006eba:	2383      	movs	r3, #131	; 0x83
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	041b      	lsls	r3, r3, #16
 8006ecc:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006ed2:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	3248      	adds	r2, #72	; 0x48
 8006ed8:	00d2      	lsls	r2, r2, #3
 8006eda:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	041b      	lsls	r3, r3, #16
 8006ee8:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006eee:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006ef0:	6979      	ldr	r1, [r7, #20]
 8006ef2:	3348      	adds	r3, #72	; 0x48
 8006ef4:	00db      	lsls	r3, r3, #3
 8006ef6:	18cb      	adds	r3, r1, r3
 8006ef8:	3304      	adds	r3, #4
 8006efa:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	699b      	ldr	r3, [r3, #24]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d10c      	bne.n	8006f1e <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	2381      	movs	r3, #129	; 0x81
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	58d3      	ldr	r3, [r2, r3]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	43d2      	mvns	r2, r2
 8006f10:	401a      	ands	r2, r3
 8006f12:	0011      	movs	r1, r2
 8006f14:	697a      	ldr	r2, [r7, #20]
 8006f16:	2381      	movs	r3, #129	; 0x81
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	50d1      	str	r1, [r2, r3]
 8006f1c:	e00a      	b.n	8006f34 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8006f1e:	697a      	ldr	r2, [r7, #20]
 8006f20:	2381      	movs	r3, #129	; 0x81
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	58d2      	ldr	r2, [r2, r3]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	431a      	orrs	r2, r3
 8006f2a:	0011      	movs	r1, r2
 8006f2c:	697a      	ldr	r2, [r7, #20]
 8006f2e:	2381      	movs	r3, #129	; 0x81
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	691b      	ldr	r3, [r3, #16]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d10c      	bne.n	8006f56 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8006f3c:	697a      	ldr	r2, [r7, #20]
 8006f3e:	2385      	movs	r3, #133	; 0x85
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	58d3      	ldr	r3, [r2, r3]
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	43d2      	mvns	r2, r2
 8006f48:	401a      	ands	r2, r3
 8006f4a:	0011      	movs	r1, r2
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	2385      	movs	r3, #133	; 0x85
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	50d1      	str	r1, [r2, r3]
 8006f54:	e00a      	b.n	8006f6c <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8006f56:	697a      	ldr	r2, [r7, #20]
 8006f58:	2385      	movs	r3, #133	; 0x85
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	58d2      	ldr	r2, [r2, r3]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	431a      	orrs	r2, r3
 8006f62:	0011      	movs	r1, r2
 8006f64:	697a      	ldr	r2, [r7, #20]
 8006f66:	2385      	movs	r3, #133	; 0x85
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	6a1b      	ldr	r3, [r3, #32]
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d10a      	bne.n	8006f8a <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8006f74:	697a      	ldr	r2, [r7, #20]
 8006f76:	2387      	movs	r3, #135	; 0x87
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	58d2      	ldr	r2, [r2, r3]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	431a      	orrs	r2, r3
 8006f80:	0011      	movs	r1, r2
 8006f82:	697a      	ldr	r2, [r7, #20]
 8006f84:	2387      	movs	r3, #135	; 0x87
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006f8a:	697a      	ldr	r2, [r7, #20]
 8006f8c:	2380      	movs	r3, #128	; 0x80
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	58d3      	ldr	r3, [r2, r3]
 8006f92:	2201      	movs	r2, #1
 8006f94:	4393      	bics	r3, r2
 8006f96:	0019      	movs	r1, r3
 8006f98:	697a      	ldr	r2, [r7, #20]
 8006f9a:	2380      	movs	r3, #128	; 0x80
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	e007      	b.n	8006fb4 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa8:	2280      	movs	r2, #128	; 0x80
 8006faa:	02d2      	lsls	r2, r2, #11
 8006fac:	431a      	orrs	r2, r3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
  }
}
 8006fb4:	0018      	movs	r0, r3
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	b006      	add	sp, #24
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2220      	movs	r2, #32
 8006fc8:	5c9b      	ldrb	r3, [r3, r2]
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d12f      	bne.n	8007030 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2220      	movs	r2, #32
 8006fd4:	2102      	movs	r1, #2
 8006fd6:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2101      	movs	r1, #1
 8006fe4:	438a      	bics	r2, r1
 8006fe6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006fe8:	f7ff f9b2 	bl	8006350 <HAL_GetTick>
 8006fec:	0003      	movs	r3, r0
 8006fee:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006ff0:	e013      	b.n	800701a <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006ff2:	f7ff f9ad 	bl	8006350 <HAL_GetTick>
 8006ff6:	0002      	movs	r2, r0
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	1ad3      	subs	r3, r2, r3
 8006ffc:	2b0a      	cmp	r3, #10
 8006ffe:	d90c      	bls.n	800701a <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007004:	2280      	movs	r2, #128	; 0x80
 8007006:	0292      	lsls	r2, r2, #10
 8007008:	431a      	orrs	r2, r3
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2220      	movs	r2, #32
 8007012:	2105      	movs	r1, #5
 8007014:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	e012      	b.n	8007040 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	2201      	movs	r2, #1
 8007022:	4013      	ands	r3, r2
 8007024:	d1e5      	bne.n	8006ff2 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800702c:	2300      	movs	r3, #0
 800702e:	e007      	b.n	8007040 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007034:	2280      	movs	r2, #128	; 0x80
 8007036:	0312      	lsls	r2, r2, #12
 8007038:	431a      	orrs	r2, r3
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800703e:	2301      	movs	r3, #1
  }
}
 8007040:	0018      	movs	r0, r3
 8007042:	46bd      	mov	sp, r7
 8007044:	b004      	add	sp, #16
 8007046:	bd80      	pop	{r7, pc}

08007048 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b088      	sub	sp, #32
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	607a      	str	r2, [r7, #4]
 8007054:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8007056:	201f      	movs	r0, #31
 8007058:	183b      	adds	r3, r7, r0
 800705a:	68fa      	ldr	r2, [r7, #12]
 800705c:	2120      	movs	r1, #32
 800705e:	5c52      	ldrb	r2, [r2, r1]
 8007060:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800706a:	183b      	adds	r3, r7, r0
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	2b01      	cmp	r3, #1
 8007070:	d004      	beq.n	800707c <HAL_CAN_AddTxMessage+0x34>
 8007072:	183b      	adds	r3, r7, r0
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	2b02      	cmp	r3, #2
 8007078:	d000      	beq.n	800707c <HAL_CAN_AddTxMessage+0x34>
 800707a:	e0ab      	b.n	80071d4 <HAL_CAN_AddTxMessage+0x18c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800707c:	69ba      	ldr	r2, [r7, #24]
 800707e:	2380      	movs	r3, #128	; 0x80
 8007080:	04db      	lsls	r3, r3, #19
 8007082:	4013      	ands	r3, r2
 8007084:	d10a      	bne.n	800709c <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007086:	69ba      	ldr	r2, [r7, #24]
 8007088:	2380      	movs	r3, #128	; 0x80
 800708a:	051b      	lsls	r3, r3, #20
 800708c:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800708e:	d105      	bne.n	800709c <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8007090:	69ba      	ldr	r2, [r7, #24]
 8007092:	2380      	movs	r3, #128	; 0x80
 8007094:	055b      	lsls	r3, r3, #21
 8007096:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007098:	d100      	bne.n	800709c <HAL_CAN_AddTxMessage+0x54>
 800709a:	e092      	b.n	80071c2 <HAL_CAN_AddTxMessage+0x17a>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	0e1b      	lsrs	r3, r3, #24
 80070a0:	2203      	movs	r2, #3
 80070a2:	4013      	ands	r3, r2
 80070a4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80070a6:	2201      	movs	r2, #1
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	409a      	lsls	r2, r3
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d10c      	bne.n	80070d2 <HAL_CAN_AddTxMessage+0x8a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4311      	orrs	r1, r2
 80070c8:	697a      	ldr	r2, [r7, #20]
 80070ca:	3218      	adds	r2, #24
 80070cc:	0112      	lsls	r2, r2, #4
 80070ce:	50d1      	str	r1, [r2, r3]
 80070d0:	e00f      	b.n	80070f2 <HAL_CAN_AddTxMessage+0xaa>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80070dc:	431a      	orrs	r2, r3
 80070de:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 80070e8:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80070ea:	697a      	ldr	r2, [r7, #20]
 80070ec:	3218      	adds	r2, #24
 80070ee:	0112      	lsls	r2, r2, #4
 80070f0:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6819      	ldr	r1, [r3, #0]
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	691a      	ldr	r2, [r3, #16]
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	3318      	adds	r3, #24
 80070fe:	011b      	lsls	r3, r3, #4
 8007100:	18cb      	adds	r3, r1, r3
 8007102:	3304      	adds	r3, #4
 8007104:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	7d1b      	ldrb	r3, [r3, #20]
 800710a:	2b01      	cmp	r3, #1
 800710c:	d112      	bne.n	8007134 <HAL_CAN_AddTxMessage+0xec>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	3318      	adds	r3, #24
 8007116:	011b      	lsls	r3, r3, #4
 8007118:	18d3      	adds	r3, r2, r3
 800711a:	3304      	adds	r3, #4
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6819      	ldr	r1, [r3, #0]
 8007122:	2380      	movs	r3, #128	; 0x80
 8007124:	005b      	lsls	r3, r3, #1
 8007126:	431a      	orrs	r2, r3
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	3318      	adds	r3, #24
 800712c:	011b      	lsls	r3, r3, #4
 800712e:	18cb      	adds	r3, r1, r3
 8007130:	3304      	adds	r3, #4
 8007132:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	3307      	adds	r3, #7
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	061a      	lsls	r2, r3, #24
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	3306      	adds	r3, #6
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	041b      	lsls	r3, r3, #16
 8007144:	431a      	orrs	r2, r3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	3305      	adds	r3, #5
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	021b      	lsls	r3, r3, #8
 800714e:	431a      	orrs	r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	3304      	adds	r3, #4
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	0019      	movs	r1, r3
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6818      	ldr	r0, [r3, #0]
 800715c:	430a      	orrs	r2, r1
 800715e:	6979      	ldr	r1, [r7, #20]
 8007160:	23c6      	movs	r3, #198	; 0xc6
 8007162:	005b      	lsls	r3, r3, #1
 8007164:	0109      	lsls	r1, r1, #4
 8007166:	1841      	adds	r1, r0, r1
 8007168:	18cb      	adds	r3, r1, r3
 800716a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	3303      	adds	r3, #3
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	061a      	lsls	r2, r3, #24
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	3302      	adds	r3, #2
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	041b      	lsls	r3, r3, #16
 800717c:	431a      	orrs	r2, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	3301      	adds	r3, #1
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	021b      	lsls	r3, r3, #8
 8007186:	431a      	orrs	r2, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	0019      	movs	r1, r3
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6818      	ldr	r0, [r3, #0]
 8007192:	430a      	orrs	r2, r1
 8007194:	6979      	ldr	r1, [r7, #20]
 8007196:	23c4      	movs	r3, #196	; 0xc4
 8007198:	005b      	lsls	r3, r3, #1
 800719a:	0109      	lsls	r1, r1, #4
 800719c:	1841      	adds	r1, r0, r1
 800719e:	18cb      	adds	r3, r1, r3
 80071a0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	697a      	ldr	r2, [r7, #20]
 80071a8:	3218      	adds	r2, #24
 80071aa:	0112      	lsls	r2, r2, #4
 80071ac:	58d2      	ldr	r2, [r2, r3]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	2101      	movs	r1, #1
 80071b4:	4311      	orrs	r1, r2
 80071b6:	697a      	ldr	r2, [r7, #20]
 80071b8:	3218      	adds	r2, #24
 80071ba:	0112      	lsls	r2, r2, #4
 80071bc:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 80071be:	2300      	movs	r3, #0
 80071c0:	e010      	b.n	80071e4 <HAL_CAN_AddTxMessage+0x19c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c6:	2280      	movs	r2, #128	; 0x80
 80071c8:	0392      	lsls	r2, r2, #14
 80071ca:	431a      	orrs	r2, r3
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	e007      	b.n	80071e4 <HAL_CAN_AddTxMessage+0x19c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d8:	2280      	movs	r2, #128	; 0x80
 80071da:	02d2      	lsls	r2, r2, #11
 80071dc:	431a      	orrs	r2, r3
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
  }
}
 80071e4:	0018      	movs	r0, r3
 80071e6:	46bd      	mov	sp, r7
 80071e8:	b008      	add	sp, #32
 80071ea:	bd80      	pop	{r7, pc}

080071ec <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80071f4:	46c0      	nop			; (mov r8, r8)
 80071f6:	46bd      	mov	sp, r7
 80071f8:	b002      	add	sp, #8
 80071fa:	bd80      	pop	{r7, pc}

080071fc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8007204:	46c0      	nop			; (mov r8, r8)
 8007206:	46bd      	mov	sp, r7
 8007208:	b002      	add	sp, #8
 800720a:	bd80      	pop	{r7, pc}

0800720c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8007214:	46c0      	nop			; (mov r8, r8)
 8007216:	46bd      	mov	sp, r7
 8007218:	b002      	add	sp, #8
 800721a:	bd80      	pop	{r7, pc}

0800721c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8007224:	46c0      	nop			; (mov r8, r8)
 8007226:	46bd      	mov	sp, r7
 8007228:	b002      	add	sp, #8
 800722a:	bd80      	pop	{r7, pc}

0800722c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8007234:	46c0      	nop			; (mov r8, r8)
 8007236:	46bd      	mov	sp, r7
 8007238:	b002      	add	sp, #8
 800723a:	bd80      	pop	{r7, pc}

0800723c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8007244:	46c0      	nop			; (mov r8, r8)
 8007246:	46bd      	mov	sp, r7
 8007248:	b002      	add	sp, #8
 800724a:	bd80      	pop	{r7, pc}

0800724c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8007254:	46c0      	nop			; (mov r8, r8)
 8007256:	46bd      	mov	sp, r7
 8007258:	b002      	add	sp, #8
 800725a:	bd80      	pop	{r7, pc}

0800725c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8007264:	46c0      	nop			; (mov r8, r8)
 8007266:	46bd      	mov	sp, r7
 8007268:	b002      	add	sp, #8
 800726a:	bd80      	pop	{r7, pc}

0800726c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8007274:	46c0      	nop			; (mov r8, r8)
 8007276:	46bd      	mov	sp, r7
 8007278:	b002      	add	sp, #8
 800727a:	bd80      	pop	{r7, pc}

0800727c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8007284:	46c0      	nop			; (mov r8, r8)
 8007286:	46bd      	mov	sp, r7
 8007288:	b002      	add	sp, #8
 800728a:	bd80      	pop	{r7, pc}

0800728c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8007294:	46c0      	nop			; (mov r8, r8)
 8007296:	46bd      	mov	sp, r7
 8007298:	b002      	add	sp, #8
 800729a:	bd80      	pop	{r7, pc}

0800729c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80072a4:	46c0      	nop			; (mov r8, r8)
 80072a6:	46bd      	mov	sp, r7
 80072a8:	b002      	add	sp, #8
 80072aa:	bd80      	pop	{r7, pc}

080072ac <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80072b4:	46c0      	nop			; (mov r8, r8)
 80072b6:	46bd      	mov	sp, r7
 80072b8:	b002      	add	sp, #8
 80072ba:	bd80      	pop	{r7, pc}

080072bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	0002      	movs	r2, r0
 80072c4:	1dfb      	adds	r3, r7, #7
 80072c6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80072c8:	1dfb      	adds	r3, r7, #7
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	2b7f      	cmp	r3, #127	; 0x7f
 80072ce:	d809      	bhi.n	80072e4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80072d0:	1dfb      	adds	r3, r7, #7
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	001a      	movs	r2, r3
 80072d6:	231f      	movs	r3, #31
 80072d8:	401a      	ands	r2, r3
 80072da:	4b04      	ldr	r3, [pc, #16]	; (80072ec <__NVIC_EnableIRQ+0x30>)
 80072dc:	2101      	movs	r1, #1
 80072de:	4091      	lsls	r1, r2
 80072e0:	000a      	movs	r2, r1
 80072e2:	601a      	str	r2, [r3, #0]
  }
}
 80072e4:	46c0      	nop			; (mov r8, r8)
 80072e6:	46bd      	mov	sp, r7
 80072e8:	b002      	add	sp, #8
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	e000e100 	.word	0xe000e100

080072f0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	0002      	movs	r2, r0
 80072f8:	1dfb      	adds	r3, r7, #7
 80072fa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80072fc:	1dfb      	adds	r3, r7, #7
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	2b7f      	cmp	r3, #127	; 0x7f
 8007302:	d810      	bhi.n	8007326 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007304:	1dfb      	adds	r3, r7, #7
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	001a      	movs	r2, r3
 800730a:	231f      	movs	r3, #31
 800730c:	4013      	ands	r3, r2
 800730e:	4908      	ldr	r1, [pc, #32]	; (8007330 <__NVIC_DisableIRQ+0x40>)
 8007310:	2201      	movs	r2, #1
 8007312:	409a      	lsls	r2, r3
 8007314:	0013      	movs	r3, r2
 8007316:	2280      	movs	r2, #128	; 0x80
 8007318:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800731a:	f3bf 8f4f 	dsb	sy
}
 800731e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8007320:	f3bf 8f6f 	isb	sy
}
 8007324:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8007326:	46c0      	nop			; (mov r8, r8)
 8007328:	46bd      	mov	sp, r7
 800732a:	b002      	add	sp, #8
 800732c:	bd80      	pop	{r7, pc}
 800732e:	46c0      	nop			; (mov r8, r8)
 8007330:	e000e100 	.word	0xe000e100

08007334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007334:	b590      	push	{r4, r7, lr}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
 800733a:	0002      	movs	r2, r0
 800733c:	6039      	str	r1, [r7, #0]
 800733e:	1dfb      	adds	r3, r7, #7
 8007340:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007342:	1dfb      	adds	r3, r7, #7
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	2b7f      	cmp	r3, #127	; 0x7f
 8007348:	d828      	bhi.n	800739c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800734a:	4a2f      	ldr	r2, [pc, #188]	; (8007408 <__NVIC_SetPriority+0xd4>)
 800734c:	1dfb      	adds	r3, r7, #7
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	b25b      	sxtb	r3, r3
 8007352:	089b      	lsrs	r3, r3, #2
 8007354:	33c0      	adds	r3, #192	; 0xc0
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	589b      	ldr	r3, [r3, r2]
 800735a:	1dfa      	adds	r2, r7, #7
 800735c:	7812      	ldrb	r2, [r2, #0]
 800735e:	0011      	movs	r1, r2
 8007360:	2203      	movs	r2, #3
 8007362:	400a      	ands	r2, r1
 8007364:	00d2      	lsls	r2, r2, #3
 8007366:	21ff      	movs	r1, #255	; 0xff
 8007368:	4091      	lsls	r1, r2
 800736a:	000a      	movs	r2, r1
 800736c:	43d2      	mvns	r2, r2
 800736e:	401a      	ands	r2, r3
 8007370:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	019b      	lsls	r3, r3, #6
 8007376:	22ff      	movs	r2, #255	; 0xff
 8007378:	401a      	ands	r2, r3
 800737a:	1dfb      	adds	r3, r7, #7
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	0018      	movs	r0, r3
 8007380:	2303      	movs	r3, #3
 8007382:	4003      	ands	r3, r0
 8007384:	00db      	lsls	r3, r3, #3
 8007386:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007388:	481f      	ldr	r0, [pc, #124]	; (8007408 <__NVIC_SetPriority+0xd4>)
 800738a:	1dfb      	adds	r3, r7, #7
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	b25b      	sxtb	r3, r3
 8007390:	089b      	lsrs	r3, r3, #2
 8007392:	430a      	orrs	r2, r1
 8007394:	33c0      	adds	r3, #192	; 0xc0
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800739a:	e031      	b.n	8007400 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800739c:	4a1b      	ldr	r2, [pc, #108]	; (800740c <__NVIC_SetPriority+0xd8>)
 800739e:	1dfb      	adds	r3, r7, #7
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	0019      	movs	r1, r3
 80073a4:	230f      	movs	r3, #15
 80073a6:	400b      	ands	r3, r1
 80073a8:	3b08      	subs	r3, #8
 80073aa:	089b      	lsrs	r3, r3, #2
 80073ac:	3306      	adds	r3, #6
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	18d3      	adds	r3, r2, r3
 80073b2:	3304      	adds	r3, #4
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	1dfa      	adds	r2, r7, #7
 80073b8:	7812      	ldrb	r2, [r2, #0]
 80073ba:	0011      	movs	r1, r2
 80073bc:	2203      	movs	r2, #3
 80073be:	400a      	ands	r2, r1
 80073c0:	00d2      	lsls	r2, r2, #3
 80073c2:	21ff      	movs	r1, #255	; 0xff
 80073c4:	4091      	lsls	r1, r2
 80073c6:	000a      	movs	r2, r1
 80073c8:	43d2      	mvns	r2, r2
 80073ca:	401a      	ands	r2, r3
 80073cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	019b      	lsls	r3, r3, #6
 80073d2:	22ff      	movs	r2, #255	; 0xff
 80073d4:	401a      	ands	r2, r3
 80073d6:	1dfb      	adds	r3, r7, #7
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	0018      	movs	r0, r3
 80073dc:	2303      	movs	r3, #3
 80073de:	4003      	ands	r3, r0
 80073e0:	00db      	lsls	r3, r3, #3
 80073e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80073e4:	4809      	ldr	r0, [pc, #36]	; (800740c <__NVIC_SetPriority+0xd8>)
 80073e6:	1dfb      	adds	r3, r7, #7
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	001c      	movs	r4, r3
 80073ec:	230f      	movs	r3, #15
 80073ee:	4023      	ands	r3, r4
 80073f0:	3b08      	subs	r3, #8
 80073f2:	089b      	lsrs	r3, r3, #2
 80073f4:	430a      	orrs	r2, r1
 80073f6:	3306      	adds	r3, #6
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	18c3      	adds	r3, r0, r3
 80073fc:	3304      	adds	r3, #4
 80073fe:	601a      	str	r2, [r3, #0]
}
 8007400:	46c0      	nop			; (mov r8, r8)
 8007402:	46bd      	mov	sp, r7
 8007404:	b003      	add	sp, #12
 8007406:	bd90      	pop	{r4, r7, pc}
 8007408:	e000e100 	.word	0xe000e100
 800740c:	e000ed00 	.word	0xe000ed00

08007410 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	1e5a      	subs	r2, r3, #1
 800741c:	2380      	movs	r3, #128	; 0x80
 800741e:	045b      	lsls	r3, r3, #17
 8007420:	429a      	cmp	r2, r3
 8007422:	d301      	bcc.n	8007428 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007424:	2301      	movs	r3, #1
 8007426:	e010      	b.n	800744a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007428:	4b0a      	ldr	r3, [pc, #40]	; (8007454 <SysTick_Config+0x44>)
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	3a01      	subs	r2, #1
 800742e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007430:	2301      	movs	r3, #1
 8007432:	425b      	negs	r3, r3
 8007434:	2103      	movs	r1, #3
 8007436:	0018      	movs	r0, r3
 8007438:	f7ff ff7c 	bl	8007334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800743c:	4b05      	ldr	r3, [pc, #20]	; (8007454 <SysTick_Config+0x44>)
 800743e:	2200      	movs	r2, #0
 8007440:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007442:	4b04      	ldr	r3, [pc, #16]	; (8007454 <SysTick_Config+0x44>)
 8007444:	2207      	movs	r2, #7
 8007446:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007448:	2300      	movs	r3, #0
}
 800744a:	0018      	movs	r0, r3
 800744c:	46bd      	mov	sp, r7
 800744e:	b002      	add	sp, #8
 8007450:	bd80      	pop	{r7, pc}
 8007452:	46c0      	nop			; (mov r8, r8)
 8007454:	e000e010 	.word	0xe000e010

08007458 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	60b9      	str	r1, [r7, #8]
 8007460:	607a      	str	r2, [r7, #4]
 8007462:	210f      	movs	r1, #15
 8007464:	187b      	adds	r3, r7, r1
 8007466:	1c02      	adds	r2, r0, #0
 8007468:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800746a:	68ba      	ldr	r2, [r7, #8]
 800746c:	187b      	adds	r3, r7, r1
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	b25b      	sxtb	r3, r3
 8007472:	0011      	movs	r1, r2
 8007474:	0018      	movs	r0, r3
 8007476:	f7ff ff5d 	bl	8007334 <__NVIC_SetPriority>
}
 800747a:	46c0      	nop			; (mov r8, r8)
 800747c:	46bd      	mov	sp, r7
 800747e:	b004      	add	sp, #16
 8007480:	bd80      	pop	{r7, pc}

08007482 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007482:	b580      	push	{r7, lr}
 8007484:	b082      	sub	sp, #8
 8007486:	af00      	add	r7, sp, #0
 8007488:	0002      	movs	r2, r0
 800748a:	1dfb      	adds	r3, r7, #7
 800748c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800748e:	1dfb      	adds	r3, r7, #7
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	b25b      	sxtb	r3, r3
 8007494:	0018      	movs	r0, r3
 8007496:	f7ff ff11 	bl	80072bc <__NVIC_EnableIRQ>
}
 800749a:	46c0      	nop			; (mov r8, r8)
 800749c:	46bd      	mov	sp, r7
 800749e:	b002      	add	sp, #8
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b082      	sub	sp, #8
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	0002      	movs	r2, r0
 80074aa:	1dfb      	adds	r3, r7, #7
 80074ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80074ae:	1dfb      	adds	r3, r7, #7
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	b25b      	sxtb	r3, r3
 80074b4:	0018      	movs	r0, r3
 80074b6:	f7ff ff1b 	bl	80072f0 <__NVIC_DisableIRQ>
}
 80074ba:	46c0      	nop			; (mov r8, r8)
 80074bc:	46bd      	mov	sp, r7
 80074be:	b002      	add	sp, #8
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b082      	sub	sp, #8
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	0018      	movs	r0, r3
 80074ce:	f7ff ff9f 	bl	8007410 <SysTick_Config>
 80074d2:	0003      	movs	r3, r0
}
 80074d4:	0018      	movs	r0, r3
 80074d6:	46bd      	mov	sp, r7
 80074d8:	b002      	add	sp, #8
 80074da:	bd80      	pop	{r7, pc}

080074dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80074e4:	2300      	movs	r3, #0
 80074e6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d101      	bne.n	80074f2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	e036      	b.n	8007560 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2221      	movs	r2, #33	; 0x21
 80074f6:	2102      	movs	r1, #2
 80074f8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	4a18      	ldr	r2, [pc, #96]	; (8007568 <HAL_DMA_Init+0x8c>)
 8007506:	4013      	ands	r3, r2
 8007508:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8007512:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800751e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	695b      	ldr	r3, [r3, #20]
 8007524:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800752a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	69db      	ldr	r3, [r3, #28]
 8007530:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	4313      	orrs	r3, r2
 8007536:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	0018      	movs	r0, r3
 8007544:	f000 f9e0 	bl	8007908 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2221      	movs	r2, #33	; 0x21
 8007552:	2101      	movs	r1, #1
 8007554:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2220      	movs	r2, #32
 800755a:	2100      	movs	r1, #0
 800755c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800755e:	2300      	movs	r3, #0
}
 8007560:	0018      	movs	r0, r3
 8007562:	46bd      	mov	sp, r7
 8007564:	b004      	add	sp, #16
 8007566:	bd80      	pop	{r7, pc}
 8007568:	ffffc00f 	.word	0xffffc00f

0800756c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d101      	bne.n	800757e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e03b      	b.n	80075f6 <HAL_DMA_DeInit+0x8a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2101      	movs	r1, #1
 800758a:	438a      	bics	r2, r1
 800758c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2200      	movs	r2, #0
 8007594:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2200      	movs	r2, #0
 800759c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2200      	movs	r2, #0
 80075a4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2200      	movs	r2, #0
 80075ac:	60da      	str	r2, [r3, #12]

  /* Get DMA Base Address */
  DMA_CalcBaseAndBitshift(hdma);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	0018      	movs	r0, r3
 80075b2:	f000 f9a9 	bl	8007908 <DMA_CalcBaseAndBitshift>

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075be:	2101      	movs	r1, #1
 80075c0:	4091      	lsls	r1, r2
 80075c2:	000a      	movs	r2, r1
 80075c4:	605a      	str	r2, [r3, #4]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2221      	movs	r2, #33	; 0x21
 80075e8:	2100      	movs	r1, #0
 80075ea:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2220      	movs	r2, #32
 80075f0:	2100      	movs	r1, #0
 80075f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	0018      	movs	r0, r3
 80075f8:	46bd      	mov	sp, r7
 80075fa:	b002      	add	sp, #8
 80075fc:	bd80      	pop	{r7, pc}

080075fe <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b086      	sub	sp, #24
 8007602:	af00      	add	r7, sp, #0
 8007604:	60f8      	str	r0, [r7, #12]
 8007606:	60b9      	str	r1, [r7, #8]
 8007608:	607a      	str	r2, [r7, #4]
 800760a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800760c:	2317      	movs	r3, #23
 800760e:	18fb      	adds	r3, r7, r3
 8007610:	2200      	movs	r2, #0
 8007612:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2220      	movs	r2, #32
 8007618:	5c9b      	ldrb	r3, [r3, r2]
 800761a:	2b01      	cmp	r3, #1
 800761c:	d101      	bne.n	8007622 <HAL_DMA_Start_IT+0x24>
 800761e:	2302      	movs	r3, #2
 8007620:	e04f      	b.n	80076c2 <HAL_DMA_Start_IT+0xc4>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2220      	movs	r2, #32
 8007626:	2101      	movs	r1, #1
 8007628:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2221      	movs	r2, #33	; 0x21
 800762e:	5c9b      	ldrb	r3, [r3, r2]
 8007630:	b2db      	uxtb	r3, r3
 8007632:	2b01      	cmp	r3, #1
 8007634:	d13a      	bne.n	80076ac <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2221      	movs	r2, #33	; 0x21
 800763a:	2102      	movs	r1, #2
 800763c:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2101      	movs	r1, #1
 8007650:	438a      	bics	r2, r1
 8007652:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	68b9      	ldr	r1, [r7, #8]
 800765a:	68f8      	ldr	r0, [r7, #12]
 800765c:	f000 f928 	bl	80078b0 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007664:	2b00      	cmp	r3, #0
 8007666:	d008      	beq.n	800767a <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	210e      	movs	r1, #14
 8007674:	430a      	orrs	r2, r1
 8007676:	601a      	str	r2, [r3, #0]
 8007678:	e00f      	b.n	800769a <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	210a      	movs	r1, #10
 8007686:	430a      	orrs	r2, r1
 8007688:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2104      	movs	r1, #4
 8007696:	438a      	bics	r2, r1
 8007698:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	2101      	movs	r1, #1
 80076a6:	430a      	orrs	r2, r1
 80076a8:	601a      	str	r2, [r3, #0]
 80076aa:	e007      	b.n	80076bc <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2220      	movs	r2, #32
 80076b0:	2100      	movs	r1, #0
 80076b2:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80076b4:	2317      	movs	r3, #23
 80076b6:	18fb      	adds	r3, r7, r3
 80076b8:	2202      	movs	r2, #2
 80076ba:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80076bc:	2317      	movs	r3, #23
 80076be:	18fb      	adds	r3, r7, r3
 80076c0:	781b      	ldrb	r3, [r3, #0]
}
 80076c2:	0018      	movs	r0, r3
 80076c4:	46bd      	mov	sp, r7
 80076c6:	b006      	add	sp, #24
 80076c8:	bd80      	pop	{r7, pc}

080076ca <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b084      	sub	sp, #16
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076d2:	210f      	movs	r1, #15
 80076d4:	187b      	adds	r3, r7, r1
 80076d6:	2200      	movs	r2, #0
 80076d8:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2221      	movs	r2, #33	; 0x21
 80076de:	5c9b      	ldrb	r3, [r3, r2]
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d006      	beq.n	80076f4 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2204      	movs	r2, #4
 80076ea:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80076ec:	187b      	adds	r3, r7, r1
 80076ee:	2201      	movs	r2, #1
 80076f0:	701a      	strb	r2, [r3, #0]
 80076f2:	e028      	b.n	8007746 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	210e      	movs	r1, #14
 8007700:	438a      	bics	r2, r1
 8007702:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2101      	movs	r1, #1
 8007710:	438a      	bics	r2, r1
 8007712:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800771c:	2101      	movs	r1, #1
 800771e:	4091      	lsls	r1, r2
 8007720:	000a      	movs	r2, r1
 8007722:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2221      	movs	r2, #33	; 0x21
 8007728:	2101      	movs	r1, #1
 800772a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2220      	movs	r2, #32
 8007730:	2100      	movs	r1, #0
 8007732:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007738:	2b00      	cmp	r3, #0
 800773a:	d004      	beq.n	8007746 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	0010      	movs	r0, r2
 8007744:	4798      	blx	r3
    }
  }
  return status;
 8007746:	230f      	movs	r3, #15
 8007748:	18fb      	adds	r3, r7, r3
 800774a:	781b      	ldrb	r3, [r3, #0]
}
 800774c:	0018      	movs	r0, r3
 800774e:	46bd      	mov	sp, r7
 8007750:	b004      	add	sp, #16
 8007752:	bd80      	pop	{r7, pc}

08007754 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007770:	2204      	movs	r2, #4
 8007772:	409a      	lsls	r2, r3
 8007774:	0013      	movs	r3, r2
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	4013      	ands	r3, r2
 800777a:	d024      	beq.n	80077c6 <HAL_DMA_IRQHandler+0x72>
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	2204      	movs	r2, #4
 8007780:	4013      	ands	r3, r2
 8007782:	d020      	beq.n	80077c6 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2220      	movs	r2, #32
 800778c:	4013      	ands	r3, r2
 800778e:	d107      	bne.n	80077a0 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	2104      	movs	r1, #4
 800779c:	438a      	bics	r2, r1
 800779e:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077a8:	2104      	movs	r1, #4
 80077aa:	4091      	lsls	r1, r2
 80077ac:	000a      	movs	r2, r1
 80077ae:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d100      	bne.n	80077ba <HAL_DMA_IRQHandler+0x66>
 80077b8:	e06a      	b.n	8007890 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	0010      	movs	r0, r2
 80077c2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80077c4:	e064      	b.n	8007890 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ca:	2202      	movs	r2, #2
 80077cc:	409a      	lsls	r2, r3
 80077ce:	0013      	movs	r3, r2
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	4013      	ands	r3, r2
 80077d4:	d02b      	beq.n	800782e <HAL_DMA_IRQHandler+0xda>
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	2202      	movs	r2, #2
 80077da:	4013      	ands	r3, r2
 80077dc:	d027      	beq.n	800782e <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2220      	movs	r2, #32
 80077e6:	4013      	ands	r3, r2
 80077e8:	d10b      	bne.n	8007802 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	210a      	movs	r1, #10
 80077f6:	438a      	bics	r2, r1
 80077f8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2221      	movs	r2, #33	; 0x21
 80077fe:	2101      	movs	r1, #1
 8007800:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800780a:	2102      	movs	r1, #2
 800780c:	4091      	lsls	r1, r2
 800780e:	000a      	movs	r2, r1
 8007810:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2220      	movs	r2, #32
 8007816:	2100      	movs	r1, #0
 8007818:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800781e:	2b00      	cmp	r3, #0
 8007820:	d036      	beq.n	8007890 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	0010      	movs	r0, r2
 800782a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800782c:	e030      	b.n	8007890 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007832:	2208      	movs	r2, #8
 8007834:	409a      	lsls	r2, r3
 8007836:	0013      	movs	r3, r2
 8007838:	68fa      	ldr	r2, [r7, #12]
 800783a:	4013      	ands	r3, r2
 800783c:	d028      	beq.n	8007890 <HAL_DMA_IRQHandler+0x13c>
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	2208      	movs	r2, #8
 8007842:	4013      	ands	r3, r2
 8007844:	d024      	beq.n	8007890 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	210e      	movs	r1, #14
 8007852:	438a      	bics	r2, r1
 8007854:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800785e:	2101      	movs	r1, #1
 8007860:	4091      	lsls	r1, r2
 8007862:	000a      	movs	r2, r1
 8007864:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2201      	movs	r2, #1
 800786a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2221      	movs	r2, #33	; 0x21
 8007870:	2101      	movs	r1, #1
 8007872:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2220      	movs	r2, #32
 8007878:	2100      	movs	r1, #0
 800787a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007880:	2b00      	cmp	r3, #0
 8007882:	d005      	beq.n	8007890 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	0010      	movs	r0, r2
 800788c:	4798      	blx	r3
    }
  }
}
 800788e:	e7ff      	b.n	8007890 <HAL_DMA_IRQHandler+0x13c>
 8007890:	46c0      	nop			; (mov r8, r8)
 8007892:	46bd      	mov	sp, r7
 8007894:	b004      	add	sp, #16
 8007896:	bd80      	pop	{r7, pc}

08007898 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2221      	movs	r2, #33	; 0x21
 80078a4:	5c9b      	ldrb	r3, [r3, r2]
 80078a6:	b2db      	uxtb	r3, r3
}
 80078a8:	0018      	movs	r0, r3
 80078aa:	46bd      	mov	sp, r7
 80078ac:	b002      	add	sp, #8
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	607a      	str	r2, [r7, #4]
 80078bc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078c6:	2101      	movs	r1, #1
 80078c8:	4091      	lsls	r1, r2
 80078ca:	000a      	movs	r2, r1
 80078cc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	683a      	ldr	r2, [r7, #0]
 80078d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	2b10      	cmp	r3, #16
 80078dc:	d108      	bne.n	80078f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	68ba      	ldr	r2, [r7, #8]
 80078ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80078ee:	e007      	b.n	8007900 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	68ba      	ldr	r2, [r7, #8]
 80078f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	60da      	str	r2, [r3, #12]
}
 8007900:	46c0      	nop			; (mov r8, r8)
 8007902:	46bd      	mov	sp, r7
 8007904:	b004      	add	sp, #16
 8007906:	bd80      	pop	{r7, pc}

08007908 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a08      	ldr	r2, [pc, #32]	; (8007938 <DMA_CalcBaseAndBitshift+0x30>)
 8007916:	4694      	mov	ip, r2
 8007918:	4463      	add	r3, ip
 800791a:	2114      	movs	r1, #20
 800791c:	0018      	movs	r0, r3
 800791e:	f7f8 fc05 	bl	800012c <__udivsi3>
 8007922:	0003      	movs	r3, r0
 8007924:	009a      	lsls	r2, r3, #2
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a03      	ldr	r2, [pc, #12]	; (800793c <DMA_CalcBaseAndBitshift+0x34>)
 800792e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8007930:	46c0      	nop			; (mov r8, r8)
 8007932:	46bd      	mov	sp, r7
 8007934:	b002      	add	sp, #8
 8007936:	bd80      	pop	{r7, pc}
 8007938:	bffdfff8 	.word	0xbffdfff8
 800793c:	40020000 	.word	0x40020000

08007940 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b086      	sub	sp, #24
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800794a:	2300      	movs	r3, #0
 800794c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800794e:	e149      	b.n	8007be4 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2101      	movs	r1, #1
 8007956:	697a      	ldr	r2, [r7, #20]
 8007958:	4091      	lsls	r1, r2
 800795a:	000a      	movs	r2, r1
 800795c:	4013      	ands	r3, r2
 800795e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d100      	bne.n	8007968 <HAL_GPIO_Init+0x28>
 8007966:	e13a      	b.n	8007bde <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	2203      	movs	r2, #3
 800796e:	4013      	ands	r3, r2
 8007970:	2b01      	cmp	r3, #1
 8007972:	d005      	beq.n	8007980 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	2203      	movs	r2, #3
 800797a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800797c:	2b02      	cmp	r3, #2
 800797e:	d130      	bne.n	80079e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	005b      	lsls	r3, r3, #1
 800798a:	2203      	movs	r2, #3
 800798c:	409a      	lsls	r2, r3
 800798e:	0013      	movs	r3, r2
 8007990:	43da      	mvns	r2, r3
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	4013      	ands	r3, r2
 8007996:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	68da      	ldr	r2, [r3, #12]
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	005b      	lsls	r3, r3, #1
 80079a0:	409a      	lsls	r2, r3
 80079a2:	0013      	movs	r3, r2
 80079a4:	693a      	ldr	r2, [r7, #16]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	693a      	ldr	r2, [r7, #16]
 80079ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80079b6:	2201      	movs	r2, #1
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	409a      	lsls	r2, r3
 80079bc:	0013      	movs	r3, r2
 80079be:	43da      	mvns	r2, r3
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	4013      	ands	r3, r2
 80079c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	091b      	lsrs	r3, r3, #4
 80079cc:	2201      	movs	r2, #1
 80079ce:	401a      	ands	r2, r3
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	409a      	lsls	r2, r3
 80079d4:	0013      	movs	r3, r2
 80079d6:	693a      	ldr	r2, [r7, #16]
 80079d8:	4313      	orrs	r3, r2
 80079da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	693a      	ldr	r2, [r7, #16]
 80079e0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	2203      	movs	r2, #3
 80079e8:	4013      	ands	r3, r2
 80079ea:	2b03      	cmp	r3, #3
 80079ec:	d017      	beq.n	8007a1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	68db      	ldr	r3, [r3, #12]
 80079f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	005b      	lsls	r3, r3, #1
 80079f8:	2203      	movs	r2, #3
 80079fa:	409a      	lsls	r2, r3
 80079fc:	0013      	movs	r3, r2
 80079fe:	43da      	mvns	r2, r3
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	4013      	ands	r3, r2
 8007a04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	689a      	ldr	r2, [r3, #8]
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	005b      	lsls	r3, r3, #1
 8007a0e:	409a      	lsls	r2, r3
 8007a10:	0013      	movs	r3, r2
 8007a12:	693a      	ldr	r2, [r7, #16]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	693a      	ldr	r2, [r7, #16]
 8007a1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	2203      	movs	r2, #3
 8007a24:	4013      	ands	r3, r2
 8007a26:	2b02      	cmp	r3, #2
 8007a28:	d123      	bne.n	8007a72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	08da      	lsrs	r2, r3, #3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	3208      	adds	r2, #8
 8007a32:	0092      	lsls	r2, r2, #2
 8007a34:	58d3      	ldr	r3, [r2, r3]
 8007a36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	2207      	movs	r2, #7
 8007a3c:	4013      	ands	r3, r2
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	220f      	movs	r2, #15
 8007a42:	409a      	lsls	r2, r3
 8007a44:	0013      	movs	r3, r2
 8007a46:	43da      	mvns	r2, r3
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	4013      	ands	r3, r2
 8007a4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	691a      	ldr	r2, [r3, #16]
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	2107      	movs	r1, #7
 8007a56:	400b      	ands	r3, r1
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	409a      	lsls	r2, r3
 8007a5c:	0013      	movs	r3, r2
 8007a5e:	693a      	ldr	r2, [r7, #16]
 8007a60:	4313      	orrs	r3, r2
 8007a62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	08da      	lsrs	r2, r3, #3
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	3208      	adds	r2, #8
 8007a6c:	0092      	lsls	r2, r2, #2
 8007a6e:	6939      	ldr	r1, [r7, #16]
 8007a70:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	005b      	lsls	r3, r3, #1
 8007a7c:	2203      	movs	r2, #3
 8007a7e:	409a      	lsls	r2, r3
 8007a80:	0013      	movs	r3, r2
 8007a82:	43da      	mvns	r2, r3
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	4013      	ands	r3, r2
 8007a88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	2203      	movs	r2, #3
 8007a90:	401a      	ands	r2, r3
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	005b      	lsls	r3, r3, #1
 8007a96:	409a      	lsls	r2, r3
 8007a98:	0013      	movs	r3, r2
 8007a9a:	693a      	ldr	r2, [r7, #16]
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	693a      	ldr	r2, [r7, #16]
 8007aa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	685a      	ldr	r2, [r3, #4]
 8007aaa:	23c0      	movs	r3, #192	; 0xc0
 8007aac:	029b      	lsls	r3, r3, #10
 8007aae:	4013      	ands	r3, r2
 8007ab0:	d100      	bne.n	8007ab4 <HAL_GPIO_Init+0x174>
 8007ab2:	e094      	b.n	8007bde <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ab4:	4b51      	ldr	r3, [pc, #324]	; (8007bfc <HAL_GPIO_Init+0x2bc>)
 8007ab6:	699a      	ldr	r2, [r3, #24]
 8007ab8:	4b50      	ldr	r3, [pc, #320]	; (8007bfc <HAL_GPIO_Init+0x2bc>)
 8007aba:	2101      	movs	r1, #1
 8007abc:	430a      	orrs	r2, r1
 8007abe:	619a      	str	r2, [r3, #24]
 8007ac0:	4b4e      	ldr	r3, [pc, #312]	; (8007bfc <HAL_GPIO_Init+0x2bc>)
 8007ac2:	699b      	ldr	r3, [r3, #24]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	4013      	ands	r3, r2
 8007ac8:	60bb      	str	r3, [r7, #8]
 8007aca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007acc:	4a4c      	ldr	r2, [pc, #304]	; (8007c00 <HAL_GPIO_Init+0x2c0>)
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	089b      	lsrs	r3, r3, #2
 8007ad2:	3302      	adds	r3, #2
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	589b      	ldr	r3, [r3, r2]
 8007ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	2203      	movs	r2, #3
 8007ade:	4013      	ands	r3, r2
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	220f      	movs	r2, #15
 8007ae4:	409a      	lsls	r2, r3
 8007ae6:	0013      	movs	r3, r2
 8007ae8:	43da      	mvns	r2, r3
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	4013      	ands	r3, r2
 8007aee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	2390      	movs	r3, #144	; 0x90
 8007af4:	05db      	lsls	r3, r3, #23
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d00d      	beq.n	8007b16 <HAL_GPIO_Init+0x1d6>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a41      	ldr	r2, [pc, #260]	; (8007c04 <HAL_GPIO_Init+0x2c4>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d007      	beq.n	8007b12 <HAL_GPIO_Init+0x1d2>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a40      	ldr	r2, [pc, #256]	; (8007c08 <HAL_GPIO_Init+0x2c8>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d101      	bne.n	8007b0e <HAL_GPIO_Init+0x1ce>
 8007b0a:	2302      	movs	r3, #2
 8007b0c:	e004      	b.n	8007b18 <HAL_GPIO_Init+0x1d8>
 8007b0e:	2305      	movs	r3, #5
 8007b10:	e002      	b.n	8007b18 <HAL_GPIO_Init+0x1d8>
 8007b12:	2301      	movs	r3, #1
 8007b14:	e000      	b.n	8007b18 <HAL_GPIO_Init+0x1d8>
 8007b16:	2300      	movs	r3, #0
 8007b18:	697a      	ldr	r2, [r7, #20]
 8007b1a:	2103      	movs	r1, #3
 8007b1c:	400a      	ands	r2, r1
 8007b1e:	0092      	lsls	r2, r2, #2
 8007b20:	4093      	lsls	r3, r2
 8007b22:	693a      	ldr	r2, [r7, #16]
 8007b24:	4313      	orrs	r3, r2
 8007b26:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007b28:	4935      	ldr	r1, [pc, #212]	; (8007c00 <HAL_GPIO_Init+0x2c0>)
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	089b      	lsrs	r3, r3, #2
 8007b2e:	3302      	adds	r3, #2
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	693a      	ldr	r2, [r7, #16]
 8007b34:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007b36:	4b35      	ldr	r3, [pc, #212]	; (8007c0c <HAL_GPIO_Init+0x2cc>)
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	43da      	mvns	r2, r3
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	4013      	ands	r3, r2
 8007b44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	685a      	ldr	r2, [r3, #4]
 8007b4a:	2380      	movs	r3, #128	; 0x80
 8007b4c:	035b      	lsls	r3, r3, #13
 8007b4e:	4013      	ands	r3, r2
 8007b50:	d003      	beq.n	8007b5a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8007b52:	693a      	ldr	r2, [r7, #16]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8007b5a:	4b2c      	ldr	r3, [pc, #176]	; (8007c0c <HAL_GPIO_Init+0x2cc>)
 8007b5c:	693a      	ldr	r2, [r7, #16]
 8007b5e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8007b60:	4b2a      	ldr	r3, [pc, #168]	; (8007c0c <HAL_GPIO_Init+0x2cc>)
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	43da      	mvns	r2, r3
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	4013      	ands	r3, r2
 8007b6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	685a      	ldr	r2, [r3, #4]
 8007b74:	2380      	movs	r3, #128	; 0x80
 8007b76:	039b      	lsls	r3, r3, #14
 8007b78:	4013      	ands	r3, r2
 8007b7a:	d003      	beq.n	8007b84 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8007b7c:	693a      	ldr	r2, [r7, #16]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	4313      	orrs	r3, r2
 8007b82:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8007b84:	4b21      	ldr	r3, [pc, #132]	; (8007c0c <HAL_GPIO_Init+0x2cc>)
 8007b86:	693a      	ldr	r2, [r7, #16]
 8007b88:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8007b8a:	4b20      	ldr	r3, [pc, #128]	; (8007c0c <HAL_GPIO_Init+0x2cc>)
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	43da      	mvns	r2, r3
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	4013      	ands	r3, r2
 8007b98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	685a      	ldr	r2, [r3, #4]
 8007b9e:	2380      	movs	r3, #128	; 0x80
 8007ba0:	029b      	lsls	r3, r3, #10
 8007ba2:	4013      	ands	r3, r2
 8007ba4:	d003      	beq.n	8007bae <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8007ba6:	693a      	ldr	r2, [r7, #16]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	4313      	orrs	r3, r2
 8007bac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8007bae:	4b17      	ldr	r3, [pc, #92]	; (8007c0c <HAL_GPIO_Init+0x2cc>)
 8007bb0:	693a      	ldr	r2, [r7, #16]
 8007bb2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8007bb4:	4b15      	ldr	r3, [pc, #84]	; (8007c0c <HAL_GPIO_Init+0x2cc>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	43da      	mvns	r2, r3
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	4013      	ands	r3, r2
 8007bc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	685a      	ldr	r2, [r3, #4]
 8007bc8:	2380      	movs	r3, #128	; 0x80
 8007bca:	025b      	lsls	r3, r3, #9
 8007bcc:	4013      	ands	r3, r2
 8007bce:	d003      	beq.n	8007bd8 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8007bd0:	693a      	ldr	r2, [r7, #16]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8007bd8:	4b0c      	ldr	r3, [pc, #48]	; (8007c0c <HAL_GPIO_Init+0x2cc>)
 8007bda:	693a      	ldr	r2, [r7, #16]
 8007bdc:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	3301      	adds	r3, #1
 8007be2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	40da      	lsrs	r2, r3
 8007bec:	1e13      	subs	r3, r2, #0
 8007bee:	d000      	beq.n	8007bf2 <HAL_GPIO_Init+0x2b2>
 8007bf0:	e6ae      	b.n	8007950 <HAL_GPIO_Init+0x10>
  } 
}
 8007bf2:	46c0      	nop			; (mov r8, r8)
 8007bf4:	46c0      	nop			; (mov r8, r8)
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	b006      	add	sp, #24
 8007bfa:	bd80      	pop	{r7, pc}
 8007bfc:	40021000 	.word	0x40021000
 8007c00:	40010000 	.word	0x40010000
 8007c04:	48000400 	.word	0x48000400
 8007c08:	48000800 	.word	0x48000800
 8007c0c:	40010400 	.word	0x40010400

08007c10 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b086      	sub	sp, #24
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8007c1e:	e0ab      	b.n	8007d78 <HAL_GPIO_DeInit+0x168>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8007c20:	2201      	movs	r2, #1
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	409a      	lsls	r2, r3
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	4013      	ands	r3, r2
 8007c2a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d100      	bne.n	8007c34 <HAL_GPIO_DeInit+0x24>
 8007c32:	e09e      	b.n	8007d72 <HAL_GPIO_DeInit+0x162>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8007c34:	4a56      	ldr	r2, [pc, #344]	; (8007d90 <HAL_GPIO_DeInit+0x180>)
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	089b      	lsrs	r3, r3, #2
 8007c3a:	3302      	adds	r3, #2
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	589b      	ldr	r3, [r3, r2]
 8007c40:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	2203      	movs	r2, #3
 8007c46:	4013      	ands	r3, r2
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	220f      	movs	r2, #15
 8007c4c:	409a      	lsls	r2, r3
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	4013      	ands	r3, r2
 8007c52:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	2390      	movs	r3, #144	; 0x90
 8007c58:	05db      	lsls	r3, r3, #23
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d00d      	beq.n	8007c7a <HAL_GPIO_DeInit+0x6a>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a4c      	ldr	r2, [pc, #304]	; (8007d94 <HAL_GPIO_DeInit+0x184>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d007      	beq.n	8007c76 <HAL_GPIO_DeInit+0x66>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	4a4b      	ldr	r2, [pc, #300]	; (8007d98 <HAL_GPIO_DeInit+0x188>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d101      	bne.n	8007c72 <HAL_GPIO_DeInit+0x62>
 8007c6e:	2302      	movs	r3, #2
 8007c70:	e004      	b.n	8007c7c <HAL_GPIO_DeInit+0x6c>
 8007c72:	2305      	movs	r3, #5
 8007c74:	e002      	b.n	8007c7c <HAL_GPIO_DeInit+0x6c>
 8007c76:	2301      	movs	r3, #1
 8007c78:	e000      	b.n	8007c7c <HAL_GPIO_DeInit+0x6c>
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	697a      	ldr	r2, [r7, #20]
 8007c7e:	2103      	movs	r1, #3
 8007c80:	400a      	ands	r2, r1
 8007c82:	0092      	lsls	r2, r2, #2
 8007c84:	4093      	lsls	r3, r2
 8007c86:	68fa      	ldr	r2, [r7, #12]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d132      	bne.n	8007cf2 <HAL_GPIO_DeInit+0xe2>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007c8c:	4b43      	ldr	r3, [pc, #268]	; (8007d9c <HAL_GPIO_DeInit+0x18c>)
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	43d9      	mvns	r1, r3
 8007c94:	4b41      	ldr	r3, [pc, #260]	; (8007d9c <HAL_GPIO_DeInit+0x18c>)
 8007c96:	400a      	ands	r2, r1
 8007c98:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007c9a:	4b40      	ldr	r3, [pc, #256]	; (8007d9c <HAL_GPIO_DeInit+0x18c>)
 8007c9c:	685a      	ldr	r2, [r3, #4]
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	43d9      	mvns	r1, r3
 8007ca2:	4b3e      	ldr	r3, [pc, #248]	; (8007d9c <HAL_GPIO_DeInit+0x18c>)
 8007ca4:	400a      	ands	r2, r1
 8007ca6:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007ca8:	4b3c      	ldr	r3, [pc, #240]	; (8007d9c <HAL_GPIO_DeInit+0x18c>)
 8007caa:	68da      	ldr	r2, [r3, #12]
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	43d9      	mvns	r1, r3
 8007cb0:	4b3a      	ldr	r3, [pc, #232]	; (8007d9c <HAL_GPIO_DeInit+0x18c>)
 8007cb2:	400a      	ands	r2, r1
 8007cb4:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007cb6:	4b39      	ldr	r3, [pc, #228]	; (8007d9c <HAL_GPIO_DeInit+0x18c>)
 8007cb8:	689a      	ldr	r2, [r3, #8]
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	43d9      	mvns	r1, r3
 8007cbe:	4b37      	ldr	r3, [pc, #220]	; (8007d9c <HAL_GPIO_DeInit+0x18c>)
 8007cc0:	400a      	ands	r2, r1
 8007cc2:	609a      	str	r2, [r3, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	2203      	movs	r2, #3
 8007cc8:	4013      	ands	r3, r2
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	220f      	movs	r2, #15
 8007cce:	409a      	lsls	r2, r3
 8007cd0:	0013      	movs	r3, r2
 8007cd2:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8007cd4:	4a2e      	ldr	r2, [pc, #184]	; (8007d90 <HAL_GPIO_DeInit+0x180>)
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	089b      	lsrs	r3, r3, #2
 8007cda:	3302      	adds	r3, #2
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	589a      	ldr	r2, [r3, r2]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	43d9      	mvns	r1, r3
 8007ce4:	482a      	ldr	r0, [pc, #168]	; (8007d90 <HAL_GPIO_DeInit+0x180>)
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	089b      	lsrs	r3, r3, #2
 8007cea:	400a      	ands	r2, r1
 8007cec:	3302      	adds	r3, #2
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	697a      	ldr	r2, [r7, #20]
 8007cf8:	0052      	lsls	r2, r2, #1
 8007cfa:	2103      	movs	r1, #3
 8007cfc:	4091      	lsls	r1, r2
 8007cfe:	000a      	movs	r2, r1
 8007d00:	43d2      	mvns	r2, r2
 8007d02:	401a      	ands	r2, r3
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	08da      	lsrs	r2, r3, #3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	3208      	adds	r2, #8
 8007d10:	0092      	lsls	r2, r2, #2
 8007d12:	58d3      	ldr	r3, [r2, r3]
 8007d14:	697a      	ldr	r2, [r7, #20]
 8007d16:	2107      	movs	r1, #7
 8007d18:	400a      	ands	r2, r1
 8007d1a:	0092      	lsls	r2, r2, #2
 8007d1c:	210f      	movs	r1, #15
 8007d1e:	4091      	lsls	r1, r2
 8007d20:	000a      	movs	r2, r1
 8007d22:	43d1      	mvns	r1, r2
 8007d24:	697a      	ldr	r2, [r7, #20]
 8007d26:	08d2      	lsrs	r2, r2, #3
 8007d28:	4019      	ands	r1, r3
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	3208      	adds	r2, #8
 8007d2e:	0092      	lsls	r2, r2, #2
 8007d30:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	697a      	ldr	r2, [r7, #20]
 8007d38:	0052      	lsls	r2, r2, #1
 8007d3a:	2103      	movs	r1, #3
 8007d3c:	4091      	lsls	r1, r2
 8007d3e:	000a      	movs	r2, r1
 8007d40:	43d2      	mvns	r2, r2
 8007d42:	401a      	ands	r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	2101      	movs	r1, #1
 8007d4e:	697a      	ldr	r2, [r7, #20]
 8007d50:	4091      	lsls	r1, r2
 8007d52:	000a      	movs	r2, r1
 8007d54:	43d2      	mvns	r2, r2
 8007d56:	401a      	ands	r2, r3
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	697a      	ldr	r2, [r7, #20]
 8007d62:	0052      	lsls	r2, r2, #1
 8007d64:	2103      	movs	r1, #3
 8007d66:	4091      	lsls	r1, r2
 8007d68:	000a      	movs	r2, r1
 8007d6a:	43d2      	mvns	r2, r2
 8007d6c:	401a      	ands	r2, r3
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	609a      	str	r2, [r3, #8]

    }

    position++;
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	3301      	adds	r3, #1
 8007d76:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8007d78:	683a      	ldr	r2, [r7, #0]
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	40da      	lsrs	r2, r3
 8007d7e:	1e13      	subs	r3, r2, #0
 8007d80:	d000      	beq.n	8007d84 <HAL_GPIO_DeInit+0x174>
 8007d82:	e74d      	b.n	8007c20 <HAL_GPIO_DeInit+0x10>
  }
}
 8007d84:	46c0      	nop			; (mov r8, r8)
 8007d86:	46c0      	nop			; (mov r8, r8)
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	b006      	add	sp, #24
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	46c0      	nop			; (mov r8, r8)
 8007d90:	40010000 	.word	0x40010000
 8007d94:	48000400 	.word	0x48000400
 8007d98:	48000800 	.word	0x48000800
 8007d9c:	40010400 	.word	0x40010400

08007da0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b082      	sub	sp, #8
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	0008      	movs	r0, r1
 8007daa:	0011      	movs	r1, r2
 8007dac:	1cbb      	adds	r3, r7, #2
 8007dae:	1c02      	adds	r2, r0, #0
 8007db0:	801a      	strh	r2, [r3, #0]
 8007db2:	1c7b      	adds	r3, r7, #1
 8007db4:	1c0a      	adds	r2, r1, #0
 8007db6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007db8:	1c7b      	adds	r3, r7, #1
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d004      	beq.n	8007dca <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007dc0:	1cbb      	adds	r3, r7, #2
 8007dc2:	881a      	ldrh	r2, [r3, #0]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007dc8:	e003      	b.n	8007dd2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007dca:	1cbb      	adds	r3, r7, #2
 8007dcc:	881a      	ldrh	r2, [r3, #0]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007dd2:	46c0      	nop			; (mov r8, r8)
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	b002      	add	sp, #8
 8007dd8:	bd80      	pop	{r7, pc}
	...

08007ddc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d101      	bne.n	8007dee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	e082      	b.n	8007ef4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2241      	movs	r2, #65	; 0x41
 8007df2:	5c9b      	ldrb	r3, [r3, r2]
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d107      	bne.n	8007e0a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2240      	movs	r2, #64	; 0x40
 8007dfe:	2100      	movs	r1, #0
 8007e00:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	0018      	movs	r0, r3
 8007e06:	f7fe f8f5 	bl	8005ff4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2241      	movs	r2, #65	; 0x41
 8007e0e:	2124      	movs	r1, #36	; 0x24
 8007e10:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2101      	movs	r1, #1
 8007e1e:	438a      	bics	r2, r1
 8007e20:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	685a      	ldr	r2, [r3, #4]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4934      	ldr	r1, [pc, #208]	; (8007efc <HAL_I2C_Init+0x120>)
 8007e2c:	400a      	ands	r2, r1
 8007e2e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	689a      	ldr	r2, [r3, #8]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4931      	ldr	r1, [pc, #196]	; (8007f00 <HAL_I2C_Init+0x124>)
 8007e3c:	400a      	ands	r2, r1
 8007e3e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d108      	bne.n	8007e5a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	689a      	ldr	r2, [r3, #8]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2180      	movs	r1, #128	; 0x80
 8007e52:	0209      	lsls	r1, r1, #8
 8007e54:	430a      	orrs	r2, r1
 8007e56:	609a      	str	r2, [r3, #8]
 8007e58:	e007      	b.n	8007e6a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	689a      	ldr	r2, [r3, #8]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2184      	movs	r1, #132	; 0x84
 8007e64:	0209      	lsls	r1, r1, #8
 8007e66:	430a      	orrs	r2, r1
 8007e68:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	2b02      	cmp	r3, #2
 8007e70:	d104      	bne.n	8007e7c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	2280      	movs	r2, #128	; 0x80
 8007e78:	0112      	lsls	r2, r2, #4
 8007e7a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	685a      	ldr	r2, [r3, #4]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	491f      	ldr	r1, [pc, #124]	; (8007f04 <HAL_I2C_Init+0x128>)
 8007e88:	430a      	orrs	r2, r1
 8007e8a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	68da      	ldr	r2, [r3, #12]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	491a      	ldr	r1, [pc, #104]	; (8007f00 <HAL_I2C_Init+0x124>)
 8007e98:	400a      	ands	r2, r1
 8007e9a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	691a      	ldr	r2, [r3, #16]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	695b      	ldr	r3, [r3, #20]
 8007ea4:	431a      	orrs	r2, r3
 8007ea6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	699b      	ldr	r3, [r3, #24]
 8007eac:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	430a      	orrs	r2, r1
 8007eb4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	69d9      	ldr	r1, [r3, #28]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6a1a      	ldr	r2, [r3, #32]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	430a      	orrs	r2, r1
 8007ec4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2101      	movs	r1, #1
 8007ed2:	430a      	orrs	r2, r1
 8007ed4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2241      	movs	r2, #65	; 0x41
 8007ee0:	2120      	movs	r1, #32
 8007ee2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2242      	movs	r2, #66	; 0x42
 8007eee:	2100      	movs	r1, #0
 8007ef0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007ef2:	2300      	movs	r3, #0
}
 8007ef4:	0018      	movs	r0, r3
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	b002      	add	sp, #8
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	f0ffffff 	.word	0xf0ffffff
 8007f00:	ffff7fff 	.word	0xffff7fff
 8007f04:	02008000 	.word	0x02008000

08007f08 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d101      	bne.n	8007f1a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	e022      	b.n	8007f60 <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2241      	movs	r2, #65	; 0x41
 8007f1e:	2124      	movs	r1, #36	; 0x24
 8007f20:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	2101      	movs	r1, #1
 8007f2e:	438a      	bics	r2, r1
 8007f30:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	0018      	movs	r0, r3
 8007f36:	f7fe f8d7 	bl	80060e8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2241      	movs	r2, #65	; 0x41
 8007f44:	2100      	movs	r1, #0
 8007f46:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2242      	movs	r2, #66	; 0x42
 8007f52:	2100      	movs	r1, #0
 8007f54:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2240      	movs	r2, #64	; 0x40
 8007f5a:	2100      	movs	r1, #0
 8007f5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007f5e:	2300      	movs	r3, #0
}
 8007f60:	0018      	movs	r0, r3
 8007f62:	46bd      	mov	sp, r7
 8007f64:	b002      	add	sp, #8
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8007f68:	b590      	push	{r4, r7, lr}
 8007f6a:	b089      	sub	sp, #36	; 0x24
 8007f6c:	af02      	add	r7, sp, #8
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	0008      	movs	r0, r1
 8007f72:	607a      	str	r2, [r7, #4]
 8007f74:	0019      	movs	r1, r3
 8007f76:	230a      	movs	r3, #10
 8007f78:	18fb      	adds	r3, r7, r3
 8007f7a:	1c02      	adds	r2, r0, #0
 8007f7c:	801a      	strh	r2, [r3, #0]
 8007f7e:	2308      	movs	r3, #8
 8007f80:	18fb      	adds	r3, r7, r3
 8007f82:	1c0a      	adds	r2, r1, #0
 8007f84:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2241      	movs	r2, #65	; 0x41
 8007f8a:	5c9b      	ldrb	r3, [r3, r2]
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	2b20      	cmp	r3, #32
 8007f90:	d15b      	bne.n	800804a <HAL_I2C_Master_Transmit_IT+0xe2>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	699a      	ldr	r2, [r3, #24]
 8007f98:	2380      	movs	r3, #128	; 0x80
 8007f9a:	021b      	lsls	r3, r3, #8
 8007f9c:	401a      	ands	r2, r3
 8007f9e:	2380      	movs	r3, #128	; 0x80
 8007fa0:	021b      	lsls	r3, r3, #8
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d101      	bne.n	8007faa <HAL_I2C_Master_Transmit_IT+0x42>
    {
      return HAL_BUSY;
 8007fa6:	2302      	movs	r3, #2
 8007fa8:	e050      	b.n	800804c <HAL_I2C_Master_Transmit_IT+0xe4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2240      	movs	r2, #64	; 0x40
 8007fae:	5c9b      	ldrb	r3, [r3, r2]
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d101      	bne.n	8007fb8 <HAL_I2C_Master_Transmit_IT+0x50>
 8007fb4:	2302      	movs	r3, #2
 8007fb6:	e049      	b.n	800804c <HAL_I2C_Master_Transmit_IT+0xe4>
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2240      	movs	r2, #64	; 0x40
 8007fbc:	2101      	movs	r1, #1
 8007fbe:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2241      	movs	r2, #65	; 0x41
 8007fc4:	2121      	movs	r1, #33	; 0x21
 8007fc6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2242      	movs	r2, #66	; 0x42
 8007fcc:	2110      	movs	r1, #16
 8007fce:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2208      	movs	r2, #8
 8007fe0:	18ba      	adds	r2, r7, r2
 8007fe2:	8812      	ldrh	r2, [r2, #0]
 8007fe4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	4a1a      	ldr	r2, [pc, #104]	; (8008054 <HAL_I2C_Master_Transmit_IT+0xec>)
 8007fea:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	4a1a      	ldr	r2, [pc, #104]	; (8008058 <HAL_I2C_Master_Transmit_IT+0xf0>)
 8007ff0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	2bff      	cmp	r3, #255	; 0xff
 8007ffa:	d906      	bls.n	800800a <HAL_I2C_Master_Transmit_IT+0xa2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	22ff      	movs	r2, #255	; 0xff
 8008000:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8008002:	2380      	movs	r3, #128	; 0x80
 8008004:	045b      	lsls	r3, r3, #17
 8008006:	617b      	str	r3, [r7, #20]
 8008008:	e007      	b.n	800801a <HAL_I2C_Master_Transmit_IT+0xb2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800800e:	b29a      	uxth	r2, r3
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008014:	2380      	movs	r3, #128	; 0x80
 8008016:	049b      	lsls	r3, r3, #18
 8008018:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800801e:	b2da      	uxtb	r2, r3
 8008020:	697c      	ldr	r4, [r7, #20]
 8008022:	230a      	movs	r3, #10
 8008024:	18fb      	adds	r3, r7, r3
 8008026:	8819      	ldrh	r1, [r3, #0]
 8008028:	68f8      	ldr	r0, [r7, #12]
 800802a:	4b0c      	ldr	r3, [pc, #48]	; (800805c <HAL_I2C_Master_Transmit_IT+0xf4>)
 800802c:	9300      	str	r3, [sp, #0]
 800802e:	0023      	movs	r3, r4
 8008030:	f001 faf6 	bl	8009620 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2240      	movs	r2, #64	; 0x40
 8008038:	2100      	movs	r1, #0
 800803a:	5499      	strb	r1, [r3, r2]

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2101      	movs	r1, #1
 8008040:	0018      	movs	r0, r3
 8008042:	f001 fb27 	bl	8009694 <I2C_Enable_IRQ>

    return HAL_OK;
 8008046:	2300      	movs	r3, #0
 8008048:	e000      	b.n	800804c <HAL_I2C_Master_Transmit_IT+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800804a:	2302      	movs	r3, #2
  }
}
 800804c:	0018      	movs	r0, r3
 800804e:	46bd      	mov	sp, r7
 8008050:	b007      	add	sp, #28
 8008052:	bd90      	pop	{r4, r7, pc}
 8008054:	ffff0000 	.word	0xffff0000
 8008058:	080081d9 	.word	0x080081d9
 800805c:	80002000 	.word	0x80002000

08008060 <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
 8008060:	b590      	push	{r4, r7, lr}
 8008062:	b089      	sub	sp, #36	; 0x24
 8008064:	af02      	add	r7, sp, #8
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	0008      	movs	r0, r1
 800806a:	607a      	str	r2, [r7, #4]
 800806c:	0019      	movs	r1, r3
 800806e:	230a      	movs	r3, #10
 8008070:	18fb      	adds	r3, r7, r3
 8008072:	1c02      	adds	r2, r0, #0
 8008074:	801a      	strh	r2, [r3, #0]
 8008076:	2308      	movs	r3, #8
 8008078:	18fb      	adds	r3, r7, r3
 800807a:	1c0a      	adds	r2, r1, #0
 800807c:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2241      	movs	r2, #65	; 0x41
 8008082:	5c9b      	ldrb	r3, [r3, r2]
 8008084:	b2db      	uxtb	r3, r3
 8008086:	2b20      	cmp	r3, #32
 8008088:	d15b      	bne.n	8008142 <HAL_I2C_Master_Receive_IT+0xe2>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	699a      	ldr	r2, [r3, #24]
 8008090:	2380      	movs	r3, #128	; 0x80
 8008092:	021b      	lsls	r3, r3, #8
 8008094:	401a      	ands	r2, r3
 8008096:	2380      	movs	r3, #128	; 0x80
 8008098:	021b      	lsls	r3, r3, #8
 800809a:	429a      	cmp	r2, r3
 800809c:	d101      	bne.n	80080a2 <HAL_I2C_Master_Receive_IT+0x42>
    {
      return HAL_BUSY;
 800809e:	2302      	movs	r3, #2
 80080a0:	e050      	b.n	8008144 <HAL_I2C_Master_Receive_IT+0xe4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2240      	movs	r2, #64	; 0x40
 80080a6:	5c9b      	ldrb	r3, [r3, r2]
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d101      	bne.n	80080b0 <HAL_I2C_Master_Receive_IT+0x50>
 80080ac:	2302      	movs	r3, #2
 80080ae:	e049      	b.n	8008144 <HAL_I2C_Master_Receive_IT+0xe4>
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2240      	movs	r2, #64	; 0x40
 80080b4:	2101      	movs	r1, #1
 80080b6:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2241      	movs	r2, #65	; 0x41
 80080bc:	2122      	movs	r1, #34	; 0x22
 80080be:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2242      	movs	r2, #66	; 0x42
 80080c4:	2110      	movs	r1, #16
 80080c6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2200      	movs	r2, #0
 80080cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2208      	movs	r2, #8
 80080d8:	18ba      	adds	r2, r7, r2
 80080da:	8812      	ldrh	r2, [r2, #0]
 80080dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	4a1a      	ldr	r2, [pc, #104]	; (800814c <HAL_I2C_Master_Receive_IT+0xec>)
 80080e2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	4a1a      	ldr	r2, [pc, #104]	; (8008150 <HAL_I2C_Master_Receive_IT+0xf0>)
 80080e8:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	2bff      	cmp	r3, #255	; 0xff
 80080f2:	d906      	bls.n	8008102 <HAL_I2C_Master_Receive_IT+0xa2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	22ff      	movs	r2, #255	; 0xff
 80080f8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80080fa:	2380      	movs	r3, #128	; 0x80
 80080fc:	045b      	lsls	r3, r3, #17
 80080fe:	617b      	str	r3, [r7, #20]
 8008100:	e007      	b.n	8008112 <HAL_I2C_Master_Receive_IT+0xb2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008106:	b29a      	uxth	r2, r3
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800810c:	2380      	movs	r3, #128	; 0x80
 800810e:	049b      	lsls	r3, r3, #18
 8008110:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008116:	b2da      	uxtb	r2, r3
 8008118:	697c      	ldr	r4, [r7, #20]
 800811a:	230a      	movs	r3, #10
 800811c:	18fb      	adds	r3, r7, r3
 800811e:	8819      	ldrh	r1, [r3, #0]
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	4b0c      	ldr	r3, [pc, #48]	; (8008154 <HAL_I2C_Master_Receive_IT+0xf4>)
 8008124:	9300      	str	r3, [sp, #0]
 8008126:	0023      	movs	r3, r4
 8008128:	f001 fa7a 	bl	8009620 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2240      	movs	r2, #64	; 0x40
 8008130:	2100      	movs	r1, #0
 8008132:	5499      	strb	r1, [r3, r2]

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2102      	movs	r1, #2
 8008138:	0018      	movs	r0, r3
 800813a:	f001 faab 	bl	8009694 <I2C_Enable_IRQ>

    return HAL_OK;
 800813e:	2300      	movs	r3, #0
 8008140:	e000      	b.n	8008144 <HAL_I2C_Master_Receive_IT+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8008142:	2302      	movs	r3, #2
  }
}
 8008144:	0018      	movs	r0, r3
 8008146:	46bd      	mov	sp, r7
 8008148:	b007      	add	sp, #28
 800814a:	bd90      	pop	{r4, r7, pc}
 800814c:	ffff0000 	.word	0xffff0000
 8008150:	080081d9 	.word	0x080081d9
 8008154:	80002400 	.word	0x80002400

08008158 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008160:	46c0      	nop			; (mov r8, r8)
 8008162:	46bd      	mov	sp, r7
 8008164:	b002      	add	sp, #8
 8008166:	bd80      	pop	{r7, pc}

08008168 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008170:	46c0      	nop			; (mov r8, r8)
 8008172:	46bd      	mov	sp, r7
 8008174:	b002      	add	sp, #8
 8008176:	bd80      	pop	{r7, pc}

08008178 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	0008      	movs	r0, r1
 8008182:	0011      	movs	r1, r2
 8008184:	1cfb      	adds	r3, r7, #3
 8008186:	1c02      	adds	r2, r0, #0
 8008188:	701a      	strb	r2, [r3, #0]
 800818a:	003b      	movs	r3, r7
 800818c:	1c0a      	adds	r2, r1, #0
 800818e:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008190:	46c0      	nop			; (mov r8, r8)
 8008192:	46bd      	mov	sp, r7
 8008194:	b002      	add	sp, #8
 8008196:	bd80      	pop	{r7, pc}

08008198 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80081a0:	46c0      	nop			; (mov r8, r8)
 80081a2:	46bd      	mov	sp, r7
 80081a4:	b002      	add	sp, #8
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80081b0:	46c0      	nop			; (mov r8, r8)
 80081b2:	46bd      	mov	sp, r7
 80081b4:	b002      	add	sp, #8
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80081c0:	46c0      	nop			; (mov r8, r8)
 80081c2:	46bd      	mov	sp, r7
 80081c4:	b002      	add	sp, #8
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80081d0:	46c0      	nop			; (mov r8, r8)
 80081d2:	46bd      	mov	sp, r7
 80081d4:	b002      	add	sp, #8
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80081d8:	b590      	push	{r4, r7, lr}
 80081da:	b089      	sub	sp, #36	; 0x24
 80081dc:	af02      	add	r7, sp, #8
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	60b9      	str	r1, [r7, #8]
 80081e2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2240      	movs	r2, #64	; 0x40
 80081ec:	5c9b      	ldrb	r3, [r3, r2]
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d101      	bne.n	80081f6 <I2C_Master_ISR_IT+0x1e>
 80081f2:	2302      	movs	r3, #2
 80081f4:	e113      	b.n	800841e <I2C_Master_ISR_IT+0x246>
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2240      	movs	r2, #64	; 0x40
 80081fa:	2101      	movs	r1, #1
 80081fc:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	2210      	movs	r2, #16
 8008202:	4013      	ands	r3, r2
 8008204:	d012      	beq.n	800822c <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2210      	movs	r2, #16
 800820a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800820c:	d00e      	beq.n	800822c <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	2210      	movs	r2, #16
 8008214:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800821a:	2204      	movs	r2, #4
 800821c:	431a      	orrs	r2, r3
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	0018      	movs	r0, r3
 8008226:	f001 f9ba 	bl	800959e <I2C_Flush_TXDR>
 800822a:	e0e5      	b.n	80083f8 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	2204      	movs	r2, #4
 8008230:	4013      	ands	r3, r2
 8008232:	d021      	beq.n	8008278 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2204      	movs	r2, #4
 8008238:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800823a:	d01d      	beq.n	8008278 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	2204      	movs	r2, #4
 8008240:	4393      	bics	r3, r2
 8008242:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824e:	b2d2      	uxtb	r2, r2
 8008250:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008256:	1c5a      	adds	r2, r3, #1
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008260:	3b01      	subs	r3, #1
 8008262:	b29a      	uxth	r2, r3
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800826c:	b29b      	uxth	r3, r3
 800826e:	3b01      	subs	r3, #1
 8008270:	b29a      	uxth	r2, r3
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008276:	e0bf      	b.n	80083f8 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	2202      	movs	r2, #2
 800827c:	4013      	ands	r3, r2
 800827e:	d01c      	beq.n	80082ba <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2202      	movs	r2, #2
 8008284:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008286:	d018      	beq.n	80082ba <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828c:	781a      	ldrb	r2, [r3, #0]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008298:	1c5a      	adds	r2, r3, #1
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082a2:	3b01      	subs	r3, #1
 80082a4:	b29a      	uxth	r2, r3
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	3b01      	subs	r3, #1
 80082b2:	b29a      	uxth	r2, r3
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80082b8:	e09e      	b.n	80083f8 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	2280      	movs	r2, #128	; 0x80
 80082be:	4013      	ands	r3, r2
 80082c0:	d100      	bne.n	80082c4 <I2C_Master_ISR_IT+0xec>
 80082c2:	e069      	b.n	8008398 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2240      	movs	r2, #64	; 0x40
 80082c8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80082ca:	d065      	beq.n	8008398 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d04a      	beq.n	800836c <I2C_Master_ISR_IT+0x194>
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d146      	bne.n	800836c <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	b29a      	uxth	r2, r3
 80082e6:	2112      	movs	r1, #18
 80082e8:	187b      	adds	r3, r7, r1
 80082ea:	0592      	lsls	r2, r2, #22
 80082ec:	0d92      	lsrs	r2, r2, #22
 80082ee:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	2bff      	cmp	r3, #255	; 0xff
 80082f8:	d910      	bls.n	800831c <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	22ff      	movs	r2, #255	; 0xff
 80082fe:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008304:	b2da      	uxtb	r2, r3
 8008306:	2380      	movs	r3, #128	; 0x80
 8008308:	045c      	lsls	r4, r3, #17
 800830a:	187b      	adds	r3, r7, r1
 800830c:	8819      	ldrh	r1, [r3, #0]
 800830e:	68f8      	ldr	r0, [r7, #12]
 8008310:	2300      	movs	r3, #0
 8008312:	9300      	str	r3, [sp, #0]
 8008314:	0023      	movs	r3, r4
 8008316:	f001 f983 	bl	8009620 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800831a:	e03c      	b.n	8008396 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008320:	b29a      	uxth	r2, r3
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800832a:	4a3f      	ldr	r2, [pc, #252]	; (8008428 <I2C_Master_ISR_IT+0x250>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d00e      	beq.n	800834e <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008334:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	6adc      	ldr	r4, [r3, #44]	; 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800833a:	2312      	movs	r3, #18
 800833c:	18fb      	adds	r3, r7, r3
 800833e:	8819      	ldrh	r1, [r3, #0]
 8008340:	68f8      	ldr	r0, [r7, #12]
 8008342:	2300      	movs	r3, #0
 8008344:	9300      	str	r3, [sp, #0]
 8008346:	0023      	movs	r3, r4
 8008348:	f001 f96a 	bl	8009620 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800834c:	e023      	b.n	8008396 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008352:	b2da      	uxtb	r2, r3
 8008354:	2380      	movs	r3, #128	; 0x80
 8008356:	049c      	lsls	r4, r3, #18
 8008358:	2312      	movs	r3, #18
 800835a:	18fb      	adds	r3, r7, r3
 800835c:	8819      	ldrh	r1, [r3, #0]
 800835e:	68f8      	ldr	r0, [r7, #12]
 8008360:	2300      	movs	r3, #0
 8008362:	9300      	str	r3, [sp, #0]
 8008364:	0023      	movs	r3, r4
 8008366:	f001 f95b 	bl	8009620 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800836a:	e014      	b.n	8008396 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	685a      	ldr	r2, [r3, #4]
 8008372:	2380      	movs	r3, #128	; 0x80
 8008374:	049b      	lsls	r3, r3, #18
 8008376:	401a      	ands	r2, r3
 8008378:	2380      	movs	r3, #128	; 0x80
 800837a:	049b      	lsls	r3, r3, #18
 800837c:	429a      	cmp	r2, r3
 800837e:	d004      	beq.n	800838a <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	0018      	movs	r0, r3
 8008384:	f000 fcf4 	bl	8008d70 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008388:	e036      	b.n	80083f8 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2140      	movs	r1, #64	; 0x40
 800838e:	0018      	movs	r0, r3
 8008390:	f000 ffda 	bl	8009348 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008394:	e030      	b.n	80083f8 <I2C_Master_ISR_IT+0x220>
 8008396:	e02f      	b.n	80083f8 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	2240      	movs	r2, #64	; 0x40
 800839c:	4013      	ands	r3, r2
 800839e:	d02b      	beq.n	80083f8 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2240      	movs	r2, #64	; 0x40
 80083a4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80083a6:	d027      	beq.n	80083f8 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d11d      	bne.n	80083ee <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	685a      	ldr	r2, [r3, #4]
 80083b8:	2380      	movs	r3, #128	; 0x80
 80083ba:	049b      	lsls	r3, r3, #18
 80083bc:	401a      	ands	r2, r3
 80083be:	2380      	movs	r3, #128	; 0x80
 80083c0:	049b      	lsls	r3, r3, #18
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d018      	beq.n	80083f8 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ca:	4a17      	ldr	r2, [pc, #92]	; (8008428 <I2C_Master_ISR_IT+0x250>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d109      	bne.n	80083e4 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	685a      	ldr	r2, [r3, #4]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2180      	movs	r1, #128	; 0x80
 80083dc:	01c9      	lsls	r1, r1, #7
 80083de:	430a      	orrs	r2, r1
 80083e0:	605a      	str	r2, [r3, #4]
 80083e2:	e009      	b.n	80083f8 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	0018      	movs	r0, r3
 80083e8:	f000 fcc2 	bl	8008d70 <I2C_ITMasterSeqCplt>
 80083ec:	e004      	b.n	80083f8 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2140      	movs	r1, #64	; 0x40
 80083f2:	0018      	movs	r0, r3
 80083f4:	f000 ffa8 	bl	8009348 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	2220      	movs	r2, #32
 80083fc:	4013      	ands	r3, r2
 80083fe:	d009      	beq.n	8008414 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2220      	movs	r2, #32
 8008404:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008406:	d005      	beq.n	8008414 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8008408:	697a      	ldr	r2, [r7, #20]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	0011      	movs	r1, r2
 800840e:	0018      	movs	r0, r3
 8008410:	f000 fd54 	bl	8008ebc <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2240      	movs	r2, #64	; 0x40
 8008418:	2100      	movs	r1, #0
 800841a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800841c:	2300      	movs	r3, #0
}
 800841e:	0018      	movs	r0, r3
 8008420:	46bd      	mov	sp, r7
 8008422:	b007      	add	sp, #28
 8008424:	bd90      	pop	{r4, r7, pc}
 8008426:	46c0      	nop			; (mov r8, r8)
 8008428:	ffff0000 	.word	0xffff0000

0800842c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b086      	sub	sp, #24
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800843c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2240      	movs	r2, #64	; 0x40
 8008446:	5c9b      	ldrb	r3, [r3, r2]
 8008448:	2b01      	cmp	r3, #1
 800844a:	d101      	bne.n	8008450 <I2C_Slave_ISR_IT+0x24>
 800844c:	2302      	movs	r3, #2
 800844e:	e0e6      	b.n	800861e <I2C_Slave_ISR_IT+0x1f2>
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2240      	movs	r2, #64	; 0x40
 8008454:	2101      	movs	r1, #1
 8008456:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	2220      	movs	r2, #32
 800845c:	4013      	ands	r3, r2
 800845e:	d009      	beq.n	8008474 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2220      	movs	r2, #32
 8008464:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008466:	d005      	beq.n	8008474 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8008468:	693a      	ldr	r2, [r7, #16]
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	0011      	movs	r1, r2
 800846e:	0018      	movs	r0, r3
 8008470:	f000 fdf2 	bl	8009058 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	2210      	movs	r2, #16
 8008478:	4013      	ands	r3, r2
 800847a:	d052      	beq.n	8008522 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2210      	movs	r2, #16
 8008480:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008482:	d04e      	beq.n	8008522 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008488:	b29b      	uxth	r3, r3
 800848a:	2b00      	cmp	r3, #0
 800848c:	d12d      	bne.n	80084ea <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2241      	movs	r2, #65	; 0x41
 8008492:	5c9b      	ldrb	r3, [r3, r2]
 8008494:	b2db      	uxtb	r3, r3
 8008496:	2b28      	cmp	r3, #40	; 0x28
 8008498:	d10b      	bne.n	80084b2 <I2C_Slave_ISR_IT+0x86>
 800849a:	697a      	ldr	r2, [r7, #20]
 800849c:	2380      	movs	r3, #128	; 0x80
 800849e:	049b      	lsls	r3, r3, #18
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d106      	bne.n	80084b2 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80084a4:	693a      	ldr	r2, [r7, #16]
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	0011      	movs	r1, r2
 80084aa:	0018      	movs	r0, r3
 80084ac:	f000 fef4 	bl	8009298 <I2C_ITListenCplt>
 80084b0:	e036      	b.n	8008520 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2241      	movs	r2, #65	; 0x41
 80084b6:	5c9b      	ldrb	r3, [r3, r2]
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	2b29      	cmp	r3, #41	; 0x29
 80084bc:	d110      	bne.n	80084e0 <I2C_Slave_ISR_IT+0xb4>
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	4a59      	ldr	r2, [pc, #356]	; (8008628 <I2C_Slave_ISR_IT+0x1fc>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d00c      	beq.n	80084e0 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	2210      	movs	r2, #16
 80084cc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	0018      	movs	r0, r3
 80084d2:	f001 f864 	bl	800959e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	0018      	movs	r0, r3
 80084da:	f000 fc8b 	bl	8008df4 <I2C_ITSlaveSeqCplt>
 80084de:	e01f      	b.n	8008520 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	2210      	movs	r2, #16
 80084e6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80084e8:	e091      	b.n	800860e <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	2210      	movs	r2, #16
 80084f0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084f6:	2204      	movs	r2, #4
 80084f8:	431a      	orrs	r2, r3
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d005      	beq.n	8008510 <I2C_Slave_ISR_IT+0xe4>
 8008504:	697a      	ldr	r2, [r7, #20]
 8008506:	2380      	movs	r3, #128	; 0x80
 8008508:	045b      	lsls	r3, r3, #17
 800850a:	429a      	cmp	r2, r3
 800850c:	d000      	beq.n	8008510 <I2C_Slave_ISR_IT+0xe4>
 800850e:	e07e      	b.n	800860e <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	0011      	movs	r1, r2
 8008518:	0018      	movs	r0, r3
 800851a:	f000 ff15 	bl	8009348 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800851e:	e076      	b.n	800860e <I2C_Slave_ISR_IT+0x1e2>
 8008520:	e075      	b.n	800860e <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	2204      	movs	r2, #4
 8008526:	4013      	ands	r3, r2
 8008528:	d02f      	beq.n	800858a <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2204      	movs	r2, #4
 800852e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008530:	d02b      	beq.n	800858a <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008536:	b29b      	uxth	r3, r3
 8008538:	2b00      	cmp	r3, #0
 800853a:	d018      	beq.n	800856e <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008546:	b2d2      	uxtb	r2, r2
 8008548:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800854e:	1c5a      	adds	r2, r3, #1
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008558:	3b01      	subs	r3, #1
 800855a:	b29a      	uxth	r2, r3
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008564:	b29b      	uxth	r3, r3
 8008566:	3b01      	subs	r3, #1
 8008568:	b29a      	uxth	r2, r3
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008572:	b29b      	uxth	r3, r3
 8008574:	2b00      	cmp	r3, #0
 8008576:	d14c      	bne.n	8008612 <I2C_Slave_ISR_IT+0x1e6>
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	4a2b      	ldr	r2, [pc, #172]	; (8008628 <I2C_Slave_ISR_IT+0x1fc>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d048      	beq.n	8008612 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	0018      	movs	r0, r3
 8008584:	f000 fc36 	bl	8008df4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8008588:	e043      	b.n	8008612 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	2208      	movs	r2, #8
 800858e:	4013      	ands	r3, r2
 8008590:	d00a      	beq.n	80085a8 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2208      	movs	r2, #8
 8008596:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008598:	d006      	beq.n	80085a8 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800859a:	693a      	ldr	r2, [r7, #16]
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	0011      	movs	r1, r2
 80085a0:	0018      	movs	r0, r3
 80085a2:	f000 fb41 	bl	8008c28 <I2C_ITAddrCplt>
 80085a6:	e035      	b.n	8008614 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	2202      	movs	r2, #2
 80085ac:	4013      	ands	r3, r2
 80085ae:	d031      	beq.n	8008614 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2202      	movs	r2, #2
 80085b4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80085b6:	d02d      	beq.n	8008614 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085bc:	b29b      	uxth	r3, r3
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d018      	beq.n	80085f4 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c6:	781a      	ldrb	r2, [r3, #0]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d2:	1c5a      	adds	r2, r3, #1
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085dc:	b29b      	uxth	r3, r3
 80085de:	3b01      	subs	r3, #1
 80085e0:	b29a      	uxth	r2, r3
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085ea:	3b01      	subs	r3, #1
 80085ec:	b29a      	uxth	r2, r3
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	851a      	strh	r2, [r3, #40]	; 0x28
 80085f2:	e00f      	b.n	8008614 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80085f4:	697a      	ldr	r2, [r7, #20]
 80085f6:	2380      	movs	r3, #128	; 0x80
 80085f8:	045b      	lsls	r3, r3, #17
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d002      	beq.n	8008604 <I2C_Slave_ISR_IT+0x1d8>
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d107      	bne.n	8008614 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	0018      	movs	r0, r3
 8008608:	f000 fbf4 	bl	8008df4 <I2C_ITSlaveSeqCplt>
 800860c:	e002      	b.n	8008614 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 800860e:	46c0      	nop			; (mov r8, r8)
 8008610:	e000      	b.n	8008614 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 8008612:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2240      	movs	r2, #64	; 0x40
 8008618:	2100      	movs	r1, #0
 800861a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800861c:	2300      	movs	r3, #0
}
 800861e:	0018      	movs	r0, r3
 8008620:	46bd      	mov	sp, r7
 8008622:	b006      	add	sp, #24
 8008624:	bd80      	pop	{r7, pc}
 8008626:	46c0      	nop			; (mov r8, r8)
 8008628:	ffff0000 	.word	0xffff0000

0800862c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800862c:	b590      	push	{r4, r7, lr}
 800862e:	b089      	sub	sp, #36	; 0x24
 8008630:	af02      	add	r7, sp, #8
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	60b9      	str	r1, [r7, #8]
 8008636:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2240      	movs	r2, #64	; 0x40
 800863c:	5c9b      	ldrb	r3, [r3, r2]
 800863e:	2b01      	cmp	r3, #1
 8008640:	d101      	bne.n	8008646 <I2C_Master_ISR_DMA+0x1a>
 8008642:	2302      	movs	r3, #2
 8008644:	e0e7      	b.n	8008816 <I2C_Master_ISR_DMA+0x1ea>
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2240      	movs	r2, #64	; 0x40
 800864a:	2101      	movs	r1, #1
 800864c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	2210      	movs	r2, #16
 8008652:	4013      	ands	r3, r2
 8008654:	d017      	beq.n	8008686 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2210      	movs	r2, #16
 800865a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800865c:	d013      	beq.n	8008686 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	2210      	movs	r2, #16
 8008664:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800866a:	2204      	movs	r2, #4
 800866c:	431a      	orrs	r2, r3
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2120      	movs	r1, #32
 8008676:	0018      	movs	r0, r3
 8008678:	f001 f80c 	bl	8009694 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	0018      	movs	r0, r3
 8008680:	f000 ff8d 	bl	800959e <I2C_Flush_TXDR>
 8008684:	e0c2      	b.n	800880c <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	2280      	movs	r2, #128	; 0x80
 800868a:	4013      	ands	r3, r2
 800868c:	d100      	bne.n	8008690 <I2C_Master_ISR_DMA+0x64>
 800868e:	e07c      	b.n	800878a <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2240      	movs	r2, #64	; 0x40
 8008694:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8008696:	d100      	bne.n	800869a <I2C_Master_ISR_DMA+0x6e>
 8008698:	e077      	b.n	800878a <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	2140      	movs	r1, #64	; 0x40
 80086a6:	438a      	bics	r2, r1
 80086a8:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d055      	beq.n	8008760 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	b29a      	uxth	r2, r3
 80086bc:	2312      	movs	r3, #18
 80086be:	18fb      	adds	r3, r7, r3
 80086c0:	0592      	lsls	r2, r2, #22
 80086c2:	0d92      	lsrs	r2, r2, #22
 80086c4:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	2bff      	cmp	r3, #255	; 0xff
 80086ce:	d906      	bls.n	80086de <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	22ff      	movs	r2, #255	; 0xff
 80086d4:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80086d6:	2380      	movs	r3, #128	; 0x80
 80086d8:	045b      	lsls	r3, r3, #17
 80086da:	617b      	str	r3, [r7, #20]
 80086dc:	e010      	b.n	8008700 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086e2:	b29a      	uxth	r2, r3
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ec:	4a4c      	ldr	r2, [pc, #304]	; (8008820 <I2C_Master_ISR_DMA+0x1f4>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d003      	beq.n	80086fa <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f6:	617b      	str	r3, [r7, #20]
 80086f8:	e002      	b.n	8008700 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80086fa:	2380      	movs	r3, #128	; 0x80
 80086fc:	049b      	lsls	r3, r3, #18
 80086fe:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008704:	b2da      	uxtb	r2, r3
 8008706:	697c      	ldr	r4, [r7, #20]
 8008708:	2312      	movs	r3, #18
 800870a:	18fb      	adds	r3, r7, r3
 800870c:	8819      	ldrh	r1, [r3, #0]
 800870e:	68f8      	ldr	r0, [r7, #12]
 8008710:	2300      	movs	r3, #0
 8008712:	9300      	str	r3, [sp, #0]
 8008714:	0023      	movs	r3, r4
 8008716:	f000 ff83 	bl	8009620 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800871e:	b29a      	uxth	r2, r3
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008724:	1ad3      	subs	r3, r2, r3
 8008726:	b29a      	uxth	r2, r3
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2241      	movs	r2, #65	; 0x41
 8008730:	5c9b      	ldrb	r3, [r3, r2]
 8008732:	b2db      	uxtb	r3, r3
 8008734:	2b22      	cmp	r3, #34	; 0x22
 8008736:	d109      	bne.n	800874c <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2180      	movs	r1, #128	; 0x80
 8008744:	0209      	lsls	r1, r1, #8
 8008746:	430a      	orrs	r2, r1
 8008748:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800874a:	e05f      	b.n	800880c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	2180      	movs	r1, #128	; 0x80
 8008758:	01c9      	lsls	r1, r1, #7
 800875a:	430a      	orrs	r2, r1
 800875c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800875e:	e055      	b.n	800880c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	685a      	ldr	r2, [r3, #4]
 8008766:	2380      	movs	r3, #128	; 0x80
 8008768:	049b      	lsls	r3, r3, #18
 800876a:	401a      	ands	r2, r3
 800876c:	2380      	movs	r3, #128	; 0x80
 800876e:	049b      	lsls	r3, r3, #18
 8008770:	429a      	cmp	r2, r3
 8008772:	d004      	beq.n	800877e <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	0018      	movs	r0, r3
 8008778:	f000 fafa 	bl	8008d70 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800877c:	e046      	b.n	800880c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2140      	movs	r1, #64	; 0x40
 8008782:	0018      	movs	r0, r3
 8008784:	f000 fde0 	bl	8009348 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8008788:	e040      	b.n	800880c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	2240      	movs	r2, #64	; 0x40
 800878e:	4013      	ands	r3, r2
 8008790:	d02c      	beq.n	80087ec <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2240      	movs	r2, #64	; 0x40
 8008796:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008798:	d028      	beq.n	80087ec <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800879e:	b29b      	uxth	r3, r3
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d11d      	bne.n	80087e0 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	685a      	ldr	r2, [r3, #4]
 80087aa:	2380      	movs	r3, #128	; 0x80
 80087ac:	049b      	lsls	r3, r3, #18
 80087ae:	401a      	ands	r2, r3
 80087b0:	2380      	movs	r3, #128	; 0x80
 80087b2:	049b      	lsls	r3, r3, #18
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d028      	beq.n	800880a <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087bc:	4a18      	ldr	r2, [pc, #96]	; (8008820 <I2C_Master_ISR_DMA+0x1f4>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d109      	bne.n	80087d6 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	685a      	ldr	r2, [r3, #4]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	2180      	movs	r1, #128	; 0x80
 80087ce:	01c9      	lsls	r1, r1, #7
 80087d0:	430a      	orrs	r2, r1
 80087d2:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80087d4:	e019      	b.n	800880a <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	0018      	movs	r0, r3
 80087da:	f000 fac9 	bl	8008d70 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80087de:	e014      	b.n	800880a <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2140      	movs	r1, #64	; 0x40
 80087e4:	0018      	movs	r0, r3
 80087e6:	f000 fdaf 	bl	8009348 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80087ea:	e00e      	b.n	800880a <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	2220      	movs	r2, #32
 80087f0:	4013      	ands	r3, r2
 80087f2:	d00b      	beq.n	800880c <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2220      	movs	r2, #32
 80087f8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80087fa:	d007      	beq.n	800880c <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80087fc:	68ba      	ldr	r2, [r7, #8]
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	0011      	movs	r1, r2
 8008802:	0018      	movs	r0, r3
 8008804:	f000 fb5a 	bl	8008ebc <I2C_ITMasterCplt>
 8008808:	e000      	b.n	800880c <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 800880a:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2240      	movs	r2, #64	; 0x40
 8008810:	2100      	movs	r1, #0
 8008812:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008814:	2300      	movs	r3, #0
}
 8008816:	0018      	movs	r0, r3
 8008818:	46bd      	mov	sp, r7
 800881a:	b007      	add	sp, #28
 800881c:	bd90      	pop	{r4, r7, pc}
 800881e:	46c0      	nop			; (mov r8, r8)
 8008820:	ffff0000 	.word	0xffff0000

08008824 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8008824:	b590      	push	{r4, r7, lr}
 8008826:	b089      	sub	sp, #36	; 0x24
 8008828:	af02      	add	r7, sp, #8
 800882a:	60f8      	str	r0, [r7, #12]
 800882c:	60b9      	str	r1, [r7, #8]
 800882e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8008830:	4b88      	ldr	r3, [pc, #544]	; (8008a54 <I2C_Mem_ISR_DMA+0x230>)
 8008832:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2240      	movs	r2, #64	; 0x40
 8008838:	5c9b      	ldrb	r3, [r3, r2]
 800883a:	2b01      	cmp	r3, #1
 800883c:	d101      	bne.n	8008842 <I2C_Mem_ISR_DMA+0x1e>
 800883e:	2302      	movs	r3, #2
 8008840:	e104      	b.n	8008a4c <I2C_Mem_ISR_DMA+0x228>
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2240      	movs	r2, #64	; 0x40
 8008846:	2101      	movs	r1, #1
 8008848:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	2210      	movs	r2, #16
 800884e:	4013      	ands	r3, r2
 8008850:	d017      	beq.n	8008882 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2210      	movs	r2, #16
 8008856:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008858:	d013      	beq.n	8008882 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2210      	movs	r2, #16
 8008860:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008866:	2204      	movs	r2, #4
 8008868:	431a      	orrs	r2, r3
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2120      	movs	r1, #32
 8008872:	0018      	movs	r0, r3
 8008874:	f000 ff0e 	bl	8009694 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	0018      	movs	r0, r3
 800887c:	f000 fe8f 	bl	800959e <I2C_Flush_TXDR>
 8008880:	e0df      	b.n	8008a42 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	2202      	movs	r2, #2
 8008886:	4013      	ands	r3, r2
 8008888:	d00d      	beq.n	80088a6 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2202      	movs	r2, #2
 800888e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008890:	d009      	beq.n	80088a6 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	68fa      	ldr	r2, [r7, #12]
 8008898:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800889a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2201      	movs	r2, #1
 80088a0:	4252      	negs	r2, r2
 80088a2:	651a      	str	r2, [r3, #80]	; 0x50
 80088a4:	e0cd      	b.n	8008a42 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	2280      	movs	r2, #128	; 0x80
 80088aa:	4013      	ands	r3, r2
 80088ac:	d05e      	beq.n	800896c <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2240      	movs	r2, #64	; 0x40
 80088b2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80088b4:	d05a      	beq.n	800896c <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2110      	movs	r1, #16
 80088ba:	0018      	movs	r0, r3
 80088bc:	f000 feea 	bl	8009694 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d04a      	beq.n	8008960 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	2bff      	cmp	r3, #255	; 0xff
 80088d2:	d910      	bls.n	80088f6 <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	22ff      	movs	r2, #255	; 0xff
 80088d8:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088de:	b299      	uxth	r1, r3
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088e4:	b2da      	uxtb	r2, r3
 80088e6:	2380      	movs	r3, #128	; 0x80
 80088e8:	045b      	lsls	r3, r3, #17
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	2400      	movs	r4, #0
 80088ee:	9400      	str	r4, [sp, #0]
 80088f0:	f000 fe96 	bl	8009620 <I2C_TransferConfig>
 80088f4:	e011      	b.n	800891a <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088fa:	b29a      	uxth	r2, r3
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008904:	b299      	uxth	r1, r3
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800890a:	b2da      	uxtb	r2, r3
 800890c:	2380      	movs	r3, #128	; 0x80
 800890e:	049b      	lsls	r3, r3, #18
 8008910:	68f8      	ldr	r0, [r7, #12]
 8008912:	2400      	movs	r4, #0
 8008914:	9400      	str	r4, [sp, #0]
 8008916:	f000 fe83 	bl	8009620 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800891e:	b29a      	uxth	r2, r3
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008924:	1ad3      	subs	r3, r2, r3
 8008926:	b29a      	uxth	r2, r3
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2241      	movs	r2, #65	; 0x41
 8008930:	5c9b      	ldrb	r3, [r3, r2]
 8008932:	b2db      	uxtb	r3, r3
 8008934:	2b22      	cmp	r3, #34	; 0x22
 8008936:	d109      	bne.n	800894c <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	2180      	movs	r1, #128	; 0x80
 8008944:	0209      	lsls	r1, r1, #8
 8008946:	430a      	orrs	r2, r1
 8008948:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800894a:	e07a      	b.n	8008a42 <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	681a      	ldr	r2, [r3, #0]
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	2180      	movs	r1, #128	; 0x80
 8008958:	01c9      	lsls	r1, r1, #7
 800895a:	430a      	orrs	r2, r1
 800895c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800895e:	e070      	b.n	8008a42 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2140      	movs	r1, #64	; 0x40
 8008964:	0018      	movs	r0, r3
 8008966:	f000 fcef 	bl	8009348 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800896a:	e06a      	b.n	8008a42 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	2240      	movs	r2, #64	; 0x40
 8008970:	4013      	ands	r3, r2
 8008972:	d058      	beq.n	8008a26 <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2240      	movs	r2, #64	; 0x40
 8008978:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800897a:	d054      	beq.n	8008a26 <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2241      	movs	r2, #65	; 0x41
 8008980:	5c9b      	ldrb	r3, [r3, r2]
 8008982:	b2db      	uxtb	r3, r3
 8008984:	2b22      	cmp	r3, #34	; 0x22
 8008986:	d101      	bne.n	800898c <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 8008988:	4b33      	ldr	r3, [pc, #204]	; (8008a58 <I2C_Mem_ISR_DMA+0x234>)
 800898a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008990:	b29b      	uxth	r3, r3
 8008992:	2bff      	cmp	r3, #255	; 0xff
 8008994:	d911      	bls.n	80089ba <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	22ff      	movs	r2, #255	; 0xff
 800899a:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089a0:	b299      	uxth	r1, r3
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089a6:	b2da      	uxtb	r2, r3
 80089a8:	2380      	movs	r3, #128	; 0x80
 80089aa:	045c      	lsls	r4, r3, #17
 80089ac:	68f8      	ldr	r0, [r7, #12]
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	9300      	str	r3, [sp, #0]
 80089b2:	0023      	movs	r3, r4
 80089b4:	f000 fe34 	bl	8009620 <I2C_TransferConfig>
 80089b8:	e012      	b.n	80089e0 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089be:	b29a      	uxth	r2, r3
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089c8:	b299      	uxth	r1, r3
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089ce:	b2da      	uxtb	r2, r3
 80089d0:	2380      	movs	r3, #128	; 0x80
 80089d2:	049c      	lsls	r4, r3, #18
 80089d4:	68f8      	ldr	r0, [r7, #12]
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	9300      	str	r3, [sp, #0]
 80089da:	0023      	movs	r3, r4
 80089dc:	f000 fe20 	bl	8009620 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089e4:	b29a      	uxth	r2, r3
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089ea:	1ad3      	subs	r3, r2, r3
 80089ec:	b29a      	uxth	r2, r3
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2241      	movs	r2, #65	; 0x41
 80089f6:	5c9b      	ldrb	r3, [r3, r2]
 80089f8:	b2db      	uxtb	r3, r3
 80089fa:	2b22      	cmp	r3, #34	; 0x22
 80089fc:	d109      	bne.n	8008a12 <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	2180      	movs	r1, #128	; 0x80
 8008a0a:	0209      	lsls	r1, r1, #8
 8008a0c:	430a      	orrs	r2, r1
 8008a0e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008a10:	e017      	b.n	8008a42 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	2180      	movs	r1, #128	; 0x80
 8008a1e:	01c9      	lsls	r1, r1, #7
 8008a20:	430a      	orrs	r2, r1
 8008a22:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008a24:	e00d      	b.n	8008a42 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	2220      	movs	r2, #32
 8008a2a:	4013      	ands	r3, r2
 8008a2c:	d009      	beq.n	8008a42 <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2220      	movs	r2, #32
 8008a32:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008a34:	d005      	beq.n	8008a42 <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8008a36:	68ba      	ldr	r2, [r7, #8]
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	0011      	movs	r1, r2
 8008a3c:	0018      	movs	r0, r3
 8008a3e:	f000 fa3d 	bl	8008ebc <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2240      	movs	r2, #64	; 0x40
 8008a46:	2100      	movs	r1, #0
 8008a48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008a4a:	2300      	movs	r3, #0
}
 8008a4c:	0018      	movs	r0, r3
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	b007      	add	sp, #28
 8008a52:	bd90      	pop	{r4, r7, pc}
 8008a54:	80002000 	.word	0x80002000
 8008a58:	80002400 	.word	0x80002400

08008a5c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b088      	sub	sp, #32
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a6c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2240      	movs	r2, #64	; 0x40
 8008a76:	5c9b      	ldrb	r3, [r3, r2]
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d101      	bne.n	8008a80 <I2C_Slave_ISR_DMA+0x24>
 8008a7c:	2302      	movs	r3, #2
 8008a7e:	e0cd      	b.n	8008c1c <I2C_Slave_ISR_DMA+0x1c0>
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2240      	movs	r2, #64	; 0x40
 8008a84:	2101      	movs	r1, #1
 8008a86:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	2220      	movs	r2, #32
 8008a8c:	4013      	ands	r3, r2
 8008a8e:	d009      	beq.n	8008aa4 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2220      	movs	r2, #32
 8008a94:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008a96:	d005      	beq.n	8008aa4 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8008a98:	68ba      	ldr	r2, [r7, #8]
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	0011      	movs	r1, r2
 8008a9e:	0018      	movs	r0, r3
 8008aa0:	f000 fada 	bl	8009058 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	2210      	movs	r2, #16
 8008aa8:	4013      	ands	r3, r2
 8008aaa:	d100      	bne.n	8008aae <I2C_Slave_ISR_DMA+0x52>
 8008aac:	e0a3      	b.n	8008bf6 <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2210      	movs	r2, #16
 8008ab2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008ab4:	d100      	bne.n	8008ab8 <I2C_Slave_ISR_DMA+0x5c>
 8008ab6:	e09e      	b.n	8008bf6 <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	2380      	movs	r3, #128	; 0x80
 8008abc:	01db      	lsls	r3, r3, #7
 8008abe:	4013      	ands	r3, r2
 8008ac0:	d105      	bne.n	8008ace <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	2380      	movs	r3, #128	; 0x80
 8008ac6:	021b      	lsls	r3, r3, #8
 8008ac8:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008aca:	d100      	bne.n	8008ace <I2C_Slave_ISR_DMA+0x72>
 8008acc:	e08c      	b.n	8008be8 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d00c      	beq.n	8008af0 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	2380      	movs	r3, #128	; 0x80
 8008ada:	021b      	lsls	r3, r3, #8
 8008adc:	4013      	ands	r3, r2
 8008ade:	d007      	beq.n	8008af0 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d101      	bne.n	8008af0 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 8008aec:	2301      	movs	r3, #1
 8008aee:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d00c      	beq.n	8008b12 <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	2380      	movs	r3, #128	; 0x80
 8008afc:	01db      	lsls	r3, r3, #7
 8008afe:	4013      	ands	r3, r2
 8008b00:	d007      	beq.n	8008b12 <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d101      	bne.n	8008b12 <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8008b12:	69fb      	ldr	r3, [r7, #28]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d12d      	bne.n	8008b74 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2241      	movs	r2, #65	; 0x41
 8008b1c:	5c9b      	ldrb	r3, [r3, r2]
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	2b28      	cmp	r3, #40	; 0x28
 8008b22:	d10b      	bne.n	8008b3c <I2C_Slave_ISR_DMA+0xe0>
 8008b24:	69ba      	ldr	r2, [r7, #24]
 8008b26:	2380      	movs	r3, #128	; 0x80
 8008b28:	049b      	lsls	r3, r3, #18
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d106      	bne.n	8008b3c <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8008b2e:	68ba      	ldr	r2, [r7, #8]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	0011      	movs	r1, r2
 8008b34:	0018      	movs	r0, r3
 8008b36:	f000 fbaf 	bl	8009298 <I2C_ITListenCplt>
 8008b3a:	e054      	b.n	8008be6 <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2241      	movs	r2, #65	; 0x41
 8008b40:	5c9b      	ldrb	r3, [r3, r2]
 8008b42:	b2db      	uxtb	r3, r3
 8008b44:	2b29      	cmp	r3, #41	; 0x29
 8008b46:	d110      	bne.n	8008b6a <I2C_Slave_ISR_DMA+0x10e>
 8008b48:	69bb      	ldr	r3, [r7, #24]
 8008b4a:	4a36      	ldr	r2, [pc, #216]	; (8008c24 <I2C_Slave_ISR_DMA+0x1c8>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d00c      	beq.n	8008b6a <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	2210      	movs	r2, #16
 8008b56:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	0018      	movs	r0, r3
 8008b5c:	f000 fd1f 	bl	800959e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	0018      	movs	r0, r3
 8008b64:	f000 f946 	bl	8008df4 <I2C_ITSlaveSeqCplt>
 8008b68:	e03d      	b.n	8008be6 <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	2210      	movs	r2, #16
 8008b70:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8008b72:	e03e      	b.n	8008bf2 <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	2210      	movs	r2, #16
 8008b7a:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b80:	2204      	movs	r2, #4
 8008b82:	431a      	orrs	r2, r3
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8008b88:	2317      	movs	r3, #23
 8008b8a:	18fb      	adds	r3, r7, r3
 8008b8c:	68fa      	ldr	r2, [r7, #12]
 8008b8e:	2141      	movs	r1, #65	; 0x41
 8008b90:	5c52      	ldrb	r2, [r2, r1]
 8008b92:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d004      	beq.n	8008ba4 <I2C_Slave_ISR_DMA+0x148>
 8008b9a:	69ba      	ldr	r2, [r7, #24]
 8008b9c:	2380      	movs	r3, #128	; 0x80
 8008b9e:	045b      	lsls	r3, r3, #17
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d126      	bne.n	8008bf2 <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008ba4:	2217      	movs	r2, #23
 8008ba6:	18bb      	adds	r3, r7, r2
 8008ba8:	781b      	ldrb	r3, [r3, #0]
 8008baa:	2b21      	cmp	r3, #33	; 0x21
 8008bac:	d003      	beq.n	8008bb6 <I2C_Slave_ISR_DMA+0x15a>
 8008bae:	18bb      	adds	r3, r7, r2
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	2b29      	cmp	r3, #41	; 0x29
 8008bb4:	d103      	bne.n	8008bbe <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2221      	movs	r2, #33	; 0x21
 8008bba:	631a      	str	r2, [r3, #48]	; 0x30
 8008bbc:	e00b      	b.n	8008bd6 <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008bbe:	2217      	movs	r2, #23
 8008bc0:	18bb      	adds	r3, r7, r2
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	2b22      	cmp	r3, #34	; 0x22
 8008bc6:	d003      	beq.n	8008bd0 <I2C_Slave_ISR_DMA+0x174>
 8008bc8:	18bb      	adds	r3, r7, r2
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	2b2a      	cmp	r3, #42	; 0x2a
 8008bce:	d102      	bne.n	8008bd6 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2222      	movs	r2, #34	; 0x22
 8008bd4:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	0011      	movs	r1, r2
 8008bde:	0018      	movs	r0, r3
 8008be0:	f000 fbb2 	bl	8009348 <I2C_ITError>
      if (treatdmanack == 1U)
 8008be4:	e005      	b.n	8008bf2 <I2C_Slave_ISR_DMA+0x196>
 8008be6:	e004      	b.n	8008bf2 <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2210      	movs	r2, #16
 8008bee:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008bf0:	e00f      	b.n	8008c12 <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 8008bf2:	46c0      	nop			; (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008bf4:	e00d      	b.n	8008c12 <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	2208      	movs	r2, #8
 8008bfa:	4013      	ands	r3, r2
 8008bfc:	d009      	beq.n	8008c12 <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2208      	movs	r2, #8
 8008c02:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008c04:	d005      	beq.n	8008c12 <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8008c06:	68ba      	ldr	r2, [r7, #8]
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	0011      	movs	r1, r2
 8008c0c:	0018      	movs	r0, r3
 8008c0e:	f000 f80b 	bl	8008c28 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2240      	movs	r2, #64	; 0x40
 8008c16:	2100      	movs	r1, #0
 8008c18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008c1a:	2300      	movs	r3, #0
}
 8008c1c:	0018      	movs	r0, r3
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	b008      	add	sp, #32
 8008c22:	bd80      	pop	{r7, pc}
 8008c24:	ffff0000 	.word	0xffff0000

08008c28 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008c28:	b5b0      	push	{r4, r5, r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2241      	movs	r2, #65	; 0x41
 8008c36:	5c9b      	ldrb	r3, [r3, r2]
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	001a      	movs	r2, r3
 8008c3c:	2328      	movs	r3, #40	; 0x28
 8008c3e:	4013      	ands	r3, r2
 8008c40:	2b28      	cmp	r3, #40	; 0x28
 8008c42:	d000      	beq.n	8008c46 <I2C_ITAddrCplt+0x1e>
 8008c44:	e088      	b.n	8008d58 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	699b      	ldr	r3, [r3, #24]
 8008c4c:	0c1b      	lsrs	r3, r3, #16
 8008c4e:	b2da      	uxtb	r2, r3
 8008c50:	250f      	movs	r5, #15
 8008c52:	197b      	adds	r3, r7, r5
 8008c54:	2101      	movs	r1, #1
 8008c56:	400a      	ands	r2, r1
 8008c58:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	699b      	ldr	r3, [r3, #24]
 8008c60:	0c1b      	lsrs	r3, r3, #16
 8008c62:	b29a      	uxth	r2, r3
 8008c64:	200c      	movs	r0, #12
 8008c66:	183b      	adds	r3, r7, r0
 8008c68:	21fe      	movs	r1, #254	; 0xfe
 8008c6a:	400a      	ands	r2, r1
 8008c6c:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	b29a      	uxth	r2, r3
 8008c76:	240a      	movs	r4, #10
 8008c78:	193b      	adds	r3, r7, r4
 8008c7a:	0592      	lsls	r2, r2, #22
 8008c7c:	0d92      	lsrs	r2, r2, #22
 8008c7e:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	68db      	ldr	r3, [r3, #12]
 8008c86:	b29a      	uxth	r2, r3
 8008c88:	2308      	movs	r3, #8
 8008c8a:	18fb      	adds	r3, r7, r3
 8008c8c:	21fe      	movs	r1, #254	; 0xfe
 8008c8e:	400a      	ands	r2, r1
 8008c90:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	68db      	ldr	r3, [r3, #12]
 8008c96:	2b02      	cmp	r3, #2
 8008c98:	d148      	bne.n	8008d2c <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8008c9a:	0021      	movs	r1, r4
 8008c9c:	187b      	adds	r3, r7, r1
 8008c9e:	881b      	ldrh	r3, [r3, #0]
 8008ca0:	09db      	lsrs	r3, r3, #7
 8008ca2:	b29a      	uxth	r2, r3
 8008ca4:	183b      	adds	r3, r7, r0
 8008ca6:	881b      	ldrh	r3, [r3, #0]
 8008ca8:	4053      	eors	r3, r2
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	001a      	movs	r2, r3
 8008cae:	2306      	movs	r3, #6
 8008cb0:	4013      	ands	r3, r2
 8008cb2:	d120      	bne.n	8008cf6 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8008cb4:	183b      	adds	r3, r7, r0
 8008cb6:	187a      	adds	r2, r7, r1
 8008cb8:	8812      	ldrh	r2, [r2, #0]
 8008cba:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cc0:	1c5a      	adds	r2, r3, #1
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cca:	2b02      	cmp	r3, #2
 8008ccc:	d14c      	bne.n	8008d68 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2208      	movs	r2, #8
 8008cda:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2240      	movs	r2, #64	; 0x40
 8008ce0:	2100      	movs	r1, #0
 8008ce2:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008ce4:	183b      	adds	r3, r7, r0
 8008ce6:	881a      	ldrh	r2, [r3, #0]
 8008ce8:	197b      	adds	r3, r7, r5
 8008cea:	7819      	ldrb	r1, [r3, #0]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	0018      	movs	r0, r3
 8008cf0:	f7ff fa42 	bl	8008178 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008cf4:	e038      	b.n	8008d68 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8008cf6:	240c      	movs	r4, #12
 8008cf8:	193b      	adds	r3, r7, r4
 8008cfa:	2208      	movs	r2, #8
 8008cfc:	18ba      	adds	r2, r7, r2
 8008cfe:	8812      	ldrh	r2, [r2, #0]
 8008d00:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008d02:	2380      	movs	r3, #128	; 0x80
 8008d04:	021a      	lsls	r2, r3, #8
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	0011      	movs	r1, r2
 8008d0a:	0018      	movs	r0, r3
 8008d0c:	f000 fd50 	bl	80097b0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2240      	movs	r2, #64	; 0x40
 8008d14:	2100      	movs	r1, #0
 8008d16:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008d18:	193b      	adds	r3, r7, r4
 8008d1a:	881a      	ldrh	r2, [r3, #0]
 8008d1c:	230f      	movs	r3, #15
 8008d1e:	18fb      	adds	r3, r7, r3
 8008d20:	7819      	ldrb	r1, [r3, #0]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	0018      	movs	r0, r3
 8008d26:	f7ff fa27 	bl	8008178 <HAL_I2C_AddrCallback>
}
 8008d2a:	e01d      	b.n	8008d68 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008d2c:	2380      	movs	r3, #128	; 0x80
 8008d2e:	021a      	lsls	r2, r3, #8
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	0011      	movs	r1, r2
 8008d34:	0018      	movs	r0, r3
 8008d36:	f000 fd3b 	bl	80097b0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2240      	movs	r2, #64	; 0x40
 8008d3e:	2100      	movs	r1, #0
 8008d40:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008d42:	230c      	movs	r3, #12
 8008d44:	18fb      	adds	r3, r7, r3
 8008d46:	881a      	ldrh	r2, [r3, #0]
 8008d48:	230f      	movs	r3, #15
 8008d4a:	18fb      	adds	r3, r7, r3
 8008d4c:	7819      	ldrb	r1, [r3, #0]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	0018      	movs	r0, r3
 8008d52:	f7ff fa11 	bl	8008178 <HAL_I2C_AddrCallback>
}
 8008d56:	e007      	b.n	8008d68 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	2208      	movs	r2, #8
 8008d5e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2240      	movs	r2, #64	; 0x40
 8008d64:	2100      	movs	r1, #0
 8008d66:	5499      	strb	r1, [r3, r2]
}
 8008d68:	46c0      	nop			; (mov r8, r8)
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	b004      	add	sp, #16
 8008d6e:	bdb0      	pop	{r4, r5, r7, pc}

08008d70 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2242      	movs	r2, #66	; 0x42
 8008d7c:	2100      	movs	r1, #0
 8008d7e:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2241      	movs	r2, #65	; 0x41
 8008d84:	5c9b      	ldrb	r3, [r3, r2]
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	2b21      	cmp	r3, #33	; 0x21
 8008d8a:	d117      	bne.n	8008dbc <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2241      	movs	r2, #65	; 0x41
 8008d90:	2120      	movs	r1, #32
 8008d92:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2211      	movs	r2, #17
 8008d98:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2101      	movs	r1, #1
 8008da4:	0018      	movs	r0, r3
 8008da6:	f000 fd03 	bl	80097b0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2240      	movs	r2, #64	; 0x40
 8008dae:	2100      	movs	r1, #0
 8008db0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	0018      	movs	r0, r3
 8008db6:	f7f9 fc4d 	bl	8002654 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008dba:	e016      	b.n	8008dea <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2241      	movs	r2, #65	; 0x41
 8008dc0:	2120      	movs	r1, #32
 8008dc2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2212      	movs	r2, #18
 8008dc8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2102      	movs	r1, #2
 8008dd4:	0018      	movs	r0, r3
 8008dd6:	f000 fceb 	bl	80097b0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2240      	movs	r2, #64	; 0x40
 8008dde:	2100      	movs	r1, #0
 8008de0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	0018      	movs	r0, r3
 8008de6:	f7f9 fbd5 	bl	8002594 <HAL_I2C_MasterRxCpltCallback>
}
 8008dea:	46c0      	nop			; (mov r8, r8)
 8008dec:	46bd      	mov	sp, r7
 8008dee:	b002      	add	sp, #8
 8008df0:	bd80      	pop	{r7, pc}
	...

08008df4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2242      	movs	r2, #66	; 0x42
 8008e08:	2100      	movs	r1, #0
 8008e0a:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008e0c:	68fa      	ldr	r2, [r7, #12]
 8008e0e:	2380      	movs	r3, #128	; 0x80
 8008e10:	01db      	lsls	r3, r3, #7
 8008e12:	4013      	ands	r3, r2
 8008e14:	d008      	beq.n	8008e28 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4924      	ldr	r1, [pc, #144]	; (8008eb4 <I2C_ITSlaveSeqCplt+0xc0>)
 8008e22:	400a      	ands	r2, r1
 8008e24:	601a      	str	r2, [r3, #0]
 8008e26:	e00c      	b.n	8008e42 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008e28:	68fa      	ldr	r2, [r7, #12]
 8008e2a:	2380      	movs	r3, #128	; 0x80
 8008e2c:	021b      	lsls	r3, r3, #8
 8008e2e:	4013      	ands	r3, r2
 8008e30:	d007      	beq.n	8008e42 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	491e      	ldr	r1, [pc, #120]	; (8008eb8 <I2C_ITSlaveSeqCplt+0xc4>)
 8008e3e:	400a      	ands	r2, r1
 8008e40:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2241      	movs	r2, #65	; 0x41
 8008e46:	5c9b      	ldrb	r3, [r3, r2]
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	2b29      	cmp	r3, #41	; 0x29
 8008e4c:	d114      	bne.n	8008e78 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2241      	movs	r2, #65	; 0x41
 8008e52:	2128      	movs	r1, #40	; 0x28
 8008e54:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2221      	movs	r2, #33	; 0x21
 8008e5a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2101      	movs	r1, #1
 8008e60:	0018      	movs	r0, r3
 8008e62:	f000 fca5 	bl	80097b0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2240      	movs	r2, #64	; 0x40
 8008e6a:	2100      	movs	r1, #0
 8008e6c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	0018      	movs	r0, r3
 8008e72:	f7ff f971 	bl	8008158 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008e76:	e019      	b.n	8008eac <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2241      	movs	r2, #65	; 0x41
 8008e7c:	5c9b      	ldrb	r3, [r3, r2]
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	2b2a      	cmp	r3, #42	; 0x2a
 8008e82:	d113      	bne.n	8008eac <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2241      	movs	r2, #65	; 0x41
 8008e88:	2128      	movs	r1, #40	; 0x28
 8008e8a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2222      	movs	r2, #34	; 0x22
 8008e90:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2102      	movs	r1, #2
 8008e96:	0018      	movs	r0, r3
 8008e98:	f000 fc8a 	bl	80097b0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2240      	movs	r2, #64	; 0x40
 8008ea0:	2100      	movs	r1, #0
 8008ea2:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	0018      	movs	r0, r3
 8008ea8:	f7ff f95e 	bl	8008168 <HAL_I2C_SlaveRxCpltCallback>
}
 8008eac:	46c0      	nop			; (mov r8, r8)
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	b004      	add	sp, #16
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	ffffbfff 	.word	0xffffbfff
 8008eb8:	ffff7fff 	.word	0xffff7fff

08008ebc <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b086      	sub	sp, #24
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	2220      	movs	r2, #32
 8008ed0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2241      	movs	r2, #65	; 0x41
 8008ed6:	5c9b      	ldrb	r3, [r3, r2]
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	2b21      	cmp	r3, #33	; 0x21
 8008edc:	d108      	bne.n	8008ef0 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2101      	movs	r1, #1
 8008ee2:	0018      	movs	r0, r3
 8008ee4:	f000 fc64 	bl	80097b0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2211      	movs	r2, #17
 8008eec:	631a      	str	r2, [r3, #48]	; 0x30
 8008eee:	e00d      	b.n	8008f0c <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2241      	movs	r2, #65	; 0x41
 8008ef4:	5c9b      	ldrb	r3, [r3, r2]
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	2b22      	cmp	r3, #34	; 0x22
 8008efa:	d107      	bne.n	8008f0c <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2102      	movs	r1, #2
 8008f00:	0018      	movs	r0, r3
 8008f02:	f000 fc55 	bl	80097b0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2212      	movs	r2, #18
 8008f0a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	685a      	ldr	r2, [r3, #4]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	494e      	ldr	r1, [pc, #312]	; (8009050 <I2C_ITMasterCplt+0x194>)
 8008f18:	400a      	ands	r2, r1
 8008f1a:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	4a4b      	ldr	r2, [pc, #300]	; (8009054 <I2C_ITMasterCplt+0x198>)
 8008f26:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	2210      	movs	r2, #16
 8008f2c:	4013      	ands	r3, r2
 8008f2e:	d009      	beq.n	8008f44 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	2210      	movs	r2, #16
 8008f36:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f3c:	2204      	movs	r2, #4
 8008f3e:	431a      	orrs	r2, r3
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2241      	movs	r2, #65	; 0x41
 8008f48:	5c9b      	ldrb	r3, [r3, r2]
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	2b60      	cmp	r3, #96	; 0x60
 8008f4e:	d109      	bne.n	8008f64 <I2C_ITMasterCplt+0xa8>
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	2204      	movs	r2, #4
 8008f54:	4013      	ands	r3, r2
 8008f56:	d005      	beq.n	8008f64 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8008f62:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	0018      	movs	r0, r3
 8008f68:	f000 fb19 	bl	800959e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f70:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2241      	movs	r2, #65	; 0x41
 8008f76:	5c9b      	ldrb	r3, [r3, r2]
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	2b60      	cmp	r3, #96	; 0x60
 8008f7c:	d002      	beq.n	8008f84 <I2C_ITMasterCplt+0xc8>
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d007      	beq.n	8008f94 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	0011      	movs	r1, r2
 8008f8c:	0018      	movs	r0, r3
 8008f8e:	f000 f9db 	bl	8009348 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008f92:	e058      	b.n	8009046 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2241      	movs	r2, #65	; 0x41
 8008f98:	5c9b      	ldrb	r3, [r3, r2]
 8008f9a:	b2db      	uxtb	r3, r3
 8008f9c:	2b21      	cmp	r3, #33	; 0x21
 8008f9e:	d126      	bne.n	8008fee <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2241      	movs	r2, #65	; 0x41
 8008fa4:	2120      	movs	r1, #32
 8008fa6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2200      	movs	r2, #0
 8008fac:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2242      	movs	r2, #66	; 0x42
 8008fb2:	5c9b      	ldrb	r3, [r3, r2]
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	2b40      	cmp	r3, #64	; 0x40
 8008fb8:	d10c      	bne.n	8008fd4 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2242      	movs	r2, #66	; 0x42
 8008fbe:	2100      	movs	r1, #0
 8008fc0:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2240      	movs	r2, #64	; 0x40
 8008fc6:	2100      	movs	r1, #0
 8008fc8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	0018      	movs	r0, r3
 8008fce:	f7ff f8eb 	bl	80081a8 <HAL_I2C_MemTxCpltCallback>
}
 8008fd2:	e038      	b.n	8009046 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2242      	movs	r2, #66	; 0x42
 8008fd8:	2100      	movs	r1, #0
 8008fda:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2240      	movs	r2, #64	; 0x40
 8008fe0:	2100      	movs	r1, #0
 8008fe2:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	0018      	movs	r0, r3
 8008fe8:	f7f9 fb34 	bl	8002654 <HAL_I2C_MasterTxCpltCallback>
}
 8008fec:	e02b      	b.n	8009046 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2241      	movs	r2, #65	; 0x41
 8008ff2:	5c9b      	ldrb	r3, [r3, r2]
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	2b22      	cmp	r3, #34	; 0x22
 8008ff8:	d125      	bne.n	8009046 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2241      	movs	r2, #65	; 0x41
 8008ffe:	2120      	movs	r1, #32
 8009000:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2200      	movs	r2, #0
 8009006:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2242      	movs	r2, #66	; 0x42
 800900c:	5c9b      	ldrb	r3, [r3, r2]
 800900e:	b2db      	uxtb	r3, r3
 8009010:	2b40      	cmp	r3, #64	; 0x40
 8009012:	d10c      	bne.n	800902e <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2242      	movs	r2, #66	; 0x42
 8009018:	2100      	movs	r1, #0
 800901a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2240      	movs	r2, #64	; 0x40
 8009020:	2100      	movs	r1, #0
 8009022:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	0018      	movs	r0, r3
 8009028:	f7ff f8c6 	bl	80081b8 <HAL_I2C_MemRxCpltCallback>
}
 800902c:	e00b      	b.n	8009046 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2242      	movs	r2, #66	; 0x42
 8009032:	2100      	movs	r1, #0
 8009034:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2240      	movs	r2, #64	; 0x40
 800903a:	2100      	movs	r1, #0
 800903c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	0018      	movs	r0, r3
 8009042:	f7f9 faa7 	bl	8002594 <HAL_I2C_MasterRxCpltCallback>
}
 8009046:	46c0      	nop			; (mov r8, r8)
 8009048:	46bd      	mov	sp, r7
 800904a:	b006      	add	sp, #24
 800904c:	bd80      	pop	{r7, pc}
 800904e:	46c0      	nop			; (mov r8, r8)
 8009050:	fe00e800 	.word	0xfe00e800
 8009054:	ffff0000 	.word	0xffff0000

08009058 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b086      	sub	sp, #24
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800906e:	200f      	movs	r0, #15
 8009070:	183b      	adds	r3, r7, r0
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	2141      	movs	r1, #65	; 0x41
 8009076:	5c52      	ldrb	r2, [r2, r1]
 8009078:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	2220      	movs	r2, #32
 8009080:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009082:	183b      	adds	r3, r7, r0
 8009084:	781b      	ldrb	r3, [r3, #0]
 8009086:	2b21      	cmp	r3, #33	; 0x21
 8009088:	d003      	beq.n	8009092 <I2C_ITSlaveCplt+0x3a>
 800908a:	183b      	adds	r3, r7, r0
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	2b29      	cmp	r3, #41	; 0x29
 8009090:	d109      	bne.n	80090a6 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8009092:	4a7b      	ldr	r2, [pc, #492]	; (8009280 <I2C_ITSlaveCplt+0x228>)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	0011      	movs	r1, r2
 8009098:	0018      	movs	r0, r3
 800909a:	f000 fb89 	bl	80097b0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2221      	movs	r2, #33	; 0x21
 80090a2:	631a      	str	r2, [r3, #48]	; 0x30
 80090a4:	e011      	b.n	80090ca <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80090a6:	220f      	movs	r2, #15
 80090a8:	18bb      	adds	r3, r7, r2
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	2b22      	cmp	r3, #34	; 0x22
 80090ae:	d003      	beq.n	80090b8 <I2C_ITSlaveCplt+0x60>
 80090b0:	18bb      	adds	r3, r7, r2
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	2b2a      	cmp	r3, #42	; 0x2a
 80090b6:	d108      	bne.n	80090ca <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80090b8:	4a72      	ldr	r2, [pc, #456]	; (8009284 <I2C_ITSlaveCplt+0x22c>)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	0011      	movs	r1, r2
 80090be:	0018      	movs	r0, r3
 80090c0:	f000 fb76 	bl	80097b0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2222      	movs	r2, #34	; 0x22
 80090c8:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	685a      	ldr	r2, [r3, #4]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	2180      	movs	r1, #128	; 0x80
 80090d6:	0209      	lsls	r1, r1, #8
 80090d8:	430a      	orrs	r2, r1
 80090da:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	685a      	ldr	r2, [r3, #4]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4968      	ldr	r1, [pc, #416]	; (8009288 <I2C_ITSlaveCplt+0x230>)
 80090e8:	400a      	ands	r2, r1
 80090ea:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	0018      	movs	r0, r3
 80090f0:	f000 fa55 	bl	800959e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80090f4:	693a      	ldr	r2, [r7, #16]
 80090f6:	2380      	movs	r3, #128	; 0x80
 80090f8:	01db      	lsls	r3, r3, #7
 80090fa:	4013      	ands	r3, r2
 80090fc:	d013      	beq.n	8009126 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	681a      	ldr	r2, [r3, #0]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4960      	ldr	r1, [pc, #384]	; (800928c <I2C_ITSlaveCplt+0x234>)
 800910a:	400a      	ands	r2, r1
 800910c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009112:	2b00      	cmp	r3, #0
 8009114:	d01f      	beq.n	8009156 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	b29a      	uxth	r2, r3
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009124:	e017      	b.n	8009156 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009126:	693a      	ldr	r2, [r7, #16]
 8009128:	2380      	movs	r3, #128	; 0x80
 800912a:	021b      	lsls	r3, r3, #8
 800912c:	4013      	ands	r3, r2
 800912e:	d012      	beq.n	8009156 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	681a      	ldr	r2, [r3, #0]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4955      	ldr	r1, [pc, #340]	; (8009290 <I2C_ITSlaveCplt+0x238>)
 800913c:	400a      	ands	r2, r1
 800913e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009144:	2b00      	cmp	r3, #0
 8009146:	d006      	beq.n	8009156 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	b29a      	uxth	r2, r3
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	2204      	movs	r2, #4
 800915a:	4013      	ands	r3, r2
 800915c:	d020      	beq.n	80091a0 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	2204      	movs	r2, #4
 8009162:	4393      	bics	r3, r2
 8009164:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009170:	b2d2      	uxtb	r2, r2
 8009172:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009178:	1c5a      	adds	r2, r3, #1
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009182:	2b00      	cmp	r3, #0
 8009184:	d00c      	beq.n	80091a0 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800918a:	3b01      	subs	r3, #1
 800918c:	b29a      	uxth	r2, r3
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009196:	b29b      	uxth	r3, r3
 8009198:	3b01      	subs	r3, #1
 800919a:	b29a      	uxth	r2, r3
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d005      	beq.n	80091b6 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091ae:	2204      	movs	r2, #4
 80091b0:	431a      	orrs	r2, r3
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2242      	movs	r2, #66	; 0x42
 80091ba:	2100      	movs	r1, #0
 80091bc:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2200      	movs	r2, #0
 80091c2:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d013      	beq.n	80091f4 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	0011      	movs	r1, r2
 80091d4:	0018      	movs	r0, r3
 80091d6:	f000 f8b7 	bl	8009348 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2241      	movs	r2, #65	; 0x41
 80091de:	5c9b      	ldrb	r3, [r3, r2]
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	2b28      	cmp	r3, #40	; 0x28
 80091e4:	d147      	bne.n	8009276 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80091e6:	697a      	ldr	r2, [r7, #20]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	0011      	movs	r1, r2
 80091ec:	0018      	movs	r0, r3
 80091ee:	f000 f853 	bl	8009298 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80091f2:	e040      	b.n	8009276 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f8:	4a26      	ldr	r2, [pc, #152]	; (8009294 <I2C_ITSlaveCplt+0x23c>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d016      	beq.n	800922c <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	0018      	movs	r0, r3
 8009202:	f7ff fdf7 	bl	8008df4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	4a22      	ldr	r2, [pc, #136]	; (8009294 <I2C_ITSlaveCplt+0x23c>)
 800920a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2241      	movs	r2, #65	; 0x41
 8009210:	2120      	movs	r1, #32
 8009212:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2200      	movs	r2, #0
 8009218:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2240      	movs	r2, #64	; 0x40
 800921e:	2100      	movs	r1, #0
 8009220:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	0018      	movs	r0, r3
 8009226:	f7fe ffb7 	bl	8008198 <HAL_I2C_ListenCpltCallback>
}
 800922a:	e024      	b.n	8009276 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2241      	movs	r2, #65	; 0x41
 8009230:	5c9b      	ldrb	r3, [r3, r2]
 8009232:	b2db      	uxtb	r3, r3
 8009234:	2b22      	cmp	r3, #34	; 0x22
 8009236:	d10f      	bne.n	8009258 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2241      	movs	r2, #65	; 0x41
 800923c:	2120      	movs	r1, #32
 800923e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2200      	movs	r2, #0
 8009244:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2240      	movs	r2, #64	; 0x40
 800924a:	2100      	movs	r1, #0
 800924c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	0018      	movs	r0, r3
 8009252:	f7fe ff89 	bl	8008168 <HAL_I2C_SlaveRxCpltCallback>
}
 8009256:	e00e      	b.n	8009276 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2241      	movs	r2, #65	; 0x41
 800925c:	2120      	movs	r1, #32
 800925e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2200      	movs	r2, #0
 8009264:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2240      	movs	r2, #64	; 0x40
 800926a:	2100      	movs	r1, #0
 800926c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	0018      	movs	r0, r3
 8009272:	f7fe ff71 	bl	8008158 <HAL_I2C_SlaveTxCpltCallback>
}
 8009276:	46c0      	nop			; (mov r8, r8)
 8009278:	46bd      	mov	sp, r7
 800927a:	b006      	add	sp, #24
 800927c:	bd80      	pop	{r7, pc}
 800927e:	46c0      	nop			; (mov r8, r8)
 8009280:	00008001 	.word	0x00008001
 8009284:	00008002 	.word	0x00008002
 8009288:	fe00e800 	.word	0xfe00e800
 800928c:	ffffbfff 	.word	0xffffbfff
 8009290:	ffff7fff 	.word	0xffff7fff
 8009294:	ffff0000 	.word	0xffff0000

08009298 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b082      	sub	sp, #8
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
 80092a0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	4a26      	ldr	r2, [pc, #152]	; (8009340 <I2C_ITListenCplt+0xa8>)
 80092a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2200      	movs	r2, #0
 80092ac:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2241      	movs	r2, #65	; 0x41
 80092b2:	2120      	movs	r1, #32
 80092b4:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2242      	movs	r2, #66	; 0x42
 80092ba:	2100      	movs	r1, #0
 80092bc:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2200      	movs	r2, #0
 80092c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	2204      	movs	r2, #4
 80092c8:	4013      	ands	r3, r2
 80092ca:	d022      	beq.n	8009312 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d6:	b2d2      	uxtb	r2, r2
 80092d8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092de:	1c5a      	adds	r2, r3, #1
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d012      	beq.n	8009312 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092f0:	3b01      	subs	r3, #1
 80092f2:	b29a      	uxth	r2, r3
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	3b01      	subs	r3, #1
 8009300:	b29a      	uxth	r2, r3
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800930a:	2204      	movs	r2, #4
 800930c:	431a      	orrs	r2, r3
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009312:	4a0c      	ldr	r2, [pc, #48]	; (8009344 <I2C_ITListenCplt+0xac>)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	0011      	movs	r1, r2
 8009318:	0018      	movs	r0, r3
 800931a:	f000 fa49 	bl	80097b0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	2210      	movs	r2, #16
 8009324:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2240      	movs	r2, #64	; 0x40
 800932a:	2100      	movs	r1, #0
 800932c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	0018      	movs	r0, r3
 8009332:	f7fe ff31 	bl	8008198 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8009336:	46c0      	nop			; (mov r8, r8)
 8009338:	46bd      	mov	sp, r7
 800933a:	b002      	add	sp, #8
 800933c:	bd80      	pop	{r7, pc}
 800933e:	46c0      	nop			; (mov r8, r8)
 8009340:	ffff0000 	.word	0xffff0000
 8009344:	00008003 	.word	0x00008003

08009348 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009352:	200f      	movs	r0, #15
 8009354:	183b      	adds	r3, r7, r0
 8009356:	687a      	ldr	r2, [r7, #4]
 8009358:	2141      	movs	r1, #65	; 0x41
 800935a:	5c52      	ldrb	r2, [r2, r1]
 800935c:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2242      	movs	r2, #66	; 0x42
 8009362:	2100      	movs	r1, #0
 8009364:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	4a72      	ldr	r2, [pc, #456]	; (8009534 <I2C_ITError+0x1ec>)
 800936a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	431a      	orrs	r2, r3
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800937e:	183b      	adds	r3, r7, r0
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	2b28      	cmp	r3, #40	; 0x28
 8009384:	d007      	beq.n	8009396 <I2C_ITError+0x4e>
 8009386:	183b      	adds	r3, r7, r0
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	2b29      	cmp	r3, #41	; 0x29
 800938c:	d003      	beq.n	8009396 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800938e:	183b      	adds	r3, r7, r0
 8009390:	781b      	ldrb	r3, [r3, #0]
 8009392:	2b2a      	cmp	r3, #42	; 0x2a
 8009394:	d10c      	bne.n	80093b0 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2103      	movs	r1, #3
 800939a:	0018      	movs	r0, r3
 800939c:	f000 fa08 	bl	80097b0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2241      	movs	r2, #65	; 0x41
 80093a4:	2128      	movs	r1, #40	; 0x28
 80093a6:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	4a63      	ldr	r2, [pc, #396]	; (8009538 <I2C_ITError+0x1f0>)
 80093ac:	635a      	str	r2, [r3, #52]	; 0x34
 80093ae:	e032      	b.n	8009416 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80093b0:	4a62      	ldr	r2, [pc, #392]	; (800953c <I2C_ITError+0x1f4>)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	0011      	movs	r1, r2
 80093b6:	0018      	movs	r0, r3
 80093b8:	f000 f9fa 	bl	80097b0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	0018      	movs	r0, r3
 80093c0:	f000 f8ed 	bl	800959e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2241      	movs	r2, #65	; 0x41
 80093c8:	5c9b      	ldrb	r3, [r3, r2]
 80093ca:	b2db      	uxtb	r3, r3
 80093cc:	2b60      	cmp	r3, #96	; 0x60
 80093ce:	d01f      	beq.n	8009410 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2241      	movs	r2, #65	; 0x41
 80093d4:	2120      	movs	r1, #32
 80093d6:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	699b      	ldr	r3, [r3, #24]
 80093de:	2220      	movs	r2, #32
 80093e0:	4013      	ands	r3, r2
 80093e2:	2b20      	cmp	r3, #32
 80093e4:	d114      	bne.n	8009410 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	699b      	ldr	r3, [r3, #24]
 80093ec:	2210      	movs	r2, #16
 80093ee:	4013      	ands	r3, r2
 80093f0:	2b10      	cmp	r3, #16
 80093f2:	d109      	bne.n	8009408 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2210      	movs	r2, #16
 80093fa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009400:	2204      	movs	r2, #4
 8009402:	431a      	orrs	r2, r3
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	2220      	movs	r2, #32
 800940e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2200      	movs	r2, #0
 8009414:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800941a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009420:	2b00      	cmp	r3, #0
 8009422:	d03b      	beq.n	800949c <I2C_ITError+0x154>
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	2b11      	cmp	r3, #17
 8009428:	d002      	beq.n	8009430 <I2C_ITError+0xe8>
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	2b21      	cmp	r3, #33	; 0x21
 800942e:	d135      	bne.n	800949c <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	2380      	movs	r3, #128	; 0x80
 8009438:	01db      	lsls	r3, r3, #7
 800943a:	401a      	ands	r2, r3
 800943c:	2380      	movs	r3, #128	; 0x80
 800943e:	01db      	lsls	r3, r3, #7
 8009440:	429a      	cmp	r2, r3
 8009442:	d107      	bne.n	8009454 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	681a      	ldr	r2, [r3, #0]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	493c      	ldr	r1, [pc, #240]	; (8009540 <I2C_ITError+0x1f8>)
 8009450:	400a      	ands	r2, r1
 8009452:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009458:	0018      	movs	r0, r3
 800945a:	f7fe fa1d 	bl	8007898 <HAL_DMA_GetState>
 800945e:	0003      	movs	r3, r0
 8009460:	2b01      	cmp	r3, #1
 8009462:	d016      	beq.n	8009492 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009468:	4a36      	ldr	r2, [pc, #216]	; (8009544 <I2C_ITError+0x1fc>)
 800946a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2240      	movs	r2, #64	; 0x40
 8009470:	2100      	movs	r1, #0
 8009472:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009478:	0018      	movs	r0, r3
 800947a:	f7fe f926 	bl	80076ca <HAL_DMA_Abort_IT>
 800947e:	1e03      	subs	r3, r0, #0
 8009480:	d051      	beq.n	8009526 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009486:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800948c:	0018      	movs	r0, r3
 800948e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009490:	e049      	b.n	8009526 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	0018      	movs	r0, r3
 8009496:	f000 f859 	bl	800954c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800949a:	e044      	b.n	8009526 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d03b      	beq.n	800951c <I2C_ITError+0x1d4>
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	2b12      	cmp	r3, #18
 80094a8:	d002      	beq.n	80094b0 <I2C_ITError+0x168>
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	2b22      	cmp	r3, #34	; 0x22
 80094ae:	d135      	bne.n	800951c <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	681a      	ldr	r2, [r3, #0]
 80094b6:	2380      	movs	r3, #128	; 0x80
 80094b8:	021b      	lsls	r3, r3, #8
 80094ba:	401a      	ands	r2, r3
 80094bc:	2380      	movs	r3, #128	; 0x80
 80094be:	021b      	lsls	r3, r3, #8
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d107      	bne.n	80094d4 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	491e      	ldr	r1, [pc, #120]	; (8009548 <I2C_ITError+0x200>)
 80094d0:	400a      	ands	r2, r1
 80094d2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094d8:	0018      	movs	r0, r3
 80094da:	f7fe f9dd 	bl	8007898 <HAL_DMA_GetState>
 80094de:	0003      	movs	r3, r0
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d016      	beq.n	8009512 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094e8:	4a16      	ldr	r2, [pc, #88]	; (8009544 <I2C_ITError+0x1fc>)
 80094ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2240      	movs	r2, #64	; 0x40
 80094f0:	2100      	movs	r1, #0
 80094f2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094f8:	0018      	movs	r0, r3
 80094fa:	f7fe f8e6 	bl	80076ca <HAL_DMA_Abort_IT>
 80094fe:	1e03      	subs	r3, r0, #0
 8009500:	d013      	beq.n	800952a <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009506:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800950c:	0018      	movs	r0, r3
 800950e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009510:	e00b      	b.n	800952a <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	0018      	movs	r0, r3
 8009516:	f000 f819 	bl	800954c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800951a:	e006      	b.n	800952a <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	0018      	movs	r0, r3
 8009520:	f000 f814 	bl	800954c <I2C_TreatErrorCallback>
  }
}
 8009524:	e002      	b.n	800952c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009526:	46c0      	nop			; (mov r8, r8)
 8009528:	e000      	b.n	800952c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800952a:	46c0      	nop			; (mov r8, r8)
}
 800952c:	46c0      	nop			; (mov r8, r8)
 800952e:	46bd      	mov	sp, r7
 8009530:	b004      	add	sp, #16
 8009532:	bd80      	pop	{r7, pc}
 8009534:	ffff0000 	.word	0xffff0000
 8009538:	0800842d 	.word	0x0800842d
 800953c:	00008003 	.word	0x00008003
 8009540:	ffffbfff 	.word	0xffffbfff
 8009544:	080095e3 	.word	0x080095e3
 8009548:	ffff7fff 	.word	0xffff7fff

0800954c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2241      	movs	r2, #65	; 0x41
 8009558:	5c9b      	ldrb	r3, [r3, r2]
 800955a:	b2db      	uxtb	r3, r3
 800955c:	2b60      	cmp	r3, #96	; 0x60
 800955e:	d10f      	bne.n	8009580 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2241      	movs	r2, #65	; 0x41
 8009564:	2120      	movs	r1, #32
 8009566:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2200      	movs	r2, #0
 800956c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2240      	movs	r2, #64	; 0x40
 8009572:	2100      	movs	r1, #0
 8009574:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	0018      	movs	r0, r3
 800957a:	f7fe fe25 	bl	80081c8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800957e:	e00a      	b.n	8009596 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2240      	movs	r2, #64	; 0x40
 800958a:	2100      	movs	r1, #0
 800958c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	0018      	movs	r0, r3
 8009592:	f7f9 f87f 	bl	8002694 <HAL_I2C_ErrorCallback>
}
 8009596:	46c0      	nop			; (mov r8, r8)
 8009598:	46bd      	mov	sp, r7
 800959a:	b002      	add	sp, #8
 800959c:	bd80      	pop	{r7, pc}

0800959e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800959e:	b580      	push	{r7, lr}
 80095a0:	b082      	sub	sp, #8
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	699b      	ldr	r3, [r3, #24]
 80095ac:	2202      	movs	r2, #2
 80095ae:	4013      	ands	r3, r2
 80095b0:	2b02      	cmp	r3, #2
 80095b2:	d103      	bne.n	80095bc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	2200      	movs	r2, #0
 80095ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	699b      	ldr	r3, [r3, #24]
 80095c2:	2201      	movs	r2, #1
 80095c4:	4013      	ands	r3, r2
 80095c6:	2b01      	cmp	r3, #1
 80095c8:	d007      	beq.n	80095da <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	699a      	ldr	r2, [r3, #24]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	2101      	movs	r1, #1
 80095d6:	430a      	orrs	r2, r1
 80095d8:	619a      	str	r2, [r3, #24]
  }
}
 80095da:	46c0      	nop			; (mov r8, r8)
 80095dc:	46bd      	mov	sp, r7
 80095de:	b002      	add	sp, #8
 80095e0:	bd80      	pop	{r7, pc}

080095e2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80095e2:	b580      	push	{r7, lr}
 80095e4:	b084      	sub	sp, #16
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ee:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d003      	beq.n	8009600 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095fc:	2200      	movs	r2, #0
 80095fe:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009604:	2b00      	cmp	r3, #0
 8009606:	d003      	beq.n	8009610 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800960c:	2200      	movs	r2, #0
 800960e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	0018      	movs	r0, r3
 8009614:	f7ff ff9a 	bl	800954c <I2C_TreatErrorCallback>
}
 8009618:	46c0      	nop			; (mov r8, r8)
 800961a:	46bd      	mov	sp, r7
 800961c:	b004      	add	sp, #16
 800961e:	bd80      	pop	{r7, pc}

08009620 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009620:	b590      	push	{r4, r7, lr}
 8009622:	b087      	sub	sp, #28
 8009624:	af00      	add	r7, sp, #0
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	0008      	movs	r0, r1
 800962a:	0011      	movs	r1, r2
 800962c:	607b      	str	r3, [r7, #4]
 800962e:	240a      	movs	r4, #10
 8009630:	193b      	adds	r3, r7, r4
 8009632:	1c02      	adds	r2, r0, #0
 8009634:	801a      	strh	r2, [r3, #0]
 8009636:	2009      	movs	r0, #9
 8009638:	183b      	adds	r3, r7, r0
 800963a:	1c0a      	adds	r2, r1, #0
 800963c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800963e:	193b      	adds	r3, r7, r4
 8009640:	881b      	ldrh	r3, [r3, #0]
 8009642:	059b      	lsls	r3, r3, #22
 8009644:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009646:	183b      	adds	r3, r7, r0
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	0419      	lsls	r1, r3, #16
 800964c:	23ff      	movs	r3, #255	; 0xff
 800964e:	041b      	lsls	r3, r3, #16
 8009650:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009652:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800965a:	4313      	orrs	r3, r2
 800965c:	005b      	lsls	r3, r3, #1
 800965e:	085b      	lsrs	r3, r3, #1
 8009660:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800966a:	0d51      	lsrs	r1, r2, #21
 800966c:	2280      	movs	r2, #128	; 0x80
 800966e:	00d2      	lsls	r2, r2, #3
 8009670:	400a      	ands	r2, r1
 8009672:	4907      	ldr	r1, [pc, #28]	; (8009690 <I2C_TransferConfig+0x70>)
 8009674:	430a      	orrs	r2, r1
 8009676:	43d2      	mvns	r2, r2
 8009678:	401a      	ands	r2, r3
 800967a:	0011      	movs	r1, r2
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	697a      	ldr	r2, [r7, #20]
 8009682:	430a      	orrs	r2, r1
 8009684:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009686:	46c0      	nop			; (mov r8, r8)
 8009688:	46bd      	mov	sp, r7
 800968a:	b007      	add	sp, #28
 800968c:	bd90      	pop	{r4, r7, pc}
 800968e:	46c0      	nop			; (mov r8, r8)
 8009690:	03ff63ff 	.word	0x03ff63ff

08009694 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b084      	sub	sp, #16
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	000a      	movs	r2, r1
 800969e:	1cbb      	adds	r3, r7, #2
 80096a0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80096a2:	2300      	movs	r3, #0
 80096a4:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096aa:	4b3e      	ldr	r3, [pc, #248]	; (80097a4 <I2C_Enable_IRQ+0x110>)
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d035      	beq.n	800971c <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80096b4:	4b3c      	ldr	r3, [pc, #240]	; (80097a8 <I2C_Enable_IRQ+0x114>)
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d030      	beq.n	800971c <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80096be:	4b3b      	ldr	r3, [pc, #236]	; (80097ac <I2C_Enable_IRQ+0x118>)
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d02b      	beq.n	800971c <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80096c4:	1cbb      	adds	r3, r7, #2
 80096c6:	2200      	movs	r2, #0
 80096c8:	5e9b      	ldrsh	r3, [r3, r2]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	da03      	bge.n	80096d6 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	22b8      	movs	r2, #184	; 0xb8
 80096d2:	4313      	orrs	r3, r2
 80096d4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80096d6:	1cbb      	adds	r3, r7, #2
 80096d8:	881b      	ldrh	r3, [r3, #0]
 80096da:	2201      	movs	r2, #1
 80096dc:	4013      	ands	r3, r2
 80096de:	d003      	beq.n	80096e8 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	22f2      	movs	r2, #242	; 0xf2
 80096e4:	4313      	orrs	r3, r2
 80096e6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80096e8:	1cbb      	adds	r3, r7, #2
 80096ea:	881b      	ldrh	r3, [r3, #0]
 80096ec:	2202      	movs	r2, #2
 80096ee:	4013      	ands	r3, r2
 80096f0:	d003      	beq.n	80096fa <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	22f4      	movs	r2, #244	; 0xf4
 80096f6:	4313      	orrs	r3, r2
 80096f8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80096fa:	1cbb      	adds	r3, r7, #2
 80096fc:	881b      	ldrh	r3, [r3, #0]
 80096fe:	2b10      	cmp	r3, #16
 8009700:	d103      	bne.n	800970a <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2290      	movs	r2, #144	; 0x90
 8009706:	4313      	orrs	r3, r2
 8009708:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800970a:	1cbb      	adds	r3, r7, #2
 800970c:	881b      	ldrh	r3, [r3, #0]
 800970e:	2b20      	cmp	r3, #32
 8009710:	d13c      	bne.n	800978c <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2220      	movs	r2, #32
 8009716:	4313      	orrs	r3, r2
 8009718:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800971a:	e037      	b.n	800978c <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800971c:	1cbb      	adds	r3, r7, #2
 800971e:	2200      	movs	r2, #0
 8009720:	5e9b      	ldrsh	r3, [r3, r2]
 8009722:	2b00      	cmp	r3, #0
 8009724:	da03      	bge.n	800972e <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	22b8      	movs	r2, #184	; 0xb8
 800972a:	4313      	orrs	r3, r2
 800972c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800972e:	1cbb      	adds	r3, r7, #2
 8009730:	881b      	ldrh	r3, [r3, #0]
 8009732:	2201      	movs	r2, #1
 8009734:	4013      	ands	r3, r2
 8009736:	d003      	beq.n	8009740 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	22f2      	movs	r2, #242	; 0xf2
 800973c:	4313      	orrs	r3, r2
 800973e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009740:	1cbb      	adds	r3, r7, #2
 8009742:	881b      	ldrh	r3, [r3, #0]
 8009744:	2202      	movs	r2, #2
 8009746:	4013      	ands	r3, r2
 8009748:	d003      	beq.n	8009752 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	22f4      	movs	r2, #244	; 0xf4
 800974e:	4313      	orrs	r3, r2
 8009750:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009752:	1cbb      	adds	r3, r7, #2
 8009754:	881b      	ldrh	r3, [r3, #0]
 8009756:	2b10      	cmp	r3, #16
 8009758:	d103      	bne.n	8009762 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2290      	movs	r2, #144	; 0x90
 800975e:	4313      	orrs	r3, r2
 8009760:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009762:	1cbb      	adds	r3, r7, #2
 8009764:	881b      	ldrh	r3, [r3, #0]
 8009766:	2b20      	cmp	r3, #32
 8009768:	d103      	bne.n	8009772 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	2260      	movs	r2, #96	; 0x60
 800976e:	4313      	orrs	r3, r2
 8009770:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009776:	4b0d      	ldr	r3, [pc, #52]	; (80097ac <I2C_Enable_IRQ+0x118>)
 8009778:	429a      	cmp	r2, r3
 800977a:	d007      	beq.n	800978c <I2C_Enable_IRQ+0xf8>
 800977c:	1cbb      	adds	r3, r7, #2
 800977e:	881b      	ldrh	r3, [r3, #0]
 8009780:	2b40      	cmp	r3, #64	; 0x40
 8009782:	d103      	bne.n	800978c <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2240      	movs	r2, #64	; 0x40
 8009788:	4313      	orrs	r3, r2
 800978a:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	6819      	ldr	r1, [r3, #0]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	68fa      	ldr	r2, [r7, #12]
 8009798:	430a      	orrs	r2, r1
 800979a:	601a      	str	r2, [r3, #0]
}
 800979c:	46c0      	nop			; (mov r8, r8)
 800979e:	46bd      	mov	sp, r7
 80097a0:	b004      	add	sp, #16
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	0800862d 	.word	0x0800862d
 80097a8:	08008a5d 	.word	0x08008a5d
 80097ac:	08008825 	.word	0x08008825

080097b0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	000a      	movs	r2, r1
 80097ba:	1cbb      	adds	r3, r7, #2
 80097bc:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80097be:	2300      	movs	r3, #0
 80097c0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80097c2:	1cbb      	adds	r3, r7, #2
 80097c4:	881b      	ldrh	r3, [r3, #0]
 80097c6:	2201      	movs	r2, #1
 80097c8:	4013      	ands	r3, r2
 80097ca:	d010      	beq.n	80097ee <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2242      	movs	r2, #66	; 0x42
 80097d0:	4313      	orrs	r3, r2
 80097d2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2241      	movs	r2, #65	; 0x41
 80097d8:	5c9b      	ldrb	r3, [r3, r2]
 80097da:	b2db      	uxtb	r3, r3
 80097dc:	001a      	movs	r2, r3
 80097de:	2328      	movs	r3, #40	; 0x28
 80097e0:	4013      	ands	r3, r2
 80097e2:	2b28      	cmp	r3, #40	; 0x28
 80097e4:	d003      	beq.n	80097ee <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	22b0      	movs	r2, #176	; 0xb0
 80097ea:	4313      	orrs	r3, r2
 80097ec:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80097ee:	1cbb      	adds	r3, r7, #2
 80097f0:	881b      	ldrh	r3, [r3, #0]
 80097f2:	2202      	movs	r2, #2
 80097f4:	4013      	ands	r3, r2
 80097f6:	d010      	beq.n	800981a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2244      	movs	r2, #68	; 0x44
 80097fc:	4313      	orrs	r3, r2
 80097fe:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2241      	movs	r2, #65	; 0x41
 8009804:	5c9b      	ldrb	r3, [r3, r2]
 8009806:	b2db      	uxtb	r3, r3
 8009808:	001a      	movs	r2, r3
 800980a:	2328      	movs	r3, #40	; 0x28
 800980c:	4013      	ands	r3, r2
 800980e:	2b28      	cmp	r3, #40	; 0x28
 8009810:	d003      	beq.n	800981a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	22b0      	movs	r2, #176	; 0xb0
 8009816:	4313      	orrs	r3, r2
 8009818:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800981a:	1cbb      	adds	r3, r7, #2
 800981c:	2200      	movs	r2, #0
 800981e:	5e9b      	ldrsh	r3, [r3, r2]
 8009820:	2b00      	cmp	r3, #0
 8009822:	da03      	bge.n	800982c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	22b8      	movs	r2, #184	; 0xb8
 8009828:	4313      	orrs	r3, r2
 800982a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800982c:	1cbb      	adds	r3, r7, #2
 800982e:	881b      	ldrh	r3, [r3, #0]
 8009830:	2b10      	cmp	r3, #16
 8009832:	d103      	bne.n	800983c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2290      	movs	r2, #144	; 0x90
 8009838:	4313      	orrs	r3, r2
 800983a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800983c:	1cbb      	adds	r3, r7, #2
 800983e:	881b      	ldrh	r3, [r3, #0]
 8009840:	2b20      	cmp	r3, #32
 8009842:	d103      	bne.n	800984c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2220      	movs	r2, #32
 8009848:	4313      	orrs	r3, r2
 800984a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800984c:	1cbb      	adds	r3, r7, #2
 800984e:	881b      	ldrh	r3, [r3, #0]
 8009850:	2b40      	cmp	r3, #64	; 0x40
 8009852:	d103      	bne.n	800985c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	2240      	movs	r2, #64	; 0x40
 8009858:	4313      	orrs	r3, r2
 800985a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	43d9      	mvns	r1, r3
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	400a      	ands	r2, r1
 800986c:	601a      	str	r2, [r3, #0]
}
 800986e:	46c0      	nop			; (mov r8, r8)
 8009870:	46bd      	mov	sp, r7
 8009872:	b004      	add	sp, #16
 8009874:	bd80      	pop	{r7, pc}
	...

08009878 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2241      	movs	r2, #65	; 0x41
 8009886:	5c9b      	ldrb	r3, [r3, r2]
 8009888:	b2db      	uxtb	r3, r3
 800988a:	2b20      	cmp	r3, #32
 800988c:	d138      	bne.n	8009900 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2240      	movs	r2, #64	; 0x40
 8009892:	5c9b      	ldrb	r3, [r3, r2]
 8009894:	2b01      	cmp	r3, #1
 8009896:	d101      	bne.n	800989c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009898:	2302      	movs	r3, #2
 800989a:	e032      	b.n	8009902 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2240      	movs	r2, #64	; 0x40
 80098a0:	2101      	movs	r1, #1
 80098a2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2241      	movs	r2, #65	; 0x41
 80098a8:	2124      	movs	r1, #36	; 0x24
 80098aa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	2101      	movs	r1, #1
 80098b8:	438a      	bics	r2, r1
 80098ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4911      	ldr	r1, [pc, #68]	; (800990c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80098c8:	400a      	ands	r2, r1
 80098ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	6819      	ldr	r1, [r3, #0]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	683a      	ldr	r2, [r7, #0]
 80098d8:	430a      	orrs	r2, r1
 80098da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2101      	movs	r1, #1
 80098e8:	430a      	orrs	r2, r1
 80098ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2241      	movs	r2, #65	; 0x41
 80098f0:	2120      	movs	r1, #32
 80098f2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2240      	movs	r2, #64	; 0x40
 80098f8:	2100      	movs	r1, #0
 80098fa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80098fc:	2300      	movs	r3, #0
 80098fe:	e000      	b.n	8009902 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009900:	2302      	movs	r3, #2
  }
}
 8009902:	0018      	movs	r0, r3
 8009904:	46bd      	mov	sp, r7
 8009906:	b002      	add	sp, #8
 8009908:	bd80      	pop	{r7, pc}
 800990a:	46c0      	nop			; (mov r8, r8)
 800990c:	ffffefff 	.word	0xffffefff

08009910 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b084      	sub	sp, #16
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
 8009918:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2241      	movs	r2, #65	; 0x41
 800991e:	5c9b      	ldrb	r3, [r3, r2]
 8009920:	b2db      	uxtb	r3, r3
 8009922:	2b20      	cmp	r3, #32
 8009924:	d139      	bne.n	800999a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2240      	movs	r2, #64	; 0x40
 800992a:	5c9b      	ldrb	r3, [r3, r2]
 800992c:	2b01      	cmp	r3, #1
 800992e:	d101      	bne.n	8009934 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009930:	2302      	movs	r3, #2
 8009932:	e033      	b.n	800999c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2240      	movs	r2, #64	; 0x40
 8009938:	2101      	movs	r1, #1
 800993a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2241      	movs	r2, #65	; 0x41
 8009940:	2124      	movs	r1, #36	; 0x24
 8009942:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	681a      	ldr	r2, [r3, #0]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	2101      	movs	r1, #1
 8009950:	438a      	bics	r2, r1
 8009952:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	4a11      	ldr	r2, [pc, #68]	; (80099a4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8009960:	4013      	ands	r3, r2
 8009962:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	021b      	lsls	r3, r3, #8
 8009968:	68fa      	ldr	r2, [r7, #12]
 800996a:	4313      	orrs	r3, r2
 800996c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	68fa      	ldr	r2, [r7, #12]
 8009974:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	681a      	ldr	r2, [r3, #0]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	2101      	movs	r1, #1
 8009982:	430a      	orrs	r2, r1
 8009984:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2241      	movs	r2, #65	; 0x41
 800998a:	2120      	movs	r1, #32
 800998c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2240      	movs	r2, #64	; 0x40
 8009992:	2100      	movs	r1, #0
 8009994:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009996:	2300      	movs	r3, #0
 8009998:	e000      	b.n	800999c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800999a:	2302      	movs	r3, #2
  }
}
 800999c:	0018      	movs	r0, r3
 800999e:	46bd      	mov	sp, r7
 80099a0:	b004      	add	sp, #16
 80099a2:	bd80      	pop	{r7, pc}
 80099a4:	fffff0ff 	.word	0xfffff0ff

080099a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b088      	sub	sp, #32
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d102      	bne.n	80099bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80099b6:	2301      	movs	r3, #1
 80099b8:	f000 fb76 	bl	800a0a8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	2201      	movs	r2, #1
 80099c2:	4013      	ands	r3, r2
 80099c4:	d100      	bne.n	80099c8 <HAL_RCC_OscConfig+0x20>
 80099c6:	e08e      	b.n	8009ae6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80099c8:	4bc5      	ldr	r3, [pc, #788]	; (8009ce0 <HAL_RCC_OscConfig+0x338>)
 80099ca:	685b      	ldr	r3, [r3, #4]
 80099cc:	220c      	movs	r2, #12
 80099ce:	4013      	ands	r3, r2
 80099d0:	2b04      	cmp	r3, #4
 80099d2:	d00e      	beq.n	80099f2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80099d4:	4bc2      	ldr	r3, [pc, #776]	; (8009ce0 <HAL_RCC_OscConfig+0x338>)
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	220c      	movs	r2, #12
 80099da:	4013      	ands	r3, r2
 80099dc:	2b08      	cmp	r3, #8
 80099de:	d117      	bne.n	8009a10 <HAL_RCC_OscConfig+0x68>
 80099e0:	4bbf      	ldr	r3, [pc, #764]	; (8009ce0 <HAL_RCC_OscConfig+0x338>)
 80099e2:	685a      	ldr	r2, [r3, #4]
 80099e4:	23c0      	movs	r3, #192	; 0xc0
 80099e6:	025b      	lsls	r3, r3, #9
 80099e8:	401a      	ands	r2, r3
 80099ea:	2380      	movs	r3, #128	; 0x80
 80099ec:	025b      	lsls	r3, r3, #9
 80099ee:	429a      	cmp	r2, r3
 80099f0:	d10e      	bne.n	8009a10 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80099f2:	4bbb      	ldr	r3, [pc, #748]	; (8009ce0 <HAL_RCC_OscConfig+0x338>)
 80099f4:	681a      	ldr	r2, [r3, #0]
 80099f6:	2380      	movs	r3, #128	; 0x80
 80099f8:	029b      	lsls	r3, r3, #10
 80099fa:	4013      	ands	r3, r2
 80099fc:	d100      	bne.n	8009a00 <HAL_RCC_OscConfig+0x58>
 80099fe:	e071      	b.n	8009ae4 <HAL_RCC_OscConfig+0x13c>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	685b      	ldr	r3, [r3, #4]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d000      	beq.n	8009a0a <HAL_RCC_OscConfig+0x62>
 8009a08:	e06c      	b.n	8009ae4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	f000 fb4c 	bl	800a0a8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d107      	bne.n	8009a28 <HAL_RCC_OscConfig+0x80>
 8009a18:	4bb1      	ldr	r3, [pc, #708]	; (8009ce0 <HAL_RCC_OscConfig+0x338>)
 8009a1a:	681a      	ldr	r2, [r3, #0]
 8009a1c:	4bb0      	ldr	r3, [pc, #704]	; (8009ce0 <HAL_RCC_OscConfig+0x338>)
 8009a1e:	2180      	movs	r1, #128	; 0x80
 8009a20:	0249      	lsls	r1, r1, #9
 8009a22:	430a      	orrs	r2, r1
 8009a24:	601a      	str	r2, [r3, #0]
 8009a26:	e02f      	b.n	8009a88 <HAL_RCC_OscConfig+0xe0>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d10c      	bne.n	8009a4a <HAL_RCC_OscConfig+0xa2>
 8009a30:	4bab      	ldr	r3, [pc, #684]	; (8009ce0 <HAL_RCC_OscConfig+0x338>)
 8009a32:	681a      	ldr	r2, [r3, #0]
 8009a34:	4baa      	ldr	r3, [pc, #680]	; (8009ce0 <HAL_RCC_OscConfig+0x338>)
 8009a36:	49ab      	ldr	r1, [pc, #684]	; (8009ce4 <HAL_RCC_OscConfig+0x33c>)
 8009a38:	400a      	ands	r2, r1
 8009a3a:	601a      	str	r2, [r3, #0]
 8009a3c:	4ba8      	ldr	r3, [pc, #672]	; (8009ce0 <HAL_RCC_OscConfig+0x338>)
 8009a3e:	681a      	ldr	r2, [r3, #0]
 8009a40:	4ba7      	ldr	r3, [pc, #668]	; (8009ce0 <HAL_RCC_OscConfig+0x338>)
 8009a42:	49a9      	ldr	r1, [pc, #676]	; (8009ce8 <HAL_RCC_OscConfig+0x340>)
 8009a44:	400a      	ands	r2, r1
 8009a46:	601a      	str	r2, [r3, #0]
 8009a48:	e01e      	b.n	8009a88 <HAL_RCC_OscConfig+0xe0>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	2b05      	cmp	r3, #5
 8009a50:	d10e      	bne.n	8009a70 <HAL_RCC_OscConfig+0xc8>
 8009a52:	4ba3      	ldr	r3, [pc, #652]	; (8009ce0 <HAL_RCC_OscConfig+0x338>)
 8009a54:	681a      	ldr	r2, [r3, #0]
 8009a56:	4ba2      	ldr	r3, [pc, #648]	; (8009ce0 <HAL_RCC_OscConfig+0x338>)
 8009a58:	2180      	movs	r1, #128	; 0x80
 8009a5a:	02c9      	lsls	r1, r1, #11
 8009a5c:	430a      	orrs	r2, r1
 8009a5e:	601a      	str	r2, [r3, #0]
 8009a60:	4b9f      	ldr	r3, [pc, #636]	; (8009ce0 <HAL_RCC_OscConfig+0x338>)
 8009a62:	681a      	ldr	r2, [r3, #0]
 8009a64:	4b9e      	ldr	r3, [pc, #632]	; (8009ce0 <HAL_RCC_OscConfig+0x338>)
 8009a66:	2180      	movs	r1, #128	; 0x80
 8009a68:	0249      	lsls	r1, r1, #9
 8009a6a:	430a      	orrs	r2, r1
 8009a6c:	601a      	str	r2, [r3, #0]
 8009a6e:	e00b      	b.n	8009a88 <HAL_RCC_OscConfig+0xe0>
 8009a70:	4b9b      	ldr	r3, [pc, #620]	; (8009ce0 <HAL_RCC_OscConfig+0x338>)
 8009a72:	681a      	ldr	r2, [r3, #0]
 8009a74:	4b9a      	ldr	r3, [pc, #616]	; (8009ce0 <HAL_RCC_OscConfig+0x338>)
 8009a76:	499b      	ldr	r1, [pc, #620]	; (8009ce4 <HAL_RCC_OscConfig+0x33c>)
 8009a78:	400a      	ands	r2, r1
 8009a7a:	601a      	str	r2, [r3, #0]
 8009a7c:	4b98      	ldr	r3, [pc, #608]	; (8009ce0 <HAL_RCC_OscConfig+0x338>)
 8009a7e:	681a      	ldr	r2, [r3, #0]
 8009a80:	4b97      	ldr	r3, [pc, #604]	; (8009ce0 <HAL_RCC_OscConfig+0x338>)
 8009a82:	4999      	ldr	r1, [pc, #612]	; (8009ce8 <HAL_RCC_OscConfig+0x340>)
 8009a84:	400a      	ands	r2, r1
 8009a86:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	685b      	ldr	r3, [r3, #4]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d014      	beq.n	8009aba <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a90:	f7fc fc5e 	bl	8006350 <HAL_GetTick>
 8009a94:	0003      	movs	r3, r0
 8009a96:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009a98:	e008      	b.n	8009aac <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009a9a:	f7fc fc59 	bl	8006350 <HAL_GetTick>
 8009a9e:	0002      	movs	r2, r0
 8009aa0:	69bb      	ldr	r3, [r7, #24]
 8009aa2:	1ad3      	subs	r3, r2, r3
 8009aa4:	2b64      	cmp	r3, #100	; 0x64
 8009aa6:	d901      	bls.n	8009aac <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8009aa8:	2303      	movs	r3, #3
 8009aaa:	e2fd      	b.n	800a0a8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009aac:	4b8c      	ldr	r3, [pc, #560]	; (8009ce0 <HAL_RCC_OscConfig+0x338>)
 8009aae:	681a      	ldr	r2, [r3, #0]
 8009ab0:	2380      	movs	r3, #128	; 0x80
 8009ab2:	029b      	lsls	r3, r3, #10
 8009ab4:	4013      	ands	r3, r2
 8009ab6:	d0f0      	beq.n	8009a9a <HAL_RCC_OscConfig+0xf2>
 8009ab8:	e015      	b.n	8009ae6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009aba:	f7fc fc49 	bl	8006350 <HAL_GetTick>
 8009abe:	0003      	movs	r3, r0
 8009ac0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009ac2:	e008      	b.n	8009ad6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009ac4:	f7fc fc44 	bl	8006350 <HAL_GetTick>
 8009ac8:	0002      	movs	r2, r0
 8009aca:	69bb      	ldr	r3, [r7, #24]
 8009acc:	1ad3      	subs	r3, r2, r3
 8009ace:	2b64      	cmp	r3, #100	; 0x64
 8009ad0:	d901      	bls.n	8009ad6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8009ad2:	2303      	movs	r3, #3
 8009ad4:	e2e8      	b.n	800a0a8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009ad6:	4b82      	ldr	r3, [pc, #520]	; (8009ce0 <HAL_RCC_OscConfig+0x338>)
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	2380      	movs	r3, #128	; 0x80
 8009adc:	029b      	lsls	r3, r3, #10
 8009ade:	4013      	ands	r3, r2
 8009ae0:	d1f0      	bne.n	8009ac4 <HAL_RCC_OscConfig+0x11c>
 8009ae2:	e000      	b.n	8009ae6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ae4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	2202      	movs	r2, #2
 8009aec:	4013      	ands	r3, r2
 8009aee:	d100      	bne.n	8009af2 <HAL_RCC_OscConfig+0x14a>
 8009af0:	e06c      	b.n	8009bcc <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8009af2:	4b7b      	ldr	r3, [pc, #492]	; (8009ce0 <HAL_RCC_OscConfig+0x338>)
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	220c      	movs	r2, #12
 8009af8:	4013      	ands	r3, r2
 8009afa:	d00e      	beq.n	8009b1a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8009afc:	4b78      	ldr	r3, [pc, #480]	; (8009ce0 <HAL_RCC_OscConfig+0x338>)
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	220c      	movs	r2, #12
 8009b02:	4013      	ands	r3, r2
 8009b04:	2b08      	cmp	r3, #8
 8009b06:	d11f      	bne.n	8009b48 <HAL_RCC_OscConfig+0x1a0>
 8009b08:	4b75      	ldr	r3, [pc, #468]	; (8009ce0 <HAL_RCC_OscConfig+0x338>)
 8009b0a:	685a      	ldr	r2, [r3, #4]
 8009b0c:	23c0      	movs	r3, #192	; 0xc0
 8009b0e:	025b      	lsls	r3, r3, #9
 8009b10:	401a      	ands	r2, r3
 8009b12:	2380      	movs	r3, #128	; 0x80
 8009b14:	021b      	lsls	r3, r3, #8
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d116      	bne.n	8009b48 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009b1a:	4b71      	ldr	r3, [pc, #452]	; (8009ce0 <HAL_RCC_OscConfig+0x338>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	2202      	movs	r2, #2
 8009b20:	4013      	ands	r3, r2
 8009b22:	d005      	beq.n	8009b30 <HAL_RCC_OscConfig+0x188>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	68db      	ldr	r3, [r3, #12]
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	d001      	beq.n	8009b30 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	e2bb      	b.n	800a0a8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b30:	4b6b      	ldr	r3, [pc, #428]	; (8009ce0 <HAL_RCC_OscConfig+0x338>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	22f8      	movs	r2, #248	; 0xf8
 8009b36:	4393      	bics	r3, r2
 8009b38:	0019      	movs	r1, r3
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	691b      	ldr	r3, [r3, #16]
 8009b3e:	00da      	lsls	r2, r3, #3
 8009b40:	4b67      	ldr	r3, [pc, #412]	; (8009ce0 <HAL_RCC_OscConfig+0x338>)
 8009b42:	430a      	orrs	r2, r1
 8009b44:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009b46:	e041      	b.n	8009bcc <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d024      	beq.n	8009b9a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009b50:	4b63      	ldr	r3, [pc, #396]	; (8009ce0 <HAL_RCC_OscConfig+0x338>)
 8009b52:	681a      	ldr	r2, [r3, #0]
 8009b54:	4b62      	ldr	r3, [pc, #392]	; (8009ce0 <HAL_RCC_OscConfig+0x338>)
 8009b56:	2101      	movs	r1, #1
 8009b58:	430a      	orrs	r2, r1
 8009b5a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b5c:	f7fc fbf8 	bl	8006350 <HAL_GetTick>
 8009b60:	0003      	movs	r3, r0
 8009b62:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b64:	e008      	b.n	8009b78 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009b66:	f7fc fbf3 	bl	8006350 <HAL_GetTick>
 8009b6a:	0002      	movs	r2, r0
 8009b6c:	69bb      	ldr	r3, [r7, #24]
 8009b6e:	1ad3      	subs	r3, r2, r3
 8009b70:	2b02      	cmp	r3, #2
 8009b72:	d901      	bls.n	8009b78 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009b74:	2303      	movs	r3, #3
 8009b76:	e297      	b.n	800a0a8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b78:	4b59      	ldr	r3, [pc, #356]	; (8009ce0 <HAL_RCC_OscConfig+0x338>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	2202      	movs	r2, #2
 8009b7e:	4013      	ands	r3, r2
 8009b80:	d0f1      	beq.n	8009b66 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b82:	4b57      	ldr	r3, [pc, #348]	; (8009ce0 <HAL_RCC_OscConfig+0x338>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	22f8      	movs	r2, #248	; 0xf8
 8009b88:	4393      	bics	r3, r2
 8009b8a:	0019      	movs	r1, r3
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	691b      	ldr	r3, [r3, #16]
 8009b90:	00da      	lsls	r2, r3, #3
 8009b92:	4b53      	ldr	r3, [pc, #332]	; (8009ce0 <HAL_RCC_OscConfig+0x338>)
 8009b94:	430a      	orrs	r2, r1
 8009b96:	601a      	str	r2, [r3, #0]
 8009b98:	e018      	b.n	8009bcc <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009b9a:	4b51      	ldr	r3, [pc, #324]	; (8009ce0 <HAL_RCC_OscConfig+0x338>)
 8009b9c:	681a      	ldr	r2, [r3, #0]
 8009b9e:	4b50      	ldr	r3, [pc, #320]	; (8009ce0 <HAL_RCC_OscConfig+0x338>)
 8009ba0:	2101      	movs	r1, #1
 8009ba2:	438a      	bics	r2, r1
 8009ba4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ba6:	f7fc fbd3 	bl	8006350 <HAL_GetTick>
 8009baa:	0003      	movs	r3, r0
 8009bac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009bae:	e008      	b.n	8009bc2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009bb0:	f7fc fbce 	bl	8006350 <HAL_GetTick>
 8009bb4:	0002      	movs	r2, r0
 8009bb6:	69bb      	ldr	r3, [r7, #24]
 8009bb8:	1ad3      	subs	r3, r2, r3
 8009bba:	2b02      	cmp	r3, #2
 8009bbc:	d901      	bls.n	8009bc2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8009bbe:	2303      	movs	r3, #3
 8009bc0:	e272      	b.n	800a0a8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009bc2:	4b47      	ldr	r3, [pc, #284]	; (8009ce0 <HAL_RCC_OscConfig+0x338>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	2202      	movs	r2, #2
 8009bc8:	4013      	ands	r3, r2
 8009bca:	d1f1      	bne.n	8009bb0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	2208      	movs	r2, #8
 8009bd2:	4013      	ands	r3, r2
 8009bd4:	d036      	beq.n	8009c44 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	69db      	ldr	r3, [r3, #28]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d019      	beq.n	8009c12 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009bde:	4b40      	ldr	r3, [pc, #256]	; (8009ce0 <HAL_RCC_OscConfig+0x338>)
 8009be0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009be2:	4b3f      	ldr	r3, [pc, #252]	; (8009ce0 <HAL_RCC_OscConfig+0x338>)
 8009be4:	2101      	movs	r1, #1
 8009be6:	430a      	orrs	r2, r1
 8009be8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009bea:	f7fc fbb1 	bl	8006350 <HAL_GetTick>
 8009bee:	0003      	movs	r3, r0
 8009bf0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009bf2:	e008      	b.n	8009c06 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009bf4:	f7fc fbac 	bl	8006350 <HAL_GetTick>
 8009bf8:	0002      	movs	r2, r0
 8009bfa:	69bb      	ldr	r3, [r7, #24]
 8009bfc:	1ad3      	subs	r3, r2, r3
 8009bfe:	2b02      	cmp	r3, #2
 8009c00:	d901      	bls.n	8009c06 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8009c02:	2303      	movs	r3, #3
 8009c04:	e250      	b.n	800a0a8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009c06:	4b36      	ldr	r3, [pc, #216]	; (8009ce0 <HAL_RCC_OscConfig+0x338>)
 8009c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c0a:	2202      	movs	r2, #2
 8009c0c:	4013      	ands	r3, r2
 8009c0e:	d0f1      	beq.n	8009bf4 <HAL_RCC_OscConfig+0x24c>
 8009c10:	e018      	b.n	8009c44 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009c12:	4b33      	ldr	r3, [pc, #204]	; (8009ce0 <HAL_RCC_OscConfig+0x338>)
 8009c14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c16:	4b32      	ldr	r3, [pc, #200]	; (8009ce0 <HAL_RCC_OscConfig+0x338>)
 8009c18:	2101      	movs	r1, #1
 8009c1a:	438a      	bics	r2, r1
 8009c1c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009c1e:	f7fc fb97 	bl	8006350 <HAL_GetTick>
 8009c22:	0003      	movs	r3, r0
 8009c24:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009c26:	e008      	b.n	8009c3a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009c28:	f7fc fb92 	bl	8006350 <HAL_GetTick>
 8009c2c:	0002      	movs	r2, r0
 8009c2e:	69bb      	ldr	r3, [r7, #24]
 8009c30:	1ad3      	subs	r3, r2, r3
 8009c32:	2b02      	cmp	r3, #2
 8009c34:	d901      	bls.n	8009c3a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8009c36:	2303      	movs	r3, #3
 8009c38:	e236      	b.n	800a0a8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009c3a:	4b29      	ldr	r3, [pc, #164]	; (8009ce0 <HAL_RCC_OscConfig+0x338>)
 8009c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c3e:	2202      	movs	r2, #2
 8009c40:	4013      	ands	r3, r2
 8009c42:	d1f1      	bne.n	8009c28 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	2204      	movs	r2, #4
 8009c4a:	4013      	ands	r3, r2
 8009c4c:	d100      	bne.n	8009c50 <HAL_RCC_OscConfig+0x2a8>
 8009c4e:	e0b5      	b.n	8009dbc <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009c50:	201f      	movs	r0, #31
 8009c52:	183b      	adds	r3, r7, r0
 8009c54:	2200      	movs	r2, #0
 8009c56:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009c58:	4b21      	ldr	r3, [pc, #132]	; (8009ce0 <HAL_RCC_OscConfig+0x338>)
 8009c5a:	69da      	ldr	r2, [r3, #28]
 8009c5c:	2380      	movs	r3, #128	; 0x80
 8009c5e:	055b      	lsls	r3, r3, #21
 8009c60:	4013      	ands	r3, r2
 8009c62:	d110      	bne.n	8009c86 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009c64:	4b1e      	ldr	r3, [pc, #120]	; (8009ce0 <HAL_RCC_OscConfig+0x338>)
 8009c66:	69da      	ldr	r2, [r3, #28]
 8009c68:	4b1d      	ldr	r3, [pc, #116]	; (8009ce0 <HAL_RCC_OscConfig+0x338>)
 8009c6a:	2180      	movs	r1, #128	; 0x80
 8009c6c:	0549      	lsls	r1, r1, #21
 8009c6e:	430a      	orrs	r2, r1
 8009c70:	61da      	str	r2, [r3, #28]
 8009c72:	4b1b      	ldr	r3, [pc, #108]	; (8009ce0 <HAL_RCC_OscConfig+0x338>)
 8009c74:	69da      	ldr	r2, [r3, #28]
 8009c76:	2380      	movs	r3, #128	; 0x80
 8009c78:	055b      	lsls	r3, r3, #21
 8009c7a:	4013      	ands	r3, r2
 8009c7c:	60fb      	str	r3, [r7, #12]
 8009c7e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009c80:	183b      	adds	r3, r7, r0
 8009c82:	2201      	movs	r2, #1
 8009c84:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009c86:	4b19      	ldr	r3, [pc, #100]	; (8009cec <HAL_RCC_OscConfig+0x344>)
 8009c88:	681a      	ldr	r2, [r3, #0]
 8009c8a:	2380      	movs	r3, #128	; 0x80
 8009c8c:	005b      	lsls	r3, r3, #1
 8009c8e:	4013      	ands	r3, r2
 8009c90:	d11a      	bne.n	8009cc8 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009c92:	4b16      	ldr	r3, [pc, #88]	; (8009cec <HAL_RCC_OscConfig+0x344>)
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	4b15      	ldr	r3, [pc, #84]	; (8009cec <HAL_RCC_OscConfig+0x344>)
 8009c98:	2180      	movs	r1, #128	; 0x80
 8009c9a:	0049      	lsls	r1, r1, #1
 8009c9c:	430a      	orrs	r2, r1
 8009c9e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009ca0:	f7fc fb56 	bl	8006350 <HAL_GetTick>
 8009ca4:	0003      	movs	r3, r0
 8009ca6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009ca8:	e008      	b.n	8009cbc <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009caa:	f7fc fb51 	bl	8006350 <HAL_GetTick>
 8009cae:	0002      	movs	r2, r0
 8009cb0:	69bb      	ldr	r3, [r7, #24]
 8009cb2:	1ad3      	subs	r3, r2, r3
 8009cb4:	2b64      	cmp	r3, #100	; 0x64
 8009cb6:	d901      	bls.n	8009cbc <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8009cb8:	2303      	movs	r3, #3
 8009cba:	e1f5      	b.n	800a0a8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009cbc:	4b0b      	ldr	r3, [pc, #44]	; (8009cec <HAL_RCC_OscConfig+0x344>)
 8009cbe:	681a      	ldr	r2, [r3, #0]
 8009cc0:	2380      	movs	r3, #128	; 0x80
 8009cc2:	005b      	lsls	r3, r3, #1
 8009cc4:	4013      	ands	r3, r2
 8009cc6:	d0f0      	beq.n	8009caa <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	689b      	ldr	r3, [r3, #8]
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	d10f      	bne.n	8009cf0 <HAL_RCC_OscConfig+0x348>
 8009cd0:	4b03      	ldr	r3, [pc, #12]	; (8009ce0 <HAL_RCC_OscConfig+0x338>)
 8009cd2:	6a1a      	ldr	r2, [r3, #32]
 8009cd4:	4b02      	ldr	r3, [pc, #8]	; (8009ce0 <HAL_RCC_OscConfig+0x338>)
 8009cd6:	2101      	movs	r1, #1
 8009cd8:	430a      	orrs	r2, r1
 8009cda:	621a      	str	r2, [r3, #32]
 8009cdc:	e036      	b.n	8009d4c <HAL_RCC_OscConfig+0x3a4>
 8009cde:	46c0      	nop			; (mov r8, r8)
 8009ce0:	40021000 	.word	0x40021000
 8009ce4:	fffeffff 	.word	0xfffeffff
 8009ce8:	fffbffff 	.word	0xfffbffff
 8009cec:	40007000 	.word	0x40007000
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	689b      	ldr	r3, [r3, #8]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d10c      	bne.n	8009d12 <HAL_RCC_OscConfig+0x36a>
 8009cf8:	4bca      	ldr	r3, [pc, #808]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009cfa:	6a1a      	ldr	r2, [r3, #32]
 8009cfc:	4bc9      	ldr	r3, [pc, #804]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009cfe:	2101      	movs	r1, #1
 8009d00:	438a      	bics	r2, r1
 8009d02:	621a      	str	r2, [r3, #32]
 8009d04:	4bc7      	ldr	r3, [pc, #796]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009d06:	6a1a      	ldr	r2, [r3, #32]
 8009d08:	4bc6      	ldr	r3, [pc, #792]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009d0a:	2104      	movs	r1, #4
 8009d0c:	438a      	bics	r2, r1
 8009d0e:	621a      	str	r2, [r3, #32]
 8009d10:	e01c      	b.n	8009d4c <HAL_RCC_OscConfig+0x3a4>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	689b      	ldr	r3, [r3, #8]
 8009d16:	2b05      	cmp	r3, #5
 8009d18:	d10c      	bne.n	8009d34 <HAL_RCC_OscConfig+0x38c>
 8009d1a:	4bc2      	ldr	r3, [pc, #776]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009d1c:	6a1a      	ldr	r2, [r3, #32]
 8009d1e:	4bc1      	ldr	r3, [pc, #772]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009d20:	2104      	movs	r1, #4
 8009d22:	430a      	orrs	r2, r1
 8009d24:	621a      	str	r2, [r3, #32]
 8009d26:	4bbf      	ldr	r3, [pc, #764]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009d28:	6a1a      	ldr	r2, [r3, #32]
 8009d2a:	4bbe      	ldr	r3, [pc, #760]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009d2c:	2101      	movs	r1, #1
 8009d2e:	430a      	orrs	r2, r1
 8009d30:	621a      	str	r2, [r3, #32]
 8009d32:	e00b      	b.n	8009d4c <HAL_RCC_OscConfig+0x3a4>
 8009d34:	4bbb      	ldr	r3, [pc, #748]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009d36:	6a1a      	ldr	r2, [r3, #32]
 8009d38:	4bba      	ldr	r3, [pc, #744]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009d3a:	2101      	movs	r1, #1
 8009d3c:	438a      	bics	r2, r1
 8009d3e:	621a      	str	r2, [r3, #32]
 8009d40:	4bb8      	ldr	r3, [pc, #736]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009d42:	6a1a      	ldr	r2, [r3, #32]
 8009d44:	4bb7      	ldr	r3, [pc, #732]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009d46:	2104      	movs	r1, #4
 8009d48:	438a      	bics	r2, r1
 8009d4a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	689b      	ldr	r3, [r3, #8]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d014      	beq.n	8009d7e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009d54:	f7fc fafc 	bl	8006350 <HAL_GetTick>
 8009d58:	0003      	movs	r3, r0
 8009d5a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009d5c:	e009      	b.n	8009d72 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009d5e:	f7fc faf7 	bl	8006350 <HAL_GetTick>
 8009d62:	0002      	movs	r2, r0
 8009d64:	69bb      	ldr	r3, [r7, #24]
 8009d66:	1ad3      	subs	r3, r2, r3
 8009d68:	4aaf      	ldr	r2, [pc, #700]	; (800a028 <HAL_RCC_OscConfig+0x680>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d901      	bls.n	8009d72 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8009d6e:	2303      	movs	r3, #3
 8009d70:	e19a      	b.n	800a0a8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009d72:	4bac      	ldr	r3, [pc, #688]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009d74:	6a1b      	ldr	r3, [r3, #32]
 8009d76:	2202      	movs	r2, #2
 8009d78:	4013      	ands	r3, r2
 8009d7a:	d0f0      	beq.n	8009d5e <HAL_RCC_OscConfig+0x3b6>
 8009d7c:	e013      	b.n	8009da6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009d7e:	f7fc fae7 	bl	8006350 <HAL_GetTick>
 8009d82:	0003      	movs	r3, r0
 8009d84:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009d86:	e009      	b.n	8009d9c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009d88:	f7fc fae2 	bl	8006350 <HAL_GetTick>
 8009d8c:	0002      	movs	r2, r0
 8009d8e:	69bb      	ldr	r3, [r7, #24]
 8009d90:	1ad3      	subs	r3, r2, r3
 8009d92:	4aa5      	ldr	r2, [pc, #660]	; (800a028 <HAL_RCC_OscConfig+0x680>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d901      	bls.n	8009d9c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8009d98:	2303      	movs	r3, #3
 8009d9a:	e185      	b.n	800a0a8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009d9c:	4ba1      	ldr	r3, [pc, #644]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009d9e:	6a1b      	ldr	r3, [r3, #32]
 8009da0:	2202      	movs	r2, #2
 8009da2:	4013      	ands	r3, r2
 8009da4:	d1f0      	bne.n	8009d88 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009da6:	231f      	movs	r3, #31
 8009da8:	18fb      	adds	r3, r7, r3
 8009daa:	781b      	ldrb	r3, [r3, #0]
 8009dac:	2b01      	cmp	r3, #1
 8009dae:	d105      	bne.n	8009dbc <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009db0:	4b9c      	ldr	r3, [pc, #624]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009db2:	69da      	ldr	r2, [r3, #28]
 8009db4:	4b9b      	ldr	r3, [pc, #620]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009db6:	499d      	ldr	r1, [pc, #628]	; (800a02c <HAL_RCC_OscConfig+0x684>)
 8009db8:	400a      	ands	r2, r1
 8009dba:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	2210      	movs	r2, #16
 8009dc2:	4013      	ands	r3, r2
 8009dc4:	d063      	beq.n	8009e8e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	695b      	ldr	r3, [r3, #20]
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	d12a      	bne.n	8009e24 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8009dce:	4b95      	ldr	r3, [pc, #596]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009dd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009dd2:	4b94      	ldr	r3, [pc, #592]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009dd4:	2104      	movs	r1, #4
 8009dd6:	430a      	orrs	r2, r1
 8009dd8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8009dda:	4b92      	ldr	r3, [pc, #584]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009ddc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009dde:	4b91      	ldr	r3, [pc, #580]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009de0:	2101      	movs	r1, #1
 8009de2:	430a      	orrs	r2, r1
 8009de4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009de6:	f7fc fab3 	bl	8006350 <HAL_GetTick>
 8009dea:	0003      	movs	r3, r0
 8009dec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8009dee:	e008      	b.n	8009e02 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8009df0:	f7fc faae 	bl	8006350 <HAL_GetTick>
 8009df4:	0002      	movs	r2, r0
 8009df6:	69bb      	ldr	r3, [r7, #24]
 8009df8:	1ad3      	subs	r3, r2, r3
 8009dfa:	2b02      	cmp	r3, #2
 8009dfc:	d901      	bls.n	8009e02 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8009dfe:	2303      	movs	r3, #3
 8009e00:	e152      	b.n	800a0a8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8009e02:	4b88      	ldr	r3, [pc, #544]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e06:	2202      	movs	r2, #2
 8009e08:	4013      	ands	r3, r2
 8009e0a:	d0f1      	beq.n	8009df0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8009e0c:	4b85      	ldr	r3, [pc, #532]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e10:	22f8      	movs	r2, #248	; 0xf8
 8009e12:	4393      	bics	r3, r2
 8009e14:	0019      	movs	r1, r3
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	699b      	ldr	r3, [r3, #24]
 8009e1a:	00da      	lsls	r2, r3, #3
 8009e1c:	4b81      	ldr	r3, [pc, #516]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009e1e:	430a      	orrs	r2, r1
 8009e20:	635a      	str	r2, [r3, #52]	; 0x34
 8009e22:	e034      	b.n	8009e8e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	695b      	ldr	r3, [r3, #20]
 8009e28:	3305      	adds	r3, #5
 8009e2a:	d111      	bne.n	8009e50 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8009e2c:	4b7d      	ldr	r3, [pc, #500]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009e2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e30:	4b7c      	ldr	r3, [pc, #496]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009e32:	2104      	movs	r1, #4
 8009e34:	438a      	bics	r2, r1
 8009e36:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8009e38:	4b7a      	ldr	r3, [pc, #488]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e3c:	22f8      	movs	r2, #248	; 0xf8
 8009e3e:	4393      	bics	r3, r2
 8009e40:	0019      	movs	r1, r3
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	699b      	ldr	r3, [r3, #24]
 8009e46:	00da      	lsls	r2, r3, #3
 8009e48:	4b76      	ldr	r3, [pc, #472]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009e4a:	430a      	orrs	r2, r1
 8009e4c:	635a      	str	r2, [r3, #52]	; 0x34
 8009e4e:	e01e      	b.n	8009e8e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8009e50:	4b74      	ldr	r3, [pc, #464]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009e52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e54:	4b73      	ldr	r3, [pc, #460]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009e56:	2104      	movs	r1, #4
 8009e58:	430a      	orrs	r2, r1
 8009e5a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8009e5c:	4b71      	ldr	r3, [pc, #452]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009e5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e60:	4b70      	ldr	r3, [pc, #448]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009e62:	2101      	movs	r1, #1
 8009e64:	438a      	bics	r2, r1
 8009e66:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009e68:	f7fc fa72 	bl	8006350 <HAL_GetTick>
 8009e6c:	0003      	movs	r3, r0
 8009e6e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8009e70:	e008      	b.n	8009e84 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8009e72:	f7fc fa6d 	bl	8006350 <HAL_GetTick>
 8009e76:	0002      	movs	r2, r0
 8009e78:	69bb      	ldr	r3, [r7, #24]
 8009e7a:	1ad3      	subs	r3, r2, r3
 8009e7c:	2b02      	cmp	r3, #2
 8009e7e:	d901      	bls.n	8009e84 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8009e80:	2303      	movs	r3, #3
 8009e82:	e111      	b.n	800a0a8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8009e84:	4b67      	ldr	r3, [pc, #412]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e88:	2202      	movs	r2, #2
 8009e8a:	4013      	ands	r3, r2
 8009e8c:	d1f1      	bne.n	8009e72 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	2220      	movs	r2, #32
 8009e94:	4013      	ands	r3, r2
 8009e96:	d05c      	beq.n	8009f52 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8009e98:	4b62      	ldr	r3, [pc, #392]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009e9a:	685b      	ldr	r3, [r3, #4]
 8009e9c:	220c      	movs	r2, #12
 8009e9e:	4013      	ands	r3, r2
 8009ea0:	2b0c      	cmp	r3, #12
 8009ea2:	d00e      	beq.n	8009ec2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8009ea4:	4b5f      	ldr	r3, [pc, #380]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009ea6:	685b      	ldr	r3, [r3, #4]
 8009ea8:	220c      	movs	r2, #12
 8009eaa:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8009eac:	2b08      	cmp	r3, #8
 8009eae:	d114      	bne.n	8009eda <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8009eb0:	4b5c      	ldr	r3, [pc, #368]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009eb2:	685a      	ldr	r2, [r3, #4]
 8009eb4:	23c0      	movs	r3, #192	; 0xc0
 8009eb6:	025b      	lsls	r3, r3, #9
 8009eb8:	401a      	ands	r2, r3
 8009eba:	23c0      	movs	r3, #192	; 0xc0
 8009ebc:	025b      	lsls	r3, r3, #9
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d10b      	bne.n	8009eda <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8009ec2:	4b58      	ldr	r3, [pc, #352]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009ec4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ec6:	2380      	movs	r3, #128	; 0x80
 8009ec8:	029b      	lsls	r3, r3, #10
 8009eca:	4013      	ands	r3, r2
 8009ecc:	d040      	beq.n	8009f50 <HAL_RCC_OscConfig+0x5a8>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6a1b      	ldr	r3, [r3, #32]
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d03c      	beq.n	8009f50 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	e0e6      	b.n	800a0a8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6a1b      	ldr	r3, [r3, #32]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d01b      	beq.n	8009f1a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8009ee2:	4b50      	ldr	r3, [pc, #320]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009ee4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ee6:	4b4f      	ldr	r3, [pc, #316]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009ee8:	2180      	movs	r1, #128	; 0x80
 8009eea:	0249      	lsls	r1, r1, #9
 8009eec:	430a      	orrs	r2, r1
 8009eee:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ef0:	f7fc fa2e 	bl	8006350 <HAL_GetTick>
 8009ef4:	0003      	movs	r3, r0
 8009ef6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8009ef8:	e008      	b.n	8009f0c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009efa:	f7fc fa29 	bl	8006350 <HAL_GetTick>
 8009efe:	0002      	movs	r2, r0
 8009f00:	69bb      	ldr	r3, [r7, #24]
 8009f02:	1ad3      	subs	r3, r2, r3
 8009f04:	2b02      	cmp	r3, #2
 8009f06:	d901      	bls.n	8009f0c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8009f08:	2303      	movs	r3, #3
 8009f0a:	e0cd      	b.n	800a0a8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8009f0c:	4b45      	ldr	r3, [pc, #276]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009f0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f10:	2380      	movs	r3, #128	; 0x80
 8009f12:	029b      	lsls	r3, r3, #10
 8009f14:	4013      	ands	r3, r2
 8009f16:	d0f0      	beq.n	8009efa <HAL_RCC_OscConfig+0x552>
 8009f18:	e01b      	b.n	8009f52 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8009f1a:	4b42      	ldr	r3, [pc, #264]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009f1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f1e:	4b41      	ldr	r3, [pc, #260]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009f20:	4943      	ldr	r1, [pc, #268]	; (800a030 <HAL_RCC_OscConfig+0x688>)
 8009f22:	400a      	ands	r2, r1
 8009f24:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f26:	f7fc fa13 	bl	8006350 <HAL_GetTick>
 8009f2a:	0003      	movs	r3, r0
 8009f2c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8009f2e:	e008      	b.n	8009f42 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009f30:	f7fc fa0e 	bl	8006350 <HAL_GetTick>
 8009f34:	0002      	movs	r2, r0
 8009f36:	69bb      	ldr	r3, [r7, #24]
 8009f38:	1ad3      	subs	r3, r2, r3
 8009f3a:	2b02      	cmp	r3, #2
 8009f3c:	d901      	bls.n	8009f42 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8009f3e:	2303      	movs	r3, #3
 8009f40:	e0b2      	b.n	800a0a8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8009f42:	4b38      	ldr	r3, [pc, #224]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009f44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f46:	2380      	movs	r3, #128	; 0x80
 8009f48:	029b      	lsls	r3, r3, #10
 8009f4a:	4013      	ands	r3, r2
 8009f4c:	d1f0      	bne.n	8009f30 <HAL_RCC_OscConfig+0x588>
 8009f4e:	e000      	b.n	8009f52 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8009f50:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d100      	bne.n	8009f5c <HAL_RCC_OscConfig+0x5b4>
 8009f5a:	e0a4      	b.n	800a0a6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009f5c:	4b31      	ldr	r3, [pc, #196]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	220c      	movs	r2, #12
 8009f62:	4013      	ands	r3, r2
 8009f64:	2b08      	cmp	r3, #8
 8009f66:	d100      	bne.n	8009f6a <HAL_RCC_OscConfig+0x5c2>
 8009f68:	e078      	b.n	800a05c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f6e:	2b02      	cmp	r3, #2
 8009f70:	d14c      	bne.n	800a00c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f72:	4b2c      	ldr	r3, [pc, #176]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009f74:	681a      	ldr	r2, [r3, #0]
 8009f76:	4b2b      	ldr	r3, [pc, #172]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009f78:	492e      	ldr	r1, [pc, #184]	; (800a034 <HAL_RCC_OscConfig+0x68c>)
 8009f7a:	400a      	ands	r2, r1
 8009f7c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f7e:	f7fc f9e7 	bl	8006350 <HAL_GetTick>
 8009f82:	0003      	movs	r3, r0
 8009f84:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009f86:	e008      	b.n	8009f9a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009f88:	f7fc f9e2 	bl	8006350 <HAL_GetTick>
 8009f8c:	0002      	movs	r2, r0
 8009f8e:	69bb      	ldr	r3, [r7, #24]
 8009f90:	1ad3      	subs	r3, r2, r3
 8009f92:	2b02      	cmp	r3, #2
 8009f94:	d901      	bls.n	8009f9a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8009f96:	2303      	movs	r3, #3
 8009f98:	e086      	b.n	800a0a8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009f9a:	4b22      	ldr	r3, [pc, #136]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009f9c:	681a      	ldr	r2, [r3, #0]
 8009f9e:	2380      	movs	r3, #128	; 0x80
 8009fa0:	049b      	lsls	r3, r3, #18
 8009fa2:	4013      	ands	r3, r2
 8009fa4:	d1f0      	bne.n	8009f88 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009fa6:	4b1f      	ldr	r3, [pc, #124]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009faa:	220f      	movs	r2, #15
 8009fac:	4393      	bics	r3, r2
 8009fae:	0019      	movs	r1, r3
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009fb4:	4b1b      	ldr	r3, [pc, #108]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009fb6:	430a      	orrs	r2, r1
 8009fb8:	62da      	str	r2, [r3, #44]	; 0x2c
 8009fba:	4b1a      	ldr	r3, [pc, #104]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	4a1e      	ldr	r2, [pc, #120]	; (800a038 <HAL_RCC_OscConfig+0x690>)
 8009fc0:	4013      	ands	r3, r2
 8009fc2:	0019      	movs	r1, r3
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fcc:	431a      	orrs	r2, r3
 8009fce:	4b15      	ldr	r3, [pc, #84]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009fd0:	430a      	orrs	r2, r1
 8009fd2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009fd4:	4b13      	ldr	r3, [pc, #76]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	4b12      	ldr	r3, [pc, #72]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 8009fda:	2180      	movs	r1, #128	; 0x80
 8009fdc:	0449      	lsls	r1, r1, #17
 8009fde:	430a      	orrs	r2, r1
 8009fe0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009fe2:	f7fc f9b5 	bl	8006350 <HAL_GetTick>
 8009fe6:	0003      	movs	r3, r0
 8009fe8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009fea:	e008      	b.n	8009ffe <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009fec:	f7fc f9b0 	bl	8006350 <HAL_GetTick>
 8009ff0:	0002      	movs	r2, r0
 8009ff2:	69bb      	ldr	r3, [r7, #24]
 8009ff4:	1ad3      	subs	r3, r2, r3
 8009ff6:	2b02      	cmp	r3, #2
 8009ff8:	d901      	bls.n	8009ffe <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8009ffa:	2303      	movs	r3, #3
 8009ffc:	e054      	b.n	800a0a8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009ffe:	4b09      	ldr	r3, [pc, #36]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	2380      	movs	r3, #128	; 0x80
 800a004:	049b      	lsls	r3, r3, #18
 800a006:	4013      	ands	r3, r2
 800a008:	d0f0      	beq.n	8009fec <HAL_RCC_OscConfig+0x644>
 800a00a:	e04c      	b.n	800a0a6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a00c:	4b05      	ldr	r3, [pc, #20]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 800a00e:	681a      	ldr	r2, [r3, #0]
 800a010:	4b04      	ldr	r3, [pc, #16]	; (800a024 <HAL_RCC_OscConfig+0x67c>)
 800a012:	4908      	ldr	r1, [pc, #32]	; (800a034 <HAL_RCC_OscConfig+0x68c>)
 800a014:	400a      	ands	r2, r1
 800a016:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a018:	f7fc f99a 	bl	8006350 <HAL_GetTick>
 800a01c:	0003      	movs	r3, r0
 800a01e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a020:	e015      	b.n	800a04e <HAL_RCC_OscConfig+0x6a6>
 800a022:	46c0      	nop			; (mov r8, r8)
 800a024:	40021000 	.word	0x40021000
 800a028:	00001388 	.word	0x00001388
 800a02c:	efffffff 	.word	0xefffffff
 800a030:	fffeffff 	.word	0xfffeffff
 800a034:	feffffff 	.word	0xfeffffff
 800a038:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a03c:	f7fc f988 	bl	8006350 <HAL_GetTick>
 800a040:	0002      	movs	r2, r0
 800a042:	69bb      	ldr	r3, [r7, #24]
 800a044:	1ad3      	subs	r3, r2, r3
 800a046:	2b02      	cmp	r3, #2
 800a048:	d901      	bls.n	800a04e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800a04a:	2303      	movs	r3, #3
 800a04c:	e02c      	b.n	800a0a8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a04e:	4b18      	ldr	r3, [pc, #96]	; (800a0b0 <HAL_RCC_OscConfig+0x708>)
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	2380      	movs	r3, #128	; 0x80
 800a054:	049b      	lsls	r3, r3, #18
 800a056:	4013      	ands	r3, r2
 800a058:	d1f0      	bne.n	800a03c <HAL_RCC_OscConfig+0x694>
 800a05a:	e024      	b.n	800a0a6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a060:	2b01      	cmp	r3, #1
 800a062:	d101      	bne.n	800a068 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800a064:	2301      	movs	r3, #1
 800a066:	e01f      	b.n	800a0a8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800a068:	4b11      	ldr	r3, [pc, #68]	; (800a0b0 <HAL_RCC_OscConfig+0x708>)
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800a06e:	4b10      	ldr	r3, [pc, #64]	; (800a0b0 <HAL_RCC_OscConfig+0x708>)
 800a070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a072:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a074:	697a      	ldr	r2, [r7, #20]
 800a076:	23c0      	movs	r3, #192	; 0xc0
 800a078:	025b      	lsls	r3, r3, #9
 800a07a:	401a      	ands	r2, r3
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a080:	429a      	cmp	r2, r3
 800a082:	d10e      	bne.n	800a0a2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	220f      	movs	r2, #15
 800a088:	401a      	ands	r2, r3
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a08e:	429a      	cmp	r2, r3
 800a090:	d107      	bne.n	800a0a2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800a092:	697a      	ldr	r2, [r7, #20]
 800a094:	23f0      	movs	r3, #240	; 0xf0
 800a096:	039b      	lsls	r3, r3, #14
 800a098:	401a      	ands	r2, r3
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d001      	beq.n	800a0a6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	e000      	b.n	800a0a8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800a0a6:	2300      	movs	r3, #0
}
 800a0a8:	0018      	movs	r0, r3
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	b008      	add	sp, #32
 800a0ae:	bd80      	pop	{r7, pc}
 800a0b0:	40021000 	.word	0x40021000

0800a0b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d101      	bne.n	800a0c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	e0bf      	b.n	800a248 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a0c8:	4b61      	ldr	r3, [pc, #388]	; (800a250 <HAL_RCC_ClockConfig+0x19c>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	4013      	ands	r3, r2
 800a0d0:	683a      	ldr	r2, [r7, #0]
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	d911      	bls.n	800a0fa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a0d6:	4b5e      	ldr	r3, [pc, #376]	; (800a250 <HAL_RCC_ClockConfig+0x19c>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	4393      	bics	r3, r2
 800a0de:	0019      	movs	r1, r3
 800a0e0:	4b5b      	ldr	r3, [pc, #364]	; (800a250 <HAL_RCC_ClockConfig+0x19c>)
 800a0e2:	683a      	ldr	r2, [r7, #0]
 800a0e4:	430a      	orrs	r2, r1
 800a0e6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a0e8:	4b59      	ldr	r3, [pc, #356]	; (800a250 <HAL_RCC_ClockConfig+0x19c>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	2201      	movs	r2, #1
 800a0ee:	4013      	ands	r3, r2
 800a0f0:	683a      	ldr	r2, [r7, #0]
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d001      	beq.n	800a0fa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	e0a6      	b.n	800a248 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	2202      	movs	r2, #2
 800a100:	4013      	ands	r3, r2
 800a102:	d015      	beq.n	800a130 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	2204      	movs	r2, #4
 800a10a:	4013      	ands	r3, r2
 800a10c:	d006      	beq.n	800a11c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800a10e:	4b51      	ldr	r3, [pc, #324]	; (800a254 <HAL_RCC_ClockConfig+0x1a0>)
 800a110:	685a      	ldr	r2, [r3, #4]
 800a112:	4b50      	ldr	r3, [pc, #320]	; (800a254 <HAL_RCC_ClockConfig+0x1a0>)
 800a114:	21e0      	movs	r1, #224	; 0xe0
 800a116:	00c9      	lsls	r1, r1, #3
 800a118:	430a      	orrs	r2, r1
 800a11a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a11c:	4b4d      	ldr	r3, [pc, #308]	; (800a254 <HAL_RCC_ClockConfig+0x1a0>)
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	22f0      	movs	r2, #240	; 0xf0
 800a122:	4393      	bics	r3, r2
 800a124:	0019      	movs	r1, r3
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	689a      	ldr	r2, [r3, #8]
 800a12a:	4b4a      	ldr	r3, [pc, #296]	; (800a254 <HAL_RCC_ClockConfig+0x1a0>)
 800a12c:	430a      	orrs	r2, r1
 800a12e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	2201      	movs	r2, #1
 800a136:	4013      	ands	r3, r2
 800a138:	d04c      	beq.n	800a1d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d107      	bne.n	800a152 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a142:	4b44      	ldr	r3, [pc, #272]	; (800a254 <HAL_RCC_ClockConfig+0x1a0>)
 800a144:	681a      	ldr	r2, [r3, #0]
 800a146:	2380      	movs	r3, #128	; 0x80
 800a148:	029b      	lsls	r3, r3, #10
 800a14a:	4013      	ands	r3, r2
 800a14c:	d120      	bne.n	800a190 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800a14e:	2301      	movs	r3, #1
 800a150:	e07a      	b.n	800a248 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	2b02      	cmp	r3, #2
 800a158:	d107      	bne.n	800a16a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a15a:	4b3e      	ldr	r3, [pc, #248]	; (800a254 <HAL_RCC_ClockConfig+0x1a0>)
 800a15c:	681a      	ldr	r2, [r3, #0]
 800a15e:	2380      	movs	r3, #128	; 0x80
 800a160:	049b      	lsls	r3, r3, #18
 800a162:	4013      	ands	r3, r2
 800a164:	d114      	bne.n	800a190 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800a166:	2301      	movs	r3, #1
 800a168:	e06e      	b.n	800a248 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	2b03      	cmp	r3, #3
 800a170:	d107      	bne.n	800a182 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800a172:	4b38      	ldr	r3, [pc, #224]	; (800a254 <HAL_RCC_ClockConfig+0x1a0>)
 800a174:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a176:	2380      	movs	r3, #128	; 0x80
 800a178:	029b      	lsls	r3, r3, #10
 800a17a:	4013      	ands	r3, r2
 800a17c:	d108      	bne.n	800a190 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800a17e:	2301      	movs	r3, #1
 800a180:	e062      	b.n	800a248 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a182:	4b34      	ldr	r3, [pc, #208]	; (800a254 <HAL_RCC_ClockConfig+0x1a0>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	2202      	movs	r2, #2
 800a188:	4013      	ands	r3, r2
 800a18a:	d101      	bne.n	800a190 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800a18c:	2301      	movs	r3, #1
 800a18e:	e05b      	b.n	800a248 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a190:	4b30      	ldr	r3, [pc, #192]	; (800a254 <HAL_RCC_ClockConfig+0x1a0>)
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	2203      	movs	r2, #3
 800a196:	4393      	bics	r3, r2
 800a198:	0019      	movs	r1, r3
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	685a      	ldr	r2, [r3, #4]
 800a19e:	4b2d      	ldr	r3, [pc, #180]	; (800a254 <HAL_RCC_ClockConfig+0x1a0>)
 800a1a0:	430a      	orrs	r2, r1
 800a1a2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a1a4:	f7fc f8d4 	bl	8006350 <HAL_GetTick>
 800a1a8:	0003      	movs	r3, r0
 800a1aa:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a1ac:	e009      	b.n	800a1c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a1ae:	f7fc f8cf 	bl	8006350 <HAL_GetTick>
 800a1b2:	0002      	movs	r2, r0
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	1ad3      	subs	r3, r2, r3
 800a1b8:	4a27      	ldr	r2, [pc, #156]	; (800a258 <HAL_RCC_ClockConfig+0x1a4>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d901      	bls.n	800a1c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a1be:	2303      	movs	r3, #3
 800a1c0:	e042      	b.n	800a248 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a1c2:	4b24      	ldr	r3, [pc, #144]	; (800a254 <HAL_RCC_ClockConfig+0x1a0>)
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	220c      	movs	r2, #12
 800a1c8:	401a      	ands	r2, r3
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	009b      	lsls	r3, r3, #2
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d1ec      	bne.n	800a1ae <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a1d4:	4b1e      	ldr	r3, [pc, #120]	; (800a250 <HAL_RCC_ClockConfig+0x19c>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	2201      	movs	r2, #1
 800a1da:	4013      	ands	r3, r2
 800a1dc:	683a      	ldr	r2, [r7, #0]
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d211      	bcs.n	800a206 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a1e2:	4b1b      	ldr	r3, [pc, #108]	; (800a250 <HAL_RCC_ClockConfig+0x19c>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	4393      	bics	r3, r2
 800a1ea:	0019      	movs	r1, r3
 800a1ec:	4b18      	ldr	r3, [pc, #96]	; (800a250 <HAL_RCC_ClockConfig+0x19c>)
 800a1ee:	683a      	ldr	r2, [r7, #0]
 800a1f0:	430a      	orrs	r2, r1
 800a1f2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a1f4:	4b16      	ldr	r3, [pc, #88]	; (800a250 <HAL_RCC_ClockConfig+0x19c>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	4013      	ands	r3, r2
 800a1fc:	683a      	ldr	r2, [r7, #0]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d001      	beq.n	800a206 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800a202:	2301      	movs	r3, #1
 800a204:	e020      	b.n	800a248 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	2204      	movs	r2, #4
 800a20c:	4013      	ands	r3, r2
 800a20e:	d009      	beq.n	800a224 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800a210:	4b10      	ldr	r3, [pc, #64]	; (800a254 <HAL_RCC_ClockConfig+0x1a0>)
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	4a11      	ldr	r2, [pc, #68]	; (800a25c <HAL_RCC_ClockConfig+0x1a8>)
 800a216:	4013      	ands	r3, r2
 800a218:	0019      	movs	r1, r3
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	68da      	ldr	r2, [r3, #12]
 800a21e:	4b0d      	ldr	r3, [pc, #52]	; (800a254 <HAL_RCC_ClockConfig+0x1a0>)
 800a220:	430a      	orrs	r2, r1
 800a222:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800a224:	f000 f820 	bl	800a268 <HAL_RCC_GetSysClockFreq>
 800a228:	0001      	movs	r1, r0
 800a22a:	4b0a      	ldr	r3, [pc, #40]	; (800a254 <HAL_RCC_ClockConfig+0x1a0>)
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	091b      	lsrs	r3, r3, #4
 800a230:	220f      	movs	r2, #15
 800a232:	4013      	ands	r3, r2
 800a234:	4a0a      	ldr	r2, [pc, #40]	; (800a260 <HAL_RCC_ClockConfig+0x1ac>)
 800a236:	5cd3      	ldrb	r3, [r2, r3]
 800a238:	000a      	movs	r2, r1
 800a23a:	40da      	lsrs	r2, r3
 800a23c:	4b09      	ldr	r3, [pc, #36]	; (800a264 <HAL_RCC_ClockConfig+0x1b0>)
 800a23e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800a240:	2003      	movs	r0, #3
 800a242:	f7fc f83f 	bl	80062c4 <HAL_InitTick>
  
  return HAL_OK;
 800a246:	2300      	movs	r3, #0
}
 800a248:	0018      	movs	r0, r3
 800a24a:	46bd      	mov	sp, r7
 800a24c:	b004      	add	sp, #16
 800a24e:	bd80      	pop	{r7, pc}
 800a250:	40022000 	.word	0x40022000
 800a254:	40021000 	.word	0x40021000
 800a258:	00001388 	.word	0x00001388
 800a25c:	fffff8ff 	.word	0xfffff8ff
 800a260:	0800accc 	.word	0x0800accc
 800a264:	20000000 	.word	0x20000000

0800a268 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b086      	sub	sp, #24
 800a26c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a26e:	2300      	movs	r3, #0
 800a270:	60fb      	str	r3, [r7, #12]
 800a272:	2300      	movs	r3, #0
 800a274:	60bb      	str	r3, [r7, #8]
 800a276:	2300      	movs	r3, #0
 800a278:	617b      	str	r3, [r7, #20]
 800a27a:	2300      	movs	r3, #0
 800a27c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800a27e:	2300      	movs	r3, #0
 800a280:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800a282:	4b2d      	ldr	r3, [pc, #180]	; (800a338 <HAL_RCC_GetSysClockFreq+0xd0>)
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	220c      	movs	r2, #12
 800a28c:	4013      	ands	r3, r2
 800a28e:	2b0c      	cmp	r3, #12
 800a290:	d046      	beq.n	800a320 <HAL_RCC_GetSysClockFreq+0xb8>
 800a292:	d848      	bhi.n	800a326 <HAL_RCC_GetSysClockFreq+0xbe>
 800a294:	2b04      	cmp	r3, #4
 800a296:	d002      	beq.n	800a29e <HAL_RCC_GetSysClockFreq+0x36>
 800a298:	2b08      	cmp	r3, #8
 800a29a:	d003      	beq.n	800a2a4 <HAL_RCC_GetSysClockFreq+0x3c>
 800a29c:	e043      	b.n	800a326 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a29e:	4b27      	ldr	r3, [pc, #156]	; (800a33c <HAL_RCC_GetSysClockFreq+0xd4>)
 800a2a0:	613b      	str	r3, [r7, #16]
      break;
 800a2a2:	e043      	b.n	800a32c <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	0c9b      	lsrs	r3, r3, #18
 800a2a8:	220f      	movs	r2, #15
 800a2aa:	4013      	ands	r3, r2
 800a2ac:	4a24      	ldr	r2, [pc, #144]	; (800a340 <HAL_RCC_GetSysClockFreq+0xd8>)
 800a2ae:	5cd3      	ldrb	r3, [r2, r3]
 800a2b0:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800a2b2:	4b21      	ldr	r3, [pc, #132]	; (800a338 <HAL_RCC_GetSysClockFreq+0xd0>)
 800a2b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2b6:	220f      	movs	r2, #15
 800a2b8:	4013      	ands	r3, r2
 800a2ba:	4a22      	ldr	r2, [pc, #136]	; (800a344 <HAL_RCC_GetSysClockFreq+0xdc>)
 800a2bc:	5cd3      	ldrb	r3, [r2, r3]
 800a2be:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800a2c0:	68fa      	ldr	r2, [r7, #12]
 800a2c2:	23c0      	movs	r3, #192	; 0xc0
 800a2c4:	025b      	lsls	r3, r3, #9
 800a2c6:	401a      	ands	r2, r3
 800a2c8:	2380      	movs	r3, #128	; 0x80
 800a2ca:	025b      	lsls	r3, r3, #9
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d109      	bne.n	800a2e4 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800a2d0:	68b9      	ldr	r1, [r7, #8]
 800a2d2:	481a      	ldr	r0, [pc, #104]	; (800a33c <HAL_RCC_GetSysClockFreq+0xd4>)
 800a2d4:	f7f5 ff2a 	bl	800012c <__udivsi3>
 800a2d8:	0003      	movs	r3, r0
 800a2da:	001a      	movs	r2, r3
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	4353      	muls	r3, r2
 800a2e0:	617b      	str	r3, [r7, #20]
 800a2e2:	e01a      	b.n	800a31a <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800a2e4:	68fa      	ldr	r2, [r7, #12]
 800a2e6:	23c0      	movs	r3, #192	; 0xc0
 800a2e8:	025b      	lsls	r3, r3, #9
 800a2ea:	401a      	ands	r2, r3
 800a2ec:	23c0      	movs	r3, #192	; 0xc0
 800a2ee:	025b      	lsls	r3, r3, #9
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d109      	bne.n	800a308 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800a2f4:	68b9      	ldr	r1, [r7, #8]
 800a2f6:	4814      	ldr	r0, [pc, #80]	; (800a348 <HAL_RCC_GetSysClockFreq+0xe0>)
 800a2f8:	f7f5 ff18 	bl	800012c <__udivsi3>
 800a2fc:	0003      	movs	r3, r0
 800a2fe:	001a      	movs	r2, r3
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	4353      	muls	r3, r2
 800a304:	617b      	str	r3, [r7, #20]
 800a306:	e008      	b.n	800a31a <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800a308:	68b9      	ldr	r1, [r7, #8]
 800a30a:	4810      	ldr	r0, [pc, #64]	; (800a34c <HAL_RCC_GetSysClockFreq+0xe4>)
 800a30c:	f7f5 ff0e 	bl	800012c <__udivsi3>
 800a310:	0003      	movs	r3, r0
 800a312:	001a      	movs	r2, r3
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	4353      	muls	r3, r2
 800a318:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	613b      	str	r3, [r7, #16]
      break;
 800a31e:	e005      	b.n	800a32c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800a320:	4b09      	ldr	r3, [pc, #36]	; (800a348 <HAL_RCC_GetSysClockFreq+0xe0>)
 800a322:	613b      	str	r3, [r7, #16]
      break;
 800a324:	e002      	b.n	800a32c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800a326:	4b09      	ldr	r3, [pc, #36]	; (800a34c <HAL_RCC_GetSysClockFreq+0xe4>)
 800a328:	613b      	str	r3, [r7, #16]
      break;
 800a32a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800a32c:	693b      	ldr	r3, [r7, #16]
}
 800a32e:	0018      	movs	r0, r3
 800a330:	46bd      	mov	sp, r7
 800a332:	b006      	add	sp, #24
 800a334:	bd80      	pop	{r7, pc}
 800a336:	46c0      	nop			; (mov r8, r8)
 800a338:	40021000 	.word	0x40021000
 800a33c:	00f42400 	.word	0x00f42400
 800a340:	0800ace4 	.word	0x0800ace4
 800a344:	0800acf4 	.word	0x0800acf4
 800a348:	02dc6c00 	.word	0x02dc6c00
 800a34c:	007a1200 	.word	0x007a1200

0800a350 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a354:	4b02      	ldr	r3, [pc, #8]	; (800a360 <HAL_RCC_GetHCLKFreq+0x10>)
 800a356:	681b      	ldr	r3, [r3, #0]
}
 800a358:	0018      	movs	r0, r3
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}
 800a35e:	46c0      	nop			; (mov r8, r8)
 800a360:	20000000 	.word	0x20000000

0800a364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800a368:	f7ff fff2 	bl	800a350 <HAL_RCC_GetHCLKFreq>
 800a36c:	0001      	movs	r1, r0
 800a36e:	4b06      	ldr	r3, [pc, #24]	; (800a388 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	0a1b      	lsrs	r3, r3, #8
 800a374:	2207      	movs	r2, #7
 800a376:	4013      	ands	r3, r2
 800a378:	4a04      	ldr	r2, [pc, #16]	; (800a38c <HAL_RCC_GetPCLK1Freq+0x28>)
 800a37a:	5cd3      	ldrb	r3, [r2, r3]
 800a37c:	40d9      	lsrs	r1, r3
 800a37e:	000b      	movs	r3, r1
}    
 800a380:	0018      	movs	r0, r3
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
 800a386:	46c0      	nop			; (mov r8, r8)
 800a388:	40021000 	.word	0x40021000
 800a38c:	0800acdc 	.word	0x0800acdc

0800a390 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b086      	sub	sp, #24
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a398:	2300      	movs	r3, #0
 800a39a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800a39c:	2300      	movs	r3, #0
 800a39e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681a      	ldr	r2, [r3, #0]
 800a3a4:	2380      	movs	r3, #128	; 0x80
 800a3a6:	025b      	lsls	r3, r3, #9
 800a3a8:	4013      	ands	r3, r2
 800a3aa:	d100      	bne.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800a3ac:	e08e      	b.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800a3ae:	2017      	movs	r0, #23
 800a3b0:	183b      	adds	r3, r7, r0
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a3b6:	4b67      	ldr	r3, [pc, #412]	; (800a554 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a3b8:	69da      	ldr	r2, [r3, #28]
 800a3ba:	2380      	movs	r3, #128	; 0x80
 800a3bc:	055b      	lsls	r3, r3, #21
 800a3be:	4013      	ands	r3, r2
 800a3c0:	d110      	bne.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800a3c2:	4b64      	ldr	r3, [pc, #400]	; (800a554 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a3c4:	69da      	ldr	r2, [r3, #28]
 800a3c6:	4b63      	ldr	r3, [pc, #396]	; (800a554 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a3c8:	2180      	movs	r1, #128	; 0x80
 800a3ca:	0549      	lsls	r1, r1, #21
 800a3cc:	430a      	orrs	r2, r1
 800a3ce:	61da      	str	r2, [r3, #28]
 800a3d0:	4b60      	ldr	r3, [pc, #384]	; (800a554 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a3d2:	69da      	ldr	r2, [r3, #28]
 800a3d4:	2380      	movs	r3, #128	; 0x80
 800a3d6:	055b      	lsls	r3, r3, #21
 800a3d8:	4013      	ands	r3, r2
 800a3da:	60bb      	str	r3, [r7, #8]
 800a3dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a3de:	183b      	adds	r3, r7, r0
 800a3e0:	2201      	movs	r2, #1
 800a3e2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a3e4:	4b5c      	ldr	r3, [pc, #368]	; (800a558 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800a3e6:	681a      	ldr	r2, [r3, #0]
 800a3e8:	2380      	movs	r3, #128	; 0x80
 800a3ea:	005b      	lsls	r3, r3, #1
 800a3ec:	4013      	ands	r3, r2
 800a3ee:	d11a      	bne.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a3f0:	4b59      	ldr	r3, [pc, #356]	; (800a558 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800a3f2:	681a      	ldr	r2, [r3, #0]
 800a3f4:	4b58      	ldr	r3, [pc, #352]	; (800a558 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800a3f6:	2180      	movs	r1, #128	; 0x80
 800a3f8:	0049      	lsls	r1, r1, #1
 800a3fa:	430a      	orrs	r2, r1
 800a3fc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a3fe:	f7fb ffa7 	bl	8006350 <HAL_GetTick>
 800a402:	0003      	movs	r3, r0
 800a404:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a406:	e008      	b.n	800a41a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a408:	f7fb ffa2 	bl	8006350 <HAL_GetTick>
 800a40c:	0002      	movs	r2, r0
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	1ad3      	subs	r3, r2, r3
 800a412:	2b64      	cmp	r3, #100	; 0x64
 800a414:	d901      	bls.n	800a41a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800a416:	2303      	movs	r3, #3
 800a418:	e097      	b.n	800a54a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a41a:	4b4f      	ldr	r3, [pc, #316]	; (800a558 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800a41c:	681a      	ldr	r2, [r3, #0]
 800a41e:	2380      	movs	r3, #128	; 0x80
 800a420:	005b      	lsls	r3, r3, #1
 800a422:	4013      	ands	r3, r2
 800a424:	d0f0      	beq.n	800a408 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a426:	4b4b      	ldr	r3, [pc, #300]	; (800a554 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a428:	6a1a      	ldr	r2, [r3, #32]
 800a42a:	23c0      	movs	r3, #192	; 0xc0
 800a42c:	009b      	lsls	r3, r3, #2
 800a42e:	4013      	ands	r3, r2
 800a430:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d034      	beq.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	685a      	ldr	r2, [r3, #4]
 800a43c:	23c0      	movs	r3, #192	; 0xc0
 800a43e:	009b      	lsls	r3, r3, #2
 800a440:	4013      	ands	r3, r2
 800a442:	68fa      	ldr	r2, [r7, #12]
 800a444:	429a      	cmp	r2, r3
 800a446:	d02c      	beq.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a448:	4b42      	ldr	r3, [pc, #264]	; (800a554 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a44a:	6a1b      	ldr	r3, [r3, #32]
 800a44c:	4a43      	ldr	r2, [pc, #268]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800a44e:	4013      	ands	r3, r2
 800a450:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a452:	4b40      	ldr	r3, [pc, #256]	; (800a554 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a454:	6a1a      	ldr	r2, [r3, #32]
 800a456:	4b3f      	ldr	r3, [pc, #252]	; (800a554 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a458:	2180      	movs	r1, #128	; 0x80
 800a45a:	0249      	lsls	r1, r1, #9
 800a45c:	430a      	orrs	r2, r1
 800a45e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a460:	4b3c      	ldr	r3, [pc, #240]	; (800a554 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a462:	6a1a      	ldr	r2, [r3, #32]
 800a464:	4b3b      	ldr	r3, [pc, #236]	; (800a554 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a466:	493e      	ldr	r1, [pc, #248]	; (800a560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a468:	400a      	ands	r2, r1
 800a46a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800a46c:	4b39      	ldr	r3, [pc, #228]	; (800a554 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a46e:	68fa      	ldr	r2, [r7, #12]
 800a470:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2201      	movs	r2, #1
 800a476:	4013      	ands	r3, r2
 800a478:	d013      	beq.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a47a:	f7fb ff69 	bl	8006350 <HAL_GetTick>
 800a47e:	0003      	movs	r3, r0
 800a480:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a482:	e009      	b.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a484:	f7fb ff64 	bl	8006350 <HAL_GetTick>
 800a488:	0002      	movs	r2, r0
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	1ad3      	subs	r3, r2, r3
 800a48e:	4a35      	ldr	r2, [pc, #212]	; (800a564 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d901      	bls.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800a494:	2303      	movs	r3, #3
 800a496:	e058      	b.n	800a54a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a498:	4b2e      	ldr	r3, [pc, #184]	; (800a554 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a49a:	6a1b      	ldr	r3, [r3, #32]
 800a49c:	2202      	movs	r2, #2
 800a49e:	4013      	ands	r3, r2
 800a4a0:	d0f0      	beq.n	800a484 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a4a2:	4b2c      	ldr	r3, [pc, #176]	; (800a554 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a4a4:	6a1b      	ldr	r3, [r3, #32]
 800a4a6:	4a2d      	ldr	r2, [pc, #180]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800a4a8:	4013      	ands	r3, r2
 800a4aa:	0019      	movs	r1, r3
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	685a      	ldr	r2, [r3, #4]
 800a4b0:	4b28      	ldr	r3, [pc, #160]	; (800a554 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a4b2:	430a      	orrs	r2, r1
 800a4b4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800a4b6:	2317      	movs	r3, #23
 800a4b8:	18fb      	adds	r3, r7, r3
 800a4ba:	781b      	ldrb	r3, [r3, #0]
 800a4bc:	2b01      	cmp	r3, #1
 800a4be:	d105      	bne.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a4c0:	4b24      	ldr	r3, [pc, #144]	; (800a554 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a4c2:	69da      	ldr	r2, [r3, #28]
 800a4c4:	4b23      	ldr	r3, [pc, #140]	; (800a554 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a4c6:	4928      	ldr	r1, [pc, #160]	; (800a568 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800a4c8:	400a      	ands	r2, r1
 800a4ca:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	4013      	ands	r3, r2
 800a4d4:	d009      	beq.n	800a4ea <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a4d6:	4b1f      	ldr	r3, [pc, #124]	; (800a554 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a4d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4da:	2203      	movs	r2, #3
 800a4dc:	4393      	bics	r3, r2
 800a4de:	0019      	movs	r1, r3
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	689a      	ldr	r2, [r3, #8]
 800a4e4:	4b1b      	ldr	r3, [pc, #108]	; (800a554 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a4e6:	430a      	orrs	r2, r1
 800a4e8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	2220      	movs	r2, #32
 800a4f0:	4013      	ands	r3, r2
 800a4f2:	d009      	beq.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a4f4:	4b17      	ldr	r3, [pc, #92]	; (800a554 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a4f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4f8:	2210      	movs	r2, #16
 800a4fa:	4393      	bics	r3, r2
 800a4fc:	0019      	movs	r1, r3
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	68da      	ldr	r2, [r3, #12]
 800a502:	4b14      	ldr	r3, [pc, #80]	; (800a554 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a504:	430a      	orrs	r2, r1
 800a506:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681a      	ldr	r2, [r3, #0]
 800a50c:	2380      	movs	r3, #128	; 0x80
 800a50e:	029b      	lsls	r3, r3, #10
 800a510:	4013      	ands	r3, r2
 800a512:	d009      	beq.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a514:	4b0f      	ldr	r3, [pc, #60]	; (800a554 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a518:	2280      	movs	r2, #128	; 0x80
 800a51a:	4393      	bics	r3, r2
 800a51c:	0019      	movs	r1, r3
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	695a      	ldr	r2, [r3, #20]
 800a522:	4b0c      	ldr	r3, [pc, #48]	; (800a554 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a524:	430a      	orrs	r2, r1
 800a526:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681a      	ldr	r2, [r3, #0]
 800a52c:	2380      	movs	r3, #128	; 0x80
 800a52e:	00db      	lsls	r3, r3, #3
 800a530:	4013      	ands	r3, r2
 800a532:	d009      	beq.n	800a548 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a534:	4b07      	ldr	r3, [pc, #28]	; (800a554 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a538:	2240      	movs	r2, #64	; 0x40
 800a53a:	4393      	bics	r3, r2
 800a53c:	0019      	movs	r1, r3
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	691a      	ldr	r2, [r3, #16]
 800a542:	4b04      	ldr	r3, [pc, #16]	; (800a554 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a544:	430a      	orrs	r2, r1
 800a546:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800a548:	2300      	movs	r3, #0
}
 800a54a:	0018      	movs	r0, r3
 800a54c:	46bd      	mov	sp, r7
 800a54e:	b006      	add	sp, #24
 800a550:	bd80      	pop	{r7, pc}
 800a552:	46c0      	nop			; (mov r8, r8)
 800a554:	40021000 	.word	0x40021000
 800a558:	40007000 	.word	0x40007000
 800a55c:	fffffcff 	.word	0xfffffcff
 800a560:	fffeffff 	.word	0xfffeffff
 800a564:	00001388 	.word	0x00001388
 800a568:	efffffff 	.word	0xefffffff

0800a56c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b082      	sub	sp, #8
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d101      	bne.n	800a57e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a57a:	2301      	movs	r3, #1
 800a57c:	e042      	b.n	800a604 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	223d      	movs	r2, #61	; 0x3d
 800a582:	5c9b      	ldrb	r3, [r3, r2]
 800a584:	b2db      	uxtb	r3, r3
 800a586:	2b00      	cmp	r3, #0
 800a588:	d107      	bne.n	800a59a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	223c      	movs	r2, #60	; 0x3c
 800a58e:	2100      	movs	r1, #0
 800a590:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	0018      	movs	r0, r3
 800a596:	f7fb fdd5 	bl	8006144 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	223d      	movs	r2, #61	; 0x3d
 800a59e:	2102      	movs	r1, #2
 800a5a0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681a      	ldr	r2, [r3, #0]
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	3304      	adds	r3, #4
 800a5aa:	0019      	movs	r1, r3
 800a5ac:	0010      	movs	r0, r2
 800a5ae:	f000 f9f3 	bl	800a998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2246      	movs	r2, #70	; 0x46
 800a5b6:	2101      	movs	r1, #1
 800a5b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	223e      	movs	r2, #62	; 0x3e
 800a5be:	2101      	movs	r1, #1
 800a5c0:	5499      	strb	r1, [r3, r2]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	223f      	movs	r2, #63	; 0x3f
 800a5c6:	2101      	movs	r1, #1
 800a5c8:	5499      	strb	r1, [r3, r2]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2240      	movs	r2, #64	; 0x40
 800a5ce:	2101      	movs	r1, #1
 800a5d0:	5499      	strb	r1, [r3, r2]
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2241      	movs	r2, #65	; 0x41
 800a5d6:	2101      	movs	r1, #1
 800a5d8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2242      	movs	r2, #66	; 0x42
 800a5de:	2101      	movs	r1, #1
 800a5e0:	5499      	strb	r1, [r3, r2]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2243      	movs	r2, #67	; 0x43
 800a5e6:	2101      	movs	r1, #1
 800a5e8:	5499      	strb	r1, [r3, r2]
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2244      	movs	r2, #68	; 0x44
 800a5ee:	2101      	movs	r1, #1
 800a5f0:	5499      	strb	r1, [r3, r2]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2245      	movs	r2, #69	; 0x45
 800a5f6:	2101      	movs	r1, #1
 800a5f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	223d      	movs	r2, #61	; 0x3d
 800a5fe:	2101      	movs	r1, #1
 800a600:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a602:	2300      	movs	r3, #0
}
 800a604:	0018      	movs	r0, r3
 800a606:	46bd      	mov	sp, r7
 800a608:	b002      	add	sp, #8
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b084      	sub	sp, #16
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	223d      	movs	r2, #61	; 0x3d
 800a618:	5c9b      	ldrb	r3, [r3, r2]
 800a61a:	b2db      	uxtb	r3, r3
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	d001      	beq.n	800a624 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a620:	2301      	movs	r3, #1
 800a622:	e02e      	b.n	800a682 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	223d      	movs	r2, #61	; 0x3d
 800a628:	2102      	movs	r1, #2
 800a62a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	4a16      	ldr	r2, [pc, #88]	; (800a68c <HAL_TIM_Base_Start+0x80>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d00a      	beq.n	800a64c <HAL_TIM_Base_Start+0x40>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681a      	ldr	r2, [r3, #0]
 800a63a:	2380      	movs	r3, #128	; 0x80
 800a63c:	05db      	lsls	r3, r3, #23
 800a63e:	429a      	cmp	r2, r3
 800a640:	d004      	beq.n	800a64c <HAL_TIM_Base_Start+0x40>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	4a12      	ldr	r2, [pc, #72]	; (800a690 <HAL_TIM_Base_Start+0x84>)
 800a648:	4293      	cmp	r3, r2
 800a64a:	d111      	bne.n	800a670 <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	689b      	ldr	r3, [r3, #8]
 800a652:	2207      	movs	r2, #7
 800a654:	4013      	ands	r3, r2
 800a656:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	2b06      	cmp	r3, #6
 800a65c:	d010      	beq.n	800a680 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	681a      	ldr	r2, [r3, #0]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	2101      	movs	r1, #1
 800a66a:	430a      	orrs	r2, r1
 800a66c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a66e:	e007      	b.n	800a680 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	681a      	ldr	r2, [r3, #0]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	2101      	movs	r1, #1
 800a67c:	430a      	orrs	r2, r1
 800a67e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a680:	2300      	movs	r3, #0
}
 800a682:	0018      	movs	r0, r3
 800a684:	46bd      	mov	sp, r7
 800a686:	b004      	add	sp, #16
 800a688:	bd80      	pop	{r7, pc}
 800a68a:	46c0      	nop			; (mov r8, r8)
 800a68c:	40012c00 	.word	0x40012c00
 800a690:	40000400 	.word	0x40000400

0800a694 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b084      	sub	sp, #16
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	223d      	movs	r2, #61	; 0x3d
 800a6a0:	5c9b      	ldrb	r3, [r3, r2]
 800a6a2:	b2db      	uxtb	r3, r3
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	d001      	beq.n	800a6ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	e036      	b.n	800a71a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	223d      	movs	r2, #61	; 0x3d
 800a6b0:	2102      	movs	r1, #2
 800a6b2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	68da      	ldr	r2, [r3, #12]
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	2101      	movs	r1, #1
 800a6c0:	430a      	orrs	r2, r1
 800a6c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4a16      	ldr	r2, [pc, #88]	; (800a724 <HAL_TIM_Base_Start_IT+0x90>)
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d00a      	beq.n	800a6e4 <HAL_TIM_Base_Start_IT+0x50>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681a      	ldr	r2, [r3, #0]
 800a6d2:	2380      	movs	r3, #128	; 0x80
 800a6d4:	05db      	lsls	r3, r3, #23
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d004      	beq.n	800a6e4 <HAL_TIM_Base_Start_IT+0x50>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	4a12      	ldr	r2, [pc, #72]	; (800a728 <HAL_TIM_Base_Start_IT+0x94>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d111      	bne.n	800a708 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	689b      	ldr	r3, [r3, #8]
 800a6ea:	2207      	movs	r2, #7
 800a6ec:	4013      	ands	r3, r2
 800a6ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2b06      	cmp	r3, #6
 800a6f4:	d010      	beq.n	800a718 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	681a      	ldr	r2, [r3, #0]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	2101      	movs	r1, #1
 800a702:	430a      	orrs	r2, r1
 800a704:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a706:	e007      	b.n	800a718 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	681a      	ldr	r2, [r3, #0]
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	2101      	movs	r1, #1
 800a714:	430a      	orrs	r2, r1
 800a716:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a718:	2300      	movs	r3, #0
}
 800a71a:	0018      	movs	r0, r3
 800a71c:	46bd      	mov	sp, r7
 800a71e:	b004      	add	sp, #16
 800a720:	bd80      	pop	{r7, pc}
 800a722:	46c0      	nop			; (mov r8, r8)
 800a724:	40012c00 	.word	0x40012c00
 800a728:	40000400 	.word	0x40000400

0800a72c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b082      	sub	sp, #8
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	691b      	ldr	r3, [r3, #16]
 800a73a:	2202      	movs	r2, #2
 800a73c:	4013      	ands	r3, r2
 800a73e:	2b02      	cmp	r3, #2
 800a740:	d124      	bne.n	800a78c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	68db      	ldr	r3, [r3, #12]
 800a748:	2202      	movs	r2, #2
 800a74a:	4013      	ands	r3, r2
 800a74c:	2b02      	cmp	r3, #2
 800a74e:	d11d      	bne.n	800a78c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	2203      	movs	r2, #3
 800a756:	4252      	negs	r2, r2
 800a758:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2201      	movs	r2, #1
 800a75e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	699b      	ldr	r3, [r3, #24]
 800a766:	2203      	movs	r2, #3
 800a768:	4013      	ands	r3, r2
 800a76a:	d004      	beq.n	800a776 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	0018      	movs	r0, r3
 800a770:	f000 f8fa 	bl	800a968 <HAL_TIM_IC_CaptureCallback>
 800a774:	e007      	b.n	800a786 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	0018      	movs	r0, r3
 800a77a:	f000 f8ed 	bl	800a958 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	0018      	movs	r0, r3
 800a782:	f000 f8f9 	bl	800a978 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2200      	movs	r2, #0
 800a78a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	691b      	ldr	r3, [r3, #16]
 800a792:	2204      	movs	r2, #4
 800a794:	4013      	ands	r3, r2
 800a796:	2b04      	cmp	r3, #4
 800a798:	d125      	bne.n	800a7e6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	68db      	ldr	r3, [r3, #12]
 800a7a0:	2204      	movs	r2, #4
 800a7a2:	4013      	ands	r3, r2
 800a7a4:	2b04      	cmp	r3, #4
 800a7a6:	d11e      	bne.n	800a7e6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	2205      	movs	r2, #5
 800a7ae:	4252      	negs	r2, r2
 800a7b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2202      	movs	r2, #2
 800a7b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	699a      	ldr	r2, [r3, #24]
 800a7be:	23c0      	movs	r3, #192	; 0xc0
 800a7c0:	009b      	lsls	r3, r3, #2
 800a7c2:	4013      	ands	r3, r2
 800a7c4:	d004      	beq.n	800a7d0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	0018      	movs	r0, r3
 800a7ca:	f000 f8cd 	bl	800a968 <HAL_TIM_IC_CaptureCallback>
 800a7ce:	e007      	b.n	800a7e0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	0018      	movs	r0, r3
 800a7d4:	f000 f8c0 	bl	800a958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	0018      	movs	r0, r3
 800a7dc:	f000 f8cc 	bl	800a978 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	691b      	ldr	r3, [r3, #16]
 800a7ec:	2208      	movs	r2, #8
 800a7ee:	4013      	ands	r3, r2
 800a7f0:	2b08      	cmp	r3, #8
 800a7f2:	d124      	bne.n	800a83e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	68db      	ldr	r3, [r3, #12]
 800a7fa:	2208      	movs	r2, #8
 800a7fc:	4013      	ands	r3, r2
 800a7fe:	2b08      	cmp	r3, #8
 800a800:	d11d      	bne.n	800a83e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	2209      	movs	r2, #9
 800a808:	4252      	negs	r2, r2
 800a80a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2204      	movs	r2, #4
 800a810:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	69db      	ldr	r3, [r3, #28]
 800a818:	2203      	movs	r2, #3
 800a81a:	4013      	ands	r3, r2
 800a81c:	d004      	beq.n	800a828 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	0018      	movs	r0, r3
 800a822:	f000 f8a1 	bl	800a968 <HAL_TIM_IC_CaptureCallback>
 800a826:	e007      	b.n	800a838 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	0018      	movs	r0, r3
 800a82c:	f000 f894 	bl	800a958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	0018      	movs	r0, r3
 800a834:	f000 f8a0 	bl	800a978 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2200      	movs	r2, #0
 800a83c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	691b      	ldr	r3, [r3, #16]
 800a844:	2210      	movs	r2, #16
 800a846:	4013      	ands	r3, r2
 800a848:	2b10      	cmp	r3, #16
 800a84a:	d125      	bne.n	800a898 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	68db      	ldr	r3, [r3, #12]
 800a852:	2210      	movs	r2, #16
 800a854:	4013      	ands	r3, r2
 800a856:	2b10      	cmp	r3, #16
 800a858:	d11e      	bne.n	800a898 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	2211      	movs	r2, #17
 800a860:	4252      	negs	r2, r2
 800a862:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2208      	movs	r2, #8
 800a868:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	69da      	ldr	r2, [r3, #28]
 800a870:	23c0      	movs	r3, #192	; 0xc0
 800a872:	009b      	lsls	r3, r3, #2
 800a874:	4013      	ands	r3, r2
 800a876:	d004      	beq.n	800a882 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	0018      	movs	r0, r3
 800a87c:	f000 f874 	bl	800a968 <HAL_TIM_IC_CaptureCallback>
 800a880:	e007      	b.n	800a892 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	0018      	movs	r0, r3
 800a886:	f000 f867 	bl	800a958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	0018      	movs	r0, r3
 800a88e:	f000 f873 	bl	800a978 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2200      	movs	r2, #0
 800a896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	691b      	ldr	r3, [r3, #16]
 800a89e:	2201      	movs	r2, #1
 800a8a0:	4013      	ands	r3, r2
 800a8a2:	2b01      	cmp	r3, #1
 800a8a4:	d10f      	bne.n	800a8c6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	68db      	ldr	r3, [r3, #12]
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	4013      	ands	r3, r2
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d108      	bne.n	800a8c6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	2202      	movs	r2, #2
 800a8ba:	4252      	negs	r2, r2
 800a8bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	0018      	movs	r0, r3
 800a8c2:	f7f8 f949 	bl	8002b58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	691b      	ldr	r3, [r3, #16]
 800a8cc:	2280      	movs	r2, #128	; 0x80
 800a8ce:	4013      	ands	r3, r2
 800a8d0:	2b80      	cmp	r3, #128	; 0x80
 800a8d2:	d10f      	bne.n	800a8f4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	68db      	ldr	r3, [r3, #12]
 800a8da:	2280      	movs	r2, #128	; 0x80
 800a8dc:	4013      	ands	r3, r2
 800a8de:	2b80      	cmp	r3, #128	; 0x80
 800a8e0:	d108      	bne.n	800a8f4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	2281      	movs	r2, #129	; 0x81
 800a8e8:	4252      	negs	r2, r2
 800a8ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	0018      	movs	r0, r3
 800a8f0:	f000 f8d0 	bl	800aa94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	691b      	ldr	r3, [r3, #16]
 800a8fa:	2240      	movs	r2, #64	; 0x40
 800a8fc:	4013      	ands	r3, r2
 800a8fe:	2b40      	cmp	r3, #64	; 0x40
 800a900:	d10f      	bne.n	800a922 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	68db      	ldr	r3, [r3, #12]
 800a908:	2240      	movs	r2, #64	; 0x40
 800a90a:	4013      	ands	r3, r2
 800a90c:	2b40      	cmp	r3, #64	; 0x40
 800a90e:	d108      	bne.n	800a922 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	2241      	movs	r2, #65	; 0x41
 800a916:	4252      	negs	r2, r2
 800a918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	0018      	movs	r0, r3
 800a91e:	f000 f833 	bl	800a988 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	691b      	ldr	r3, [r3, #16]
 800a928:	2220      	movs	r2, #32
 800a92a:	4013      	ands	r3, r2
 800a92c:	2b20      	cmp	r3, #32
 800a92e:	d10f      	bne.n	800a950 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	68db      	ldr	r3, [r3, #12]
 800a936:	2220      	movs	r2, #32
 800a938:	4013      	ands	r3, r2
 800a93a:	2b20      	cmp	r3, #32
 800a93c:	d108      	bne.n	800a950 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	2221      	movs	r2, #33	; 0x21
 800a944:	4252      	negs	r2, r2
 800a946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	0018      	movs	r0, r3
 800a94c:	f000 f89a 	bl	800aa84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a950:	46c0      	nop			; (mov r8, r8)
 800a952:	46bd      	mov	sp, r7
 800a954:	b002      	add	sp, #8
 800a956:	bd80      	pop	{r7, pc}

0800a958 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b082      	sub	sp, #8
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a960:	46c0      	nop			; (mov r8, r8)
 800a962:	46bd      	mov	sp, r7
 800a964:	b002      	add	sp, #8
 800a966:	bd80      	pop	{r7, pc}

0800a968 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b082      	sub	sp, #8
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a970:	46c0      	nop			; (mov r8, r8)
 800a972:	46bd      	mov	sp, r7
 800a974:	b002      	add	sp, #8
 800a976:	bd80      	pop	{r7, pc}

0800a978 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b082      	sub	sp, #8
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a980:	46c0      	nop			; (mov r8, r8)
 800a982:	46bd      	mov	sp, r7
 800a984:	b002      	add	sp, #8
 800a986:	bd80      	pop	{r7, pc}

0800a988 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b082      	sub	sp, #8
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a990:	46c0      	nop			; (mov r8, r8)
 800a992:	46bd      	mov	sp, r7
 800a994:	b002      	add	sp, #8
 800a996:	bd80      	pop	{r7, pc}

0800a998 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b084      	sub	sp, #16
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
 800a9a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	4a30      	ldr	r2, [pc, #192]	; (800aa6c <TIM_Base_SetConfig+0xd4>)
 800a9ac:	4293      	cmp	r3, r2
 800a9ae:	d008      	beq.n	800a9c2 <TIM_Base_SetConfig+0x2a>
 800a9b0:	687a      	ldr	r2, [r7, #4]
 800a9b2:	2380      	movs	r3, #128	; 0x80
 800a9b4:	05db      	lsls	r3, r3, #23
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d003      	beq.n	800a9c2 <TIM_Base_SetConfig+0x2a>
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	4a2c      	ldr	r2, [pc, #176]	; (800aa70 <TIM_Base_SetConfig+0xd8>)
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	d108      	bne.n	800a9d4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	2270      	movs	r2, #112	; 0x70
 800a9c6:	4393      	bics	r3, r2
 800a9c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	68fa      	ldr	r2, [r7, #12]
 800a9d0:	4313      	orrs	r3, r2
 800a9d2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	4a25      	ldr	r2, [pc, #148]	; (800aa6c <TIM_Base_SetConfig+0xd4>)
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	d014      	beq.n	800aa06 <TIM_Base_SetConfig+0x6e>
 800a9dc:	687a      	ldr	r2, [r7, #4]
 800a9de:	2380      	movs	r3, #128	; 0x80
 800a9e0:	05db      	lsls	r3, r3, #23
 800a9e2:	429a      	cmp	r2, r3
 800a9e4:	d00f      	beq.n	800aa06 <TIM_Base_SetConfig+0x6e>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	4a21      	ldr	r2, [pc, #132]	; (800aa70 <TIM_Base_SetConfig+0xd8>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d00b      	beq.n	800aa06 <TIM_Base_SetConfig+0x6e>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	4a20      	ldr	r2, [pc, #128]	; (800aa74 <TIM_Base_SetConfig+0xdc>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d007      	beq.n	800aa06 <TIM_Base_SetConfig+0x6e>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	4a1f      	ldr	r2, [pc, #124]	; (800aa78 <TIM_Base_SetConfig+0xe0>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d003      	beq.n	800aa06 <TIM_Base_SetConfig+0x6e>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	4a1e      	ldr	r2, [pc, #120]	; (800aa7c <TIM_Base_SetConfig+0xe4>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d108      	bne.n	800aa18 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	4a1d      	ldr	r2, [pc, #116]	; (800aa80 <TIM_Base_SetConfig+0xe8>)
 800aa0a:	4013      	ands	r3, r2
 800aa0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	68db      	ldr	r3, [r3, #12]
 800aa12:	68fa      	ldr	r2, [r7, #12]
 800aa14:	4313      	orrs	r3, r2
 800aa16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2280      	movs	r2, #128	; 0x80
 800aa1c:	4393      	bics	r3, r2
 800aa1e:	001a      	movs	r2, r3
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	695b      	ldr	r3, [r3, #20]
 800aa24:	4313      	orrs	r3, r2
 800aa26:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	68fa      	ldr	r2, [r7, #12]
 800aa2c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	689a      	ldr	r2, [r3, #8]
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	681a      	ldr	r2, [r3, #0]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	4a0a      	ldr	r2, [pc, #40]	; (800aa6c <TIM_Base_SetConfig+0xd4>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d007      	beq.n	800aa56 <TIM_Base_SetConfig+0xbe>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	4a0b      	ldr	r2, [pc, #44]	; (800aa78 <TIM_Base_SetConfig+0xe0>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d003      	beq.n	800aa56 <TIM_Base_SetConfig+0xbe>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	4a0a      	ldr	r2, [pc, #40]	; (800aa7c <TIM_Base_SetConfig+0xe4>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d103      	bne.n	800aa5e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	691a      	ldr	r2, [r3, #16]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2201      	movs	r2, #1
 800aa62:	615a      	str	r2, [r3, #20]
}
 800aa64:	46c0      	nop			; (mov r8, r8)
 800aa66:	46bd      	mov	sp, r7
 800aa68:	b004      	add	sp, #16
 800aa6a:	bd80      	pop	{r7, pc}
 800aa6c:	40012c00 	.word	0x40012c00
 800aa70:	40000400 	.word	0x40000400
 800aa74:	40002000 	.word	0x40002000
 800aa78:	40014400 	.word	0x40014400
 800aa7c:	40014800 	.word	0x40014800
 800aa80:	fffffcff 	.word	0xfffffcff

0800aa84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b082      	sub	sp, #8
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aa8c:	46c0      	nop			; (mov r8, r8)
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	b002      	add	sp, #8
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b082      	sub	sp, #8
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aa9c:	46c0      	nop			; (mov r8, r8)
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	b002      	add	sp, #8
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <memset>:
 800aaa4:	0003      	movs	r3, r0
 800aaa6:	1882      	adds	r2, r0, r2
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d100      	bne.n	800aaae <memset+0xa>
 800aaac:	4770      	bx	lr
 800aaae:	7019      	strb	r1, [r3, #0]
 800aab0:	3301      	adds	r3, #1
 800aab2:	e7f9      	b.n	800aaa8 <memset+0x4>

0800aab4 <__libc_init_array>:
 800aab4:	b570      	push	{r4, r5, r6, lr}
 800aab6:	2600      	movs	r6, #0
 800aab8:	4c0c      	ldr	r4, [pc, #48]	; (800aaec <__libc_init_array+0x38>)
 800aaba:	4d0d      	ldr	r5, [pc, #52]	; (800aaf0 <__libc_init_array+0x3c>)
 800aabc:	1b64      	subs	r4, r4, r5
 800aabe:	10a4      	asrs	r4, r4, #2
 800aac0:	42a6      	cmp	r6, r4
 800aac2:	d109      	bne.n	800aad8 <__libc_init_array+0x24>
 800aac4:	2600      	movs	r6, #0
 800aac6:	f000 f82b 	bl	800ab20 <_init>
 800aaca:	4c0a      	ldr	r4, [pc, #40]	; (800aaf4 <__libc_init_array+0x40>)
 800aacc:	4d0a      	ldr	r5, [pc, #40]	; (800aaf8 <__libc_init_array+0x44>)
 800aace:	1b64      	subs	r4, r4, r5
 800aad0:	10a4      	asrs	r4, r4, #2
 800aad2:	42a6      	cmp	r6, r4
 800aad4:	d105      	bne.n	800aae2 <__libc_init_array+0x2e>
 800aad6:	bd70      	pop	{r4, r5, r6, pc}
 800aad8:	00b3      	lsls	r3, r6, #2
 800aada:	58eb      	ldr	r3, [r5, r3]
 800aadc:	4798      	blx	r3
 800aade:	3601      	adds	r6, #1
 800aae0:	e7ee      	b.n	800aac0 <__libc_init_array+0xc>
 800aae2:	00b3      	lsls	r3, r6, #2
 800aae4:	58eb      	ldr	r3, [r5, r3]
 800aae6:	4798      	blx	r3
 800aae8:	3601      	adds	r6, #1
 800aaea:	e7f2      	b.n	800aad2 <__libc_init_array+0x1e>
 800aaec:	0800ad04 	.word	0x0800ad04
 800aaf0:	0800ad04 	.word	0x0800ad04
 800aaf4:	0800ad08 	.word	0x0800ad08
 800aaf8:	0800ad04 	.word	0x0800ad04

0800aafc <strcpy>:
 800aafc:	0003      	movs	r3, r0
 800aafe:	780a      	ldrb	r2, [r1, #0]
 800ab00:	3101      	adds	r1, #1
 800ab02:	701a      	strb	r2, [r3, #0]
 800ab04:	3301      	adds	r3, #1
 800ab06:	2a00      	cmp	r2, #0
 800ab08:	d1f9      	bne.n	800aafe <strcpy+0x2>
 800ab0a:	4770      	bx	lr

0800ab0c <memcpy>:
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	b510      	push	{r4, lr}
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d100      	bne.n	800ab16 <memcpy+0xa>
 800ab14:	bd10      	pop	{r4, pc}
 800ab16:	5ccc      	ldrb	r4, [r1, r3]
 800ab18:	54c4      	strb	r4, [r0, r3]
 800ab1a:	3301      	adds	r3, #1
 800ab1c:	e7f8      	b.n	800ab10 <memcpy+0x4>
	...

0800ab20 <_init>:
 800ab20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab22:	46c0      	nop			; (mov r8, r8)
 800ab24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab26:	bc08      	pop	{r3}
 800ab28:	469e      	mov	lr, r3
 800ab2a:	4770      	bx	lr

0800ab2c <_fini>:
 800ab2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab2e:	46c0      	nop			; (mov r8, r8)
 800ab30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab32:	bc08      	pop	{r3}
 800ab34:	469e      	mov	lr, r3
 800ab36:	4770      	bx	lr

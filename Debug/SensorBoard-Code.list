
SensorBoard-Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060bc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  0800617c  0800617c  0000717c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062cc  080062cc  00008068  2**0
                  CONTENTS
  4 .ARM          00000000  080062cc  080062cc  00008068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080062cc  080062cc  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062cc  080062cc  000072cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080062d0  080062d0  000072d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080062d4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  20000068  0800633c  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  0800633c  000083a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e1ab  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000247e  00000000  00000000  0001623b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  000186c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b83  00000000  00000000  00019598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5f8  00000000  00000000  0001a11b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000114b9  00000000  00000000  00034713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095aff  00000000  00000000  00045bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000db6cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c98  00000000  00000000  000db710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000df3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006164 	.word	0x08006164

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08006164 	.word	0x08006164

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <BNO085_DecodeSensorEvent>:
 * @return sensor report_id from enum SH2_SensorReportID
 * @param uint8_t *data, of length 8
 * @param SH2_SensorEvent *event
 */
enum SH2_SensorReportID BNO085_DecodeSensorEvent(uint8_t *data, SH2_SensorEvent *event)
{
 8000234:	b5b0      	push	{r4, r5, r7, lr}
 8000236:	b086      	sub	sp, #24
 8000238:	af02      	add	r7, sp, #8
 800023a:	6078      	str	r0, [r7, #4]
 800023c:	6039      	str	r1, [r7, #0]
  uint8_t reportID = event->report_id;
 800023e:	210f      	movs	r1, #15
 8000240:	187b      	adds	r3, r7, r1
 8000242:	683a      	ldr	r2, [r7, #0]
 8000244:	7a52      	ldrb	r2, [r2, #9]
 8000246:	701a      	strb	r2, [r3, #0]

  switch (reportID)
 8000248:	187b      	adds	r3, r7, r1
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	2b05      	cmp	r3, #5
 800024e:	d100      	bne.n	8000252 <BNO085_DecodeSensorEvent+0x1e>
 8000250:	e14f      	b.n	80004f2 <BNO085_DecodeSensorEvent+0x2be>
 8000252:	dd00      	ble.n	8000256 <BNO085_DecodeSensorEvent+0x22>
 8000254:	e1de      	b.n	8000614 <BNO085_DecodeSensorEvent+0x3e0>
 8000256:	2b03      	cmp	r3, #3
 8000258:	d100      	bne.n	800025c <BNO085_DecodeSensorEvent+0x28>
 800025a:	e0de      	b.n	800041a <BNO085_DecodeSensorEvent+0x1e6>
 800025c:	dd00      	ble.n	8000260 <BNO085_DecodeSensorEvent+0x2c>
 800025e:	e1d9      	b.n	8000614 <BNO085_DecodeSensorEvent+0x3e0>
 8000260:	2b01      	cmp	r3, #1
 8000262:	d002      	beq.n	800026a <BNO085_DecodeSensorEvent+0x36>
 8000264:	2b02      	cmp	r3, #2
 8000266:	d06c      	beq.n	8000342 <BNO085_DecodeSensorEvent+0x10e>
#ifdef DEBUG
    printf("Rotation Vector: i = %d, j = %d, k = %d, real = %d\n", event->data.rotation_vector.i, event->data.rotation_vector.j, event->data.rotation_vector.k, event->data.rotation_vector.real);
#endif
    break;
  default:
    break;
 8000268:	e1d4      	b.n	8000614 <BNO085_DecodeSensorEvent+0x3e0>
    data[0] = event->data.accelerometer.x & 0xFF;
 800026a:	683b      	ldr	r3, [r7, #0]
 800026c:	7b5a      	ldrb	r2, [r3, #13]
 800026e:	7b9b      	ldrb	r3, [r3, #14]
 8000270:	021b      	lsls	r3, r3, #8
 8000272:	4313      	orrs	r3, r2
 8000274:	041b      	lsls	r3, r3, #16
 8000276:	141b      	asrs	r3, r3, #16
 8000278:	b21b      	sxth	r3, r3
 800027a:	b2da      	uxtb	r2, r3
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	701a      	strb	r2, [r3, #0]
    data[1] = (event->data.accelerometer.x >> 8) & 0xFF;
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	7b5a      	ldrb	r2, [r3, #13]
 8000284:	7b9b      	ldrb	r3, [r3, #14]
 8000286:	021b      	lsls	r3, r3, #8
 8000288:	4313      	orrs	r3, r2
 800028a:	041b      	lsls	r3, r3, #16
 800028c:	141b      	asrs	r3, r3, #16
 800028e:	b21b      	sxth	r3, r3
 8000290:	121b      	asrs	r3, r3, #8
 8000292:	b21a      	sxth	r2, r3
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	3301      	adds	r3, #1
 8000298:	b2d2      	uxtb	r2, r2
 800029a:	701a      	strb	r2, [r3, #0]
    data[2] = event->data.accelerometer.y & 0xFF;
 800029c:	683b      	ldr	r3, [r7, #0]
 800029e:	7bda      	ldrb	r2, [r3, #15]
 80002a0:	7c1b      	ldrb	r3, [r3, #16]
 80002a2:	021b      	lsls	r3, r3, #8
 80002a4:	4313      	orrs	r3, r2
 80002a6:	041b      	lsls	r3, r3, #16
 80002a8:	141b      	asrs	r3, r3, #16
 80002aa:	b21a      	sxth	r2, r3
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	3302      	adds	r3, #2
 80002b0:	b2d2      	uxtb	r2, r2
 80002b2:	701a      	strb	r2, [r3, #0]
    data[3] = (event->data.accelerometer.y >> 8) & 0xFF;
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	7bda      	ldrb	r2, [r3, #15]
 80002b8:	7c1b      	ldrb	r3, [r3, #16]
 80002ba:	021b      	lsls	r3, r3, #8
 80002bc:	4313      	orrs	r3, r2
 80002be:	041b      	lsls	r3, r3, #16
 80002c0:	141b      	asrs	r3, r3, #16
 80002c2:	b21b      	sxth	r3, r3
 80002c4:	121b      	asrs	r3, r3, #8
 80002c6:	b21a      	sxth	r2, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	3303      	adds	r3, #3
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	701a      	strb	r2, [r3, #0]
    data[4] = event->data.accelerometer.z & 0xFF;
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	7c5a      	ldrb	r2, [r3, #17]
 80002d4:	7c9b      	ldrb	r3, [r3, #18]
 80002d6:	021b      	lsls	r3, r3, #8
 80002d8:	4313      	orrs	r3, r2
 80002da:	041b      	lsls	r3, r3, #16
 80002dc:	141b      	asrs	r3, r3, #16
 80002de:	b21a      	sxth	r2, r3
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	3304      	adds	r3, #4
 80002e4:	b2d2      	uxtb	r2, r2
 80002e6:	701a      	strb	r2, [r3, #0]
    data[5] = (event->data.accelerometer.z >> 8) & 0xFF;
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	7c5a      	ldrb	r2, [r3, #17]
 80002ec:	7c9b      	ldrb	r3, [r3, #18]
 80002ee:	021b      	lsls	r3, r3, #8
 80002f0:	4313      	orrs	r3, r2
 80002f2:	041b      	lsls	r3, r3, #16
 80002f4:	141b      	asrs	r3, r3, #16
 80002f6:	b21b      	sxth	r3, r3
 80002f8:	121b      	asrs	r3, r3, #8
 80002fa:	b21a      	sxth	r2, r3
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	3305      	adds	r3, #5
 8000300:	b2d2      	uxtb	r2, r2
 8000302:	701a      	strb	r2, [r3, #0]
    printf("Accelerometer: x = %d, y = %d, z = %d\n", event->data.accelerometer.x, event->data.accelerometer.y, event->data.accelerometer.z);
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	7b5a      	ldrb	r2, [r3, #13]
 8000308:	7b9b      	ldrb	r3, [r3, #14]
 800030a:	021b      	lsls	r3, r3, #8
 800030c:	4313      	orrs	r3, r2
 800030e:	041b      	lsls	r3, r3, #16
 8000310:	141b      	asrs	r3, r3, #16
 8000312:	b21b      	sxth	r3, r3
 8000314:	0019      	movs	r1, r3
 8000316:	683b      	ldr	r3, [r7, #0]
 8000318:	7bda      	ldrb	r2, [r3, #15]
 800031a:	7c1b      	ldrb	r3, [r3, #16]
 800031c:	021b      	lsls	r3, r3, #8
 800031e:	4313      	orrs	r3, r2
 8000320:	041b      	lsls	r3, r3, #16
 8000322:	141b      	asrs	r3, r3, #16
 8000324:	b21b      	sxth	r3, r3
 8000326:	001c      	movs	r4, r3
 8000328:	683b      	ldr	r3, [r7, #0]
 800032a:	7c5a      	ldrb	r2, [r3, #17]
 800032c:	7c9b      	ldrb	r3, [r3, #18]
 800032e:	021b      	lsls	r3, r3, #8
 8000330:	4313      	orrs	r3, r2
 8000332:	041b      	lsls	r3, r3, #16
 8000334:	141b      	asrs	r3, r3, #16
 8000336:	b21b      	sxth	r3, r3
 8000338:	48ba      	ldr	r0, [pc, #744]	@ (8000624 <BNO085_DecodeSensorEvent+0x3f0>)
 800033a:	0022      	movs	r2, r4
 800033c:	f005 f874 	bl	8005428 <iprintf>
    break;
 8000340:	e169      	b.n	8000616 <BNO085_DecodeSensorEvent+0x3e2>
    data[0] = event->data.gyroscope_calibrated.x & 0xFF;
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	7b5a      	ldrb	r2, [r3, #13]
 8000346:	7b9b      	ldrb	r3, [r3, #14]
 8000348:	021b      	lsls	r3, r3, #8
 800034a:	4313      	orrs	r3, r2
 800034c:	041b      	lsls	r3, r3, #16
 800034e:	141b      	asrs	r3, r3, #16
 8000350:	b21b      	sxth	r3, r3
 8000352:	b2da      	uxtb	r2, r3
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	701a      	strb	r2, [r3, #0]
    data[1] = (event->data.gyroscope_calibrated.x >> 8) & 0xFF;
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	7b5a      	ldrb	r2, [r3, #13]
 800035c:	7b9b      	ldrb	r3, [r3, #14]
 800035e:	021b      	lsls	r3, r3, #8
 8000360:	4313      	orrs	r3, r2
 8000362:	041b      	lsls	r3, r3, #16
 8000364:	141b      	asrs	r3, r3, #16
 8000366:	b21b      	sxth	r3, r3
 8000368:	121b      	asrs	r3, r3, #8
 800036a:	b21a      	sxth	r2, r3
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	3301      	adds	r3, #1
 8000370:	b2d2      	uxtb	r2, r2
 8000372:	701a      	strb	r2, [r3, #0]
    data[2] = event->data.gyroscope_calibrated.y & 0xFF;
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	7bda      	ldrb	r2, [r3, #15]
 8000378:	7c1b      	ldrb	r3, [r3, #16]
 800037a:	021b      	lsls	r3, r3, #8
 800037c:	4313      	orrs	r3, r2
 800037e:	041b      	lsls	r3, r3, #16
 8000380:	141b      	asrs	r3, r3, #16
 8000382:	b21a      	sxth	r2, r3
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	3302      	adds	r3, #2
 8000388:	b2d2      	uxtb	r2, r2
 800038a:	701a      	strb	r2, [r3, #0]
    data[3] = (event->data.gyroscope_calibrated.y >> 8) & 0xFF;
 800038c:	683b      	ldr	r3, [r7, #0]
 800038e:	7bda      	ldrb	r2, [r3, #15]
 8000390:	7c1b      	ldrb	r3, [r3, #16]
 8000392:	021b      	lsls	r3, r3, #8
 8000394:	4313      	orrs	r3, r2
 8000396:	041b      	lsls	r3, r3, #16
 8000398:	141b      	asrs	r3, r3, #16
 800039a:	b21b      	sxth	r3, r3
 800039c:	121b      	asrs	r3, r3, #8
 800039e:	b21a      	sxth	r2, r3
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	3303      	adds	r3, #3
 80003a4:	b2d2      	uxtb	r2, r2
 80003a6:	701a      	strb	r2, [r3, #0]
    data[4] = event->data.gyroscope_calibrated.z & 0xFF;
 80003a8:	683b      	ldr	r3, [r7, #0]
 80003aa:	7c5a      	ldrb	r2, [r3, #17]
 80003ac:	7c9b      	ldrb	r3, [r3, #18]
 80003ae:	021b      	lsls	r3, r3, #8
 80003b0:	4313      	orrs	r3, r2
 80003b2:	041b      	lsls	r3, r3, #16
 80003b4:	141b      	asrs	r3, r3, #16
 80003b6:	b21a      	sxth	r2, r3
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	3304      	adds	r3, #4
 80003bc:	b2d2      	uxtb	r2, r2
 80003be:	701a      	strb	r2, [r3, #0]
    data[5] = (event->data.gyroscope_calibrated.z >> 8) & 0xFF;
 80003c0:	683b      	ldr	r3, [r7, #0]
 80003c2:	7c5a      	ldrb	r2, [r3, #17]
 80003c4:	7c9b      	ldrb	r3, [r3, #18]
 80003c6:	021b      	lsls	r3, r3, #8
 80003c8:	4313      	orrs	r3, r2
 80003ca:	041b      	lsls	r3, r3, #16
 80003cc:	141b      	asrs	r3, r3, #16
 80003ce:	b21b      	sxth	r3, r3
 80003d0:	121b      	asrs	r3, r3, #8
 80003d2:	b21a      	sxth	r2, r3
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	3305      	adds	r3, #5
 80003d8:	b2d2      	uxtb	r2, r2
 80003da:	701a      	strb	r2, [r3, #0]
    printf("Gyroscope Calibrated: x = %d, y = %d, z = %d\n", event->data.gyroscope_calibrated.x, event->data.gyroscope_calibrated.y, event->data.gyroscope_calibrated.z);
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	7b5a      	ldrb	r2, [r3, #13]
 80003e0:	7b9b      	ldrb	r3, [r3, #14]
 80003e2:	021b      	lsls	r3, r3, #8
 80003e4:	4313      	orrs	r3, r2
 80003e6:	041b      	lsls	r3, r3, #16
 80003e8:	141b      	asrs	r3, r3, #16
 80003ea:	b21b      	sxth	r3, r3
 80003ec:	0019      	movs	r1, r3
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	7bda      	ldrb	r2, [r3, #15]
 80003f2:	7c1b      	ldrb	r3, [r3, #16]
 80003f4:	021b      	lsls	r3, r3, #8
 80003f6:	4313      	orrs	r3, r2
 80003f8:	041b      	lsls	r3, r3, #16
 80003fa:	141b      	asrs	r3, r3, #16
 80003fc:	b21b      	sxth	r3, r3
 80003fe:	001c      	movs	r4, r3
 8000400:	683b      	ldr	r3, [r7, #0]
 8000402:	7c5a      	ldrb	r2, [r3, #17]
 8000404:	7c9b      	ldrb	r3, [r3, #18]
 8000406:	021b      	lsls	r3, r3, #8
 8000408:	4313      	orrs	r3, r2
 800040a:	041b      	lsls	r3, r3, #16
 800040c:	141b      	asrs	r3, r3, #16
 800040e:	b21b      	sxth	r3, r3
 8000410:	4885      	ldr	r0, [pc, #532]	@ (8000628 <BNO085_DecodeSensorEvent+0x3f4>)
 8000412:	0022      	movs	r2, r4
 8000414:	f005 f808 	bl	8005428 <iprintf>
    break;
 8000418:	e0fd      	b.n	8000616 <BNO085_DecodeSensorEvent+0x3e2>
    data[0] = event->data.magnetometer_calibrated.x & 0xFF;
 800041a:	683b      	ldr	r3, [r7, #0]
 800041c:	7b5a      	ldrb	r2, [r3, #13]
 800041e:	7b9b      	ldrb	r3, [r3, #14]
 8000420:	021b      	lsls	r3, r3, #8
 8000422:	4313      	orrs	r3, r2
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	141b      	asrs	r3, r3, #16
 8000428:	b21b      	sxth	r3, r3
 800042a:	b2da      	uxtb	r2, r3
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	701a      	strb	r2, [r3, #0]
    data[1] = (event->data.magnetometer_calibrated.x >> 8) & 0xFF;
 8000430:	683b      	ldr	r3, [r7, #0]
 8000432:	7b5a      	ldrb	r2, [r3, #13]
 8000434:	7b9b      	ldrb	r3, [r3, #14]
 8000436:	021b      	lsls	r3, r3, #8
 8000438:	4313      	orrs	r3, r2
 800043a:	041b      	lsls	r3, r3, #16
 800043c:	141b      	asrs	r3, r3, #16
 800043e:	b21b      	sxth	r3, r3
 8000440:	121b      	asrs	r3, r3, #8
 8000442:	b21a      	sxth	r2, r3
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	3301      	adds	r3, #1
 8000448:	b2d2      	uxtb	r2, r2
 800044a:	701a      	strb	r2, [r3, #0]
    data[2] = event->data.magnetometer_calibrated.y & 0xFF;
 800044c:	683b      	ldr	r3, [r7, #0]
 800044e:	7bda      	ldrb	r2, [r3, #15]
 8000450:	7c1b      	ldrb	r3, [r3, #16]
 8000452:	021b      	lsls	r3, r3, #8
 8000454:	4313      	orrs	r3, r2
 8000456:	041b      	lsls	r3, r3, #16
 8000458:	141b      	asrs	r3, r3, #16
 800045a:	b21a      	sxth	r2, r3
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	3302      	adds	r3, #2
 8000460:	b2d2      	uxtb	r2, r2
 8000462:	701a      	strb	r2, [r3, #0]
    data[3] = (event->data.magnetometer_calibrated.y >> 8) & 0xFF;
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	7bda      	ldrb	r2, [r3, #15]
 8000468:	7c1b      	ldrb	r3, [r3, #16]
 800046a:	021b      	lsls	r3, r3, #8
 800046c:	4313      	orrs	r3, r2
 800046e:	041b      	lsls	r3, r3, #16
 8000470:	141b      	asrs	r3, r3, #16
 8000472:	b21b      	sxth	r3, r3
 8000474:	121b      	asrs	r3, r3, #8
 8000476:	b21a      	sxth	r2, r3
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	3303      	adds	r3, #3
 800047c:	b2d2      	uxtb	r2, r2
 800047e:	701a      	strb	r2, [r3, #0]
    data[4] = event->data.magnetometer_calibrated.z & 0xFF;
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	7c5a      	ldrb	r2, [r3, #17]
 8000484:	7c9b      	ldrb	r3, [r3, #18]
 8000486:	021b      	lsls	r3, r3, #8
 8000488:	4313      	orrs	r3, r2
 800048a:	041b      	lsls	r3, r3, #16
 800048c:	141b      	asrs	r3, r3, #16
 800048e:	b21a      	sxth	r2, r3
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	3304      	adds	r3, #4
 8000494:	b2d2      	uxtb	r2, r2
 8000496:	701a      	strb	r2, [r3, #0]
    data[5] = (event->data.magnetometer_calibrated.z >> 8) & 0xFF;
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	7c5a      	ldrb	r2, [r3, #17]
 800049c:	7c9b      	ldrb	r3, [r3, #18]
 800049e:	021b      	lsls	r3, r3, #8
 80004a0:	4313      	orrs	r3, r2
 80004a2:	041b      	lsls	r3, r3, #16
 80004a4:	141b      	asrs	r3, r3, #16
 80004a6:	b21b      	sxth	r3, r3
 80004a8:	121b      	asrs	r3, r3, #8
 80004aa:	b21a      	sxth	r2, r3
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	3305      	adds	r3, #5
 80004b0:	b2d2      	uxtb	r2, r2
 80004b2:	701a      	strb	r2, [r3, #0]
    printf("Magnetometer Calibrated: x = %d, y = %d, z = %d\n", event->data.magnetometer_calibrated.x, event->data.magnetometer_calibrated.y, event->data.magnetometer_calibrated.z);
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	7b5a      	ldrb	r2, [r3, #13]
 80004b8:	7b9b      	ldrb	r3, [r3, #14]
 80004ba:	021b      	lsls	r3, r3, #8
 80004bc:	4313      	orrs	r3, r2
 80004be:	041b      	lsls	r3, r3, #16
 80004c0:	141b      	asrs	r3, r3, #16
 80004c2:	b21b      	sxth	r3, r3
 80004c4:	0019      	movs	r1, r3
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	7bda      	ldrb	r2, [r3, #15]
 80004ca:	7c1b      	ldrb	r3, [r3, #16]
 80004cc:	021b      	lsls	r3, r3, #8
 80004ce:	4313      	orrs	r3, r2
 80004d0:	041b      	lsls	r3, r3, #16
 80004d2:	141b      	asrs	r3, r3, #16
 80004d4:	b21b      	sxth	r3, r3
 80004d6:	001c      	movs	r4, r3
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	7c5a      	ldrb	r2, [r3, #17]
 80004dc:	7c9b      	ldrb	r3, [r3, #18]
 80004de:	021b      	lsls	r3, r3, #8
 80004e0:	4313      	orrs	r3, r2
 80004e2:	041b      	lsls	r3, r3, #16
 80004e4:	141b      	asrs	r3, r3, #16
 80004e6:	b21b      	sxth	r3, r3
 80004e8:	4850      	ldr	r0, [pc, #320]	@ (800062c <BNO085_DecodeSensorEvent+0x3f8>)
 80004ea:	0022      	movs	r2, r4
 80004ec:	f004 ff9c 	bl	8005428 <iprintf>
    break;
 80004f0:	e091      	b.n	8000616 <BNO085_DecodeSensorEvent+0x3e2>
    data[0] = event->data.rotation_vector.i & 0xFF;
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	7b5a      	ldrb	r2, [r3, #13]
 80004f6:	7b9b      	ldrb	r3, [r3, #14]
 80004f8:	021b      	lsls	r3, r3, #8
 80004fa:	4313      	orrs	r3, r2
 80004fc:	041b      	lsls	r3, r3, #16
 80004fe:	141b      	asrs	r3, r3, #16
 8000500:	b21b      	sxth	r3, r3
 8000502:	b2da      	uxtb	r2, r3
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	701a      	strb	r2, [r3, #0]
    data[1] = (event->data.rotation_vector.i >> 8) & 0xFF;
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	7b5a      	ldrb	r2, [r3, #13]
 800050c:	7b9b      	ldrb	r3, [r3, #14]
 800050e:	021b      	lsls	r3, r3, #8
 8000510:	4313      	orrs	r3, r2
 8000512:	041b      	lsls	r3, r3, #16
 8000514:	141b      	asrs	r3, r3, #16
 8000516:	b21b      	sxth	r3, r3
 8000518:	121b      	asrs	r3, r3, #8
 800051a:	b21a      	sxth	r2, r3
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	3301      	adds	r3, #1
 8000520:	b2d2      	uxtb	r2, r2
 8000522:	701a      	strb	r2, [r3, #0]
    data[2] = event->data.rotation_vector.j & 0xFF;
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	7bda      	ldrb	r2, [r3, #15]
 8000528:	7c1b      	ldrb	r3, [r3, #16]
 800052a:	021b      	lsls	r3, r3, #8
 800052c:	4313      	orrs	r3, r2
 800052e:	041b      	lsls	r3, r3, #16
 8000530:	141b      	asrs	r3, r3, #16
 8000532:	b21a      	sxth	r2, r3
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	3302      	adds	r3, #2
 8000538:	b2d2      	uxtb	r2, r2
 800053a:	701a      	strb	r2, [r3, #0]
    data[3] = (event->data.rotation_vector.j >> 8) & 0xFF;
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	7bda      	ldrb	r2, [r3, #15]
 8000540:	7c1b      	ldrb	r3, [r3, #16]
 8000542:	021b      	lsls	r3, r3, #8
 8000544:	4313      	orrs	r3, r2
 8000546:	041b      	lsls	r3, r3, #16
 8000548:	141b      	asrs	r3, r3, #16
 800054a:	b21b      	sxth	r3, r3
 800054c:	121b      	asrs	r3, r3, #8
 800054e:	b21a      	sxth	r2, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	3303      	adds	r3, #3
 8000554:	b2d2      	uxtb	r2, r2
 8000556:	701a      	strb	r2, [r3, #0]
    data[4] = event->data.rotation_vector.k & 0xFF;
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	7c5a      	ldrb	r2, [r3, #17]
 800055c:	7c9b      	ldrb	r3, [r3, #18]
 800055e:	021b      	lsls	r3, r3, #8
 8000560:	4313      	orrs	r3, r2
 8000562:	041b      	lsls	r3, r3, #16
 8000564:	141b      	asrs	r3, r3, #16
 8000566:	b21a      	sxth	r2, r3
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	3304      	adds	r3, #4
 800056c:	b2d2      	uxtb	r2, r2
 800056e:	701a      	strb	r2, [r3, #0]
    data[5] = (event->data.rotation_vector.k >> 8) & 0xFF;
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	7c5a      	ldrb	r2, [r3, #17]
 8000574:	7c9b      	ldrb	r3, [r3, #18]
 8000576:	021b      	lsls	r3, r3, #8
 8000578:	4313      	orrs	r3, r2
 800057a:	041b      	lsls	r3, r3, #16
 800057c:	141b      	asrs	r3, r3, #16
 800057e:	b21b      	sxth	r3, r3
 8000580:	121b      	asrs	r3, r3, #8
 8000582:	b21a      	sxth	r2, r3
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	3305      	adds	r3, #5
 8000588:	b2d2      	uxtb	r2, r2
 800058a:	701a      	strb	r2, [r3, #0]
    data[6] = event->data.rotation_vector.real & 0xFF;
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	7cda      	ldrb	r2, [r3, #19]
 8000590:	7d1b      	ldrb	r3, [r3, #20]
 8000592:	021b      	lsls	r3, r3, #8
 8000594:	4313      	orrs	r3, r2
 8000596:	041b      	lsls	r3, r3, #16
 8000598:	141b      	asrs	r3, r3, #16
 800059a:	b21a      	sxth	r2, r3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	3306      	adds	r3, #6
 80005a0:	b2d2      	uxtb	r2, r2
 80005a2:	701a      	strb	r2, [r3, #0]
    data[7] = (event->data.rotation_vector.real >> 8) & 0xFF;
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	7cda      	ldrb	r2, [r3, #19]
 80005a8:	7d1b      	ldrb	r3, [r3, #20]
 80005aa:	021b      	lsls	r3, r3, #8
 80005ac:	4313      	orrs	r3, r2
 80005ae:	041b      	lsls	r3, r3, #16
 80005b0:	141b      	asrs	r3, r3, #16
 80005b2:	b21b      	sxth	r3, r3
 80005b4:	121b      	asrs	r3, r3, #8
 80005b6:	b21a      	sxth	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	3307      	adds	r3, #7
 80005bc:	b2d2      	uxtb	r2, r2
 80005be:	701a      	strb	r2, [r3, #0]
    printf("Rotation Vector: i = %d, j = %d, k = %d, real = %d\n", event->data.rotation_vector.i, event->data.rotation_vector.j, event->data.rotation_vector.k, event->data.rotation_vector.real);
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	7b5a      	ldrb	r2, [r3, #13]
 80005c4:	7b9b      	ldrb	r3, [r3, #14]
 80005c6:	021b      	lsls	r3, r3, #8
 80005c8:	4313      	orrs	r3, r2
 80005ca:	041b      	lsls	r3, r3, #16
 80005cc:	141b      	asrs	r3, r3, #16
 80005ce:	b21b      	sxth	r3, r3
 80005d0:	0019      	movs	r1, r3
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	7bda      	ldrb	r2, [r3, #15]
 80005d6:	7c1b      	ldrb	r3, [r3, #16]
 80005d8:	021b      	lsls	r3, r3, #8
 80005da:	4313      	orrs	r3, r2
 80005dc:	041b      	lsls	r3, r3, #16
 80005de:	141b      	asrs	r3, r3, #16
 80005e0:	b21b      	sxth	r3, r3
 80005e2:	001c      	movs	r4, r3
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	7c5a      	ldrb	r2, [r3, #17]
 80005e8:	7c9b      	ldrb	r3, [r3, #18]
 80005ea:	021b      	lsls	r3, r3, #8
 80005ec:	4313      	orrs	r3, r2
 80005ee:	041b      	lsls	r3, r3, #16
 80005f0:	141b      	asrs	r3, r3, #16
 80005f2:	b21b      	sxth	r3, r3
 80005f4:	001d      	movs	r5, r3
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	7cda      	ldrb	r2, [r3, #19]
 80005fa:	7d1b      	ldrb	r3, [r3, #20]
 80005fc:	021b      	lsls	r3, r3, #8
 80005fe:	4313      	orrs	r3, r2
 8000600:	041b      	lsls	r3, r3, #16
 8000602:	141b      	asrs	r3, r3, #16
 8000604:	b21b      	sxth	r3, r3
 8000606:	480a      	ldr	r0, [pc, #40]	@ (8000630 <BNO085_DecodeSensorEvent+0x3fc>)
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	002b      	movs	r3, r5
 800060c:	0022      	movs	r2, r4
 800060e:	f004 ff0b 	bl	8005428 <iprintf>
    break;
 8000612:	e000      	b.n	8000616 <BNO085_DecodeSensorEvent+0x3e2>
    break;
 8000614:	46c0      	nop			@ (mov r8, r8)
  }

  return reportID;
 8000616:	230f      	movs	r3, #15
 8000618:	18fb      	adds	r3, r7, r3
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	0018      	movs	r0, r3
 800061e:	46bd      	mov	sp, r7
 8000620:	b004      	add	sp, #16
 8000622:	bdb0      	pop	{r4, r5, r7, pc}
 8000624:	0800617c 	.word	0x0800617c
 8000628:	080061a4 	.word	0x080061a4
 800062c:	080061d4 	.word	0x080061d4
 8000630:	08006208 	.word	0x08006208

08000634 <I2C_Receive_Callback>:
 * @brief callback function for I2C receive
 * @param hi2c1: I2C handle
 * @retval None
 */
void I2C_Receive_Callback(I2C_HandleTypeDef *hi2c1)
{
 8000634:	b5b0      	push	{r4, r5, r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  CAN_TxHeaderTypeDef *TxHeaderToUse = &TxHeader;
 800063c:	4b19      	ldr	r3, [pc, #100]	@ (80006a4 <I2C_Receive_Callback+0x70>)
 800063e:	60fb      	str	r3, [r7, #12]
  uint8_t sensor = BNO085_DecodeSensorEvent(TxData, &sensor_event);
 8000640:	250b      	movs	r5, #11
 8000642:	197c      	adds	r4, r7, r5
 8000644:	4a18      	ldr	r2, [pc, #96]	@ (80006a8 <I2C_Receive_Callback+0x74>)
 8000646:	4b19      	ldr	r3, [pc, #100]	@ (80006ac <I2C_Receive_Callback+0x78>)
 8000648:	0011      	movs	r1, r2
 800064a:	0018      	movs	r0, r3
 800064c:	f7ff fdf2 	bl	8000234 <BNO085_DecodeSensorEvent>
 8000650:	0003      	movs	r3, r0
 8000652:	7023      	strb	r3, [r4, #0]
      switch (sensor)
 8000654:	197b      	adds	r3, r7, r5
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b05      	cmp	r3, #5
 800065a:	d011      	beq.n	8000680 <I2C_Receive_Callback+0x4c>
 800065c:	dc13      	bgt.n	8000686 <I2C_Receive_Callback+0x52>
 800065e:	2b03      	cmp	r3, #3
 8000660:	d00b      	beq.n	800067a <I2C_Receive_Callback+0x46>
 8000662:	dc10      	bgt.n	8000686 <I2C_Receive_Callback+0x52>
 8000664:	2b01      	cmp	r3, #1
 8000666:	d002      	beq.n	800066e <I2C_Receive_Callback+0x3a>
 8000668:	2b02      	cmp	r3, #2
 800066a:	d003      	beq.n	8000674 <I2C_Receive_Callback+0x40>
        break;
      case SH2_ROTATION_VECTOR:
        TxHeaderToUse = &TxHeaderRotation;
        break;
      default:
        break;
 800066c:	e00b      	b.n	8000686 <I2C_Receive_Callback+0x52>
        TxHeaderToUse = &TxHeader;
 800066e:	4b0d      	ldr	r3, [pc, #52]	@ (80006a4 <I2C_Receive_Callback+0x70>)
 8000670:	60fb      	str	r3, [r7, #12]
        break;
 8000672:	e009      	b.n	8000688 <I2C_Receive_Callback+0x54>
        TxHeaderToUse = &TxHeader;
 8000674:	4b0b      	ldr	r3, [pc, #44]	@ (80006a4 <I2C_Receive_Callback+0x70>)
 8000676:	60fb      	str	r3, [r7, #12]
        break;
 8000678:	e006      	b.n	8000688 <I2C_Receive_Callback+0x54>
        TxHeaderToUse = &TxHeader;
 800067a:	4b0a      	ldr	r3, [pc, #40]	@ (80006a4 <I2C_Receive_Callback+0x70>)
 800067c:	60fb      	str	r3, [r7, #12]
        break;
 800067e:	e003      	b.n	8000688 <I2C_Receive_Callback+0x54>
        TxHeaderToUse = &TxHeaderRotation;
 8000680:	4b0b      	ldr	r3, [pc, #44]	@ (80006b0 <I2C_Receive_Callback+0x7c>)
 8000682:	60fb      	str	r3, [r7, #12]
        break;
 8000684:	e000      	b.n	8000688 <I2C_Receive_Callback+0x54>
        break;
 8000686:	46c0      	nop			@ (mov r8, r8)
      }

      if (HAL_CAN_AddTxMessage(&hcan, TxHeaderToUse, TxData, &TxMailbox) != HAL_OK)
 8000688:	4b0a      	ldr	r3, [pc, #40]	@ (80006b4 <I2C_Receive_Callback+0x80>)
 800068a:	4a08      	ldr	r2, [pc, #32]	@ (80006ac <I2C_Receive_Callback+0x78>)
 800068c:	68f9      	ldr	r1, [r7, #12]
 800068e:	480a      	ldr	r0, [pc, #40]	@ (80006b8 <I2C_Receive_Callback+0x84>)
 8000690:	f001 f970 	bl	8001974 <HAL_CAN_AddTxMessage>
 8000694:	1e03      	subs	r3, r0, #0
 8000696:	d001      	beq.n	800069c <I2C_Receive_Callback+0x68>
      {
        Error_Handler();
 8000698:	f000 fab2 	bl	8000c00 <Error_Handler>
      }
}
 800069c:	46c0      	nop			@ (mov r8, r8)
 800069e:	46bd      	mov	sp, r7
 80006a0:	b004      	add	sp, #16
 80006a2:	bdb0      	pop	{r4, r5, r7, pc}
 80006a4:	200001fc 	.word	0x200001fc
 80006a8:	20000238 	.word	0x20000238
 80006ac:	2000022c 	.word	0x2000022c
 80006b0:	20000214 	.word	0x20000214
 80006b4:	20000234 	.word	0x20000234
 80006b8:	20000108 	.word	0x20000108

080006bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006bc:	b590      	push	{r4, r7, lr}
 80006be:	b08b      	sub	sp, #44	@ 0x2c
 80006c0:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
  TxHeader.IDE = CAN_ID_STD;
 80006c2:	4b3f      	ldr	r3, [pc, #252]	@ (80007c0 <main+0x104>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  TxHeader.StdId = 0x111;
 80006c8:	4b3d      	ldr	r3, [pc, #244]	@ (80007c0 <main+0x104>)
 80006ca:	2212      	movs	r2, #18
 80006cc:	32ff      	adds	r2, #255	@ 0xff
 80006ce:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;
 80006d0:	4b3b      	ldr	r3, [pc, #236]	@ (80007c0 <main+0x104>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  TxHeader.DLC = 6;
 80006d6:	4b3a      	ldr	r3, [pc, #232]	@ (80007c0 <main+0x104>)
 80006d8:	2206      	movs	r2, #6
 80006da:	611a      	str	r2, [r3, #16]

  TxHeaderRotation.IDE = CAN_ID_STD;
 80006dc:	4b39      	ldr	r3, [pc, #228]	@ (80007c4 <main+0x108>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  TxHeaderRotation.StdId = 0x112;
 80006e2:	4b38      	ldr	r3, [pc, #224]	@ (80007c4 <main+0x108>)
 80006e4:	2289      	movs	r2, #137	@ 0x89
 80006e6:	0052      	lsls	r2, r2, #1
 80006e8:	601a      	str	r2, [r3, #0]
  TxHeaderRotation.RTR = CAN_RTR_DATA;
 80006ea:	4b36      	ldr	r3, [pc, #216]	@ (80007c4 <main+0x108>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	60da      	str	r2, [r3, #12]
  TxHeaderRotation.DLC = 8;
 80006f0:	4b34      	ldr	r3, [pc, #208]	@ (80007c4 <main+0x108>)
 80006f2:	2208      	movs	r2, #8
 80006f4:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f6:	f000 fd23 	bl	8001140 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fa:	f000 f86b 	bl	80007d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fe:	f000 fa29 	bl	8000b54 <MX_GPIO_Init>
  MX_DMA_Init();
 8000702:	f000 fa09 	bl	8000b18 <MX_DMA_Init>
  MX_ADC_Init();
 8000706:	f000 f8cd 	bl	80008a4 <MX_ADC_Init>
  MX_CAN_Init();
 800070a:	f000 f94d 	bl	80009a8 <MX_CAN_Init>
  MX_I2C1_Init();
 800070e:	f000 f98b 	bl	8000a28 <MX_I2C1_Init>
  MX_TIM16_Init();
 8000712:	f000 f9cb 	bl	8000aac <MX_TIM16_Init>
  // if (HAL_TIM_Base_Start_IT(&htim16) != HAL_OK)
  // {
  //   Error_Handler();
  // }

  HAL_I2C_RegisterCallback(&hi2c1, HAL_I2C_MASTER_RX_COMPLETE_CB_ID, I2C_Receive_Callback);
 8000716:	4a2c      	ldr	r2, [pc, #176]	@ (80007c8 <main+0x10c>)
 8000718:	4b2c      	ldr	r3, [pc, #176]	@ (80007cc <main+0x110>)
 800071a:	2101      	movs	r1, #1
 800071c:	0018      	movs	r0, r3
 800071e:	f001 fe89 	bl	8002434 <HAL_I2C_RegisterCallback>

  // Create SHTP header
  SHTP_Header header = {0};
 8000722:	241c      	movs	r4, #28
 8000724:	193b      	adds	r3, r7, r4
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
  header.length = 0x15;
 800072a:	193b      	adds	r3, r7, r4
 800072c:	2215      	movs	r2, #21
 800072e:	801a      	strh	r2, [r3, #0]
  header.channel = SHTP_SENSOR_HUB_CHANNEL;
 8000730:	193b      	adds	r3, r7, r4
 8000732:	2202      	movs	r2, #2
 8000734:	709a      	strb	r2, [r3, #2]
  header.sequence_number = 0x00;
 8000736:	193b      	adds	r3, r7, r4
 8000738:	2200      	movs	r2, #0
 800073a:	70da      	strb	r2, [r3, #3]

  // Create SH2 Set Feature Command
  SHTP_Command start_accel = {0};
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	0018      	movs	r0, r3
 8000740:	2315      	movs	r3, #21
 8000742:	001a      	movs	r2, r3
 8000744:	2100      	movs	r1, #0
 8000746:	f004 fecb 	bl	80054e0 <memset>
  start_accel.header = header;
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	193a      	adds	r2, r7, r4
 800074e:	6812      	ldr	r2, [r2, #0]
 8000750:	601a      	str	r2, [r3, #0]
  start_accel.header.sequence_number = 0x01;
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2201      	movs	r2, #1
 8000756:	70da      	strb	r2, [r3, #3]
  start_accel.report_id = BNO_COMMAND_SET_FEATURE_COMMAND;
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	22fd      	movs	r2, #253	@ 0xfd
 800075c:	711a      	strb	r2, [r3, #4]
  start_accel.feature_report_id = SH2_ACCELEROMETER;
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	2201      	movs	r2, #1
 8000762:	715a      	strb	r2, [r3, #5]
  start_accel.report_interval = 0xEA60; // 60Hz
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	3309      	adds	r3, #9
 8000768:	781a      	ldrb	r2, [r3, #0]
 800076a:	2100      	movs	r1, #0
 800076c:	400a      	ands	r2, r1
 800076e:	1c11      	adds	r1, r2, #0
 8000770:	2260      	movs	r2, #96	@ 0x60
 8000772:	430a      	orrs	r2, r1
 8000774:	701a      	strb	r2, [r3, #0]
 8000776:	785a      	ldrb	r2, [r3, #1]
 8000778:	2100      	movs	r1, #0
 800077a:	400a      	ands	r2, r1
 800077c:	1c11      	adds	r1, r2, #0
 800077e:	2216      	movs	r2, #22
 8000780:	4252      	negs	r2, r2
 8000782:	430a      	orrs	r2, r1
 8000784:	705a      	strb	r2, [r3, #1]
 8000786:	789a      	ldrb	r2, [r3, #2]
 8000788:	2100      	movs	r1, #0
 800078a:	400a      	ands	r2, r1
 800078c:	709a      	strb	r2, [r3, #2]
 800078e:	78da      	ldrb	r2, [r3, #3]
 8000790:	2100      	movs	r1, #0
 8000792:	400a      	ands	r2, r1
 8000794:	70da      	strb	r2, [r3, #3]
  //  start_rotation.report_id = BNO_COMMAND_SET_FEATURE_COMMAND;
  //  start_rotation.feature_report_id = SH2_ROTATION_VECTOR;
  //  start_rotation.report_interval = 0xEA60; // 60Hz

  // Send command over I2C to BNO to start accelerometer
  HAL_I2C_Master_Transmit(&hi2c1, BNO085_ADDRESS, (uint8_t *)&start_accel, sizeof(start_accel), 1000);
 8000796:	1d3a      	adds	r2, r7, #4
 8000798:	480c      	ldr	r0, [pc, #48]	@ (80007cc <main+0x110>)
 800079a:	23fa      	movs	r3, #250	@ 0xfa
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	9300      	str	r3, [sp, #0]
 80007a0:	2315      	movs	r3, #21
 80007a2:	2194      	movs	r1, #148	@ 0x94
 80007a4:	f001 fee0 	bl	8002568 <HAL_I2C_Master_Transmit>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    // Get Input Report from BNO at 60Hz
    HAL_I2C_Master_Receive_IT(&hi2c1, BNO085_ADDRESS, (uint8_t *)&sensor_event, sizeof(sensor_event));
 80007a8:	4a09      	ldr	r2, [pc, #36]	@ (80007d0 <main+0x114>)
 80007aa:	4808      	ldr	r0, [pc, #32]	@ (80007cc <main+0x110>)
 80007ac:	2317      	movs	r3, #23
 80007ae:	2194      	movs	r1, #148	@ 0x94
 80007b0:	f001 ffe2 	bl	8002778 <HAL_I2C_Master_Receive_IT>
    HAL_Delay(16); // 60Hz = 16ms
 80007b4:	2010      	movs	r0, #16
 80007b6:	f000 fd27 	bl	8001208 <HAL_Delay>
    HAL_I2C_Master_Receive_IT(&hi2c1, BNO085_ADDRESS, (uint8_t *)&sensor_event, sizeof(sensor_event));
 80007ba:	46c0      	nop			@ (mov r8, r8)
 80007bc:	e7f4      	b.n	80007a8 <main+0xec>
 80007be:	46c0      	nop			@ (mov r8, r8)
 80007c0:	200001fc 	.word	0x200001fc
 80007c4:	20000214 	.word	0x20000214
 80007c8:	08000635 	.word	0x08000635
 80007cc:	20000130 	.word	0x20000130
 80007d0:	20000238 	.word	0x20000238

080007d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d4:	b590      	push	{r4, r7, lr}
 80007d6:	b099      	sub	sp, #100	@ 0x64
 80007d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007da:	242c      	movs	r4, #44	@ 0x2c
 80007dc:	193b      	adds	r3, r7, r4
 80007de:	0018      	movs	r0, r3
 80007e0:	2334      	movs	r3, #52	@ 0x34
 80007e2:	001a      	movs	r2, r3
 80007e4:	2100      	movs	r1, #0
 80007e6:	f004 fe7b 	bl	80054e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ea:	231c      	movs	r3, #28
 80007ec:	18fb      	adds	r3, r7, r3
 80007ee:	0018      	movs	r0, r3
 80007f0:	2310      	movs	r3, #16
 80007f2:	001a      	movs	r2, r3
 80007f4:	2100      	movs	r1, #0
 80007f6:	f004 fe73 	bl	80054e0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007fa:	1d3b      	adds	r3, r7, #4
 80007fc:	0018      	movs	r0, r3
 80007fe:	2318      	movs	r3, #24
 8000800:	001a      	movs	r2, r3
 8000802:	2100      	movs	r1, #0
 8000804:	f004 fe6c 	bl	80054e0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000808:	0021      	movs	r1, r4
 800080a:	187b      	adds	r3, r7, r1
 800080c:	2212      	movs	r2, #18
 800080e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000810:	187b      	adds	r3, r7, r1
 8000812:	2201      	movs	r2, #1
 8000814:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000816:	187b      	adds	r3, r7, r1
 8000818:	2201      	movs	r2, #1
 800081a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800081c:	187b      	adds	r3, r7, r1
 800081e:	2210      	movs	r2, #16
 8000820:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000822:	187b      	adds	r3, r7, r1
 8000824:	2210      	movs	r2, #16
 8000826:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000828:	187b      	adds	r3, r7, r1
 800082a:	2202      	movs	r2, #2
 800082c:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800082e:	187b      	adds	r3, r7, r1
 8000830:	2280      	movs	r2, #128	@ 0x80
 8000832:	0212      	lsls	r2, r2, #8
 8000834:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000836:	187b      	adds	r3, r7, r1
 8000838:	2280      	movs	r2, #128	@ 0x80
 800083a:	0352      	lsls	r2, r2, #13
 800083c:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800083e:	187b      	adds	r3, r7, r1
 8000840:	2200      	movs	r2, #0
 8000842:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000844:	187b      	adds	r3, r7, r1
 8000846:	0018      	movs	r0, r3
 8000848:	f003 fea4 	bl	8004594 <HAL_RCC_OscConfig>
 800084c:	1e03      	subs	r3, r0, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000850:	f000 f9d6 	bl	8000c00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000854:	211c      	movs	r1, #28
 8000856:	187b      	adds	r3, r7, r1
 8000858:	2207      	movs	r2, #7
 800085a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085c:	187b      	adds	r3, r7, r1
 800085e:	2202      	movs	r2, #2
 8000860:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000862:	187b      	adds	r3, r7, r1
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000868:	187b      	adds	r3, r7, r1
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800086e:	187b      	adds	r3, r7, r1
 8000870:	2101      	movs	r1, #1
 8000872:	0018      	movs	r0, r3
 8000874:	f004 fa14 	bl	8004ca0 <HAL_RCC_ClockConfig>
 8000878:	1e03      	subs	r3, r0, #0
 800087a:	d001      	beq.n	8000880 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800087c:	f000 f9c0 	bl	8000c00 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	2220      	movs	r2, #32
 8000884:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	2200      	movs	r2, #0
 800088a:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	0018      	movs	r0, r3
 8000890:	f004 fb52 	bl	8004f38 <HAL_RCCEx_PeriphCLKConfig>
 8000894:	1e03      	subs	r3, r0, #0
 8000896:	d001      	beq.n	800089c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000898:	f000 f9b2 	bl	8000c00 <Error_Handler>
  }
}
 800089c:	46c0      	nop			@ (mov r8, r8)
 800089e:	46bd      	mov	sp, r7
 80008a0:	b019      	add	sp, #100	@ 0x64
 80008a2:	bd90      	pop	{r4, r7, pc}

080008a4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	0018      	movs	r0, r3
 80008ae:	230c      	movs	r3, #12
 80008b0:	001a      	movs	r2, r3
 80008b2:	2100      	movs	r1, #0
 80008b4:	f004 fe14 	bl	80054e0 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80008b8:	4b39      	ldr	r3, [pc, #228]	@ (80009a0 <MX_ADC_Init+0xfc>)
 80008ba:	4a3a      	ldr	r2, [pc, #232]	@ (80009a4 <MX_ADC_Init+0x100>)
 80008bc:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008be:	4b38      	ldr	r3, [pc, #224]	@ (80009a0 <MX_ADC_Init+0xfc>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80008c4:	4b36      	ldr	r3, [pc, #216]	@ (80009a0 <MX_ADC_Init+0xfc>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ca:	4b35      	ldr	r3, [pc, #212]	@ (80009a0 <MX_ADC_Init+0xfc>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80008d0:	4b33      	ldr	r3, [pc, #204]	@ (80009a0 <MX_ADC_Init+0xfc>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008d6:	4b32      	ldr	r3, [pc, #200]	@ (80009a0 <MX_ADC_Init+0xfc>)
 80008d8:	2204      	movs	r2, #4
 80008da:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80008dc:	4b30      	ldr	r3, [pc, #192]	@ (80009a0 <MX_ADC_Init+0xfc>)
 80008de:	2200      	movs	r2, #0
 80008e0:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80008e2:	4b2f      	ldr	r3, [pc, #188]	@ (80009a0 <MX_ADC_Init+0xfc>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80008e8:	4b2d      	ldr	r3, [pc, #180]	@ (80009a0 <MX_ADC_Init+0xfc>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80008ee:	4b2c      	ldr	r3, [pc, #176]	@ (80009a0 <MX_ADC_Init+0xfc>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008f4:	4b2a      	ldr	r3, [pc, #168]	@ (80009a0 <MX_ADC_Init+0xfc>)
 80008f6:	22c2      	movs	r2, #194	@ 0xc2
 80008f8:	32ff      	adds	r2, #255	@ 0xff
 80008fa:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008fc:	4b28      	ldr	r3, [pc, #160]	@ (80009a0 <MX_ADC_Init+0xfc>)
 80008fe:	2200      	movs	r2, #0
 8000900:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000902:	4b27      	ldr	r3, [pc, #156]	@ (80009a0 <MX_ADC_Init+0xfc>)
 8000904:	2224      	movs	r2, #36	@ 0x24
 8000906:	2100      	movs	r1, #0
 8000908:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800090a:	4b25      	ldr	r3, [pc, #148]	@ (80009a0 <MX_ADC_Init+0xfc>)
 800090c:	2201      	movs	r2, #1
 800090e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000910:	4b23      	ldr	r3, [pc, #140]	@ (80009a0 <MX_ADC_Init+0xfc>)
 8000912:	0018      	movs	r0, r3
 8000914:	f000 fc9c 	bl	8001250 <HAL_ADC_Init>
 8000918:	1e03      	subs	r3, r0, #0
 800091a:	d001      	beq.n	8000920 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 800091c:	f000 f970 	bl	8000c00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	2206      	movs	r2, #6
 8000924:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	2280      	movs	r2, #128	@ 0x80
 800092a:	0152      	lsls	r2, r2, #5
 800092c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	2280      	movs	r2, #128	@ 0x80
 8000932:	0552      	lsls	r2, r2, #21
 8000934:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000936:	1d3a      	adds	r2, r7, #4
 8000938:	4b19      	ldr	r3, [pc, #100]	@ (80009a0 <MX_ADC_Init+0xfc>)
 800093a:	0011      	movs	r1, r2
 800093c:	0018      	movs	r0, r3
 800093e:	f000 fdc7 	bl	80014d0 <HAL_ADC_ConfigChannel>
 8000942:	1e03      	subs	r3, r0, #0
 8000944:	d001      	beq.n	800094a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000946:	f000 f95b 	bl	8000c00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	2207      	movs	r2, #7
 800094e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000950:	1d3a      	adds	r2, r7, #4
 8000952:	4b13      	ldr	r3, [pc, #76]	@ (80009a0 <MX_ADC_Init+0xfc>)
 8000954:	0011      	movs	r1, r2
 8000956:	0018      	movs	r0, r3
 8000958:	f000 fdba 	bl	80014d0 <HAL_ADC_ConfigChannel>
 800095c:	1e03      	subs	r3, r0, #0
 800095e:	d001      	beq.n	8000964 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000960:	f000 f94e 	bl	8000c00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	2208      	movs	r2, #8
 8000968:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800096a:	1d3a      	adds	r2, r7, #4
 800096c:	4b0c      	ldr	r3, [pc, #48]	@ (80009a0 <MX_ADC_Init+0xfc>)
 800096e:	0011      	movs	r1, r2
 8000970:	0018      	movs	r0, r3
 8000972:	f000 fdad 	bl	80014d0 <HAL_ADC_ConfigChannel>
 8000976:	1e03      	subs	r3, r0, #0
 8000978:	d001      	beq.n	800097e <MX_ADC_Init+0xda>
  {
    Error_Handler();
 800097a:	f000 f941 	bl	8000c00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	2209      	movs	r2, #9
 8000982:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000984:	1d3a      	adds	r2, r7, #4
 8000986:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <MX_ADC_Init+0xfc>)
 8000988:	0011      	movs	r1, r2
 800098a:	0018      	movs	r0, r3
 800098c:	f000 fda0 	bl	80014d0 <HAL_ADC_ConfigChannel>
 8000990:	1e03      	subs	r3, r0, #0
 8000992:	d001      	beq.n	8000998 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8000994:	f000 f934 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000998:	46c0      	nop			@ (mov r8, r8)
 800099a:	46bd      	mov	sp, r7
 800099c:	b004      	add	sp, #16
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20000084 	.word	0x20000084
 80009a4:	40012400 	.word	0x40012400

080009a8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80009ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000a20 <MX_CAN_Init+0x78>)
 80009ae:	4a1d      	ldr	r2, [pc, #116]	@ (8000a24 <MX_CAN_Init+0x7c>)
 80009b0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 80009b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a20 <MX_CAN_Init+0x78>)
 80009b4:	2203      	movs	r2, #3
 80009b6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80009b8:	4b19      	ldr	r3, [pc, #100]	@ (8000a20 <MX_CAN_Init+0x78>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009be:	4b18      	ldr	r3, [pc, #96]	@ (8000a20 <MX_CAN_Init+0x78>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80009c4:	4b16      	ldr	r3, [pc, #88]	@ (8000a20 <MX_CAN_Init+0x78>)
 80009c6:	22c0      	movs	r2, #192	@ 0xc0
 80009c8:	0312      	lsls	r2, r2, #12
 80009ca:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80009cc:	4b14      	ldr	r3, [pc, #80]	@ (8000a20 <MX_CAN_Init+0x78>)
 80009ce:	2280      	movs	r2, #128	@ 0x80
 80009d0:	0352      	lsls	r2, r2, #13
 80009d2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80009d4:	4b12      	ldr	r3, [pc, #72]	@ (8000a20 <MX_CAN_Init+0x78>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 80009da:	4b11      	ldr	r3, [pc, #68]	@ (8000a20 <MX_CAN_Init+0x78>)
 80009dc:	2201      	movs	r2, #1
 80009de:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a20 <MX_CAN_Init+0x78>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a20 <MX_CAN_Init+0x78>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000a20 <MX_CAN_Init+0x78>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80009f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a20 <MX_CAN_Init+0x78>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80009f8:	4b09      	ldr	r3, [pc, #36]	@ (8000a20 <MX_CAN_Init+0x78>)
 80009fa:	0018      	movs	r0, r3
 80009fc:	f000 fe76 	bl	80016ec <HAL_CAN_Init>
 8000a00:	1e03      	subs	r3, r0, #0
 8000a02:	d001      	beq.n	8000a08 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000a04:	f000 f8fc 	bl	8000c00 <Error_Handler>
//  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; // set filter scale
//  sFilterConfig.FilterBank = 0;
//  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
//  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);

  if (HAL_CAN_Start(&hcan) != HAL_OK)
 8000a08:	4b05      	ldr	r3, [pc, #20]	@ (8000a20 <MX_CAN_Init+0x78>)
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f000 ff6c 	bl	80018e8 <HAL_CAN_Start>
 8000a10:	1e03      	subs	r3, r0, #0
 8000a12:	d001      	beq.n	8000a18 <MX_CAN_Init+0x70>
  {
    Error_Handler();
 8000a14:	f000 f8f4 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE END CAN_Init 2 */

}
 8000a18:	46c0      	nop			@ (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	46c0      	nop			@ (mov r8, r8)
 8000a20:	20000108 	.word	0x20000108
 8000a24:	40006400 	.word	0x40006400

08000a28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa0 <MX_I2C1_Init+0x78>)
 8000a2e:	4a1d      	ldr	r2, [pc, #116]	@ (8000aa4 <MX_I2C1_Init+0x7c>)
 8000a30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00101D2D;
 8000a32:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa0 <MX_I2C1_Init+0x78>)
 8000a34:	4a1c      	ldr	r2, [pc, #112]	@ (8000aa8 <MX_I2C1_Init+0x80>)
 8000a36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a38:	4b19      	ldr	r3, [pc, #100]	@ (8000aa0 <MX_I2C1_Init+0x78>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a3e:	4b18      	ldr	r3, [pc, #96]	@ (8000aa0 <MX_I2C1_Init+0x78>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a44:	4b16      	ldr	r3, [pc, #88]	@ (8000aa0 <MX_I2C1_Init+0x78>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a4a:	4b15      	ldr	r3, [pc, #84]	@ (8000aa0 <MX_I2C1_Init+0x78>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a50:	4b13      	ldr	r3, [pc, #76]	@ (8000aa0 <MX_I2C1_Init+0x78>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a56:	4b12      	ldr	r3, [pc, #72]	@ (8000aa0 <MX_I2C1_Init+0x78>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a5c:	4b10      	ldr	r3, [pc, #64]	@ (8000aa0 <MX_I2C1_Init+0x78>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a62:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa0 <MX_I2C1_Init+0x78>)
 8000a64:	0018      	movs	r0, r3
 8000a66:	f001 fc13 	bl	8002290 <HAL_I2C_Init>
 8000a6a:	1e03      	subs	r3, r0, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a6e:	f000 f8c7 	bl	8000c00 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8000a72:	2380      	movs	r3, #128	@ 0x80
 8000a74:	015a      	lsls	r2, r3, #5
 8000a76:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa0 <MX_I2C1_Init+0x78>)
 8000a78:	0011      	movs	r1, r2
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f003 fcf2 	bl	8004464 <HAL_I2CEx_ConfigAnalogFilter>
 8000a80:	1e03      	subs	r3, r0, #0
 8000a82:	d001      	beq.n	8000a88 <MX_I2C1_Init+0x60>
  {
    Error_Handler();
 8000a84:	f000 f8bc 	bl	8000c00 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a88:	4b05      	ldr	r3, [pc, #20]	@ (8000aa0 <MX_I2C1_Init+0x78>)
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f003 fd35 	bl	80044fc <HAL_I2CEx_ConfigDigitalFilter>
 8000a92:	1e03      	subs	r3, r0, #0
 8000a94:	d001      	beq.n	8000a9a <MX_I2C1_Init+0x72>
  {
    Error_Handler();
 8000a96:	f000 f8b3 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a9a:	46c0      	nop			@ (mov r8, r8)
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000130 	.word	0x20000130
 8000aa4:	40005400 	.word	0x40005400
 8000aa8:	00101d2d 	.word	0x00101d2d

08000aac <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000ab0:	4b15      	ldr	r3, [pc, #84]	@ (8000b08 <MX_TIM16_Init+0x5c>)
 8000ab2:	4a16      	ldr	r2, [pc, #88]	@ (8000b0c <MX_TIM16_Init+0x60>)
 8000ab4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000ab6:	4b14      	ldr	r3, [pc, #80]	@ (8000b08 <MX_TIM16_Init+0x5c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000abc:	4b12      	ldr	r3, [pc, #72]	@ (8000b08 <MX_TIM16_Init+0x5c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000ac2:	4b11      	ldr	r3, [pc, #68]	@ (8000b08 <MX_TIM16_Init+0x5c>)
 8000ac4:	4a12      	ldr	r2, [pc, #72]	@ (8000b10 <MX_TIM16_Init+0x64>)
 8000ac6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b08 <MX_TIM16_Init+0x5c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	@ (8000b08 <MX_TIM16_Init+0x5c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b08 <MX_TIM16_Init+0x5c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000ada:	4b0b      	ldr	r3, [pc, #44]	@ (8000b08 <MX_TIM16_Init+0x5c>)
 8000adc:	0018      	movs	r0, r3
 8000ade:	f004 fb19 	bl	8005114 <HAL_TIM_Base_Init>
 8000ae2:	1e03      	subs	r3, r0, #0
 8000ae4:	d001      	beq.n	8000aea <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8000ae6:	f000 f88b 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  // Setting period manually and re-initing so I don't have to update every ioc change
  htim16.Init.Period = TIME_PERIOD - 1;
 8000aea:	4b07      	ldr	r3, [pc, #28]	@ (8000b08 <MX_TIM16_Init+0x5c>)
 8000aec:	4a09      	ldr	r2, [pc, #36]	@ (8000b14 <MX_TIM16_Init+0x68>)
 8000aee:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000af0:	4b05      	ldr	r3, [pc, #20]	@ (8000b08 <MX_TIM16_Init+0x5c>)
 8000af2:	0018      	movs	r0, r3
 8000af4:	f004 fb0e 	bl	8005114 <HAL_TIM_Base_Init>
 8000af8:	1e03      	subs	r3, r0, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM16_Init+0x54>
  {
    Error_Handler();
 8000afc:	f000 f880 	bl	8000c00 <Error_Handler>
  }

  /* USER CODE END TIM16_Init 2 */

}
 8000b00:	46c0      	nop			@ (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	46c0      	nop			@ (mov r8, r8)
 8000b08:	200001b4 	.word	0x200001b4
 8000b0c:	40014400 	.word	0x40014400
 8000b10:	0000ffff 	.word	0x0000ffff
 8000b14:	000003e7 	.word	0x000003e7

08000b18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b50 <MX_DMA_Init+0x38>)
 8000b20:	695a      	ldr	r2, [r3, #20]
 8000b22:	4b0b      	ldr	r3, [pc, #44]	@ (8000b50 <MX_DMA_Init+0x38>)
 8000b24:	2101      	movs	r1, #1
 8000b26:	430a      	orrs	r2, r1
 8000b28:	615a      	str	r2, [r3, #20]
 8000b2a:	4b09      	ldr	r3, [pc, #36]	@ (8000b50 <MX_DMA_Init+0x38>)
 8000b2c:	695b      	ldr	r3, [r3, #20]
 8000b2e:	2201      	movs	r2, #1
 8000b30:	4013      	ands	r3, r2
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2100      	movs	r1, #0
 8000b3a:	2009      	movs	r0, #9
 8000b3c:	f001 f898 	bl	8001c70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b40:	2009      	movs	r0, #9
 8000b42:	f001 f8aa 	bl	8001c9a <HAL_NVIC_EnableIRQ>

}
 8000b46:	46c0      	nop			@ (mov r8, r8)
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	b002      	add	sp, #8
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	46c0      	nop			@ (mov r8, r8)
 8000b50:	40021000 	.word	0x40021000

08000b54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b54:	b590      	push	{r4, r7, lr}
 8000b56:	b089      	sub	sp, #36	@ 0x24
 8000b58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5a:	240c      	movs	r4, #12
 8000b5c:	193b      	adds	r3, r7, r4
 8000b5e:	0018      	movs	r0, r3
 8000b60:	2314      	movs	r3, #20
 8000b62:	001a      	movs	r2, r3
 8000b64:	2100      	movs	r1, #0
 8000b66:	f004 fcbb 	bl	80054e0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b6a:	4b23      	ldr	r3, [pc, #140]	@ (8000bf8 <MX_GPIO_Init+0xa4>)
 8000b6c:	695a      	ldr	r2, [r3, #20]
 8000b6e:	4b22      	ldr	r3, [pc, #136]	@ (8000bf8 <MX_GPIO_Init+0xa4>)
 8000b70:	2180      	movs	r1, #128	@ 0x80
 8000b72:	03c9      	lsls	r1, r1, #15
 8000b74:	430a      	orrs	r2, r1
 8000b76:	615a      	str	r2, [r3, #20]
 8000b78:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf8 <MX_GPIO_Init+0xa4>)
 8000b7a:	695a      	ldr	r2, [r3, #20]
 8000b7c:	2380      	movs	r3, #128	@ 0x80
 8000b7e:	03db      	lsls	r3, r3, #15
 8000b80:	4013      	ands	r3, r2
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf8 <MX_GPIO_Init+0xa4>)
 8000b88:	695a      	ldr	r2, [r3, #20]
 8000b8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf8 <MX_GPIO_Init+0xa4>)
 8000b8c:	2180      	movs	r1, #128	@ 0x80
 8000b8e:	0289      	lsls	r1, r1, #10
 8000b90:	430a      	orrs	r2, r1
 8000b92:	615a      	str	r2, [r3, #20]
 8000b94:	4b18      	ldr	r3, [pc, #96]	@ (8000bf8 <MX_GPIO_Init+0xa4>)
 8000b96:	695a      	ldr	r2, [r3, #20]
 8000b98:	2380      	movs	r3, #128	@ 0x80
 8000b9a:	029b      	lsls	r3, r3, #10
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba2:	4b15      	ldr	r3, [pc, #84]	@ (8000bf8 <MX_GPIO_Init+0xa4>)
 8000ba4:	695a      	ldr	r2, [r3, #20]
 8000ba6:	4b14      	ldr	r3, [pc, #80]	@ (8000bf8 <MX_GPIO_Init+0xa4>)
 8000ba8:	2180      	movs	r1, #128	@ 0x80
 8000baa:	02c9      	lsls	r1, r1, #11
 8000bac:	430a      	orrs	r2, r1
 8000bae:	615a      	str	r2, [r3, #20]
 8000bb0:	4b11      	ldr	r3, [pc, #68]	@ (8000bf8 <MX_GPIO_Init+0xa4>)
 8000bb2:	695a      	ldr	r2, [r3, #20]
 8000bb4:	2380      	movs	r3, #128	@ 0x80
 8000bb6:	02db      	lsls	r3, r3, #11
 8000bb8:	4013      	ands	r3, r2
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_SLEEP_GPIO_Port, CAN_SLEEP_Pin, GPIO_PIN_RESET);
 8000bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000bfc <MX_GPIO_Init+0xa8>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2108      	movs	r1, #8
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	f001 fb45 	bl	8002254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAN_SLEEP_Pin */
  GPIO_InitStruct.Pin = CAN_SLEEP_Pin;
 8000bca:	0021      	movs	r1, r4
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	2208      	movs	r2, #8
 8000bd0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd2:	187b      	adds	r3, r7, r1
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bd8:	187b      	adds	r3, r7, r1
 8000bda:	2202      	movs	r2, #2
 8000bdc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	187b      	adds	r3, r7, r1
 8000be0:	2200      	movs	r2, #0
 8000be2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CAN_SLEEP_GPIO_Port, &GPIO_InitStruct);
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	4a05      	ldr	r2, [pc, #20]	@ (8000bfc <MX_GPIO_Init+0xa8>)
 8000be8:	0019      	movs	r1, r3
 8000bea:	0010      	movs	r0, r2
 8000bec:	f001 f9ca 	bl	8001f84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bf0:	46c0      	nop			@ (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	b009      	add	sp, #36	@ 0x24
 8000bf6:	bd90      	pop	{r4, r7, pc}
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	48000400 	.word	0x48000400

08000c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c04:	b672      	cpsid	i
}
 8000c06:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c08:	46c0      	nop			@ (mov r8, r8)
 8000c0a:	e7fd      	b.n	8000c08 <Error_Handler+0x8>

08000c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c12:	4b0f      	ldr	r3, [pc, #60]	@ (8000c50 <HAL_MspInit+0x44>)
 8000c14:	699a      	ldr	r2, [r3, #24]
 8000c16:	4b0e      	ldr	r3, [pc, #56]	@ (8000c50 <HAL_MspInit+0x44>)
 8000c18:	2101      	movs	r1, #1
 8000c1a:	430a      	orrs	r2, r1
 8000c1c:	619a      	str	r2, [r3, #24]
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <HAL_MspInit+0x44>)
 8000c20:	699b      	ldr	r3, [r3, #24]
 8000c22:	2201      	movs	r2, #1
 8000c24:	4013      	ands	r3, r2
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2a:	4b09      	ldr	r3, [pc, #36]	@ (8000c50 <HAL_MspInit+0x44>)
 8000c2c:	69da      	ldr	r2, [r3, #28]
 8000c2e:	4b08      	ldr	r3, [pc, #32]	@ (8000c50 <HAL_MspInit+0x44>)
 8000c30:	2180      	movs	r1, #128	@ 0x80
 8000c32:	0549      	lsls	r1, r1, #21
 8000c34:	430a      	orrs	r2, r1
 8000c36:	61da      	str	r2, [r3, #28]
 8000c38:	4b05      	ldr	r3, [pc, #20]	@ (8000c50 <HAL_MspInit+0x44>)
 8000c3a:	69da      	ldr	r2, [r3, #28]
 8000c3c:	2380      	movs	r3, #128	@ 0x80
 8000c3e:	055b      	lsls	r3, r3, #21
 8000c40:	4013      	ands	r3, r2
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c46:	46c0      	nop			@ (mov r8, r8)
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	b002      	add	sp, #8
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	46c0      	nop			@ (mov r8, r8)
 8000c50:	40021000 	.word	0x40021000

08000c54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c54:	b590      	push	{r4, r7, lr}
 8000c56:	b08b      	sub	sp, #44	@ 0x2c
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	2414      	movs	r4, #20
 8000c5e:	193b      	adds	r3, r7, r4
 8000c60:	0018      	movs	r0, r3
 8000c62:	2314      	movs	r3, #20
 8000c64:	001a      	movs	r2, r3
 8000c66:	2100      	movs	r1, #0
 8000c68:	f004 fc3a 	bl	80054e0 <memset>
  if(hadc->Instance==ADC1)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a3b      	ldr	r2, [pc, #236]	@ (8000d60 <HAL_ADC_MspInit+0x10c>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d170      	bne.n	8000d58 <HAL_ADC_MspInit+0x104>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c76:	4b3b      	ldr	r3, [pc, #236]	@ (8000d64 <HAL_ADC_MspInit+0x110>)
 8000c78:	699a      	ldr	r2, [r3, #24]
 8000c7a:	4b3a      	ldr	r3, [pc, #232]	@ (8000d64 <HAL_ADC_MspInit+0x110>)
 8000c7c:	2180      	movs	r1, #128	@ 0x80
 8000c7e:	0089      	lsls	r1, r1, #2
 8000c80:	430a      	orrs	r2, r1
 8000c82:	619a      	str	r2, [r3, #24]
 8000c84:	4b37      	ldr	r3, [pc, #220]	@ (8000d64 <HAL_ADC_MspInit+0x110>)
 8000c86:	699a      	ldr	r2, [r3, #24]
 8000c88:	2380      	movs	r3, #128	@ 0x80
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	4b34      	ldr	r3, [pc, #208]	@ (8000d64 <HAL_ADC_MspInit+0x110>)
 8000c94:	695a      	ldr	r2, [r3, #20]
 8000c96:	4b33      	ldr	r3, [pc, #204]	@ (8000d64 <HAL_ADC_MspInit+0x110>)
 8000c98:	2180      	movs	r1, #128	@ 0x80
 8000c9a:	0289      	lsls	r1, r1, #10
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	615a      	str	r2, [r3, #20]
 8000ca0:	4b30      	ldr	r3, [pc, #192]	@ (8000d64 <HAL_ADC_MspInit+0x110>)
 8000ca2:	695a      	ldr	r2, [r3, #20]
 8000ca4:	2380      	movs	r3, #128	@ 0x80
 8000ca6:	029b      	lsls	r3, r3, #10
 8000ca8:	4013      	ands	r3, r2
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cae:	4b2d      	ldr	r3, [pc, #180]	@ (8000d64 <HAL_ADC_MspInit+0x110>)
 8000cb0:	695a      	ldr	r2, [r3, #20]
 8000cb2:	4b2c      	ldr	r3, [pc, #176]	@ (8000d64 <HAL_ADC_MspInit+0x110>)
 8000cb4:	2180      	movs	r1, #128	@ 0x80
 8000cb6:	02c9      	lsls	r1, r1, #11
 8000cb8:	430a      	orrs	r2, r1
 8000cba:	615a      	str	r2, [r3, #20]
 8000cbc:	4b29      	ldr	r3, [pc, #164]	@ (8000d64 <HAL_ADC_MspInit+0x110>)
 8000cbe:	695a      	ldr	r2, [r3, #20]
 8000cc0:	2380      	movs	r3, #128	@ 0x80
 8000cc2:	02db      	lsls	r3, r3, #11
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = S1_Pin|S2_Pin;
 8000cca:	193b      	adds	r3, r7, r4
 8000ccc:	22c0      	movs	r2, #192	@ 0xc0
 8000cce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cd0:	193b      	adds	r3, r7, r4
 8000cd2:	2203      	movs	r2, #3
 8000cd4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	193b      	adds	r3, r7, r4
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cdc:	193a      	adds	r2, r7, r4
 8000cde:	2390      	movs	r3, #144	@ 0x90
 8000ce0:	05db      	lsls	r3, r3, #23
 8000ce2:	0011      	movs	r1, r2
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f001 f94d 	bl	8001f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = S3_Pin|S4_Pin;
 8000cea:	193b      	adds	r3, r7, r4
 8000cec:	2203      	movs	r2, #3
 8000cee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cf0:	193b      	adds	r3, r7, r4
 8000cf2:	2203      	movs	r2, #3
 8000cf4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	193b      	adds	r3, r7, r4
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfc:	193b      	adds	r3, r7, r4
 8000cfe:	4a1a      	ldr	r2, [pc, #104]	@ (8000d68 <HAL_ADC_MspInit+0x114>)
 8000d00:	0019      	movs	r1, r3
 8000d02:	0010      	movs	r0, r2
 8000d04:	f001 f93e 	bl	8001f84 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000d08:	4b18      	ldr	r3, [pc, #96]	@ (8000d6c <HAL_ADC_MspInit+0x118>)
 8000d0a:	4a19      	ldr	r2, [pc, #100]	@ (8000d70 <HAL_ADC_MspInit+0x11c>)
 8000d0c:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d0e:	4b17      	ldr	r3, [pc, #92]	@ (8000d6c <HAL_ADC_MspInit+0x118>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d14:	4b15      	ldr	r3, [pc, #84]	@ (8000d6c <HAL_ADC_MspInit+0x118>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000d1a:	4b14      	ldr	r3, [pc, #80]	@ (8000d6c <HAL_ADC_MspInit+0x118>)
 8000d1c:	2280      	movs	r2, #128	@ 0x80
 8000d1e:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d20:	4b12      	ldr	r3, [pc, #72]	@ (8000d6c <HAL_ADC_MspInit+0x118>)
 8000d22:	2280      	movs	r2, #128	@ 0x80
 8000d24:	0052      	lsls	r2, r2, #1
 8000d26:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d28:	4b10      	ldr	r3, [pc, #64]	@ (8000d6c <HAL_ADC_MspInit+0x118>)
 8000d2a:	2280      	movs	r2, #128	@ 0x80
 8000d2c:	00d2      	lsls	r2, r2, #3
 8000d2e:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000d30:	4b0e      	ldr	r3, [pc, #56]	@ (8000d6c <HAL_ADC_MspInit+0x118>)
 8000d32:	2220      	movs	r2, #32
 8000d34:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000d36:	4b0d      	ldr	r3, [pc, #52]	@ (8000d6c <HAL_ADC_MspInit+0x118>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d6c <HAL_ADC_MspInit+0x118>)
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f000 ffc8 	bl	8001cd4 <HAL_DMA_Init>
 8000d44:	1e03      	subs	r3, r0, #0
 8000d46:	d001      	beq.n	8000d4c <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8000d48:	f7ff ff5a 	bl	8000c00 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a07      	ldr	r2, [pc, #28]	@ (8000d6c <HAL_ADC_MspInit+0x118>)
 8000d50:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d52:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <HAL_ADC_MspInit+0x118>)
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	625a      	str	r2, [r3, #36]	@ 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d58:	46c0      	nop			@ (mov r8, r8)
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	b00b      	add	sp, #44	@ 0x2c
 8000d5e:	bd90      	pop	{r4, r7, pc}
 8000d60:	40012400 	.word	0x40012400
 8000d64:	40021000 	.word	0x40021000
 8000d68:	48000400 	.word	0x48000400
 8000d6c:	200000c4 	.word	0x200000c4
 8000d70:	40020008 	.word	0x40020008

08000d74 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d74:	b590      	push	{r4, r7, lr}
 8000d76:	b08b      	sub	sp, #44	@ 0x2c
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	2414      	movs	r4, #20
 8000d7e:	193b      	adds	r3, r7, r4
 8000d80:	0018      	movs	r0, r3
 8000d82:	2314      	movs	r3, #20
 8000d84:	001a      	movs	r2, r3
 8000d86:	2100      	movs	r1, #0
 8000d88:	f004 fbaa 	bl	80054e0 <memset>
  if(hcan->Instance==CAN)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a1d      	ldr	r2, [pc, #116]	@ (8000e08 <HAL_CAN_MspInit+0x94>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d133      	bne.n	8000dfe <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d96:	4b1d      	ldr	r3, [pc, #116]	@ (8000e0c <HAL_CAN_MspInit+0x98>)
 8000d98:	69da      	ldr	r2, [r3, #28]
 8000d9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e0c <HAL_CAN_MspInit+0x98>)
 8000d9c:	2180      	movs	r1, #128	@ 0x80
 8000d9e:	0489      	lsls	r1, r1, #18
 8000da0:	430a      	orrs	r2, r1
 8000da2:	61da      	str	r2, [r3, #28]
 8000da4:	4b19      	ldr	r3, [pc, #100]	@ (8000e0c <HAL_CAN_MspInit+0x98>)
 8000da6:	69da      	ldr	r2, [r3, #28]
 8000da8:	2380      	movs	r3, #128	@ 0x80
 8000daa:	049b      	lsls	r3, r3, #18
 8000dac:	4013      	ands	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db2:	4b16      	ldr	r3, [pc, #88]	@ (8000e0c <HAL_CAN_MspInit+0x98>)
 8000db4:	695a      	ldr	r2, [r3, #20]
 8000db6:	4b15      	ldr	r3, [pc, #84]	@ (8000e0c <HAL_CAN_MspInit+0x98>)
 8000db8:	2180      	movs	r1, #128	@ 0x80
 8000dba:	0289      	lsls	r1, r1, #10
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	615a      	str	r2, [r3, #20]
 8000dc0:	4b12      	ldr	r3, [pc, #72]	@ (8000e0c <HAL_CAN_MspInit+0x98>)
 8000dc2:	695a      	ldr	r2, [r3, #20]
 8000dc4:	2380      	movs	r3, #128	@ 0x80
 8000dc6:	029b      	lsls	r3, r3, #10
 8000dc8:	4013      	ands	r3, r2
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000dce:	193b      	adds	r3, r7, r4
 8000dd0:	22c0      	movs	r2, #192	@ 0xc0
 8000dd2:	0152      	lsls	r2, r2, #5
 8000dd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd6:	0021      	movs	r1, r4
 8000dd8:	187b      	adds	r3, r7, r1
 8000dda:	2202      	movs	r2, #2
 8000ddc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	187b      	adds	r3, r7, r1
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000de4:	187b      	adds	r3, r7, r1
 8000de6:	2203      	movs	r2, #3
 8000de8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000dea:	187b      	adds	r3, r7, r1
 8000dec:	2204      	movs	r2, #4
 8000dee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df0:	187a      	adds	r2, r7, r1
 8000df2:	2390      	movs	r3, #144	@ 0x90
 8000df4:	05db      	lsls	r3, r3, #23
 8000df6:	0011      	movs	r1, r2
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f001 f8c3 	bl	8001f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000dfe:	46c0      	nop			@ (mov r8, r8)
 8000e00:	46bd      	mov	sp, r7
 8000e02:	b00b      	add	sp, #44	@ 0x2c
 8000e04:	bd90      	pop	{r4, r7, pc}
 8000e06:	46c0      	nop			@ (mov r8, r8)
 8000e08:	40006400 	.word	0x40006400
 8000e0c:	40021000 	.word	0x40021000

08000e10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e10:	b590      	push	{r4, r7, lr}
 8000e12:	b08b      	sub	sp, #44	@ 0x2c
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	2414      	movs	r4, #20
 8000e1a:	193b      	adds	r3, r7, r4
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	2314      	movs	r3, #20
 8000e20:	001a      	movs	r2, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	f004 fb5c 	bl	80054e0 <memset>
  if(hi2c->Instance==I2C1)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a21      	ldr	r2, [pc, #132]	@ (8000eb4 <HAL_I2C_MspInit+0xa4>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d13b      	bne.n	8000eaa <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	4b21      	ldr	r3, [pc, #132]	@ (8000eb8 <HAL_I2C_MspInit+0xa8>)
 8000e34:	695a      	ldr	r2, [r3, #20]
 8000e36:	4b20      	ldr	r3, [pc, #128]	@ (8000eb8 <HAL_I2C_MspInit+0xa8>)
 8000e38:	2180      	movs	r1, #128	@ 0x80
 8000e3a:	0289      	lsls	r1, r1, #10
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	615a      	str	r2, [r3, #20]
 8000e40:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb8 <HAL_I2C_MspInit+0xa8>)
 8000e42:	695a      	ldr	r2, [r3, #20]
 8000e44:	2380      	movs	r3, #128	@ 0x80
 8000e46:	029b      	lsls	r3, r3, #10
 8000e48:	4013      	ands	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e4e:	193b      	adds	r3, r7, r4
 8000e50:	22c0      	movs	r2, #192	@ 0xc0
 8000e52:	00d2      	lsls	r2, r2, #3
 8000e54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e56:	0021      	movs	r1, r4
 8000e58:	187b      	adds	r3, r7, r1
 8000e5a:	2212      	movs	r2, #18
 8000e5c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	187b      	adds	r3, r7, r1
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e64:	187b      	adds	r3, r7, r1
 8000e66:	2203      	movs	r2, #3
 8000e68:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e6a:	187b      	adds	r3, r7, r1
 8000e6c:	2204      	movs	r2, #4
 8000e6e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e70:	187a      	adds	r2, r7, r1
 8000e72:	2390      	movs	r3, #144	@ 0x90
 8000e74:	05db      	lsls	r3, r3, #23
 8000e76:	0011      	movs	r1, r2
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f001 f883 	bl	8001f84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb8 <HAL_I2C_MspInit+0xa8>)
 8000e80:	69da      	ldr	r2, [r3, #28]
 8000e82:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb8 <HAL_I2C_MspInit+0xa8>)
 8000e84:	2180      	movs	r1, #128	@ 0x80
 8000e86:	0389      	lsls	r1, r1, #14
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	61da      	str	r2, [r3, #28]
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb8 <HAL_I2C_MspInit+0xa8>)
 8000e8e:	69da      	ldr	r2, [r3, #28]
 8000e90:	2380      	movs	r3, #128	@ 0x80
 8000e92:	039b      	lsls	r3, r3, #14
 8000e94:	4013      	ands	r3, r2
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	2017      	movs	r0, #23
 8000ea0:	f000 fee6 	bl	8001c70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8000ea4:	2017      	movs	r0, #23
 8000ea6:	f000 fef8 	bl	8001c9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000eaa:	46c0      	nop			@ (mov r8, r8)
 8000eac:	46bd      	mov	sp, r7
 8000eae:	b00b      	add	sp, #44	@ 0x2c
 8000eb0:	bd90      	pop	{r4, r7, pc}
 8000eb2:	46c0      	nop			@ (mov r8, r8)
 8000eb4:	40005400 	.word	0x40005400
 8000eb8:	40021000 	.word	0x40021000

08000ebc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef4 <HAL_TIM_Base_MspInit+0x38>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d10d      	bne.n	8000eea <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000ece:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef8 <HAL_TIM_Base_MspInit+0x3c>)
 8000ed0:	699a      	ldr	r2, [r3, #24]
 8000ed2:	4b09      	ldr	r3, [pc, #36]	@ (8000ef8 <HAL_TIM_Base_MspInit+0x3c>)
 8000ed4:	2180      	movs	r1, #128	@ 0x80
 8000ed6:	0289      	lsls	r1, r1, #10
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	619a      	str	r2, [r3, #24]
 8000edc:	4b06      	ldr	r3, [pc, #24]	@ (8000ef8 <HAL_TIM_Base_MspInit+0x3c>)
 8000ede:	699a      	ldr	r2, [r3, #24]
 8000ee0:	2380      	movs	r3, #128	@ 0x80
 8000ee2:	029b      	lsls	r3, r3, #10
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000eea:	46c0      	nop			@ (mov r8, r8)
 8000eec:	46bd      	mov	sp, r7
 8000eee:	b004      	add	sp, #16
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	46c0      	nop			@ (mov r8, r8)
 8000ef4:	40014400 	.word	0x40014400
 8000ef8:	40021000 	.word	0x40021000

08000efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f00:	46c0      	nop			@ (mov r8, r8)
 8000f02:	e7fd      	b.n	8000f00 <NMI_Handler+0x4>

08000f04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f08:	46c0      	nop			@ (mov r8, r8)
 8000f0a:	e7fd      	b.n	8000f08 <HardFault_Handler+0x4>

08000f0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f10:	46c0      	nop			@ (mov r8, r8)
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f1a:	46c0      	nop			@ (mov r8, r8)
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f24:	f000 f954 	bl	80011d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f28:	46c0      	nop			@ (mov r8, r8)
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000f34:	4b03      	ldr	r3, [pc, #12]	@ (8000f44 <DMA1_Channel1_IRQHandler+0x14>)
 8000f36:	0018      	movs	r0, r3
 8000f38:	f000 ff59 	bl	8001dee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f3c:	46c0      	nop			@ (mov r8, r8)
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	46c0      	nop			@ (mov r8, r8)
 8000f44:	200000c4 	.word	0x200000c4

08000f48 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8000f4c:	4b09      	ldr	r3, [pc, #36]	@ (8000f74 <I2C1_IRQHandler+0x2c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	699a      	ldr	r2, [r3, #24]
 8000f52:	23e0      	movs	r3, #224	@ 0xe0
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	4013      	ands	r3, r2
 8000f58:	d004      	beq.n	8000f64 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8000f5a:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <I2C1_IRQHandler+0x2c>)
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	f001 fca1 	bl	80028a4 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8000f62:	e003      	b.n	8000f6c <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8000f64:	4b03      	ldr	r3, [pc, #12]	@ (8000f74 <I2C1_IRQHandler+0x2c>)
 8000f66:	0018      	movs	r0, r3
 8000f68:	f001 fc82 	bl	8002870 <HAL_I2C_EV_IRQHandler>
}
 8000f6c:	46c0      	nop			@ (mov r8, r8)
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	46c0      	nop			@ (mov r8, r8)
 8000f74:	20000130 	.word	0x20000130

08000f78 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]
 8000f88:	e00a      	b.n	8000fa0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f8a:	e000      	b.n	8000f8e <_read+0x16>
 8000f8c:	bf00      	nop
 8000f8e:	0001      	movs	r1, r0
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	1c5a      	adds	r2, r3, #1
 8000f94:	60ba      	str	r2, [r7, #8]
 8000f96:	b2ca      	uxtb	r2, r1
 8000f98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	617b      	str	r3, [r7, #20]
 8000fa0:	697a      	ldr	r2, [r7, #20]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	dbf0      	blt.n	8000f8a <_read+0x12>
  }

  return len;
 8000fa8:	687b      	ldr	r3, [r7, #4]
}
 8000faa:	0018      	movs	r0, r3
 8000fac:	46bd      	mov	sp, r7
 8000fae:	b006      	add	sp, #24
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b086      	sub	sp, #24
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	60f8      	str	r0, [r7, #12]
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
 8000fc2:	e009      	b.n	8000fd8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	1c5a      	adds	r2, r3, #1
 8000fc8:	60ba      	str	r2, [r7, #8]
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	0018      	movs	r0, r3
 8000fce:	e000      	b.n	8000fd2 <_write+0x20>
 8000fd0:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	697a      	ldr	r2, [r7, #20]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	dbf1      	blt.n	8000fc4 <_write+0x12>
  }
  return len;
 8000fe0:	687b      	ldr	r3, [r7, #4]
}
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	b006      	add	sp, #24
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <_close>:

int _close(int file)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	425b      	negs	r3, r3
}
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	b002      	add	sp, #8
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
 8001006:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	2280      	movs	r2, #128	@ 0x80
 800100c:	0192      	lsls	r2, r2, #6
 800100e:	605a      	str	r2, [r3, #4]
  return 0;
 8001010:	2300      	movs	r3, #0
}
 8001012:	0018      	movs	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	b002      	add	sp, #8
 8001018:	bd80      	pop	{r7, pc}

0800101a <_isatty>:

int _isatty(int file)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001022:	2301      	movs	r3, #1
}
 8001024:	0018      	movs	r0, r3
 8001026:	46bd      	mov	sp, r7
 8001028:	b002      	add	sp, #8
 800102a:	bd80      	pop	{r7, pc}

0800102c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001038:	2300      	movs	r3, #0
}
 800103a:	0018      	movs	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	b004      	add	sp, #16
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800104c:	4a14      	ldr	r2, [pc, #80]	@ (80010a0 <_sbrk+0x5c>)
 800104e:	4b15      	ldr	r3, [pc, #84]	@ (80010a4 <_sbrk+0x60>)
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001058:	4b13      	ldr	r3, [pc, #76]	@ (80010a8 <_sbrk+0x64>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d102      	bne.n	8001066 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001060:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <_sbrk+0x64>)
 8001062:	4a12      	ldr	r2, [pc, #72]	@ (80010ac <_sbrk+0x68>)
 8001064:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001066:	4b10      	ldr	r3, [pc, #64]	@ (80010a8 <_sbrk+0x64>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	18d3      	adds	r3, r2, r3
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	429a      	cmp	r2, r3
 8001072:	d207      	bcs.n	8001084 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001074:	f004 fa8a 	bl	800558c <__errno>
 8001078:	0003      	movs	r3, r0
 800107a:	220c      	movs	r2, #12
 800107c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800107e:	2301      	movs	r3, #1
 8001080:	425b      	negs	r3, r3
 8001082:	e009      	b.n	8001098 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001084:	4b08      	ldr	r3, [pc, #32]	@ (80010a8 <_sbrk+0x64>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800108a:	4b07      	ldr	r3, [pc, #28]	@ (80010a8 <_sbrk+0x64>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	18d2      	adds	r2, r2, r3
 8001092:	4b05      	ldr	r3, [pc, #20]	@ (80010a8 <_sbrk+0x64>)
 8001094:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001096:	68fb      	ldr	r3, [r7, #12]
}
 8001098:	0018      	movs	r0, r3
 800109a:	46bd      	mov	sp, r7
 800109c:	b006      	add	sp, #24
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20001800 	.word	0x20001800
 80010a4:	00000400 	.word	0x00000400
 80010a8:	20000250 	.word	0x20000250
 80010ac:	200003a8 	.word	0x200003a8

080010b0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80010b4:	46c0      	nop			@ (mov r8, r8)
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010bc:	4813      	ldr	r0, [pc, #76]	@ (800110c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010be:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010c0:	f7ff fff6 	bl	80010b0 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80010c4:	4812      	ldr	r0, [pc, #72]	@ (8001110 <LoopForever+0x6>)
    LDR R1, [R0]
 80010c6:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80010c8:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80010ca:	4a12      	ldr	r2, [pc, #72]	@ (8001114 <LoopForever+0xa>)
    CMP R1, R2
 80010cc:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80010ce:	d105      	bne.n	80010dc <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80010d0:	4811      	ldr	r0, [pc, #68]	@ (8001118 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80010d2:	4912      	ldr	r1, [pc, #72]	@ (800111c <LoopForever+0x12>)
    STR R1, [R0]
 80010d4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80010d6:	4812      	ldr	r0, [pc, #72]	@ (8001120 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80010d8:	4912      	ldr	r1, [pc, #72]	@ (8001124 <LoopForever+0x1a>)
    STR R1, [R0]
 80010da:	6001      	str	r1, [r0, #0]

080010dc <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010dc:	4812      	ldr	r0, [pc, #72]	@ (8001128 <LoopForever+0x1e>)
  ldr r1, =_edata
 80010de:	4913      	ldr	r1, [pc, #76]	@ (800112c <LoopForever+0x22>)
  ldr r2, =_sidata
 80010e0:	4a13      	ldr	r2, [pc, #76]	@ (8001130 <LoopForever+0x26>)
  movs r3, #0
 80010e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e4:	e002      	b.n	80010ec <LoopCopyDataInit>

080010e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ea:	3304      	adds	r3, #4

080010ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f0:	d3f9      	bcc.n	80010e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f2:	4a10      	ldr	r2, [pc, #64]	@ (8001134 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80010f4:	4c10      	ldr	r4, [pc, #64]	@ (8001138 <LoopForever+0x2e>)
  movs r3, #0
 80010f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f8:	e001      	b.n	80010fe <LoopFillZerobss>

080010fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010fc:	3204      	adds	r2, #4

080010fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001100:	d3fb      	bcc.n	80010fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001102:	f004 fa49 	bl	8005598 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001106:	f7ff fad9 	bl	80006bc <main>

0800110a <LoopForever>:

LoopForever:
    b LoopForever
 800110a:	e7fe      	b.n	800110a <LoopForever>
  ldr   r0, =_estack
 800110c:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8001110:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001114:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8001118:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 800111c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001120:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001124:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001128:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800112c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001130:	080062d4 	.word	0x080062d4
  ldr r2, =_sbss
 8001134:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001138:	200003a4 	.word	0x200003a4

0800113c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800113c:	e7fe      	b.n	800113c <ADC1_IRQHandler>
	...

08001140 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001144:	4b07      	ldr	r3, [pc, #28]	@ (8001164 <HAL_Init+0x24>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <HAL_Init+0x24>)
 800114a:	2110      	movs	r1, #16
 800114c:	430a      	orrs	r2, r1
 800114e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001150:	2003      	movs	r0, #3
 8001152:	f000 f809 	bl	8001168 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001156:	f7ff fd59 	bl	8000c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800115a:	2300      	movs	r3, #0
}
 800115c:	0018      	movs	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	46c0      	nop			@ (mov r8, r8)
 8001164:	40022000 	.word	0x40022000

08001168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001168:	b590      	push	{r4, r7, lr}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001170:	4b14      	ldr	r3, [pc, #80]	@ (80011c4 <HAL_InitTick+0x5c>)
 8001172:	681c      	ldr	r4, [r3, #0]
 8001174:	4b14      	ldr	r3, [pc, #80]	@ (80011c8 <HAL_InitTick+0x60>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	0019      	movs	r1, r3
 800117a:	23fa      	movs	r3, #250	@ 0xfa
 800117c:	0098      	lsls	r0, r3, #2
 800117e:	f7fe ffcd 	bl	800011c <__udivsi3>
 8001182:	0003      	movs	r3, r0
 8001184:	0019      	movs	r1, r3
 8001186:	0020      	movs	r0, r4
 8001188:	f7fe ffc8 	bl	800011c <__udivsi3>
 800118c:	0003      	movs	r3, r0
 800118e:	0018      	movs	r0, r3
 8001190:	f000 fd93 	bl	8001cba <HAL_SYSTICK_Config>
 8001194:	1e03      	subs	r3, r0, #0
 8001196:	d001      	beq.n	800119c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e00f      	b.n	80011bc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b03      	cmp	r3, #3
 80011a0:	d80b      	bhi.n	80011ba <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	2301      	movs	r3, #1
 80011a6:	425b      	negs	r3, r3
 80011a8:	2200      	movs	r2, #0
 80011aa:	0018      	movs	r0, r3
 80011ac:	f000 fd60 	bl	8001c70 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b0:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <HAL_InitTick+0x64>)
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
 80011b8:	e000      	b.n	80011bc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
}
 80011bc:	0018      	movs	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	b003      	add	sp, #12
 80011c2:	bd90      	pop	{r4, r7, pc}
 80011c4:	20000000 	.word	0x20000000
 80011c8:	20000008 	.word	0x20000008
 80011cc:	20000004 	.word	0x20000004

080011d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d4:	4b05      	ldr	r3, [pc, #20]	@ (80011ec <HAL_IncTick+0x1c>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	001a      	movs	r2, r3
 80011da:	4b05      	ldr	r3, [pc, #20]	@ (80011f0 <HAL_IncTick+0x20>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	18d2      	adds	r2, r2, r3
 80011e0:	4b03      	ldr	r3, [pc, #12]	@ (80011f0 <HAL_IncTick+0x20>)
 80011e2:	601a      	str	r2, [r3, #0]
}
 80011e4:	46c0      	nop			@ (mov r8, r8)
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	46c0      	nop			@ (mov r8, r8)
 80011ec:	20000008 	.word	0x20000008
 80011f0:	20000254 	.word	0x20000254

080011f4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  return uwTick;
 80011f8:	4b02      	ldr	r3, [pc, #8]	@ (8001204 <HAL_GetTick+0x10>)
 80011fa:	681b      	ldr	r3, [r3, #0]
}
 80011fc:	0018      	movs	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	46c0      	nop			@ (mov r8, r8)
 8001204:	20000254 	.word	0x20000254

08001208 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001210:	f7ff fff0 	bl	80011f4 <HAL_GetTick>
 8001214:	0003      	movs	r3, r0
 8001216:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	3301      	adds	r3, #1
 8001220:	d005      	beq.n	800122e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001222:	4b0a      	ldr	r3, [pc, #40]	@ (800124c <HAL_Delay+0x44>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	001a      	movs	r2, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	189b      	adds	r3, r3, r2
 800122c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800122e:	46c0      	nop			@ (mov r8, r8)
 8001230:	f7ff ffe0 	bl	80011f4 <HAL_GetTick>
 8001234:	0002      	movs	r2, r0
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	429a      	cmp	r2, r3
 800123e:	d8f7      	bhi.n	8001230 <HAL_Delay+0x28>
  {
  }
}
 8001240:	46c0      	nop			@ (mov r8, r8)
 8001242:	46c0      	nop			@ (mov r8, r8)
 8001244:	46bd      	mov	sp, r7
 8001246:	b004      	add	sp, #16
 8001248:	bd80      	pop	{r7, pc}
 800124a:	46c0      	nop			@ (mov r8, r8)
 800124c:	20000008 	.word	0x20000008

08001250 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001258:	230f      	movs	r3, #15
 800125a:	18fb      	adds	r3, r7, r3
 800125c:	2200      	movs	r2, #0
 800125e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001260:	2300      	movs	r3, #0
 8001262:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d101      	bne.n	800126e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e125      	b.n	80014ba <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001272:	2b00      	cmp	r3, #0
 8001274:	d10a      	bne.n	800128c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2234      	movs	r2, #52	@ 0x34
 8001280:	2100      	movs	r1, #0
 8001282:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	0018      	movs	r0, r3
 8001288:	f7ff fce4 	bl	8000c54 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001290:	2210      	movs	r2, #16
 8001292:	4013      	ands	r3, r2
 8001294:	d000      	beq.n	8001298 <HAL_ADC_Init+0x48>
 8001296:	e103      	b.n	80014a0 <HAL_ADC_Init+0x250>
 8001298:	230f      	movs	r3, #15
 800129a:	18fb      	adds	r3, r7, r3
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d000      	beq.n	80012a4 <HAL_ADC_Init+0x54>
 80012a2:	e0fd      	b.n	80014a0 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	2204      	movs	r2, #4
 80012ac:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80012ae:	d000      	beq.n	80012b2 <HAL_ADC_Init+0x62>
 80012b0:	e0f6      	b.n	80014a0 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012b6:	4a83      	ldr	r2, [pc, #524]	@ (80014c4 <HAL_ADC_Init+0x274>)
 80012b8:	4013      	ands	r3, r2
 80012ba:	2202      	movs	r2, #2
 80012bc:	431a      	orrs	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	2203      	movs	r2, #3
 80012ca:	4013      	ands	r3, r2
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d112      	bne.n	80012f6 <HAL_ADC_Init+0xa6>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2201      	movs	r2, #1
 80012d8:	4013      	ands	r3, r2
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d009      	beq.n	80012f2 <HAL_ADC_Init+0xa2>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	68da      	ldr	r2, [r3, #12]
 80012e4:	2380      	movs	r3, #128	@ 0x80
 80012e6:	021b      	lsls	r3, r3, #8
 80012e8:	401a      	ands	r2, r3
 80012ea:	2380      	movs	r3, #128	@ 0x80
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d101      	bne.n	80012f6 <HAL_ADC_Init+0xa6>
 80012f2:	2301      	movs	r3, #1
 80012f4:	e000      	b.n	80012f8 <HAL_ADC_Init+0xa8>
 80012f6:	2300      	movs	r3, #0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d116      	bne.n	800132a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	2218      	movs	r2, #24
 8001304:	4393      	bics	r3, r2
 8001306:	0019      	movs	r1, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689a      	ldr	r2, [r3, #8]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	430a      	orrs	r2, r1
 8001312:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	0899      	lsrs	r1, r3, #2
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685a      	ldr	r2, [r3, #4]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	430a      	orrs	r2, r1
 8001328:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	68da      	ldr	r2, [r3, #12]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4964      	ldr	r1, [pc, #400]	@ (80014c8 <HAL_ADC_Init+0x278>)
 8001336:	400a      	ands	r2, r1
 8001338:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	7e1b      	ldrb	r3, [r3, #24]
 800133e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	7e5b      	ldrb	r3, [r3, #25]
 8001344:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001346:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	7e9b      	ldrb	r3, [r3, #26]
 800134c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800134e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001354:	2b01      	cmp	r3, #1
 8001356:	d002      	beq.n	800135e <HAL_ADC_Init+0x10e>
 8001358:	2380      	movs	r3, #128	@ 0x80
 800135a:	015b      	lsls	r3, r3, #5
 800135c:	e000      	b.n	8001360 <HAL_ADC_Init+0x110>
 800135e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001360:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001366:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	2b02      	cmp	r3, #2
 800136e:	d101      	bne.n	8001374 <HAL_ADC_Init+0x124>
 8001370:	2304      	movs	r3, #4
 8001372:	e000      	b.n	8001376 <HAL_ADC_Init+0x126>
 8001374:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001376:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2124      	movs	r1, #36	@ 0x24
 800137c:	5c5b      	ldrb	r3, [r3, r1]
 800137e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001380:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001382:	68ba      	ldr	r2, [r7, #8]
 8001384:	4313      	orrs	r3, r2
 8001386:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	7edb      	ldrb	r3, [r3, #27]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d115      	bne.n	80013bc <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	7e9b      	ldrb	r3, [r3, #26]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d105      	bne.n	80013a4 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	2280      	movs	r2, #128	@ 0x80
 800139c:	0252      	lsls	r2, r2, #9
 800139e:	4313      	orrs	r3, r2
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	e00b      	b.n	80013bc <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013a8:	2220      	movs	r2, #32
 80013aa:	431a      	orrs	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013b4:	2201      	movs	r2, #1
 80013b6:	431a      	orrs	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	69da      	ldr	r2, [r3, #28]
 80013c0:	23c2      	movs	r3, #194	@ 0xc2
 80013c2:	33ff      	adds	r3, #255	@ 0xff
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d007      	beq.n	80013d8 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80013d0:	4313      	orrs	r3, r2
 80013d2:	68ba      	ldr	r2, [r7, #8]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	68d9      	ldr	r1, [r3, #12]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	430a      	orrs	r2, r1
 80013e6:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013ec:	2380      	movs	r3, #128	@ 0x80
 80013ee:	055b      	lsls	r3, r3, #21
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d01b      	beq.n	800142c <HAL_ADC_Init+0x1dc>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d017      	beq.n	800142c <HAL_ADC_Init+0x1dc>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001400:	2b02      	cmp	r3, #2
 8001402:	d013      	beq.n	800142c <HAL_ADC_Init+0x1dc>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001408:	2b03      	cmp	r3, #3
 800140a:	d00f      	beq.n	800142c <HAL_ADC_Init+0x1dc>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001410:	2b04      	cmp	r3, #4
 8001412:	d00b      	beq.n	800142c <HAL_ADC_Init+0x1dc>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001418:	2b05      	cmp	r3, #5
 800141a:	d007      	beq.n	800142c <HAL_ADC_Init+0x1dc>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001420:	2b06      	cmp	r3, #6
 8001422:	d003      	beq.n	800142c <HAL_ADC_Init+0x1dc>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001428:	2b07      	cmp	r3, #7
 800142a:	d112      	bne.n	8001452 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	695a      	ldr	r2, [r3, #20]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2107      	movs	r1, #7
 8001438:	438a      	bics	r2, r1
 800143a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6959      	ldr	r1, [r3, #20]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001446:	2207      	movs	r2, #7
 8001448:	401a      	ands	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	430a      	orrs	r2, r1
 8001450:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	4a1c      	ldr	r2, [pc, #112]	@ (80014cc <HAL_ADC_Init+0x27c>)
 800145a:	4013      	ands	r3, r2
 800145c:	68ba      	ldr	r2, [r7, #8]
 800145e:	429a      	cmp	r2, r3
 8001460:	d10b      	bne.n	800147a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800146c:	2203      	movs	r2, #3
 800146e:	4393      	bics	r3, r2
 8001470:	2201      	movs	r2, #1
 8001472:	431a      	orrs	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001478:	e01c      	b.n	80014b4 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800147e:	2212      	movs	r2, #18
 8001480:	4393      	bics	r3, r2
 8001482:	2210      	movs	r2, #16
 8001484:	431a      	orrs	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800148e:	2201      	movs	r2, #1
 8001490:	431a      	orrs	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001496:	230f      	movs	r3, #15
 8001498:	18fb      	adds	r3, r7, r3
 800149a:	2201      	movs	r2, #1
 800149c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800149e:	e009      	b.n	80014b4 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014a4:	2210      	movs	r2, #16
 80014a6:	431a      	orrs	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 80014ac:	230f      	movs	r3, #15
 80014ae:	18fb      	adds	r3, r7, r3
 80014b0:	2201      	movs	r2, #1
 80014b2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80014b4:	230f      	movs	r3, #15
 80014b6:	18fb      	adds	r3, r7, r3
 80014b8:	781b      	ldrb	r3, [r3, #0]
}
 80014ba:	0018      	movs	r0, r3
 80014bc:	46bd      	mov	sp, r7
 80014be:	b004      	add	sp, #16
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	46c0      	nop			@ (mov r8, r8)
 80014c4:	fffffefd 	.word	0xfffffefd
 80014c8:	fffe0219 	.word	0xfffe0219
 80014cc:	833fffe7 	.word	0x833fffe7

080014d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014da:	230f      	movs	r3, #15
 80014dc:	18fb      	adds	r3, r7, r3
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014ea:	2380      	movs	r3, #128	@ 0x80
 80014ec:	055b      	lsls	r3, r3, #21
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d011      	beq.n	8001516 <HAL_ADC_ConfigChannel+0x46>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d00d      	beq.n	8001516 <HAL_ADC_ConfigChannel+0x46>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d009      	beq.n	8001516 <HAL_ADC_ConfigChannel+0x46>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001506:	2b03      	cmp	r3, #3
 8001508:	d005      	beq.n	8001516 <HAL_ADC_ConfigChannel+0x46>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800150e:	2b04      	cmp	r3, #4
 8001510:	d001      	beq.n	8001516 <HAL_ADC_ConfigChannel+0x46>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2234      	movs	r2, #52	@ 0x34
 800151a:	5c9b      	ldrb	r3, [r3, r2]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d101      	bne.n	8001524 <HAL_ADC_ConfigChannel+0x54>
 8001520:	2302      	movs	r3, #2
 8001522:	e0d0      	b.n	80016c6 <HAL_ADC_ConfigChannel+0x1f6>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2234      	movs	r2, #52	@ 0x34
 8001528:	2101      	movs	r1, #1
 800152a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	2204      	movs	r2, #4
 8001534:	4013      	ands	r3, r2
 8001536:	d000      	beq.n	800153a <HAL_ADC_ConfigChannel+0x6a>
 8001538:	e0b4      	b.n	80016a4 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	4a64      	ldr	r2, [pc, #400]	@ (80016d0 <HAL_ADC_ConfigChannel+0x200>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d100      	bne.n	8001546 <HAL_ADC_ConfigChannel+0x76>
 8001544:	e082      	b.n	800164c <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2201      	movs	r2, #1
 8001552:	409a      	lsls	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	430a      	orrs	r2, r1
 800155a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001560:	2380      	movs	r3, #128	@ 0x80
 8001562:	055b      	lsls	r3, r3, #21
 8001564:	429a      	cmp	r2, r3
 8001566:	d037      	beq.n	80015d8 <HAL_ADC_ConfigChannel+0x108>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800156c:	2b01      	cmp	r3, #1
 800156e:	d033      	beq.n	80015d8 <HAL_ADC_ConfigChannel+0x108>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001574:	2b02      	cmp	r3, #2
 8001576:	d02f      	beq.n	80015d8 <HAL_ADC_ConfigChannel+0x108>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800157c:	2b03      	cmp	r3, #3
 800157e:	d02b      	beq.n	80015d8 <HAL_ADC_ConfigChannel+0x108>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001584:	2b04      	cmp	r3, #4
 8001586:	d027      	beq.n	80015d8 <HAL_ADC_ConfigChannel+0x108>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800158c:	2b05      	cmp	r3, #5
 800158e:	d023      	beq.n	80015d8 <HAL_ADC_ConfigChannel+0x108>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001594:	2b06      	cmp	r3, #6
 8001596:	d01f      	beq.n	80015d8 <HAL_ADC_ConfigChannel+0x108>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800159c:	2b07      	cmp	r3, #7
 800159e:	d01b      	beq.n	80015d8 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	689a      	ldr	r2, [r3, #8]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	2107      	movs	r1, #7
 80015ac:	400b      	ands	r3, r1
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d012      	beq.n	80015d8 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	695a      	ldr	r2, [r3, #20]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2107      	movs	r1, #7
 80015be:	438a      	bics	r2, r1
 80015c0:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6959      	ldr	r1, [r3, #20]
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	2207      	movs	r2, #7
 80015ce:	401a      	ands	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	430a      	orrs	r2, r1
 80015d6:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b10      	cmp	r3, #16
 80015de:	d007      	beq.n	80015f0 <HAL_ADC_ConfigChannel+0x120>
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b11      	cmp	r3, #17
 80015e6:	d003      	beq.n	80015f0 <HAL_ADC_ConfigChannel+0x120>
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2b12      	cmp	r3, #18
 80015ee:	d163      	bne.n	80016b8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80015f0:	4b38      	ldr	r3, [pc, #224]	@ (80016d4 <HAL_ADC_ConfigChannel+0x204>)
 80015f2:	6819      	ldr	r1, [r3, #0]
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b10      	cmp	r3, #16
 80015fa:	d009      	beq.n	8001610 <HAL_ADC_ConfigChannel+0x140>
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b11      	cmp	r3, #17
 8001602:	d102      	bne.n	800160a <HAL_ADC_ConfigChannel+0x13a>
 8001604:	2380      	movs	r3, #128	@ 0x80
 8001606:	03db      	lsls	r3, r3, #15
 8001608:	e004      	b.n	8001614 <HAL_ADC_ConfigChannel+0x144>
 800160a:	2380      	movs	r3, #128	@ 0x80
 800160c:	045b      	lsls	r3, r3, #17
 800160e:	e001      	b.n	8001614 <HAL_ADC_ConfigChannel+0x144>
 8001610:	2380      	movs	r3, #128	@ 0x80
 8001612:	041b      	lsls	r3, r3, #16
 8001614:	4a2f      	ldr	r2, [pc, #188]	@ (80016d4 <HAL_ADC_ConfigChannel+0x204>)
 8001616:	430b      	orrs	r3, r1
 8001618:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2b10      	cmp	r3, #16
 8001620:	d14a      	bne.n	80016b8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001622:	4b2d      	ldr	r3, [pc, #180]	@ (80016d8 <HAL_ADC_ConfigChannel+0x208>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	492d      	ldr	r1, [pc, #180]	@ (80016dc <HAL_ADC_ConfigChannel+0x20c>)
 8001628:	0018      	movs	r0, r3
 800162a:	f7fe fd77 	bl	800011c <__udivsi3>
 800162e:	0003      	movs	r3, r0
 8001630:	001a      	movs	r2, r3
 8001632:	0013      	movs	r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	189b      	adds	r3, r3, r2
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800163c:	e002      	b.n	8001644 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	3b01      	subs	r3, #1
 8001642:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1f9      	bne.n	800163e <HAL_ADC_ConfigChannel+0x16e>
 800164a:	e035      	b.n	80016b8 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2101      	movs	r1, #1
 8001658:	4099      	lsls	r1, r3
 800165a:	000b      	movs	r3, r1
 800165c:	43d9      	mvns	r1, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	400a      	ands	r2, r1
 8001664:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2b10      	cmp	r3, #16
 800166c:	d007      	beq.n	800167e <HAL_ADC_ConfigChannel+0x1ae>
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2b11      	cmp	r3, #17
 8001674:	d003      	beq.n	800167e <HAL_ADC_ConfigChannel+0x1ae>
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2b12      	cmp	r3, #18
 800167c:	d11c      	bne.n	80016b8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800167e:	4b15      	ldr	r3, [pc, #84]	@ (80016d4 <HAL_ADC_ConfigChannel+0x204>)
 8001680:	6819      	ldr	r1, [r3, #0]
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b10      	cmp	r3, #16
 8001688:	d007      	beq.n	800169a <HAL_ADC_ConfigChannel+0x1ca>
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b11      	cmp	r3, #17
 8001690:	d101      	bne.n	8001696 <HAL_ADC_ConfigChannel+0x1c6>
 8001692:	4b13      	ldr	r3, [pc, #76]	@ (80016e0 <HAL_ADC_ConfigChannel+0x210>)
 8001694:	e002      	b.n	800169c <HAL_ADC_ConfigChannel+0x1cc>
 8001696:	4b13      	ldr	r3, [pc, #76]	@ (80016e4 <HAL_ADC_ConfigChannel+0x214>)
 8001698:	e000      	b.n	800169c <HAL_ADC_ConfigChannel+0x1cc>
 800169a:	4b13      	ldr	r3, [pc, #76]	@ (80016e8 <HAL_ADC_ConfigChannel+0x218>)
 800169c:	4a0d      	ldr	r2, [pc, #52]	@ (80016d4 <HAL_ADC_ConfigChannel+0x204>)
 800169e:	400b      	ands	r3, r1
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	e009      	b.n	80016b8 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016a8:	2220      	movs	r2, #32
 80016aa:	431a      	orrs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 80016b0:	230f      	movs	r3, #15
 80016b2:	18fb      	adds	r3, r7, r3
 80016b4:	2201      	movs	r2, #1
 80016b6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2234      	movs	r2, #52	@ 0x34
 80016bc:	2100      	movs	r1, #0
 80016be:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80016c0:	230f      	movs	r3, #15
 80016c2:	18fb      	adds	r3, r7, r3
 80016c4:	781b      	ldrb	r3, [r3, #0]
}
 80016c6:	0018      	movs	r0, r3
 80016c8:	46bd      	mov	sp, r7
 80016ca:	b004      	add	sp, #16
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	46c0      	nop			@ (mov r8, r8)
 80016d0:	00001001 	.word	0x00001001
 80016d4:	40012708 	.word	0x40012708
 80016d8:	20000000 	.word	0x20000000
 80016dc:	000f4240 	.word	0x000f4240
 80016e0:	ffbfffff 	.word	0xffbfffff
 80016e4:	feffffff 	.word	0xfeffffff
 80016e8:	ff7fffff 	.word	0xff7fffff

080016ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e0f0      	b.n	80018e0 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2220      	movs	r2, #32
 8001702:	5c9b      	ldrb	r3, [r3, r2]
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	d103      	bne.n	8001712 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	0018      	movs	r0, r3
 800170e:	f7ff fb31 	bl	8000d74 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2101      	movs	r1, #1
 800171e:	430a      	orrs	r2, r1
 8001720:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001722:	f7ff fd67 	bl	80011f4 <HAL_GetTick>
 8001726:	0003      	movs	r3, r0
 8001728:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800172a:	e013      	b.n	8001754 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800172c:	f7ff fd62 	bl	80011f4 <HAL_GetTick>
 8001730:	0002      	movs	r2, r0
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b0a      	cmp	r3, #10
 8001738:	d90c      	bls.n	8001754 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800173e:	2280      	movs	r2, #128	@ 0x80
 8001740:	0292      	lsls	r2, r2, #10
 8001742:	431a      	orrs	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2220      	movs	r2, #32
 800174c:	2105      	movs	r1, #5
 800174e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e0c5      	b.n	80018e0 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2201      	movs	r2, #1
 800175c:	4013      	ands	r3, r2
 800175e:	d0e5      	beq.n	800172c <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2102      	movs	r1, #2
 800176c:	438a      	bics	r2, r1
 800176e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001770:	f7ff fd40 	bl	80011f4 <HAL_GetTick>
 8001774:	0003      	movs	r3, r0
 8001776:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001778:	e013      	b.n	80017a2 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800177a:	f7ff fd3b 	bl	80011f4 <HAL_GetTick>
 800177e:	0002      	movs	r2, r0
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b0a      	cmp	r3, #10
 8001786:	d90c      	bls.n	80017a2 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800178c:	2280      	movs	r2, #128	@ 0x80
 800178e:	0292      	lsls	r2, r2, #10
 8001790:	431a      	orrs	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2220      	movs	r2, #32
 800179a:	2105      	movs	r1, #5
 800179c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e09e      	b.n	80018e0 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2202      	movs	r2, #2
 80017aa:	4013      	ands	r3, r2
 80017ac:	d1e5      	bne.n	800177a <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	7e1b      	ldrb	r3, [r3, #24]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d108      	bne.n	80017c8 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2180      	movs	r1, #128	@ 0x80
 80017c2:	430a      	orrs	r2, r1
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	e007      	b.n	80017d8 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2180      	movs	r1, #128	@ 0x80
 80017d4:	438a      	bics	r2, r1
 80017d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	7e5b      	ldrb	r3, [r3, #25]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d108      	bne.n	80017f2 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2140      	movs	r1, #64	@ 0x40
 80017ec:	430a      	orrs	r2, r1
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	e007      	b.n	8001802 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2140      	movs	r1, #64	@ 0x40
 80017fe:	438a      	bics	r2, r1
 8001800:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	7e9b      	ldrb	r3, [r3, #26]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d108      	bne.n	800181c <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2120      	movs	r1, #32
 8001816:	430a      	orrs	r2, r1
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	e007      	b.n	800182c <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2120      	movs	r1, #32
 8001828:	438a      	bics	r2, r1
 800182a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	7edb      	ldrb	r3, [r3, #27]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d108      	bne.n	8001846 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2110      	movs	r1, #16
 8001840:	438a      	bics	r2, r1
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	e007      	b.n	8001856 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2110      	movs	r1, #16
 8001852:	430a      	orrs	r2, r1
 8001854:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	7f1b      	ldrb	r3, [r3, #28]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d108      	bne.n	8001870 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2108      	movs	r1, #8
 800186a:	430a      	orrs	r2, r1
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	e007      	b.n	8001880 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2108      	movs	r1, #8
 800187c:	438a      	bics	r2, r1
 800187e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	7f5b      	ldrb	r3, [r3, #29]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d108      	bne.n	800189a <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2104      	movs	r1, #4
 8001894:	430a      	orrs	r2, r1
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	e007      	b.n	80018aa <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2104      	movs	r1, #4
 80018a6:	438a      	bics	r2, r1
 80018a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689a      	ldr	r2, [r3, #8]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	431a      	orrs	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	431a      	orrs	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	431a      	orrs	r2, r3
 80018c0:	0011      	movs	r1, r2
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	1e5a      	subs	r2, r3, #1
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	430a      	orrs	r2, r1
 80018ce:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2220      	movs	r2, #32
 80018da:	2101      	movs	r1, #1
 80018dc:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	0018      	movs	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	b004      	add	sp, #16
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2220      	movs	r2, #32
 80018f4:	5c9b      	ldrb	r3, [r3, r2]
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d12f      	bne.n	800195c <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2220      	movs	r2, #32
 8001900:	2102      	movs	r1, #2
 8001902:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2101      	movs	r1, #1
 8001910:	438a      	bics	r2, r1
 8001912:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001914:	f7ff fc6e 	bl	80011f4 <HAL_GetTick>
 8001918:	0003      	movs	r3, r0
 800191a:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800191c:	e013      	b.n	8001946 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800191e:	f7ff fc69 	bl	80011f4 <HAL_GetTick>
 8001922:	0002      	movs	r2, r0
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b0a      	cmp	r3, #10
 800192a:	d90c      	bls.n	8001946 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001930:	2280      	movs	r2, #128	@ 0x80
 8001932:	0292      	lsls	r2, r2, #10
 8001934:	431a      	orrs	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2220      	movs	r2, #32
 800193e:	2105      	movs	r1, #5
 8001940:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e012      	b.n	800196c <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2201      	movs	r2, #1
 800194e:	4013      	ands	r3, r2
 8001950:	d1e5      	bne.n	800191e <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001958:	2300      	movs	r3, #0
 800195a:	e007      	b.n	800196c <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001960:	2280      	movs	r2, #128	@ 0x80
 8001962:	0312      	lsls	r2, r2, #12
 8001964:	431a      	orrs	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
  }
}
 800196c:	0018      	movs	r0, r3
 800196e:	46bd      	mov	sp, r7
 8001970:	b004      	add	sp, #16
 8001972:	bd80      	pop	{r7, pc}

08001974 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b088      	sub	sp, #32
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
 8001980:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001982:	201f      	movs	r0, #31
 8001984:	183b      	adds	r3, r7, r0
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	2120      	movs	r1, #32
 800198a:	5c52      	ldrb	r2, [r2, r1]
 800198c:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001996:	183b      	adds	r3, r7, r0
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d004      	beq.n	80019a8 <HAL_CAN_AddTxMessage+0x34>
 800199e:	183b      	adds	r3, r7, r0
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d000      	beq.n	80019a8 <HAL_CAN_AddTxMessage+0x34>
 80019a6:	e0ab      	b.n	8001b00 <HAL_CAN_AddTxMessage+0x18c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	2380      	movs	r3, #128	@ 0x80
 80019ac:	04db      	lsls	r3, r3, #19
 80019ae:	4013      	ands	r3, r2
 80019b0:	d10a      	bne.n	80019c8 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	2380      	movs	r3, #128	@ 0x80
 80019b6:	051b      	lsls	r3, r3, #20
 80019b8:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80019ba:	d105      	bne.n	80019c8 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	2380      	movs	r3, #128	@ 0x80
 80019c0:	055b      	lsls	r3, r3, #21
 80019c2:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80019c4:	d100      	bne.n	80019c8 <HAL_CAN_AddTxMessage+0x54>
 80019c6:	e092      	b.n	8001aee <HAL_CAN_AddTxMessage+0x17a>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	0e1b      	lsrs	r3, r3, #24
 80019cc:	2203      	movs	r2, #3
 80019ce:	4013      	ands	r3, r2
 80019d0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80019d2:	2201      	movs	r2, #1
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	409a      	lsls	r2, r3
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d10c      	bne.n	80019fe <HAL_CAN_AddTxMessage+0x8a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4311      	orrs	r1, r2
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	3218      	adds	r2, #24
 80019f8:	0112      	lsls	r2, r2, #4
 80019fa:	50d1      	str	r1, [r2, r3]
 80019fc:	e00f      	b.n	8001a1e <HAL_CAN_AddTxMessage+0xaa>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a08:	431a      	orrs	r2, r3
 8001a0a:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8001a14:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	3218      	adds	r2, #24
 8001a1a:	0112      	lsls	r2, r2, #4
 8001a1c:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6819      	ldr	r1, [r3, #0]
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	691a      	ldr	r2, [r3, #16]
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	3318      	adds	r3, #24
 8001a2a:	011b      	lsls	r3, r3, #4
 8001a2c:	18cb      	adds	r3, r1, r3
 8001a2e:	3304      	adds	r3, #4
 8001a30:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	7d1b      	ldrb	r3, [r3, #20]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d112      	bne.n	8001a60 <HAL_CAN_AddTxMessage+0xec>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	3318      	adds	r3, #24
 8001a42:	011b      	lsls	r3, r3, #4
 8001a44:	18d3      	adds	r3, r2, r3
 8001a46:	3304      	adds	r3, #4
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6819      	ldr	r1, [r3, #0]
 8001a4e:	2380      	movs	r3, #128	@ 0x80
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	431a      	orrs	r2, r3
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	3318      	adds	r3, #24
 8001a58:	011b      	lsls	r3, r3, #4
 8001a5a:	18cb      	adds	r3, r1, r3
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3307      	adds	r3, #7
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	061a      	lsls	r2, r3, #24
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3306      	adds	r3, #6
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	041b      	lsls	r3, r3, #16
 8001a70:	431a      	orrs	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3305      	adds	r3, #5
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	021b      	lsls	r3, r3, #8
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3304      	adds	r3, #4
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	0019      	movs	r1, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6818      	ldr	r0, [r3, #0]
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	6979      	ldr	r1, [r7, #20]
 8001a8c:	23c6      	movs	r3, #198	@ 0xc6
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	0109      	lsls	r1, r1, #4
 8001a92:	1841      	adds	r1, r0, r1
 8001a94:	18cb      	adds	r3, r1, r3
 8001a96:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3303      	adds	r3, #3
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	061a      	lsls	r2, r3, #24
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3302      	adds	r3, #2
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	041b      	lsls	r3, r3, #16
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	3301      	adds	r3, #1
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	021b      	lsls	r3, r3, #8
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	0019      	movs	r1, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6818      	ldr	r0, [r3, #0]
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	6979      	ldr	r1, [r7, #20]
 8001ac2:	23c4      	movs	r3, #196	@ 0xc4
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	0109      	lsls	r1, r1, #4
 8001ac8:	1841      	adds	r1, r0, r1
 8001aca:	18cb      	adds	r3, r1, r3
 8001acc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	3218      	adds	r2, #24
 8001ad6:	0112      	lsls	r2, r2, #4
 8001ad8:	58d2      	ldr	r2, [r2, r3]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2101      	movs	r1, #1
 8001ae0:	4311      	orrs	r1, r2
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	3218      	adds	r2, #24
 8001ae6:	0112      	lsls	r2, r2, #4
 8001ae8:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8001aea:	2300      	movs	r3, #0
 8001aec:	e010      	b.n	8001b10 <HAL_CAN_AddTxMessage+0x19c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af2:	2280      	movs	r2, #128	@ 0x80
 8001af4:	0392      	lsls	r2, r2, #14
 8001af6:	431a      	orrs	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e007      	b.n	8001b10 <HAL_CAN_AddTxMessage+0x19c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b04:	2280      	movs	r2, #128	@ 0x80
 8001b06:	02d2      	lsls	r2, r2, #11
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
  }
}
 8001b10:	0018      	movs	r0, r3
 8001b12:	46bd      	mov	sp, r7
 8001b14:	b008      	add	sp, #32
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	0002      	movs	r2, r0
 8001b20:	1dfb      	adds	r3, r7, #7
 8001b22:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b24:	1dfb      	adds	r3, r7, #7
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b2a:	d809      	bhi.n	8001b40 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b2c:	1dfb      	adds	r3, r7, #7
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	001a      	movs	r2, r3
 8001b32:	231f      	movs	r3, #31
 8001b34:	401a      	ands	r2, r3
 8001b36:	4b04      	ldr	r3, [pc, #16]	@ (8001b48 <__NVIC_EnableIRQ+0x30>)
 8001b38:	2101      	movs	r1, #1
 8001b3a:	4091      	lsls	r1, r2
 8001b3c:	000a      	movs	r2, r1
 8001b3e:	601a      	str	r2, [r3, #0]
  }
}
 8001b40:	46c0      	nop			@ (mov r8, r8)
 8001b42:	46bd      	mov	sp, r7
 8001b44:	b002      	add	sp, #8
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	e000e100 	.word	0xe000e100

08001b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b4c:	b590      	push	{r4, r7, lr}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	0002      	movs	r2, r0
 8001b54:	6039      	str	r1, [r7, #0]
 8001b56:	1dfb      	adds	r3, r7, #7
 8001b58:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b5a:	1dfb      	adds	r3, r7, #7
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b60:	d828      	bhi.n	8001bb4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b62:	4a2f      	ldr	r2, [pc, #188]	@ (8001c20 <__NVIC_SetPriority+0xd4>)
 8001b64:	1dfb      	adds	r3, r7, #7
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	b25b      	sxtb	r3, r3
 8001b6a:	089b      	lsrs	r3, r3, #2
 8001b6c:	33c0      	adds	r3, #192	@ 0xc0
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	589b      	ldr	r3, [r3, r2]
 8001b72:	1dfa      	adds	r2, r7, #7
 8001b74:	7812      	ldrb	r2, [r2, #0]
 8001b76:	0011      	movs	r1, r2
 8001b78:	2203      	movs	r2, #3
 8001b7a:	400a      	ands	r2, r1
 8001b7c:	00d2      	lsls	r2, r2, #3
 8001b7e:	21ff      	movs	r1, #255	@ 0xff
 8001b80:	4091      	lsls	r1, r2
 8001b82:	000a      	movs	r2, r1
 8001b84:	43d2      	mvns	r2, r2
 8001b86:	401a      	ands	r2, r3
 8001b88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	019b      	lsls	r3, r3, #6
 8001b8e:	22ff      	movs	r2, #255	@ 0xff
 8001b90:	401a      	ands	r2, r3
 8001b92:	1dfb      	adds	r3, r7, #7
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	0018      	movs	r0, r3
 8001b98:	2303      	movs	r3, #3
 8001b9a:	4003      	ands	r3, r0
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ba0:	481f      	ldr	r0, [pc, #124]	@ (8001c20 <__NVIC_SetPriority+0xd4>)
 8001ba2:	1dfb      	adds	r3, r7, #7
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	b25b      	sxtb	r3, r3
 8001ba8:	089b      	lsrs	r3, r3, #2
 8001baa:	430a      	orrs	r2, r1
 8001bac:	33c0      	adds	r3, #192	@ 0xc0
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001bb2:	e031      	b.n	8001c18 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bb4:	4a1b      	ldr	r2, [pc, #108]	@ (8001c24 <__NVIC_SetPriority+0xd8>)
 8001bb6:	1dfb      	adds	r3, r7, #7
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	0019      	movs	r1, r3
 8001bbc:	230f      	movs	r3, #15
 8001bbe:	400b      	ands	r3, r1
 8001bc0:	3b08      	subs	r3, #8
 8001bc2:	089b      	lsrs	r3, r3, #2
 8001bc4:	3306      	adds	r3, #6
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	18d3      	adds	r3, r2, r3
 8001bca:	3304      	adds	r3, #4
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	1dfa      	adds	r2, r7, #7
 8001bd0:	7812      	ldrb	r2, [r2, #0]
 8001bd2:	0011      	movs	r1, r2
 8001bd4:	2203      	movs	r2, #3
 8001bd6:	400a      	ands	r2, r1
 8001bd8:	00d2      	lsls	r2, r2, #3
 8001bda:	21ff      	movs	r1, #255	@ 0xff
 8001bdc:	4091      	lsls	r1, r2
 8001bde:	000a      	movs	r2, r1
 8001be0:	43d2      	mvns	r2, r2
 8001be2:	401a      	ands	r2, r3
 8001be4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	019b      	lsls	r3, r3, #6
 8001bea:	22ff      	movs	r2, #255	@ 0xff
 8001bec:	401a      	ands	r2, r3
 8001bee:	1dfb      	adds	r3, r7, #7
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	0018      	movs	r0, r3
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	4003      	ands	r3, r0
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bfc:	4809      	ldr	r0, [pc, #36]	@ (8001c24 <__NVIC_SetPriority+0xd8>)
 8001bfe:	1dfb      	adds	r3, r7, #7
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	001c      	movs	r4, r3
 8001c04:	230f      	movs	r3, #15
 8001c06:	4023      	ands	r3, r4
 8001c08:	3b08      	subs	r3, #8
 8001c0a:	089b      	lsrs	r3, r3, #2
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	3306      	adds	r3, #6
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	18c3      	adds	r3, r0, r3
 8001c14:	3304      	adds	r3, #4
 8001c16:	601a      	str	r2, [r3, #0]
}
 8001c18:	46c0      	nop			@ (mov r8, r8)
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	b003      	add	sp, #12
 8001c1e:	bd90      	pop	{r4, r7, pc}
 8001c20:	e000e100 	.word	0xe000e100
 8001c24:	e000ed00 	.word	0xe000ed00

08001c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	1e5a      	subs	r2, r3, #1
 8001c34:	2380      	movs	r3, #128	@ 0x80
 8001c36:	045b      	lsls	r3, r3, #17
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d301      	bcc.n	8001c40 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e010      	b.n	8001c62 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c40:	4b0a      	ldr	r3, [pc, #40]	@ (8001c6c <SysTick_Config+0x44>)
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	3a01      	subs	r2, #1
 8001c46:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c48:	2301      	movs	r3, #1
 8001c4a:	425b      	negs	r3, r3
 8001c4c:	2103      	movs	r1, #3
 8001c4e:	0018      	movs	r0, r3
 8001c50:	f7ff ff7c 	bl	8001b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c54:	4b05      	ldr	r3, [pc, #20]	@ (8001c6c <SysTick_Config+0x44>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c5a:	4b04      	ldr	r3, [pc, #16]	@ (8001c6c <SysTick_Config+0x44>)
 8001c5c:	2207      	movs	r2, #7
 8001c5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	0018      	movs	r0, r3
 8001c64:	46bd      	mov	sp, r7
 8001c66:	b002      	add	sp, #8
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	46c0      	nop			@ (mov r8, r8)
 8001c6c:	e000e010 	.word	0xe000e010

08001c70 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60b9      	str	r1, [r7, #8]
 8001c78:	607a      	str	r2, [r7, #4]
 8001c7a:	210f      	movs	r1, #15
 8001c7c:	187b      	adds	r3, r7, r1
 8001c7e:	1c02      	adds	r2, r0, #0
 8001c80:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001c82:	68ba      	ldr	r2, [r7, #8]
 8001c84:	187b      	adds	r3, r7, r1
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	b25b      	sxtb	r3, r3
 8001c8a:	0011      	movs	r1, r2
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	f7ff ff5d 	bl	8001b4c <__NVIC_SetPriority>
}
 8001c92:	46c0      	nop			@ (mov r8, r8)
 8001c94:	46bd      	mov	sp, r7
 8001c96:	b004      	add	sp, #16
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b082      	sub	sp, #8
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	0002      	movs	r2, r0
 8001ca2:	1dfb      	adds	r3, r7, #7
 8001ca4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ca6:	1dfb      	adds	r3, r7, #7
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	b25b      	sxtb	r3, r3
 8001cac:	0018      	movs	r0, r3
 8001cae:	f7ff ff33 	bl	8001b18 <__NVIC_EnableIRQ>
}
 8001cb2:	46c0      	nop			@ (mov r8, r8)
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	b002      	add	sp, #8
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	f7ff ffaf 	bl	8001c28 <SysTick_Config>
 8001cca:	0003      	movs	r3, r0
}
 8001ccc:	0018      	movs	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	b002      	add	sp, #8
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e036      	b.n	8001d58 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2221      	movs	r2, #33	@ 0x21
 8001cee:	2102      	movs	r1, #2
 8001cf0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	4a18      	ldr	r2, [pc, #96]	@ (8001d60 <HAL_DMA_Init+0x8c>)
 8001cfe:	4013      	ands	r3, r2
 8001d00:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001d0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	695b      	ldr	r3, [r3, #20]
 8001d1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	69db      	ldr	r3, [r3, #28]
 8001d28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	f000 f906 	bl	8001f4c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2221      	movs	r2, #33	@ 0x21
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2220      	movs	r2, #32
 8001d52:	2100      	movs	r1, #0
 8001d54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	0018      	movs	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	b004      	add	sp, #16
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	ffffc00f 	.word	0xffffc00f

08001d64 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d6c:	210f      	movs	r1, #15
 8001d6e:	187b      	adds	r3, r7, r1
 8001d70:	2200      	movs	r2, #0
 8001d72:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2221      	movs	r2, #33	@ 0x21
 8001d78:	5c9b      	ldrb	r3, [r3, r2]
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d006      	beq.n	8001d8e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2204      	movs	r2, #4
 8001d84:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001d86:	187b      	adds	r3, r7, r1
 8001d88:	2201      	movs	r2, #1
 8001d8a:	701a      	strb	r2, [r3, #0]
 8001d8c:	e028      	b.n	8001de0 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	210e      	movs	r1, #14
 8001d9a:	438a      	bics	r2, r1
 8001d9c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2101      	movs	r1, #1
 8001daa:	438a      	bics	r2, r1
 8001dac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001db6:	2101      	movs	r1, #1
 8001db8:	4091      	lsls	r1, r2
 8001dba:	000a      	movs	r2, r1
 8001dbc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2221      	movs	r2, #33	@ 0x21
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2220      	movs	r2, #32
 8001dca:	2100      	movs	r1, #0
 8001dcc:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d004      	beq.n	8001de0 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	0010      	movs	r0, r2
 8001dde:	4798      	blx	r3
    }
  }
  return status;
 8001de0:	230f      	movs	r3, #15
 8001de2:	18fb      	adds	r3, r7, r3
 8001de4:	781b      	ldrb	r3, [r3, #0]
}
 8001de6:	0018      	movs	r0, r3
 8001de8:	46bd      	mov	sp, r7
 8001dea:	b004      	add	sp, #16
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b084      	sub	sp, #16
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0a:	2204      	movs	r2, #4
 8001e0c:	409a      	lsls	r2, r3
 8001e0e:	0013      	movs	r3, r2
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	4013      	ands	r3, r2
 8001e14:	d024      	beq.n	8001e60 <HAL_DMA_IRQHandler+0x72>
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	2204      	movs	r2, #4
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	d020      	beq.n	8001e60 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2220      	movs	r2, #32
 8001e26:	4013      	ands	r3, r2
 8001e28:	d107      	bne.n	8001e3a <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2104      	movs	r1, #4
 8001e36:	438a      	bics	r2, r1
 8001e38:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e42:	2104      	movs	r1, #4
 8001e44:	4091      	lsls	r1, r2
 8001e46:	000a      	movs	r2, r1
 8001e48:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d100      	bne.n	8001e54 <HAL_DMA_IRQHandler+0x66>
 8001e52:	e06a      	b.n	8001f2a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	0010      	movs	r0, r2
 8001e5c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001e5e:	e064      	b.n	8001f2a <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e64:	2202      	movs	r2, #2
 8001e66:	409a      	lsls	r2, r3
 8001e68:	0013      	movs	r3, r2
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d02b      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0xda>
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	2202      	movs	r2, #2
 8001e74:	4013      	ands	r3, r2
 8001e76:	d027      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2220      	movs	r2, #32
 8001e80:	4013      	ands	r3, r2
 8001e82:	d10b      	bne.n	8001e9c <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	210a      	movs	r1, #10
 8001e90:	438a      	bics	r2, r1
 8001e92:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2221      	movs	r2, #33	@ 0x21
 8001e98:	2101      	movs	r1, #1
 8001e9a:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ea4:	2102      	movs	r1, #2
 8001ea6:	4091      	lsls	r1, r2
 8001ea8:	000a      	movs	r2, r1
 8001eaa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2220      	movs	r2, #32
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d036      	beq.n	8001f2a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	0010      	movs	r0, r2
 8001ec4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001ec6:	e030      	b.n	8001f2a <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ecc:	2208      	movs	r2, #8
 8001ece:	409a      	lsls	r2, r3
 8001ed0:	0013      	movs	r3, r2
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d028      	beq.n	8001f2a <HAL_DMA_IRQHandler+0x13c>
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	2208      	movs	r2, #8
 8001edc:	4013      	ands	r3, r2
 8001ede:	d024      	beq.n	8001f2a <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	210e      	movs	r1, #14
 8001eec:	438a      	bics	r2, r1
 8001eee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ef8:	2101      	movs	r1, #1
 8001efa:	4091      	lsls	r1, r2
 8001efc:	000a      	movs	r2, r1
 8001efe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2221      	movs	r2, #33	@ 0x21
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2220      	movs	r2, #32
 8001f12:	2100      	movs	r1, #0
 8001f14:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d005      	beq.n	8001f2a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	0010      	movs	r0, r2
 8001f26:	4798      	blx	r3
    }
  }
}
 8001f28:	e7ff      	b.n	8001f2a <HAL_DMA_IRQHandler+0x13c>
 8001f2a:	46c0      	nop			@ (mov r8, r8)
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	b004      	add	sp, #16
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b082      	sub	sp, #8
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2221      	movs	r2, #33	@ 0x21
 8001f3e:	5c9b      	ldrb	r3, [r3, r2]
 8001f40:	b2db      	uxtb	r3, r3
}
 8001f42:	0018      	movs	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	b002      	add	sp, #8
 8001f48:	bd80      	pop	{r7, pc}
	...

08001f4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a08      	ldr	r2, [pc, #32]	@ (8001f7c <DMA_CalcBaseAndBitshift+0x30>)
 8001f5a:	4694      	mov	ip, r2
 8001f5c:	4463      	add	r3, ip
 8001f5e:	2114      	movs	r1, #20
 8001f60:	0018      	movs	r0, r3
 8001f62:	f7fe f8db 	bl	800011c <__udivsi3>
 8001f66:	0003      	movs	r3, r0
 8001f68:	009a      	lsls	r2, r3, #2
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a03      	ldr	r2, [pc, #12]	@ (8001f80 <DMA_CalcBaseAndBitshift+0x34>)
 8001f72:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8001f74:	46c0      	nop			@ (mov r8, r8)
 8001f76:	46bd      	mov	sp, r7
 8001f78:	b002      	add	sp, #8
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	bffdfff8 	.word	0xbffdfff8
 8001f80:	40020000 	.word	0x40020000

08001f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f92:	e149      	b.n	8002228 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2101      	movs	r1, #1
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	4091      	lsls	r1, r2
 8001f9e:	000a      	movs	r2, r1
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d100      	bne.n	8001fac <HAL_GPIO_Init+0x28>
 8001faa:	e13a      	b.n	8002222 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2203      	movs	r2, #3
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d005      	beq.n	8001fc4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2203      	movs	r2, #3
 8001fbe:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d130      	bne.n	8002026 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	2203      	movs	r2, #3
 8001fd0:	409a      	lsls	r2, r3
 8001fd2:	0013      	movs	r3, r2
 8001fd4:	43da      	mvns	r2, r3
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	68da      	ldr	r2, [r3, #12]
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	409a      	lsls	r2, r3
 8001fe6:	0013      	movs	r3, r2
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	409a      	lsls	r2, r3
 8002000:	0013      	movs	r3, r2
 8002002:	43da      	mvns	r2, r3
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	4013      	ands	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	091b      	lsrs	r3, r3, #4
 8002010:	2201      	movs	r2, #1
 8002012:	401a      	ands	r2, r3
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	409a      	lsls	r2, r3
 8002018:	0013      	movs	r3, r2
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	4313      	orrs	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2203      	movs	r2, #3
 800202c:	4013      	ands	r3, r2
 800202e:	2b03      	cmp	r3, #3
 8002030:	d017      	beq.n	8002062 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	2203      	movs	r2, #3
 800203e:	409a      	lsls	r2, r3
 8002040:	0013      	movs	r3, r2
 8002042:	43da      	mvns	r2, r3
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	4013      	ands	r3, r2
 8002048:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	689a      	ldr	r2, [r3, #8]
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	409a      	lsls	r2, r3
 8002054:	0013      	movs	r3, r2
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	4313      	orrs	r3, r2
 800205a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2203      	movs	r2, #3
 8002068:	4013      	ands	r3, r2
 800206a:	2b02      	cmp	r3, #2
 800206c:	d123      	bne.n	80020b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	08da      	lsrs	r2, r3, #3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	3208      	adds	r2, #8
 8002076:	0092      	lsls	r2, r2, #2
 8002078:	58d3      	ldr	r3, [r2, r3]
 800207a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	2207      	movs	r2, #7
 8002080:	4013      	ands	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	220f      	movs	r2, #15
 8002086:	409a      	lsls	r2, r3
 8002088:	0013      	movs	r3, r2
 800208a:	43da      	mvns	r2, r3
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	4013      	ands	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	691a      	ldr	r2, [r3, #16]
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	2107      	movs	r1, #7
 800209a:	400b      	ands	r3, r1
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	409a      	lsls	r2, r3
 80020a0:	0013      	movs	r3, r2
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	08da      	lsrs	r2, r3, #3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	3208      	adds	r2, #8
 80020b0:	0092      	lsls	r2, r2, #2
 80020b2:	6939      	ldr	r1, [r7, #16]
 80020b4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	2203      	movs	r2, #3
 80020c2:	409a      	lsls	r2, r3
 80020c4:	0013      	movs	r3, r2
 80020c6:	43da      	mvns	r2, r3
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	4013      	ands	r3, r2
 80020cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2203      	movs	r2, #3
 80020d4:	401a      	ands	r2, r3
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	409a      	lsls	r2, r3
 80020dc:	0013      	movs	r3, r2
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	23c0      	movs	r3, #192	@ 0xc0
 80020f0:	029b      	lsls	r3, r3, #10
 80020f2:	4013      	ands	r3, r2
 80020f4:	d100      	bne.n	80020f8 <HAL_GPIO_Init+0x174>
 80020f6:	e094      	b.n	8002222 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020f8:	4b51      	ldr	r3, [pc, #324]	@ (8002240 <HAL_GPIO_Init+0x2bc>)
 80020fa:	699a      	ldr	r2, [r3, #24]
 80020fc:	4b50      	ldr	r3, [pc, #320]	@ (8002240 <HAL_GPIO_Init+0x2bc>)
 80020fe:	2101      	movs	r1, #1
 8002100:	430a      	orrs	r2, r1
 8002102:	619a      	str	r2, [r3, #24]
 8002104:	4b4e      	ldr	r3, [pc, #312]	@ (8002240 <HAL_GPIO_Init+0x2bc>)
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	2201      	movs	r2, #1
 800210a:	4013      	ands	r3, r2
 800210c:	60bb      	str	r3, [r7, #8]
 800210e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002110:	4a4c      	ldr	r2, [pc, #304]	@ (8002244 <HAL_GPIO_Init+0x2c0>)
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	089b      	lsrs	r3, r3, #2
 8002116:	3302      	adds	r3, #2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	589b      	ldr	r3, [r3, r2]
 800211c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	2203      	movs	r2, #3
 8002122:	4013      	ands	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	220f      	movs	r2, #15
 8002128:	409a      	lsls	r2, r3
 800212a:	0013      	movs	r3, r2
 800212c:	43da      	mvns	r2, r3
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4013      	ands	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	2390      	movs	r3, #144	@ 0x90
 8002138:	05db      	lsls	r3, r3, #23
 800213a:	429a      	cmp	r2, r3
 800213c:	d00d      	beq.n	800215a <HAL_GPIO_Init+0x1d6>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a41      	ldr	r2, [pc, #260]	@ (8002248 <HAL_GPIO_Init+0x2c4>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d007      	beq.n	8002156 <HAL_GPIO_Init+0x1d2>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a40      	ldr	r2, [pc, #256]	@ (800224c <HAL_GPIO_Init+0x2c8>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d101      	bne.n	8002152 <HAL_GPIO_Init+0x1ce>
 800214e:	2302      	movs	r3, #2
 8002150:	e004      	b.n	800215c <HAL_GPIO_Init+0x1d8>
 8002152:	2305      	movs	r3, #5
 8002154:	e002      	b.n	800215c <HAL_GPIO_Init+0x1d8>
 8002156:	2301      	movs	r3, #1
 8002158:	e000      	b.n	800215c <HAL_GPIO_Init+0x1d8>
 800215a:	2300      	movs	r3, #0
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	2103      	movs	r1, #3
 8002160:	400a      	ands	r2, r1
 8002162:	0092      	lsls	r2, r2, #2
 8002164:	4093      	lsls	r3, r2
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	4313      	orrs	r3, r2
 800216a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800216c:	4935      	ldr	r1, [pc, #212]	@ (8002244 <HAL_GPIO_Init+0x2c0>)
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	089b      	lsrs	r3, r3, #2
 8002172:	3302      	adds	r3, #2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800217a:	4b35      	ldr	r3, [pc, #212]	@ (8002250 <HAL_GPIO_Init+0x2cc>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	43da      	mvns	r2, r3
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4013      	ands	r3, r2
 8002188:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	2380      	movs	r3, #128	@ 0x80
 8002190:	035b      	lsls	r3, r3, #13
 8002192:	4013      	ands	r3, r2
 8002194:	d003      	beq.n	800219e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	4313      	orrs	r3, r2
 800219c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800219e:	4b2c      	ldr	r3, [pc, #176]	@ (8002250 <HAL_GPIO_Init+0x2cc>)
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80021a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002250 <HAL_GPIO_Init+0x2cc>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	43da      	mvns	r2, r3
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	4013      	ands	r3, r2
 80021b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	2380      	movs	r3, #128	@ 0x80
 80021ba:	039b      	lsls	r3, r3, #14
 80021bc:	4013      	ands	r3, r2
 80021be:	d003      	beq.n	80021c8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80021c8:	4b21      	ldr	r3, [pc, #132]	@ (8002250 <HAL_GPIO_Init+0x2cc>)
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80021ce:	4b20      	ldr	r3, [pc, #128]	@ (8002250 <HAL_GPIO_Init+0x2cc>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	43da      	mvns	r2, r3
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	4013      	ands	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	2380      	movs	r3, #128	@ 0x80
 80021e4:	029b      	lsls	r3, r3, #10
 80021e6:	4013      	ands	r3, r2
 80021e8:	d003      	beq.n	80021f2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80021f2:	4b17      	ldr	r3, [pc, #92]	@ (8002250 <HAL_GPIO_Init+0x2cc>)
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80021f8:	4b15      	ldr	r3, [pc, #84]	@ (8002250 <HAL_GPIO_Init+0x2cc>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	43da      	mvns	r2, r3
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	4013      	ands	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	2380      	movs	r3, #128	@ 0x80
 800220e:	025b      	lsls	r3, r3, #9
 8002210:	4013      	ands	r3, r2
 8002212:	d003      	beq.n	800221c <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	4313      	orrs	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800221c:	4b0c      	ldr	r3, [pc, #48]	@ (8002250 <HAL_GPIO_Init+0x2cc>)
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	3301      	adds	r3, #1
 8002226:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	40da      	lsrs	r2, r3
 8002230:	1e13      	subs	r3, r2, #0
 8002232:	d000      	beq.n	8002236 <HAL_GPIO_Init+0x2b2>
 8002234:	e6ae      	b.n	8001f94 <HAL_GPIO_Init+0x10>
  } 
}
 8002236:	46c0      	nop			@ (mov r8, r8)
 8002238:	46c0      	nop			@ (mov r8, r8)
 800223a:	46bd      	mov	sp, r7
 800223c:	b006      	add	sp, #24
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40021000 	.word	0x40021000
 8002244:	40010000 	.word	0x40010000
 8002248:	48000400 	.word	0x48000400
 800224c:	48000800 	.word	0x48000800
 8002250:	40010400 	.word	0x40010400

08002254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	0008      	movs	r0, r1
 800225e:	0011      	movs	r1, r2
 8002260:	1cbb      	adds	r3, r7, #2
 8002262:	1c02      	adds	r2, r0, #0
 8002264:	801a      	strh	r2, [r3, #0]
 8002266:	1c7b      	adds	r3, r7, #1
 8002268:	1c0a      	adds	r2, r1, #0
 800226a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800226c:	1c7b      	adds	r3, r7, #1
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d004      	beq.n	800227e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002274:	1cbb      	adds	r3, r7, #2
 8002276:	881a      	ldrh	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800227c:	e003      	b.n	8002286 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800227e:	1cbb      	adds	r3, r7, #2
 8002280:	881a      	ldrh	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002286:	46c0      	nop			@ (mov r8, r8)
 8002288:	46bd      	mov	sp, r7
 800228a:	b002      	add	sp, #8
 800228c:	bd80      	pop	{r7, pc}
	...

08002290 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e0a8      	b.n	80023f4 <HAL_I2C_Init+0x164>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2241      	movs	r2, #65	@ 0x41
 80022a6:	5c9b      	ldrb	r3, [r3, r2]
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d12d      	bne.n	800230a <HAL_I2C_Init+0x7a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2240      	movs	r2, #64	@ 0x40
 80022b2:	2100      	movs	r1, #0
 80022b4:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a50      	ldr	r2, [pc, #320]	@ (80023fc <HAL_I2C_Init+0x16c>)
 80022ba:	655a      	str	r2, [r3, #84]	@ 0x54
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a50      	ldr	r2, [pc, #320]	@ (8002400 <HAL_I2C_Init+0x170>)
 80022c0:	659a      	str	r2, [r3, #88]	@ 0x58
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a4f      	ldr	r2, [pc, #316]	@ (8002404 <HAL_I2C_Init+0x174>)
 80022c6:	65da      	str	r2, [r3, #92]	@ 0x5c
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a4f      	ldr	r2, [pc, #316]	@ (8002408 <HAL_I2C_Init+0x178>)
 80022cc:	661a      	str	r2, [r3, #96]	@ 0x60
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a4e      	ldr	r2, [pc, #312]	@ (800240c <HAL_I2C_Init+0x17c>)
 80022d2:	665a      	str	r2, [r3, #100]	@ 0x64
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a4e      	ldr	r2, [pc, #312]	@ (8002410 <HAL_I2C_Init+0x180>)
 80022d8:	669a      	str	r2, [r3, #104]	@ 0x68
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a4d      	ldr	r2, [pc, #308]	@ (8002414 <HAL_I2C_Init+0x184>)
 80022de:	66da      	str	r2, [r3, #108]	@ 0x6c
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a4d      	ldr	r2, [pc, #308]	@ (8002418 <HAL_I2C_Init+0x188>)
 80022e4:	671a      	str	r2, [r3, #112]	@ 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a4c      	ldr	r2, [pc, #304]	@ (800241c <HAL_I2C_Init+0x18c>)
 80022ea:	675a      	str	r2, [r3, #116]	@ 0x74
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a4c      	ldr	r2, [pc, #304]	@ (8002420 <HAL_I2C_Init+0x190>)
 80022f0:	679a      	str	r2, [r3, #120]	@ 0x78

    if (hi2c->MspInitCallback == NULL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d102      	bne.n	8002300 <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a49      	ldr	r2, [pc, #292]	@ (8002424 <HAL_I2C_Init+0x194>)
 80022fe:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	0010      	movs	r0, r2
 8002308:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2241      	movs	r2, #65	@ 0x41
 800230e:	2124      	movs	r1, #36	@ 0x24
 8002310:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2101      	movs	r1, #1
 800231e:	438a      	bics	r2, r1
 8002320:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685a      	ldr	r2, [r3, #4]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	493f      	ldr	r1, [pc, #252]	@ (8002428 <HAL_I2C_Init+0x198>)
 800232c:	400a      	ands	r2, r1
 800232e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	689a      	ldr	r2, [r3, #8]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	493c      	ldr	r1, [pc, #240]	@ (800242c <HAL_I2C_Init+0x19c>)
 800233c:	400a      	ands	r2, r1
 800233e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d108      	bne.n	800235a <HAL_I2C_Init+0xca>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2180      	movs	r1, #128	@ 0x80
 8002352:	0209      	lsls	r1, r1, #8
 8002354:	430a      	orrs	r2, r1
 8002356:	609a      	str	r2, [r3, #8]
 8002358:	e007      	b.n	800236a <HAL_I2C_Init+0xda>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2184      	movs	r1, #132	@ 0x84
 8002364:	0209      	lsls	r1, r1, #8
 8002366:	430a      	orrs	r2, r1
 8002368:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	2b02      	cmp	r3, #2
 8002370:	d104      	bne.n	800237c <HAL_I2C_Init+0xec>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2280      	movs	r2, #128	@ 0x80
 8002378:	0112      	lsls	r2, r2, #4
 800237a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	685a      	ldr	r2, [r3, #4]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	492a      	ldr	r1, [pc, #168]	@ (8002430 <HAL_I2C_Init+0x1a0>)
 8002388:	430a      	orrs	r2, r1
 800238a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4925      	ldr	r1, [pc, #148]	@ (800242c <HAL_I2C_Init+0x19c>)
 8002398:	400a      	ands	r2, r1
 800239a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	691a      	ldr	r2, [r3, #16]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	431a      	orrs	r2, r3
 80023a6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	69d9      	ldr	r1, [r3, #28]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a1a      	ldr	r2, [r3, #32]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2101      	movs	r1, #1
 80023d2:	430a      	orrs	r2, r1
 80023d4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2241      	movs	r2, #65	@ 0x41
 80023e0:	2120      	movs	r1, #32
 80023e2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2242      	movs	r2, #66	@ 0x42
 80023ee:	2100      	movs	r1, #0
 80023f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	0018      	movs	r0, r3
 80023f6:	46bd      	mov	sp, r7
 80023f8:	b002      	add	sp, #8
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	08002957 	.word	0x08002957
 8002400:	08002967 	.word	0x08002967
 8002404:	08002977 	.word	0x08002977
 8002408:	08002987 	.word	0x08002987
 800240c:	080029b7 	.word	0x080029b7
 8002410:	080029c7 	.word	0x080029c7
 8002414:	080029d7 	.word	0x080029d7
 8002418:	080029e7 	.word	0x080029e7
 800241c:	080029f7 	.word	0x080029f7
 8002420:	08002997 	.word	0x08002997
 8002424:	08000e11 	.word	0x08000e11
 8002428:	f0ffffff 	.word	0xf0ffffff
 800242c:	ffff7fff 	.word	0xffff7fff
 8002430:	02008000 	.word	0x02008000

08002434 <HAL_I2C_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_RegisterCallback(I2C_HandleTypeDef *hi2c, HAL_I2C_CallbackIDTypeDef CallbackID,
                                           pI2C_CallbackTypeDef pCallback)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	607a      	str	r2, [r7, #4]
 800243e:	230b      	movs	r3, #11
 8002440:	18fb      	adds	r3, r7, r3
 8002442:	1c0a      	adds	r2, r1, #0
 8002444:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002446:	2317      	movs	r3, #23
 8002448:	18fb      	adds	r3, r7, r3
 800244a:	2200      	movs	r2, #0
 800244c:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d108      	bne.n	8002466 <HAL_I2C_RegisterCallback+0x32>
  {
    /* Update the error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002458:	2280      	movs	r2, #128	@ 0x80
 800245a:	0052      	lsls	r2, r2, #1
 800245c:	431a      	orrs	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	645a      	str	r2, [r3, #68]	@ 0x44

    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e079      	b.n	800255a <HAL_I2C_RegisterCallback+0x126>
  }

  if (HAL_I2C_STATE_READY == hi2c->State)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2241      	movs	r2, #65	@ 0x41
 800246a:	5c9b      	ldrb	r3, [r3, r2]
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b20      	cmp	r3, #32
 8002470:	d142      	bne.n	80024f8 <HAL_I2C_RegisterCallback+0xc4>
  {
    switch (CallbackID)
 8002472:	230b      	movs	r3, #11
 8002474:	18fb      	adds	r3, r7, r3
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b0a      	cmp	r3, #10
 800247a:	d831      	bhi.n	80024e0 <HAL_I2C_RegisterCallback+0xac>
 800247c:	009a      	lsls	r2, r3, #2
 800247e:	4b39      	ldr	r3, [pc, #228]	@ (8002564 <HAL_I2C_RegisterCallback+0x130>)
 8002480:	18d3      	adds	r3, r2, r3
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	469f      	mov	pc, r3
    {
      case HAL_I2C_MASTER_TX_COMPLETE_CB_ID :
        hi2c->MasterTxCpltCallback = pCallback;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800248c:	e062      	b.n	8002554 <HAL_I2C_RegisterCallback+0x120>

      case HAL_I2C_MASTER_RX_COMPLETE_CB_ID :
        hi2c->MasterRxCpltCallback = pCallback;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8002494:	e05e      	b.n	8002554 <HAL_I2C_RegisterCallback+0x120>

      case HAL_I2C_SLAVE_TX_COMPLETE_CB_ID :
        hi2c->SlaveTxCpltCallback = pCallback;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800249c:	e05a      	b.n	8002554 <HAL_I2C_RegisterCallback+0x120>

      case HAL_I2C_SLAVE_RX_COMPLETE_CB_ID :
        hi2c->SlaveRxCpltCallback = pCallback;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80024a4:	e056      	b.n	8002554 <HAL_I2C_RegisterCallback+0x120>

      case HAL_I2C_LISTEN_COMPLETE_CB_ID :
        hi2c->ListenCpltCallback = pCallback;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80024ac:	e052      	b.n	8002554 <HAL_I2C_RegisterCallback+0x120>

      case HAL_I2C_MEM_TX_COMPLETE_CB_ID :
        hi2c->MemTxCpltCallback = pCallback;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80024b4:	e04e      	b.n	8002554 <HAL_I2C_RegisterCallback+0x120>

      case HAL_I2C_MEM_RX_COMPLETE_CB_ID :
        hi2c->MemRxCpltCallback = pCallback;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80024bc:	e04a      	b.n	8002554 <HAL_I2C_RegisterCallback+0x120>

      case HAL_I2C_ERROR_CB_ID :
        hi2c->ErrorCallback = pCallback;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80024c4:	e046      	b.n	8002554 <HAL_I2C_RegisterCallback+0x120>

      case HAL_I2C_ABORT_CB_ID :
        hi2c->AbortCpltCallback = pCallback;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80024cc:	e042      	b.n	8002554 <HAL_I2C_RegisterCallback+0x120>

      case HAL_I2C_MSPINIT_CB_ID :
        hi2c->MspInitCallback = pCallback;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80024d4:	e03e      	b.n	8002554 <HAL_I2C_RegisterCallback+0x120>

      case HAL_I2C_MSPDEINIT_CB_ID :
        hi2c->MspDeInitCallback = pCallback;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2180      	movs	r1, #128	@ 0x80
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	505a      	str	r2, [r3, r1]
        break;
 80024de:	e039      	b.n	8002554 <HAL_I2C_RegisterCallback+0x120>

      default :
        /* Update the error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e4:	2280      	movs	r2, #128	@ 0x80
 80024e6:	0052      	lsls	r2, r2, #1
 80024e8:	431a      	orrs	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Return error status */
        status =  HAL_ERROR;
 80024ee:	2317      	movs	r3, #23
 80024f0:	18fb      	adds	r3, r7, r3
 80024f2:	2201      	movs	r2, #1
 80024f4:	701a      	strb	r2, [r3, #0]
        break;
 80024f6:	e02d      	b.n	8002554 <HAL_I2C_RegisterCallback+0x120>
    }
  }
  else if (HAL_I2C_STATE_RESET == hi2c->State)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2241      	movs	r2, #65	@ 0x41
 80024fc:	5c9b      	ldrb	r3, [r3, r2]
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b00      	cmp	r3, #0
 8002502:	d11c      	bne.n	800253e <HAL_I2C_RegisterCallback+0x10a>
  {
    switch (CallbackID)
 8002504:	230b      	movs	r3, #11
 8002506:	18fb      	adds	r3, r7, r3
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b09      	cmp	r3, #9
 800250c:	d002      	beq.n	8002514 <HAL_I2C_RegisterCallback+0xe0>
 800250e:	2b0a      	cmp	r3, #10
 8002510:	d004      	beq.n	800251c <HAL_I2C_RegisterCallback+0xe8>
 8002512:	e008      	b.n	8002526 <HAL_I2C_RegisterCallback+0xf2>
    {
      case HAL_I2C_MSPINIT_CB_ID :
        hi2c->MspInitCallback = pCallback;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800251a:	e01b      	b.n	8002554 <HAL_I2C_RegisterCallback+0x120>

      case HAL_I2C_MSPDEINIT_CB_ID :
        hi2c->MspDeInitCallback = pCallback;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2180      	movs	r1, #128	@ 0x80
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	505a      	str	r2, [r3, r1]
        break;
 8002524:	e016      	b.n	8002554 <HAL_I2C_RegisterCallback+0x120>

      default :
        /* Update the error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800252a:	2280      	movs	r2, #128	@ 0x80
 800252c:	0052      	lsls	r2, r2, #1
 800252e:	431a      	orrs	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Return error status */
        status =  HAL_ERROR;
 8002534:	2317      	movs	r3, #23
 8002536:	18fb      	adds	r3, r7, r3
 8002538:	2201      	movs	r2, #1
 800253a:	701a      	strb	r2, [r3, #0]
        break;
 800253c:	e00a      	b.n	8002554 <HAL_I2C_RegisterCallback+0x120>
    }
  }
  else
  {
    /* Update the error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002542:	2280      	movs	r2, #128	@ 0x80
 8002544:	0052      	lsls	r2, r2, #1
 8002546:	431a      	orrs	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Return error status */
    status =  HAL_ERROR;
 800254c:	2317      	movs	r3, #23
 800254e:	18fb      	adds	r3, r7, r3
 8002550:	2201      	movs	r2, #1
 8002552:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002554:	2317      	movs	r3, #23
 8002556:	18fb      	adds	r3, r7, r3
 8002558:	781b      	ldrb	r3, [r3, #0]
}
 800255a:	0018      	movs	r0, r3
 800255c:	46bd      	mov	sp, r7
 800255e:	b006      	add	sp, #24
 8002560:	bd80      	pop	{r7, pc}
 8002562:	46c0      	nop			@ (mov r8, r8)
 8002564:	0800624c 	.word	0x0800624c

08002568 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002568:	b590      	push	{r4, r7, lr}
 800256a:	b089      	sub	sp, #36	@ 0x24
 800256c:	af02      	add	r7, sp, #8
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	0008      	movs	r0, r1
 8002572:	607a      	str	r2, [r7, #4]
 8002574:	0019      	movs	r1, r3
 8002576:	230a      	movs	r3, #10
 8002578:	18fb      	adds	r3, r7, r3
 800257a:	1c02      	adds	r2, r0, #0
 800257c:	801a      	strh	r2, [r3, #0]
 800257e:	2308      	movs	r3, #8
 8002580:	18fb      	adds	r3, r7, r3
 8002582:	1c0a      	adds	r2, r1, #0
 8002584:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2241      	movs	r2, #65	@ 0x41
 800258a:	5c9b      	ldrb	r3, [r3, r2]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b20      	cmp	r3, #32
 8002590:	d000      	beq.n	8002594 <HAL_I2C_Master_Transmit+0x2c>
 8002592:	e0e7      	b.n	8002764 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2240      	movs	r2, #64	@ 0x40
 8002598:	5c9b      	ldrb	r3, [r3, r2]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d101      	bne.n	80025a2 <HAL_I2C_Master_Transmit+0x3a>
 800259e:	2302      	movs	r3, #2
 80025a0:	e0e1      	b.n	8002766 <HAL_I2C_Master_Transmit+0x1fe>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2240      	movs	r2, #64	@ 0x40
 80025a6:	2101      	movs	r1, #1
 80025a8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025aa:	f7fe fe23 	bl	80011f4 <HAL_GetTick>
 80025ae:	0003      	movs	r3, r0
 80025b0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025b2:	2380      	movs	r3, #128	@ 0x80
 80025b4:	0219      	lsls	r1, r3, #8
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	2319      	movs	r3, #25
 80025be:	2201      	movs	r2, #1
 80025c0:	f001 fc54 	bl	8003e6c <I2C_WaitOnFlagUntilTimeout>
 80025c4:	1e03      	subs	r3, r0, #0
 80025c6:	d001      	beq.n	80025cc <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e0cc      	b.n	8002766 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2241      	movs	r2, #65	@ 0x41
 80025d0:	2121      	movs	r1, #33	@ 0x21
 80025d2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2242      	movs	r2, #66	@ 0x42
 80025d8:	2110      	movs	r1, #16
 80025da:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2208      	movs	r2, #8
 80025ec:	18ba      	adds	r2, r7, r2
 80025ee:	8812      	ldrh	r2, [r2, #0]
 80025f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	2bff      	cmp	r3, #255	@ 0xff
 8002600:	d911      	bls.n	8002626 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	22ff      	movs	r2, #255	@ 0xff
 8002606:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800260c:	b2da      	uxtb	r2, r3
 800260e:	2380      	movs	r3, #128	@ 0x80
 8002610:	045c      	lsls	r4, r3, #17
 8002612:	230a      	movs	r3, #10
 8002614:	18fb      	adds	r3, r7, r3
 8002616:	8819      	ldrh	r1, [r3, #0]
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	4b55      	ldr	r3, [pc, #340]	@ (8002770 <HAL_I2C_Master_Transmit+0x208>)
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	0023      	movs	r3, r4
 8002620:	f001 fdf4 	bl	800420c <I2C_TransferConfig>
 8002624:	e075      	b.n	8002712 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800262a:	b29a      	uxth	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002634:	b2da      	uxtb	r2, r3
 8002636:	2380      	movs	r3, #128	@ 0x80
 8002638:	049c      	lsls	r4, r3, #18
 800263a:	230a      	movs	r3, #10
 800263c:	18fb      	adds	r3, r7, r3
 800263e:	8819      	ldrh	r1, [r3, #0]
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	4b4b      	ldr	r3, [pc, #300]	@ (8002770 <HAL_I2C_Master_Transmit+0x208>)
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	0023      	movs	r3, r4
 8002648:	f001 fde0 	bl	800420c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800264c:	e061      	b.n	8002712 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	0018      	movs	r0, r3
 8002656:	f001 fc57 	bl	8003f08 <I2C_WaitOnTXISFlagUntilTimeout>
 800265a:	1e03      	subs	r3, r0, #0
 800265c:	d001      	beq.n	8002662 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e081      	b.n	8002766 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002666:	781a      	ldrb	r2, [r3, #0]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002672:	1c5a      	adds	r2, r3, #1
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800267c:	b29b      	uxth	r3, r3
 800267e:	3b01      	subs	r3, #1
 8002680:	b29a      	uxth	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800268a:	3b01      	subs	r3, #1
 800268c:	b29a      	uxth	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002696:	b29b      	uxth	r3, r3
 8002698:	2b00      	cmp	r3, #0
 800269a:	d03a      	beq.n	8002712 <HAL_I2C_Master_Transmit+0x1aa>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d136      	bne.n	8002712 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	0013      	movs	r3, r2
 80026ae:	2200      	movs	r2, #0
 80026b0:	2180      	movs	r1, #128	@ 0x80
 80026b2:	f001 fbdb 	bl	8003e6c <I2C_WaitOnFlagUntilTimeout>
 80026b6:	1e03      	subs	r3, r0, #0
 80026b8:	d001      	beq.n	80026be <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e053      	b.n	8002766 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	2bff      	cmp	r3, #255	@ 0xff
 80026c6:	d911      	bls.n	80026ec <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	22ff      	movs	r2, #255	@ 0xff
 80026cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	2380      	movs	r3, #128	@ 0x80
 80026d6:	045c      	lsls	r4, r3, #17
 80026d8:	230a      	movs	r3, #10
 80026da:	18fb      	adds	r3, r7, r3
 80026dc:	8819      	ldrh	r1, [r3, #0]
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	2300      	movs	r3, #0
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	0023      	movs	r3, r4
 80026e6:	f001 fd91 	bl	800420c <I2C_TransferConfig>
 80026ea:	e012      	b.n	8002712 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	2380      	movs	r3, #128	@ 0x80
 80026fe:	049c      	lsls	r4, r3, #18
 8002700:	230a      	movs	r3, #10
 8002702:	18fb      	adds	r3, r7, r3
 8002704:	8819      	ldrh	r1, [r3, #0]
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	2300      	movs	r3, #0
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	0023      	movs	r3, r4
 800270e:	f001 fd7d 	bl	800420c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002716:	b29b      	uxth	r3, r3
 8002718:	2b00      	cmp	r3, #0
 800271a:	d198      	bne.n	800264e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	0018      	movs	r0, r3
 8002724:	f001 fc36 	bl	8003f94 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002728:	1e03      	subs	r3, r0, #0
 800272a:	d001      	beq.n	8002730 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e01a      	b.n	8002766 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2220      	movs	r2, #32
 8002736:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	490c      	ldr	r1, [pc, #48]	@ (8002774 <HAL_I2C_Master_Transmit+0x20c>)
 8002744:	400a      	ands	r2, r1
 8002746:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2241      	movs	r2, #65	@ 0x41
 800274c:	2120      	movs	r1, #32
 800274e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2242      	movs	r2, #66	@ 0x42
 8002754:	2100      	movs	r1, #0
 8002756:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2240      	movs	r2, #64	@ 0x40
 800275c:	2100      	movs	r1, #0
 800275e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002760:	2300      	movs	r3, #0
 8002762:	e000      	b.n	8002766 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8002764:	2302      	movs	r3, #2
  }
}
 8002766:	0018      	movs	r0, r3
 8002768:	46bd      	mov	sp, r7
 800276a:	b007      	add	sp, #28
 800276c:	bd90      	pop	{r4, r7, pc}
 800276e:	46c0      	nop			@ (mov r8, r8)
 8002770:	80002000 	.word	0x80002000
 8002774:	fe00e800 	.word	0xfe00e800

08002778 <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
 8002778:	b590      	push	{r4, r7, lr}
 800277a:	b089      	sub	sp, #36	@ 0x24
 800277c:	af02      	add	r7, sp, #8
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	0008      	movs	r0, r1
 8002782:	607a      	str	r2, [r7, #4]
 8002784:	0019      	movs	r1, r3
 8002786:	230a      	movs	r3, #10
 8002788:	18fb      	adds	r3, r7, r3
 800278a:	1c02      	adds	r2, r0, #0
 800278c:	801a      	strh	r2, [r3, #0]
 800278e:	2308      	movs	r3, #8
 8002790:	18fb      	adds	r3, r7, r3
 8002792:	1c0a      	adds	r2, r1, #0
 8002794:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2241      	movs	r2, #65	@ 0x41
 800279a:	5c9b      	ldrb	r3, [r3, r2]
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b20      	cmp	r3, #32
 80027a0:	d15b      	bne.n	800285a <HAL_I2C_Master_Receive_IT+0xe2>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	699a      	ldr	r2, [r3, #24]
 80027a8:	2380      	movs	r3, #128	@ 0x80
 80027aa:	021b      	lsls	r3, r3, #8
 80027ac:	401a      	ands	r2, r3
 80027ae:	2380      	movs	r3, #128	@ 0x80
 80027b0:	021b      	lsls	r3, r3, #8
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d101      	bne.n	80027ba <HAL_I2C_Master_Receive_IT+0x42>
    {
      return HAL_BUSY;
 80027b6:	2302      	movs	r3, #2
 80027b8:	e050      	b.n	800285c <HAL_I2C_Master_Receive_IT+0xe4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2240      	movs	r2, #64	@ 0x40
 80027be:	5c9b      	ldrb	r3, [r3, r2]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d101      	bne.n	80027c8 <HAL_I2C_Master_Receive_IT+0x50>
 80027c4:	2302      	movs	r3, #2
 80027c6:	e049      	b.n	800285c <HAL_I2C_Master_Receive_IT+0xe4>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2240      	movs	r2, #64	@ 0x40
 80027cc:	2101      	movs	r1, #1
 80027ce:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2241      	movs	r2, #65	@ 0x41
 80027d4:	2122      	movs	r1, #34	@ 0x22
 80027d6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2242      	movs	r2, #66	@ 0x42
 80027dc:	2110      	movs	r1, #16
 80027de:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2208      	movs	r2, #8
 80027f0:	18ba      	adds	r2, r7, r2
 80027f2:	8812      	ldrh	r2, [r2, #0]
 80027f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	4a1a      	ldr	r2, [pc, #104]	@ (8002864 <HAL_I2C_Master_Receive_IT+0xec>)
 80027fa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4a1a      	ldr	r2, [pc, #104]	@ (8002868 <HAL_I2C_Master_Receive_IT+0xf0>)
 8002800:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002806:	b29b      	uxth	r3, r3
 8002808:	2bff      	cmp	r3, #255	@ 0xff
 800280a:	d906      	bls.n	800281a <HAL_I2C_Master_Receive_IT+0xa2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	22ff      	movs	r2, #255	@ 0xff
 8002810:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002812:	2380      	movs	r3, #128	@ 0x80
 8002814:	045b      	lsls	r3, r3, #17
 8002816:	617b      	str	r3, [r7, #20]
 8002818:	e007      	b.n	800282a <HAL_I2C_Master_Receive_IT+0xb2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800281e:	b29a      	uxth	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002824:	2380      	movs	r3, #128	@ 0x80
 8002826:	049b      	lsls	r3, r3, #18
 8002828:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800282e:	b2da      	uxtb	r2, r3
 8002830:	697c      	ldr	r4, [r7, #20]
 8002832:	230a      	movs	r3, #10
 8002834:	18fb      	adds	r3, r7, r3
 8002836:	8819      	ldrh	r1, [r3, #0]
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	4b0c      	ldr	r3, [pc, #48]	@ (800286c <HAL_I2C_Master_Receive_IT+0xf4>)
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	0023      	movs	r3, r4
 8002840:	f001 fce4 	bl	800420c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2240      	movs	r2, #64	@ 0x40
 8002848:	2100      	movs	r1, #0
 800284a:	5499      	strb	r1, [r3, r2]

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2102      	movs	r1, #2
 8002850:	0018      	movs	r0, r3
 8002852:	f001 fd15 	bl	8004280 <I2C_Enable_IRQ>

    return HAL_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	e000      	b.n	800285c <HAL_I2C_Master_Receive_IT+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800285a:	2302      	movs	r3, #2
  }
}
 800285c:	0018      	movs	r0, r3
 800285e:	46bd      	mov	sp, r7
 8002860:	b007      	add	sp, #28
 8002862:	bd90      	pop	{r4, r7, pc}
 8002864:	ffff0000 	.word	0xffff0000
 8002868:	08002a09 	.word	0x08002a09
 800286c:	80002400 	.word	0x80002400

08002870 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800288c:	2b00      	cmp	r3, #0
 800288e:	d005      	beq.n	800289c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002894:	68ba      	ldr	r2, [r7, #8]
 8002896:	68f9      	ldr	r1, [r7, #12]
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	4798      	blx	r3
  }
}
 800289c:	46c0      	nop			@ (mov r8, r8)
 800289e:	46bd      	mov	sp, r7
 80028a0:	b004      	add	sp, #16
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	2380      	movs	r3, #128	@ 0x80
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	4013      	ands	r3, r2
 80028c4:	d00e      	beq.n	80028e4 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	2280      	movs	r2, #128	@ 0x80
 80028ca:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80028cc:	d00a      	beq.n	80028e4 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d2:	2201      	movs	r2, #1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2280      	movs	r2, #128	@ 0x80
 80028e0:	0052      	lsls	r2, r2, #1
 80028e2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	2380      	movs	r3, #128	@ 0x80
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	4013      	ands	r3, r2
 80028ec:	d00e      	beq.n	800290c <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	2280      	movs	r2, #128	@ 0x80
 80028f2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80028f4:	d00a      	beq.n	800290c <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028fa:	2208      	movs	r2, #8
 80028fc:	431a      	orrs	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2280      	movs	r2, #128	@ 0x80
 8002908:	00d2      	lsls	r2, r2, #3
 800290a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	2380      	movs	r3, #128	@ 0x80
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4013      	ands	r3, r2
 8002914:	d00e      	beq.n	8002934 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	2280      	movs	r2, #128	@ 0x80
 800291a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800291c:	d00a      	beq.n	8002934 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002922:	2202      	movs	r2, #2
 8002924:	431a      	orrs	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2280      	movs	r2, #128	@ 0x80
 8002930:	0092      	lsls	r2, r2, #2
 8002932:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002938:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	220b      	movs	r2, #11
 800293e:	4013      	ands	r3, r2
 8002940:	d005      	beq.n	800294e <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	0011      	movs	r1, r2
 8002948:	0018      	movs	r0, r3
 800294a:	f001 f921 	bl	8003b90 <I2C_ITError>
  }
}
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	46bd      	mov	sp, r7
 8002952:	b006      	add	sp, #24
 8002954:	bd80      	pop	{r7, pc}

08002956 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b082      	sub	sp, #8
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800295e:	46c0      	nop			@ (mov r8, r8)
 8002960:	46bd      	mov	sp, r7
 8002962:	b002      	add	sp, #8
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b082      	sub	sp, #8
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800296e:	46c0      	nop			@ (mov r8, r8)
 8002970:	46bd      	mov	sp, r7
 8002972:	b002      	add	sp, #8
 8002974:	bd80      	pop	{r7, pc}

08002976 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b082      	sub	sp, #8
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800297e:	46c0      	nop			@ (mov r8, r8)
 8002980:	46bd      	mov	sp, r7
 8002982:	b002      	add	sp, #8
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b082      	sub	sp, #8
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800298e:	46c0      	nop			@ (mov r8, r8)
 8002990:	46bd      	mov	sp, r7
 8002992:	b002      	add	sp, #8
 8002994:	bd80      	pop	{r7, pc}

08002996 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b082      	sub	sp, #8
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	0008      	movs	r0, r1
 80029a0:	0011      	movs	r1, r2
 80029a2:	1cfb      	adds	r3, r7, #3
 80029a4:	1c02      	adds	r2, r0, #0
 80029a6:	701a      	strb	r2, [r3, #0]
 80029a8:	003b      	movs	r3, r7
 80029aa:	1c0a      	adds	r2, r1, #0
 80029ac:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80029ae:	46c0      	nop			@ (mov r8, r8)
 80029b0:	46bd      	mov	sp, r7
 80029b2:	b002      	add	sp, #8
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b082      	sub	sp, #8
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80029be:	46c0      	nop			@ (mov r8, r8)
 80029c0:	46bd      	mov	sp, r7
 80029c2:	b002      	add	sp, #8
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b082      	sub	sp, #8
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80029ce:	46c0      	nop			@ (mov r8, r8)
 80029d0:	46bd      	mov	sp, r7
 80029d2:	b002      	add	sp, #8
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b082      	sub	sp, #8
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80029de:	46c0      	nop			@ (mov r8, r8)
 80029e0:	46bd      	mov	sp, r7
 80029e2:	b002      	add	sp, #8
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b082      	sub	sp, #8
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80029ee:	46c0      	nop			@ (mov r8, r8)
 80029f0:	46bd      	mov	sp, r7
 80029f2:	b002      	add	sp, #8
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b082      	sub	sp, #8
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80029fe:	46c0      	nop			@ (mov r8, r8)
 8002a00:	46bd      	mov	sp, r7
 8002a02:	b002      	add	sp, #8
 8002a04:	bd80      	pop	{r7, pc}
	...

08002a08 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002a08:	b590      	push	{r4, r7, lr}
 8002a0a:	b089      	sub	sp, #36	@ 0x24
 8002a0c:	af02      	add	r7, sp, #8
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2240      	movs	r2, #64	@ 0x40
 8002a1c:	5c9b      	ldrb	r3, [r3, r2]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d101      	bne.n	8002a26 <I2C_Master_ISR_IT+0x1e>
 8002a22:	2302      	movs	r3, #2
 8002a24:	e113      	b.n	8002c4e <I2C_Master_ISR_IT+0x246>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2240      	movs	r2, #64	@ 0x40
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2210      	movs	r2, #16
 8002a32:	4013      	ands	r3, r2
 8002a34:	d012      	beq.n	8002a5c <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2210      	movs	r2, #16
 8002a3a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002a3c:	d00e      	beq.n	8002a5c <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2210      	movs	r2, #16
 8002a44:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a4a:	2204      	movs	r2, #4
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	0018      	movs	r0, r3
 8002a56:	f001 f9c8 	bl	8003dea <I2C_Flush_TXDR>
 8002a5a:	e0e5      	b.n	8002c28 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	2204      	movs	r2, #4
 8002a60:	4013      	ands	r3, r2
 8002a62:	d021      	beq.n	8002aa8 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2204      	movs	r2, #4
 8002a68:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002a6a:	d01d      	beq.n	8002aa8 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	2204      	movs	r2, #4
 8002a70:	4393      	bics	r3, r2
 8002a72:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a86:	1c5a      	adds	r2, r3, #1
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a90:	3b01      	subs	r3, #1
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002aa6:	e0bf      	b.n	8002c28 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	4013      	ands	r3, r2
 8002aae:	d01c      	beq.n	8002aea <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002ab6:	d018      	beq.n	8002aea <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002abc:	781a      	ldrb	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac8:	1c5a      	adds	r2, r3, #1
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ae8:	e09e      	b.n	8002c28 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	2280      	movs	r2, #128	@ 0x80
 8002aee:	4013      	ands	r3, r2
 8002af0:	d100      	bne.n	8002af4 <I2C_Master_ISR_IT+0xec>
 8002af2:	e069      	b.n	8002bc8 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2240      	movs	r2, #64	@ 0x40
 8002af8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002afa:	d065      	beq.n	8002bc8 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d04a      	beq.n	8002b9c <I2C_Master_ISR_IT+0x194>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d146      	bne.n	8002b9c <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	2112      	movs	r1, #18
 8002b18:	187b      	adds	r3, r7, r1
 8002b1a:	0592      	lsls	r2, r2, #22
 8002b1c:	0d92      	lsrs	r2, r2, #22
 8002b1e:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	2bff      	cmp	r3, #255	@ 0xff
 8002b28:	d910      	bls.n	8002b4c <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	22ff      	movs	r2, #255	@ 0xff
 8002b2e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b34:	b2da      	uxtb	r2, r3
 8002b36:	2380      	movs	r3, #128	@ 0x80
 8002b38:	045c      	lsls	r4, r3, #17
 8002b3a:	187b      	adds	r3, r7, r1
 8002b3c:	8819      	ldrh	r1, [r3, #0]
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	2300      	movs	r3, #0
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	0023      	movs	r3, r4
 8002b46:	f001 fb61 	bl	800420c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b4a:	e03c      	b.n	8002bc6 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b5a:	4a3f      	ldr	r2, [pc, #252]	@ (8002c58 <I2C_Master_ISR_IT+0x250>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d00e      	beq.n	8002b7e <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b64:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8002b6a:	2312      	movs	r3, #18
 8002b6c:	18fb      	adds	r3, r7, r3
 8002b6e:	8819      	ldrh	r1, [r3, #0]
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	2300      	movs	r3, #0
 8002b74:	9300      	str	r3, [sp, #0]
 8002b76:	0023      	movs	r3, r4
 8002b78:	f001 fb48 	bl	800420c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b7c:	e023      	b.n	8002bc6 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	2380      	movs	r3, #128	@ 0x80
 8002b86:	049c      	lsls	r4, r3, #18
 8002b88:	2312      	movs	r3, #18
 8002b8a:	18fb      	adds	r3, r7, r3
 8002b8c:	8819      	ldrh	r1, [r3, #0]
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	2300      	movs	r3, #0
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	0023      	movs	r3, r4
 8002b96:	f001 fb39 	bl	800420c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b9a:	e014      	b.n	8002bc6 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	2380      	movs	r3, #128	@ 0x80
 8002ba4:	049b      	lsls	r3, r3, #18
 8002ba6:	401a      	ands	r2, r3
 8002ba8:	2380      	movs	r3, #128	@ 0x80
 8002baa:	049b      	lsls	r3, r3, #18
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d004      	beq.n	8002bba <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	f000 fcf7 	bl	80035a6 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002bb8:	e036      	b.n	8002c28 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2140      	movs	r1, #64	@ 0x40
 8002bbe:	0018      	movs	r0, r3
 8002bc0:	f000 ffe6 	bl	8003b90 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002bc4:	e030      	b.n	8002c28 <I2C_Master_ISR_IT+0x220>
 8002bc6:	e02f      	b.n	8002c28 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	2240      	movs	r2, #64	@ 0x40
 8002bcc:	4013      	ands	r3, r2
 8002bce:	d02b      	beq.n	8002c28 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2240      	movs	r2, #64	@ 0x40
 8002bd4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002bd6:	d027      	beq.n	8002c28 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d11d      	bne.n	8002c1e <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	2380      	movs	r3, #128	@ 0x80
 8002bea:	049b      	lsls	r3, r3, #18
 8002bec:	401a      	ands	r2, r3
 8002bee:	2380      	movs	r3, #128	@ 0x80
 8002bf0:	049b      	lsls	r3, r3, #18
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d018      	beq.n	8002c28 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bfa:	4a17      	ldr	r2, [pc, #92]	@ (8002c58 <I2C_Master_ISR_IT+0x250>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d109      	bne.n	8002c14 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2180      	movs	r1, #128	@ 0x80
 8002c0c:	01c9      	lsls	r1, r1, #7
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	605a      	str	r2, [r3, #4]
 8002c12:	e009      	b.n	8002c28 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	0018      	movs	r0, r3
 8002c18:	f000 fcc5 	bl	80035a6 <I2C_ITMasterSeqCplt>
 8002c1c:	e004      	b.n	8002c28 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2140      	movs	r1, #64	@ 0x40
 8002c22:	0018      	movs	r0, r3
 8002c24:	f000 ffb4 	bl	8003b90 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	d009      	beq.n	8002c44 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2220      	movs	r2, #32
 8002c34:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002c36:	d005      	beq.n	8002c44 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	0011      	movs	r1, r2
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f000 fd5a 	bl	80036f8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2240      	movs	r2, #64	@ 0x40
 8002c48:	2100      	movs	r1, #0
 8002c4a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	0018      	movs	r0, r3
 8002c50:	46bd      	mov	sp, r7
 8002c52:	b007      	add	sp, #28
 8002c54:	bd90      	pop	{r4, r7, pc}
 8002c56:	46c0      	nop			@ (mov r8, r8)
 8002c58:	ffff0000 	.word	0xffff0000

08002c5c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c6c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2240      	movs	r2, #64	@ 0x40
 8002c76:	5c9b      	ldrb	r3, [r3, r2]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d101      	bne.n	8002c80 <I2C_Slave_ISR_IT+0x24>
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	e0e6      	b.n	8002e4e <I2C_Slave_ISR_IT+0x1f2>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2240      	movs	r2, #64	@ 0x40
 8002c84:	2101      	movs	r1, #1
 8002c86:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	d009      	beq.n	8002ca4 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2220      	movs	r2, #32
 8002c94:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002c96:	d005      	beq.n	8002ca4 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	0011      	movs	r1, r2
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	f000 fdfc 	bl	800389c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	2210      	movs	r2, #16
 8002ca8:	4013      	ands	r3, r2
 8002caa:	d052      	beq.n	8002d52 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2210      	movs	r2, #16
 8002cb0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002cb2:	d04e      	beq.n	8002d52 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d12d      	bne.n	8002d1a <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2241      	movs	r2, #65	@ 0x41
 8002cc2:	5c9b      	ldrb	r3, [r3, r2]
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b28      	cmp	r3, #40	@ 0x28
 8002cc8:	d10b      	bne.n	8002ce2 <I2C_Slave_ISR_IT+0x86>
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	2380      	movs	r3, #128	@ 0x80
 8002cce:	049b      	lsls	r3, r3, #18
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d106      	bne.n	8002ce2 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	0011      	movs	r1, r2
 8002cda:	0018      	movs	r0, r3
 8002cdc:	f000 ff00 	bl	8003ae0 <I2C_ITListenCplt>
 8002ce0:	e036      	b.n	8002d50 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2241      	movs	r2, #65	@ 0x41
 8002ce6:	5c9b      	ldrb	r3, [r3, r2]
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b29      	cmp	r3, #41	@ 0x29
 8002cec:	d110      	bne.n	8002d10 <I2C_Slave_ISR_IT+0xb4>
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	4a59      	ldr	r2, [pc, #356]	@ (8002e58 <I2C_Slave_ISR_IT+0x1fc>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d00c      	beq.n	8002d10 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2210      	movs	r2, #16
 8002cfc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	0018      	movs	r0, r3
 8002d02:	f001 f872 	bl	8003dea <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	0018      	movs	r0, r3
 8002d0a:	f000 fc8f 	bl	800362c <I2C_ITSlaveSeqCplt>
 8002d0e:	e01f      	b.n	8002d50 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2210      	movs	r2, #16
 8002d16:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002d18:	e091      	b.n	8002e3e <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2210      	movs	r2, #16
 8002d20:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d26:	2204      	movs	r2, #4
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d005      	beq.n	8002d40 <I2C_Slave_ISR_IT+0xe4>
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	2380      	movs	r3, #128	@ 0x80
 8002d38:	045b      	lsls	r3, r3, #17
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d000      	beq.n	8002d40 <I2C_Slave_ISR_IT+0xe4>
 8002d3e:	e07e      	b.n	8002e3e <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	0011      	movs	r1, r2
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f000 ff21 	bl	8003b90 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002d4e:	e076      	b.n	8002e3e <I2C_Slave_ISR_IT+0x1e2>
 8002d50:	e075      	b.n	8002e3e <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	2204      	movs	r2, #4
 8002d56:	4013      	ands	r3, r2
 8002d58:	d02f      	beq.n	8002dba <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2204      	movs	r2, #4
 8002d5e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002d60:	d02b      	beq.n	8002dba <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d018      	beq.n	8002d9e <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7e:	1c5a      	adds	r2, r3, #1
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	3b01      	subs	r3, #1
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d14c      	bne.n	8002e42 <I2C_Slave_ISR_IT+0x1e6>
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	4a2b      	ldr	r2, [pc, #172]	@ (8002e58 <I2C_Slave_ISR_IT+0x1fc>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d048      	beq.n	8002e42 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	0018      	movs	r0, r3
 8002db4:	f000 fc3a 	bl	800362c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002db8:	e043      	b.n	8002e42 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	2208      	movs	r2, #8
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	d00a      	beq.n	8002dd8 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2208      	movs	r2, #8
 8002dc6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002dc8:	d006      	beq.n	8002dd8 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	0011      	movs	r1, r2
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	f000 fb41 	bl	8003458 <I2C_ITAddrCplt>
 8002dd6:	e035      	b.n	8002e44 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	4013      	ands	r3, r2
 8002dde:	d031      	beq.n	8002e44 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2202      	movs	r2, #2
 8002de4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002de6:	d02d      	beq.n	8002e44 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d018      	beq.n	8002e24 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df6:	781a      	ldrb	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e02:	1c5a      	adds	r2, r3, #1
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002e22:	e00f      	b.n	8002e44 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	2380      	movs	r3, #128	@ 0x80
 8002e28:	045b      	lsls	r3, r3, #17
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d002      	beq.n	8002e34 <I2C_Slave_ISR_IT+0x1d8>
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d107      	bne.n	8002e44 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	0018      	movs	r0, r3
 8002e38:	f000 fbf8 	bl	800362c <I2C_ITSlaveSeqCplt>
 8002e3c:	e002      	b.n	8002e44 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 8002e3e:	46c0      	nop			@ (mov r8, r8)
 8002e40:	e000      	b.n	8002e44 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 8002e42:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2240      	movs	r2, #64	@ 0x40
 8002e48:	2100      	movs	r1, #0
 8002e4a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	0018      	movs	r0, r3
 8002e50:	46bd      	mov	sp, r7
 8002e52:	b006      	add	sp, #24
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	46c0      	nop			@ (mov r8, r8)
 8002e58:	ffff0000 	.word	0xffff0000

08002e5c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002e5c:	b590      	push	{r4, r7, lr}
 8002e5e:	b089      	sub	sp, #36	@ 0x24
 8002e60:	af02      	add	r7, sp, #8
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2240      	movs	r2, #64	@ 0x40
 8002e6c:	5c9b      	ldrb	r3, [r3, r2]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d101      	bne.n	8002e76 <I2C_Master_ISR_DMA+0x1a>
 8002e72:	2302      	movs	r3, #2
 8002e74:	e0e7      	b.n	8003046 <I2C_Master_ISR_DMA+0x1ea>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2240      	movs	r2, #64	@ 0x40
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	2210      	movs	r2, #16
 8002e82:	4013      	ands	r3, r2
 8002e84:	d017      	beq.n	8002eb6 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2210      	movs	r2, #16
 8002e8a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002e8c:	d013      	beq.n	8002eb6 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2210      	movs	r2, #16
 8002e94:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9a:	2204      	movs	r2, #4
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2120      	movs	r1, #32
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	f001 f9ea 	bl	8004280 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	0018      	movs	r0, r3
 8002eb0:	f000 ff9b 	bl	8003dea <I2C_Flush_TXDR>
 8002eb4:	e0c2      	b.n	800303c <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	2280      	movs	r2, #128	@ 0x80
 8002eba:	4013      	ands	r3, r2
 8002ebc:	d100      	bne.n	8002ec0 <I2C_Master_ISR_DMA+0x64>
 8002ebe:	e07c      	b.n	8002fba <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2240      	movs	r2, #64	@ 0x40
 8002ec4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002ec6:	d100      	bne.n	8002eca <I2C_Master_ISR_DMA+0x6e>
 8002ec8:	e077      	b.n	8002fba <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2140      	movs	r1, #64	@ 0x40
 8002ed6:	438a      	bics	r2, r1
 8002ed8:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d055      	beq.n	8002f90 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	2312      	movs	r3, #18
 8002eee:	18fb      	adds	r3, r7, r3
 8002ef0:	0592      	lsls	r2, r2, #22
 8002ef2:	0d92      	lsrs	r2, r2, #22
 8002ef4:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	2bff      	cmp	r3, #255	@ 0xff
 8002efe:	d906      	bls.n	8002f0e <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	22ff      	movs	r2, #255	@ 0xff
 8002f04:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8002f06:	2380      	movs	r3, #128	@ 0x80
 8002f08:	045b      	lsls	r3, r3, #17
 8002f0a:	617b      	str	r3, [r7, #20]
 8002f0c:	e010      	b.n	8002f30 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f1c:	4a4c      	ldr	r2, [pc, #304]	@ (8003050 <I2C_Master_ISR_DMA+0x1f4>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d003      	beq.n	8002f2a <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f26:	617b      	str	r3, [r7, #20]
 8002f28:	e002      	b.n	8002f30 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002f2a:	2380      	movs	r3, #128	@ 0x80
 8002f2c:	049b      	lsls	r3, r3, #18
 8002f2e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f34:	b2da      	uxtb	r2, r3
 8002f36:	697c      	ldr	r4, [r7, #20]
 8002f38:	2312      	movs	r3, #18
 8002f3a:	18fb      	adds	r3, r7, r3
 8002f3c:	8819      	ldrh	r1, [r3, #0]
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	2300      	movs	r3, #0
 8002f42:	9300      	str	r3, [sp, #0]
 8002f44:	0023      	movs	r3, r4
 8002f46:	f001 f961 	bl	800420c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2241      	movs	r2, #65	@ 0x41
 8002f60:	5c9b      	ldrb	r3, [r3, r2]
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b22      	cmp	r3, #34	@ 0x22
 8002f66:	d109      	bne.n	8002f7c <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2180      	movs	r1, #128	@ 0x80
 8002f74:	0209      	lsls	r1, r1, #8
 8002f76:	430a      	orrs	r2, r1
 8002f78:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002f7a:	e05f      	b.n	800303c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2180      	movs	r1, #128	@ 0x80
 8002f88:	01c9      	lsls	r1, r1, #7
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002f8e:	e055      	b.n	800303c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	2380      	movs	r3, #128	@ 0x80
 8002f98:	049b      	lsls	r3, r3, #18
 8002f9a:	401a      	ands	r2, r3
 8002f9c:	2380      	movs	r3, #128	@ 0x80
 8002f9e:	049b      	lsls	r3, r3, #18
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d004      	beq.n	8002fae <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	f000 fafd 	bl	80035a6 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002fac:	e046      	b.n	800303c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2140      	movs	r1, #64	@ 0x40
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	f000 fdec 	bl	8003b90 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002fb8:	e040      	b.n	800303c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	2240      	movs	r2, #64	@ 0x40
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	d02c      	beq.n	800301c <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2240      	movs	r2, #64	@ 0x40
 8002fc6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002fc8:	d028      	beq.n	800301c <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d11d      	bne.n	8003010 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	2380      	movs	r3, #128	@ 0x80
 8002fdc:	049b      	lsls	r3, r3, #18
 8002fde:	401a      	ands	r2, r3
 8002fe0:	2380      	movs	r3, #128	@ 0x80
 8002fe2:	049b      	lsls	r3, r3, #18
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d028      	beq.n	800303a <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fec:	4a18      	ldr	r2, [pc, #96]	@ (8003050 <I2C_Master_ISR_DMA+0x1f4>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d109      	bne.n	8003006 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2180      	movs	r1, #128	@ 0x80
 8002ffe:	01c9      	lsls	r1, r1, #7
 8003000:	430a      	orrs	r2, r1
 8003002:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003004:	e019      	b.n	800303a <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	0018      	movs	r0, r3
 800300a:	f000 facc 	bl	80035a6 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800300e:	e014      	b.n	800303a <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2140      	movs	r1, #64	@ 0x40
 8003014:	0018      	movs	r0, r3
 8003016:	f000 fdbb 	bl	8003b90 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800301a:	e00e      	b.n	800303a <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	2220      	movs	r2, #32
 8003020:	4013      	ands	r3, r2
 8003022:	d00b      	beq.n	800303c <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2220      	movs	r2, #32
 8003028:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800302a:	d007      	beq.n	800303c <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800302c:	68ba      	ldr	r2, [r7, #8]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	0011      	movs	r1, r2
 8003032:	0018      	movs	r0, r3
 8003034:	f000 fb60 	bl	80036f8 <I2C_ITMasterCplt>
 8003038:	e000      	b.n	800303c <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 800303a:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2240      	movs	r2, #64	@ 0x40
 8003040:	2100      	movs	r1, #0
 8003042:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	0018      	movs	r0, r3
 8003048:	46bd      	mov	sp, r7
 800304a:	b007      	add	sp, #28
 800304c:	bd90      	pop	{r4, r7, pc}
 800304e:	46c0      	nop			@ (mov r8, r8)
 8003050:	ffff0000 	.word	0xffff0000

08003054 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8003054:	b590      	push	{r4, r7, lr}
 8003056:	b089      	sub	sp, #36	@ 0x24
 8003058:	af02      	add	r7, sp, #8
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8003060:	4b88      	ldr	r3, [pc, #544]	@ (8003284 <I2C_Mem_ISR_DMA+0x230>)
 8003062:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2240      	movs	r2, #64	@ 0x40
 8003068:	5c9b      	ldrb	r3, [r3, r2]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d101      	bne.n	8003072 <I2C_Mem_ISR_DMA+0x1e>
 800306e:	2302      	movs	r3, #2
 8003070:	e104      	b.n	800327c <I2C_Mem_ISR_DMA+0x228>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2240      	movs	r2, #64	@ 0x40
 8003076:	2101      	movs	r1, #1
 8003078:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	2210      	movs	r2, #16
 800307e:	4013      	ands	r3, r2
 8003080:	d017      	beq.n	80030b2 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2210      	movs	r2, #16
 8003086:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003088:	d013      	beq.n	80030b2 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2210      	movs	r2, #16
 8003090:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003096:	2204      	movs	r2, #4
 8003098:	431a      	orrs	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2120      	movs	r1, #32
 80030a2:	0018      	movs	r0, r3
 80030a4:	f001 f8ec 	bl	8004280 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	0018      	movs	r0, r3
 80030ac:	f000 fe9d 	bl	8003dea <I2C_Flush_TXDR>
 80030b0:	e0df      	b.n	8003272 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	2202      	movs	r2, #2
 80030b6:	4013      	ands	r3, r2
 80030b8:	d00d      	beq.n	80030d6 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2202      	movs	r2, #2
 80030be:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80030c0:	d009      	beq.n	80030d6 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80030ca:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2201      	movs	r2, #1
 80030d0:	4252      	negs	r2, r2
 80030d2:	651a      	str	r2, [r3, #80]	@ 0x50
 80030d4:	e0cd      	b.n	8003272 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	2280      	movs	r2, #128	@ 0x80
 80030da:	4013      	ands	r3, r2
 80030dc:	d05e      	beq.n	800319c <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2240      	movs	r2, #64	@ 0x40
 80030e2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80030e4:	d05a      	beq.n	800319c <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2110      	movs	r1, #16
 80030ea:	0018      	movs	r0, r3
 80030ec:	f001 f8c8 	bl	8004280 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d04a      	beq.n	8003190 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030fe:	b29b      	uxth	r3, r3
 8003100:	2bff      	cmp	r3, #255	@ 0xff
 8003102:	d910      	bls.n	8003126 <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	22ff      	movs	r2, #255	@ 0xff
 8003108:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800310e:	b299      	uxth	r1, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003114:	b2da      	uxtb	r2, r3
 8003116:	2380      	movs	r3, #128	@ 0x80
 8003118:	045b      	lsls	r3, r3, #17
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	2400      	movs	r4, #0
 800311e:	9400      	str	r4, [sp, #0]
 8003120:	f001 f874 	bl	800420c <I2C_TransferConfig>
 8003124:	e011      	b.n	800314a <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800312a:	b29a      	uxth	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003134:	b299      	uxth	r1, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800313a:	b2da      	uxtb	r2, r3
 800313c:	2380      	movs	r3, #128	@ 0x80
 800313e:	049b      	lsls	r3, r3, #18
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	2400      	movs	r4, #0
 8003144:	9400      	str	r4, [sp, #0]
 8003146:	f001 f861 	bl	800420c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800314e:	b29a      	uxth	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	b29a      	uxth	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2241      	movs	r2, #65	@ 0x41
 8003160:	5c9b      	ldrb	r3, [r3, r2]
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b22      	cmp	r3, #34	@ 0x22
 8003166:	d109      	bne.n	800317c <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2180      	movs	r1, #128	@ 0x80
 8003174:	0209      	lsls	r1, r1, #8
 8003176:	430a      	orrs	r2, r1
 8003178:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800317a:	e07a      	b.n	8003272 <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2180      	movs	r1, #128	@ 0x80
 8003188:	01c9      	lsls	r1, r1, #7
 800318a:	430a      	orrs	r2, r1
 800318c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800318e:	e070      	b.n	8003272 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2140      	movs	r1, #64	@ 0x40
 8003194:	0018      	movs	r0, r3
 8003196:	f000 fcfb 	bl	8003b90 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800319a:	e06a      	b.n	8003272 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	2240      	movs	r2, #64	@ 0x40
 80031a0:	4013      	ands	r3, r2
 80031a2:	d058      	beq.n	8003256 <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2240      	movs	r2, #64	@ 0x40
 80031a8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80031aa:	d054      	beq.n	8003256 <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2241      	movs	r2, #65	@ 0x41
 80031b0:	5c9b      	ldrb	r3, [r3, r2]
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b22      	cmp	r3, #34	@ 0x22
 80031b6:	d101      	bne.n	80031bc <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 80031b8:	4b33      	ldr	r3, [pc, #204]	@ (8003288 <I2C_Mem_ISR_DMA+0x234>)
 80031ba:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	2bff      	cmp	r3, #255	@ 0xff
 80031c4:	d911      	bls.n	80031ea <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	22ff      	movs	r2, #255	@ 0xff
 80031ca:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031d0:	b299      	uxth	r1, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	2380      	movs	r3, #128	@ 0x80
 80031da:	045c      	lsls	r4, r3, #17
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	0023      	movs	r3, r4
 80031e4:	f001 f812 	bl	800420c <I2C_TransferConfig>
 80031e8:	e012      	b.n	8003210 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031f8:	b299      	uxth	r1, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	2380      	movs	r3, #128	@ 0x80
 8003202:	049c      	lsls	r4, r3, #18
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	0023      	movs	r3, r4
 800320c:	f000 fffe 	bl	800420c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003214:	b29a      	uxth	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	b29a      	uxth	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2241      	movs	r2, #65	@ 0x41
 8003226:	5c9b      	ldrb	r3, [r3, r2]
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b22      	cmp	r3, #34	@ 0x22
 800322c:	d109      	bne.n	8003242 <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2180      	movs	r1, #128	@ 0x80
 800323a:	0209      	lsls	r1, r1, #8
 800323c:	430a      	orrs	r2, r1
 800323e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003240:	e017      	b.n	8003272 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2180      	movs	r1, #128	@ 0x80
 800324e:	01c9      	lsls	r1, r1, #7
 8003250:	430a      	orrs	r2, r1
 8003252:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003254:	e00d      	b.n	8003272 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2220      	movs	r2, #32
 800325a:	4013      	ands	r3, r2
 800325c:	d009      	beq.n	8003272 <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2220      	movs	r2, #32
 8003262:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003264:	d005      	beq.n	8003272 <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	0011      	movs	r1, r2
 800326c:	0018      	movs	r0, r3
 800326e:	f000 fa43 	bl	80036f8 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2240      	movs	r2, #64	@ 0x40
 8003276:	2100      	movs	r1, #0
 8003278:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	0018      	movs	r0, r3
 800327e:	46bd      	mov	sp, r7
 8003280:	b007      	add	sp, #28
 8003282:	bd90      	pop	{r4, r7, pc}
 8003284:	80002000 	.word	0x80002000
 8003288:	80002400 	.word	0x80002400

0800328c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b088      	sub	sp, #32
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800329c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800329e:	2300      	movs	r3, #0
 80032a0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2240      	movs	r2, #64	@ 0x40
 80032a6:	5c9b      	ldrb	r3, [r3, r2]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d101      	bne.n	80032b0 <I2C_Slave_ISR_DMA+0x24>
 80032ac:	2302      	movs	r3, #2
 80032ae:	e0cd      	b.n	800344c <I2C_Slave_ISR_DMA+0x1c0>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2240      	movs	r2, #64	@ 0x40
 80032b4:	2101      	movs	r1, #1
 80032b6:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	2220      	movs	r2, #32
 80032bc:	4013      	ands	r3, r2
 80032be:	d009      	beq.n	80032d4 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2220      	movs	r2, #32
 80032c4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80032c6:	d005      	beq.n	80032d4 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	0011      	movs	r1, r2
 80032ce:	0018      	movs	r0, r3
 80032d0:	f000 fae4 	bl	800389c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	2210      	movs	r2, #16
 80032d8:	4013      	ands	r3, r2
 80032da:	d100      	bne.n	80032de <I2C_Slave_ISR_DMA+0x52>
 80032dc:	e0a3      	b.n	8003426 <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2210      	movs	r2, #16
 80032e2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80032e4:	d100      	bne.n	80032e8 <I2C_Slave_ISR_DMA+0x5c>
 80032e6:	e09e      	b.n	8003426 <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	2380      	movs	r3, #128	@ 0x80
 80032ec:	01db      	lsls	r3, r3, #7
 80032ee:	4013      	ands	r3, r2
 80032f0:	d105      	bne.n	80032fe <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	2380      	movs	r3, #128	@ 0x80
 80032f6:	021b      	lsls	r3, r3, #8
 80032f8:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80032fa:	d100      	bne.n	80032fe <I2C_Slave_ISR_DMA+0x72>
 80032fc:	e08c      	b.n	8003418 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00c      	beq.n	8003320 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	2380      	movs	r3, #128	@ 0x80
 800330a:	021b      	lsls	r3, r3, #8
 800330c:	4013      	ands	r3, r2
 800330e:	d007      	beq.n	8003320 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 800331c:	2301      	movs	r3, #1
 800331e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00c      	beq.n	8003342 <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	2380      	movs	r3, #128	@ 0x80
 800332c:	01db      	lsls	r3, r3, #7
 800332e:	4013      	ands	r3, r2
 8003330:	d007      	beq.n	8003342 <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 800333e:	2301      	movs	r3, #1
 8003340:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d12d      	bne.n	80033a4 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2241      	movs	r2, #65	@ 0x41
 800334c:	5c9b      	ldrb	r3, [r3, r2]
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b28      	cmp	r3, #40	@ 0x28
 8003352:	d10b      	bne.n	800336c <I2C_Slave_ISR_DMA+0xe0>
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	2380      	movs	r3, #128	@ 0x80
 8003358:	049b      	lsls	r3, r3, #18
 800335a:	429a      	cmp	r2, r3
 800335c:	d106      	bne.n	800336c <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	0011      	movs	r1, r2
 8003364:	0018      	movs	r0, r3
 8003366:	f000 fbbb 	bl	8003ae0 <I2C_ITListenCplt>
 800336a:	e054      	b.n	8003416 <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2241      	movs	r2, #65	@ 0x41
 8003370:	5c9b      	ldrb	r3, [r3, r2]
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b29      	cmp	r3, #41	@ 0x29
 8003376:	d110      	bne.n	800339a <I2C_Slave_ISR_DMA+0x10e>
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	4a36      	ldr	r2, [pc, #216]	@ (8003454 <I2C_Slave_ISR_DMA+0x1c8>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d00c      	beq.n	800339a <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2210      	movs	r2, #16
 8003386:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	0018      	movs	r0, r3
 800338c:	f000 fd2d 	bl	8003dea <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	0018      	movs	r0, r3
 8003394:	f000 f94a 	bl	800362c <I2C_ITSlaveSeqCplt>
 8003398:	e03d      	b.n	8003416 <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2210      	movs	r2, #16
 80033a0:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80033a2:	e03e      	b.n	8003422 <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2210      	movs	r2, #16
 80033aa:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b0:	2204      	movs	r2, #4
 80033b2:	431a      	orrs	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80033b8:	2317      	movs	r3, #23
 80033ba:	18fb      	adds	r3, r7, r3
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	2141      	movs	r1, #65	@ 0x41
 80033c0:	5c52      	ldrb	r2, [r2, r1]
 80033c2:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d004      	beq.n	80033d4 <I2C_Slave_ISR_DMA+0x148>
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	2380      	movs	r3, #128	@ 0x80
 80033ce:	045b      	lsls	r3, r3, #17
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d126      	bne.n	8003422 <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80033d4:	2217      	movs	r2, #23
 80033d6:	18bb      	adds	r3, r7, r2
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	2b21      	cmp	r3, #33	@ 0x21
 80033dc:	d003      	beq.n	80033e6 <I2C_Slave_ISR_DMA+0x15a>
 80033de:	18bb      	adds	r3, r7, r2
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	2b29      	cmp	r3, #41	@ 0x29
 80033e4:	d103      	bne.n	80033ee <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2221      	movs	r2, #33	@ 0x21
 80033ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80033ec:	e00b      	b.n	8003406 <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80033ee:	2217      	movs	r2, #23
 80033f0:	18bb      	adds	r3, r7, r2
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	2b22      	cmp	r3, #34	@ 0x22
 80033f6:	d003      	beq.n	8003400 <I2C_Slave_ISR_DMA+0x174>
 80033f8:	18bb      	adds	r3, r7, r2
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80033fe:	d102      	bne.n	8003406 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2222      	movs	r2, #34	@ 0x22
 8003404:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	0011      	movs	r1, r2
 800340e:	0018      	movs	r0, r3
 8003410:	f000 fbbe 	bl	8003b90 <I2C_ITError>
      if (treatdmanack == 1U)
 8003414:	e005      	b.n	8003422 <I2C_Slave_ISR_DMA+0x196>
 8003416:	e004      	b.n	8003422 <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2210      	movs	r2, #16
 800341e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003420:	e00f      	b.n	8003442 <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 8003422:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003424:	e00d      	b.n	8003442 <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	2208      	movs	r2, #8
 800342a:	4013      	ands	r3, r2
 800342c:	d009      	beq.n	8003442 <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2208      	movs	r2, #8
 8003432:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003434:	d005      	beq.n	8003442 <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	0011      	movs	r1, r2
 800343c:	0018      	movs	r0, r3
 800343e:	f000 f80b 	bl	8003458 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2240      	movs	r2, #64	@ 0x40
 8003446:	2100      	movs	r1, #0
 8003448:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	0018      	movs	r0, r3
 800344e:	46bd      	mov	sp, r7
 8003450:	b008      	add	sp, #32
 8003452:	bd80      	pop	{r7, pc}
 8003454:	ffff0000 	.word	0xffff0000

08003458 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003458:	b5b0      	push	{r4, r5, r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2241      	movs	r2, #65	@ 0x41
 8003466:	5c9b      	ldrb	r3, [r3, r2]
 8003468:	b2db      	uxtb	r3, r3
 800346a:	001a      	movs	r2, r3
 800346c:	2328      	movs	r3, #40	@ 0x28
 800346e:	4013      	ands	r3, r2
 8003470:	2b28      	cmp	r3, #40	@ 0x28
 8003472:	d000      	beq.n	8003476 <I2C_ITAddrCplt+0x1e>
 8003474:	e08b      	b.n	800358e <I2C_ITAddrCplt+0x136>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	0c1b      	lsrs	r3, r3, #16
 800347e:	b2da      	uxtb	r2, r3
 8003480:	250f      	movs	r5, #15
 8003482:	197b      	adds	r3, r7, r5
 8003484:	2101      	movs	r1, #1
 8003486:	400a      	ands	r2, r1
 8003488:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	0c1b      	lsrs	r3, r3, #16
 8003492:	b29a      	uxth	r2, r3
 8003494:	200c      	movs	r0, #12
 8003496:	183b      	adds	r3, r7, r0
 8003498:	21fe      	movs	r1, #254	@ 0xfe
 800349a:	400a      	ands	r2, r1
 800349c:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	240a      	movs	r4, #10
 80034a8:	193b      	adds	r3, r7, r4
 80034aa:	0592      	lsls	r2, r2, #22
 80034ac:	0d92      	lsrs	r2, r2, #22
 80034ae:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	2308      	movs	r3, #8
 80034ba:	18fb      	adds	r3, r7, r3
 80034bc:	21fe      	movs	r1, #254	@ 0xfe
 80034be:	400a      	ands	r2, r1
 80034c0:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d14a      	bne.n	8003560 <I2C_ITAddrCplt+0x108>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80034ca:	0021      	movs	r1, r4
 80034cc:	187b      	adds	r3, r7, r1
 80034ce:	881b      	ldrh	r3, [r3, #0]
 80034d0:	09db      	lsrs	r3, r3, #7
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	183b      	adds	r3, r7, r0
 80034d6:	881b      	ldrh	r3, [r3, #0]
 80034d8:	4053      	eors	r3, r2
 80034da:	b29b      	uxth	r3, r3
 80034dc:	001a      	movs	r2, r3
 80034de:	2306      	movs	r3, #6
 80034e0:	4013      	ands	r3, r2
 80034e2:	d121      	bne.n	8003528 <I2C_ITAddrCplt+0xd0>
      {
        slaveaddrcode = ownadd1code;
 80034e4:	183b      	adds	r3, r7, r0
 80034e6:	187a      	adds	r2, r7, r1
 80034e8:	8812      	ldrh	r2, [r2, #0]
 80034ea:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034f0:	1c5a      	adds	r2, r3, #1
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d14f      	bne.n	800359e <I2C_ITAddrCplt+0x146>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2208      	movs	r2, #8
 800350a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2240      	movs	r2, #64	@ 0x40
 8003510:	2100      	movs	r1, #0
 8003512:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003518:	183a      	adds	r2, r7, r0
 800351a:	8814      	ldrh	r4, [r2, #0]
 800351c:	197a      	adds	r2, r7, r5
 800351e:	7811      	ldrb	r1, [r2, #0]
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	0022      	movs	r2, r4
 8003524:	4798      	blx	r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003526:	e03a      	b.n	800359e <I2C_ITAddrCplt+0x146>
        slaveaddrcode = ownadd2code;
 8003528:	240c      	movs	r4, #12
 800352a:	193b      	adds	r3, r7, r4
 800352c:	2208      	movs	r2, #8
 800352e:	18ba      	adds	r2, r7, r2
 8003530:	8812      	ldrh	r2, [r2, #0]
 8003532:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003534:	2380      	movs	r3, #128	@ 0x80
 8003536:	021a      	lsls	r2, r3, #8
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	0011      	movs	r1, r2
 800353c:	0018      	movs	r0, r3
 800353e:	f000 ff2d 	bl	800439c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2240      	movs	r2, #64	@ 0x40
 8003546:	2100      	movs	r1, #0
 8003548:	5499      	strb	r1, [r3, r2]
        hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800354e:	193a      	adds	r2, r7, r4
 8003550:	8814      	ldrh	r4, [r2, #0]
 8003552:	220f      	movs	r2, #15
 8003554:	18ba      	adds	r2, r7, r2
 8003556:	7811      	ldrb	r1, [r2, #0]
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	0022      	movs	r2, r4
 800355c:	4798      	blx	r3
}
 800355e:	e01e      	b.n	800359e <I2C_ITAddrCplt+0x146>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003560:	2380      	movs	r3, #128	@ 0x80
 8003562:	021a      	lsls	r2, r3, #8
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	0011      	movs	r1, r2
 8003568:	0018      	movs	r0, r3
 800356a:	f000 ff17 	bl	800439c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2240      	movs	r2, #64	@ 0x40
 8003572:	2100      	movs	r1, #0
 8003574:	5499      	strb	r1, [r3, r2]
      hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800357a:	220c      	movs	r2, #12
 800357c:	18ba      	adds	r2, r7, r2
 800357e:	8814      	ldrh	r4, [r2, #0]
 8003580:	220f      	movs	r2, #15
 8003582:	18ba      	adds	r2, r7, r2
 8003584:	7811      	ldrb	r1, [r2, #0]
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	0022      	movs	r2, r4
 800358a:	4798      	blx	r3
}
 800358c:	e007      	b.n	800359e <I2C_ITAddrCplt+0x146>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2208      	movs	r2, #8
 8003594:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2240      	movs	r2, #64	@ 0x40
 800359a:	2100      	movs	r1, #0
 800359c:	5499      	strb	r1, [r3, r2]
}
 800359e:	46c0      	nop			@ (mov r8, r8)
 80035a0:	46bd      	mov	sp, r7
 80035a2:	b004      	add	sp, #16
 80035a4:	bdb0      	pop	{r4, r5, r7, pc}

080035a6 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b082      	sub	sp, #8
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2242      	movs	r2, #66	@ 0x42
 80035b2:	2100      	movs	r1, #0
 80035b4:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2241      	movs	r2, #65	@ 0x41
 80035ba:	5c9b      	ldrb	r3, [r3, r2]
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b21      	cmp	r3, #33	@ 0x21
 80035c0:	d118      	bne.n	80035f4 <I2C_ITMasterSeqCplt+0x4e>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2241      	movs	r2, #65	@ 0x41
 80035c6:	2120      	movs	r1, #32
 80035c8:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2211      	movs	r2, #17
 80035ce:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2101      	movs	r1, #1
 80035da:	0018      	movs	r0, r3
 80035dc:	f000 fede 	bl	800439c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2240      	movs	r2, #64	@ 0x40
 80035e4:	2100      	movs	r1, #0
 80035e6:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	0010      	movs	r0, r2
 80035f0:	4798      	blx	r3
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80035f2:	e017      	b.n	8003624 <I2C_ITMasterSeqCplt+0x7e>
    hi2c->State         = HAL_I2C_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2241      	movs	r2, #65	@ 0x41
 80035f8:	2120      	movs	r1, #32
 80035fa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2212      	movs	r2, #18
 8003600:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2102      	movs	r1, #2
 800360c:	0018      	movs	r0, r3
 800360e:	f000 fec5 	bl	800439c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2240      	movs	r2, #64	@ 0x40
 8003616:	2100      	movs	r1, #0
 8003618:	5499      	strb	r1, [r3, r2]
    hi2c->MasterRxCpltCallback(hi2c);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	0010      	movs	r0, r2
 8003622:	4798      	blx	r3
}
 8003624:	46c0      	nop			@ (mov r8, r8)
 8003626:	46bd      	mov	sp, r7
 8003628:	b002      	add	sp, #8
 800362a:	bd80      	pop	{r7, pc}

0800362c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2242      	movs	r2, #66	@ 0x42
 8003640:	2100      	movs	r1, #0
 8003642:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	2380      	movs	r3, #128	@ 0x80
 8003648:	01db      	lsls	r3, r3, #7
 800364a:	4013      	ands	r3, r2
 800364c:	d008      	beq.n	8003660 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4925      	ldr	r1, [pc, #148]	@ (80036f0 <I2C_ITSlaveSeqCplt+0xc4>)
 800365a:	400a      	ands	r2, r1
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	e00c      	b.n	800367a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	2380      	movs	r3, #128	@ 0x80
 8003664:	021b      	lsls	r3, r3, #8
 8003666:	4013      	ands	r3, r2
 8003668:	d007      	beq.n	800367a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	491f      	ldr	r1, [pc, #124]	@ (80036f4 <I2C_ITSlaveSeqCplt+0xc8>)
 8003676:	400a      	ands	r2, r1
 8003678:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2241      	movs	r2, #65	@ 0x41
 800367e:	5c9b      	ldrb	r3, [r3, r2]
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b29      	cmp	r3, #41	@ 0x29
 8003684:	d115      	bne.n	80036b2 <I2C_ITSlaveSeqCplt+0x86>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2241      	movs	r2, #65	@ 0x41
 800368a:	2128      	movs	r1, #40	@ 0x28
 800368c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2221      	movs	r2, #33	@ 0x21
 8003692:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2101      	movs	r1, #1
 8003698:	0018      	movs	r0, r3
 800369a:	f000 fe7f 	bl	800439c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2240      	movs	r2, #64	@ 0x40
 80036a2:	2100      	movs	r1, #0
 80036a4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	0010      	movs	r0, r2
 80036ae:	4798      	blx	r3
  }
  else
  {
    /* Nothing to do */
  }
}
 80036b0:	e01a      	b.n	80036e8 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2241      	movs	r2, #65	@ 0x41
 80036b6:	5c9b      	ldrb	r3, [r3, r2]
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80036bc:	d114      	bne.n	80036e8 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2241      	movs	r2, #65	@ 0x41
 80036c2:	2128      	movs	r1, #40	@ 0x28
 80036c4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2222      	movs	r2, #34	@ 0x22
 80036ca:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2102      	movs	r1, #2
 80036d0:	0018      	movs	r0, r3
 80036d2:	f000 fe63 	bl	800439c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2240      	movs	r2, #64	@ 0x40
 80036da:	2100      	movs	r1, #0
 80036dc:	5499      	strb	r1, [r3, r2]
    hi2c->SlaveRxCpltCallback(hi2c);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	0010      	movs	r0, r2
 80036e6:	4798      	blx	r3
}
 80036e8:	46c0      	nop			@ (mov r8, r8)
 80036ea:	46bd      	mov	sp, r7
 80036ec:	b004      	add	sp, #16
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	ffffbfff 	.word	0xffffbfff
 80036f4:	ffff7fff 	.word	0xffff7fff

080036f8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2220      	movs	r2, #32
 800370c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2241      	movs	r2, #65	@ 0x41
 8003712:	5c9b      	ldrb	r3, [r3, r2]
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b21      	cmp	r3, #33	@ 0x21
 8003718:	d108      	bne.n	800372c <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2101      	movs	r1, #1
 800371e:	0018      	movs	r0, r3
 8003720:	f000 fe3c 	bl	800439c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2211      	movs	r2, #17
 8003728:	631a      	str	r2, [r3, #48]	@ 0x30
 800372a:	e00d      	b.n	8003748 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2241      	movs	r2, #65	@ 0x41
 8003730:	5c9b      	ldrb	r3, [r3, r2]
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b22      	cmp	r3, #34	@ 0x22
 8003736:	d107      	bne.n	8003748 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2102      	movs	r1, #2
 800373c:	0018      	movs	r0, r3
 800373e:	f000 fe2d 	bl	800439c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2212      	movs	r2, #18
 8003746:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4950      	ldr	r1, [pc, #320]	@ (8003894 <I2C_ITMasterCplt+0x19c>)
 8003754:	400a      	ands	r2, r1
 8003756:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a4d      	ldr	r2, [pc, #308]	@ (8003898 <I2C_ITMasterCplt+0x1a0>)
 8003762:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	2210      	movs	r2, #16
 8003768:	4013      	ands	r3, r2
 800376a:	d009      	beq.n	8003780 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2210      	movs	r2, #16
 8003772:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003778:	2204      	movs	r2, #4
 800377a:	431a      	orrs	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2241      	movs	r2, #65	@ 0x41
 8003784:	5c9b      	ldrb	r3, [r3, r2]
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2b60      	cmp	r3, #96	@ 0x60
 800378a:	d109      	bne.n	80037a0 <I2C_ITMasterCplt+0xa8>
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	2204      	movs	r2, #4
 8003790:	4013      	ands	r3, r2
 8003792:	d005      	beq.n	80037a0 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379a:	b2db      	uxtb	r3, r3
 800379c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800379e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	0018      	movs	r0, r3
 80037a4:	f000 fb21 	bl	8003dea <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ac:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2241      	movs	r2, #65	@ 0x41
 80037b2:	5c9b      	ldrb	r3, [r3, r2]
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b60      	cmp	r3, #96	@ 0x60
 80037b8:	d002      	beq.n	80037c0 <I2C_ITMasterCplt+0xc8>
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d007      	beq.n	80037d0 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	0011      	movs	r1, r2
 80037c8:	0018      	movs	r0, r3
 80037ca:	f000 f9e1 	bl	8003b90 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80037ce:	e05c      	b.n	800388a <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2241      	movs	r2, #65	@ 0x41
 80037d4:	5c9b      	ldrb	r3, [r3, r2]
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b21      	cmp	r3, #33	@ 0x21
 80037da:	d128      	bne.n	800382e <I2C_ITMasterCplt+0x136>
    hi2c->State = HAL_I2C_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2241      	movs	r2, #65	@ 0x41
 80037e0:	2120      	movs	r1, #32
 80037e2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2242      	movs	r2, #66	@ 0x42
 80037ee:	5c9b      	ldrb	r3, [r3, r2]
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b40      	cmp	r3, #64	@ 0x40
 80037f4:	d10d      	bne.n	8003812 <I2C_ITMasterCplt+0x11a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2242      	movs	r2, #66	@ 0x42
 80037fa:	2100      	movs	r1, #0
 80037fc:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2240      	movs	r2, #64	@ 0x40
 8003802:	2100      	movs	r1, #0
 8003804:	5499      	strb	r1, [r3, r2]
      hi2c->MemTxCpltCallback(hi2c);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	0010      	movs	r0, r2
 800380e:	4798      	blx	r3
}
 8003810:	e03b      	b.n	800388a <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2242      	movs	r2, #66	@ 0x42
 8003816:	2100      	movs	r1, #0
 8003818:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2240      	movs	r2, #64	@ 0x40
 800381e:	2100      	movs	r1, #0
 8003820:	5499      	strb	r1, [r3, r2]
      hi2c->MasterTxCpltCallback(hi2c);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	0010      	movs	r0, r2
 800382a:	4798      	blx	r3
}
 800382c:	e02d      	b.n	800388a <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2241      	movs	r2, #65	@ 0x41
 8003832:	5c9b      	ldrb	r3, [r3, r2]
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b22      	cmp	r3, #34	@ 0x22
 8003838:	d127      	bne.n	800388a <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2241      	movs	r2, #65	@ 0x41
 800383e:	2120      	movs	r1, #32
 8003840:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2242      	movs	r2, #66	@ 0x42
 800384c:	5c9b      	ldrb	r3, [r3, r2]
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b40      	cmp	r3, #64	@ 0x40
 8003852:	d10d      	bne.n	8003870 <I2C_ITMasterCplt+0x178>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2242      	movs	r2, #66	@ 0x42
 8003858:	2100      	movs	r1, #0
 800385a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2240      	movs	r2, #64	@ 0x40
 8003860:	2100      	movs	r1, #0
 8003862:	5499      	strb	r1, [r3, r2]
      hi2c->MemRxCpltCallback(hi2c);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	0010      	movs	r0, r2
 800386c:	4798      	blx	r3
}
 800386e:	e00c      	b.n	800388a <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2242      	movs	r2, #66	@ 0x42
 8003874:	2100      	movs	r1, #0
 8003876:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2240      	movs	r2, #64	@ 0x40
 800387c:	2100      	movs	r1, #0
 800387e:	5499      	strb	r1, [r3, r2]
      hi2c->MasterRxCpltCallback(hi2c);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	0010      	movs	r0, r2
 8003888:	4798      	blx	r3
}
 800388a:	46c0      	nop			@ (mov r8, r8)
 800388c:	46bd      	mov	sp, r7
 800388e:	b006      	add	sp, #24
 8003890:	bd80      	pop	{r7, pc}
 8003892:	46c0      	nop			@ (mov r8, r8)
 8003894:	fe00e800 	.word	0xfe00e800
 8003898:	ffff0000 	.word	0xffff0000

0800389c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80038b2:	200f      	movs	r0, #15
 80038b4:	183b      	adds	r3, r7, r0
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	2141      	movs	r1, #65	@ 0x41
 80038ba:	5c52      	ldrb	r2, [r2, r1]
 80038bc:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2220      	movs	r2, #32
 80038c4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80038c6:	183b      	adds	r3, r7, r0
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	2b21      	cmp	r3, #33	@ 0x21
 80038cc:	d003      	beq.n	80038d6 <I2C_ITSlaveCplt+0x3a>
 80038ce:	183b      	adds	r3, r7, r0
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	2b29      	cmp	r3, #41	@ 0x29
 80038d4:	d109      	bne.n	80038ea <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80038d6:	4a7c      	ldr	r2, [pc, #496]	@ (8003ac8 <I2C_ITSlaveCplt+0x22c>)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	0011      	movs	r1, r2
 80038dc:	0018      	movs	r0, r3
 80038de:	f000 fd5d 	bl	800439c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2221      	movs	r2, #33	@ 0x21
 80038e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80038e8:	e011      	b.n	800390e <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80038ea:	220f      	movs	r2, #15
 80038ec:	18bb      	adds	r3, r7, r2
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	2b22      	cmp	r3, #34	@ 0x22
 80038f2:	d003      	beq.n	80038fc <I2C_ITSlaveCplt+0x60>
 80038f4:	18bb      	adds	r3, r7, r2
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80038fa:	d108      	bne.n	800390e <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80038fc:	4a73      	ldr	r2, [pc, #460]	@ (8003acc <I2C_ITSlaveCplt+0x230>)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	0011      	movs	r1, r2
 8003902:	0018      	movs	r0, r3
 8003904:	f000 fd4a 	bl	800439c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2222      	movs	r2, #34	@ 0x22
 800390c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2180      	movs	r1, #128	@ 0x80
 800391a:	0209      	lsls	r1, r1, #8
 800391c:	430a      	orrs	r2, r1
 800391e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4969      	ldr	r1, [pc, #420]	@ (8003ad0 <I2C_ITSlaveCplt+0x234>)
 800392c:	400a      	ands	r2, r1
 800392e:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	0018      	movs	r0, r3
 8003934:	f000 fa59 	bl	8003dea <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	2380      	movs	r3, #128	@ 0x80
 800393c:	01db      	lsls	r3, r3, #7
 800393e:	4013      	ands	r3, r2
 8003940:	d013      	beq.n	800396a <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4961      	ldr	r1, [pc, #388]	@ (8003ad4 <I2C_ITSlaveCplt+0x238>)
 800394e:	400a      	ands	r2, r1
 8003950:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003956:	2b00      	cmp	r3, #0
 8003958:	d01f      	beq.n	800399a <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	b29a      	uxth	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003968:	e017      	b.n	800399a <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	2380      	movs	r3, #128	@ 0x80
 800396e:	021b      	lsls	r3, r3, #8
 8003970:	4013      	ands	r3, r2
 8003972:	d012      	beq.n	800399a <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4956      	ldr	r1, [pc, #344]	@ (8003ad8 <I2C_ITSlaveCplt+0x23c>)
 8003980:	400a      	ands	r2, r1
 8003982:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003988:	2b00      	cmp	r3, #0
 800398a:	d006      	beq.n	800399a <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	b29a      	uxth	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	2204      	movs	r2, #4
 800399e:	4013      	ands	r3, r2
 80039a0:	d020      	beq.n	80039e4 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	2204      	movs	r2, #4
 80039a6:	4393      	bics	r3, r2
 80039a8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b4:	b2d2      	uxtb	r2, r2
 80039b6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039bc:	1c5a      	adds	r2, r3, #1
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00c      	beq.n	80039e4 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039ce:	3b01      	subs	r3, #1
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039da:	b29b      	uxth	r3, r3
 80039dc:	3b01      	subs	r3, #1
 80039de:	b29a      	uxth	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d005      	beq.n	80039fa <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f2:	2204      	movs	r2, #4
 80039f4:	431a      	orrs	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2242      	movs	r2, #66	@ 0x42
 80039fe:	2100      	movs	r1, #0
 8003a00:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d013      	beq.n	8003a38 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	0011      	movs	r1, r2
 8003a18:	0018      	movs	r0, r3
 8003a1a:	f000 f8b9 	bl	8003b90 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2241      	movs	r2, #65	@ 0x41
 8003a22:	5c9b      	ldrb	r3, [r3, r2]
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b28      	cmp	r3, #40	@ 0x28
 8003a28:	d14a      	bne.n	8003ac0 <I2C_ITSlaveCplt+0x224>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	0011      	movs	r1, r2
 8003a30:	0018      	movs	r0, r3
 8003a32:	f000 f855 	bl	8003ae0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003a36:	e043      	b.n	8003ac0 <I2C_ITSlaveCplt+0x224>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a3c:	4a27      	ldr	r2, [pc, #156]	@ (8003adc <I2C_ITSlaveCplt+0x240>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d017      	beq.n	8003a72 <I2C_ITSlaveCplt+0x1d6>
    I2C_ITSlaveSeqCplt(hi2c);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	0018      	movs	r0, r3
 8003a46:	f7ff fdf1 	bl	800362c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a23      	ldr	r2, [pc, #140]	@ (8003adc <I2C_ITSlaveCplt+0x240>)
 8003a4e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2241      	movs	r2, #65	@ 0x41
 8003a54:	2120      	movs	r1, #32
 8003a56:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2240      	movs	r2, #64	@ 0x40
 8003a62:	2100      	movs	r1, #0
 8003a64:	5499      	strb	r1, [r3, r2]
    hi2c->ListenCpltCallback(hi2c);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	0010      	movs	r0, r2
 8003a6e:	4798      	blx	r3
}
 8003a70:	e026      	b.n	8003ac0 <I2C_ITSlaveCplt+0x224>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2241      	movs	r2, #65	@ 0x41
 8003a76:	5c9b      	ldrb	r3, [r3, r2]
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b22      	cmp	r3, #34	@ 0x22
 8003a7c:	d110      	bne.n	8003aa0 <I2C_ITSlaveCplt+0x204>
    hi2c->State = HAL_I2C_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2241      	movs	r2, #65	@ 0x41
 8003a82:	2120      	movs	r1, #32
 8003a84:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2240      	movs	r2, #64	@ 0x40
 8003a90:	2100      	movs	r1, #0
 8003a92:	5499      	strb	r1, [r3, r2]
    hi2c->SlaveRxCpltCallback(hi2c);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	0010      	movs	r0, r2
 8003a9c:	4798      	blx	r3
}
 8003a9e:	e00f      	b.n	8003ac0 <I2C_ITSlaveCplt+0x224>
    hi2c->State = HAL_I2C_STATE_READY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2241      	movs	r2, #65	@ 0x41
 8003aa4:	2120      	movs	r1, #32
 8003aa6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2240      	movs	r2, #64	@ 0x40
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	5499      	strb	r1, [r3, r2]
    hi2c->SlaveTxCpltCallback(hi2c);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	0010      	movs	r0, r2
 8003abe:	4798      	blx	r3
}
 8003ac0:	46c0      	nop			@ (mov r8, r8)
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	b006      	add	sp, #24
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	00008001 	.word	0x00008001
 8003acc:	00008002 	.word	0x00008002
 8003ad0:	fe00e800 	.word	0xfe00e800
 8003ad4:	ffffbfff 	.word	0xffffbfff
 8003ad8:	ffff7fff 	.word	0xffff7fff
 8003adc:	ffff0000 	.word	0xffff0000

08003ae0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a26      	ldr	r2, [pc, #152]	@ (8003b88 <I2C_ITListenCplt+0xa8>)
 8003aee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2241      	movs	r2, #65	@ 0x41
 8003afa:	2120      	movs	r1, #32
 8003afc:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2242      	movs	r2, #66	@ 0x42
 8003b02:	2100      	movs	r1, #0
 8003b04:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	2204      	movs	r2, #4
 8003b10:	4013      	ands	r3, r2
 8003b12:	d022      	beq.n	8003b5a <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1e:	b2d2      	uxtb	r2, r2
 8003b20:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b26:	1c5a      	adds	r2, r3, #1
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d012      	beq.n	8003b5a <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	3b01      	subs	r3, #1
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b52:	2204      	movs	r2, #4
 8003b54:	431a      	orrs	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003b5a:	4a0c      	ldr	r2, [pc, #48]	@ (8003b8c <I2C_ITListenCplt+0xac>)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	0011      	movs	r1, r2
 8003b60:	0018      	movs	r0, r3
 8003b62:	f000 fc1b 	bl	800439c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2210      	movs	r2, #16
 8003b6c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2240      	movs	r2, #64	@ 0x40
 8003b72:	2100      	movs	r1, #0
 8003b74:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	0010      	movs	r0, r2
 8003b7e:	4798      	blx	r3
#else
  HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003b80:	46c0      	nop			@ (mov r8, r8)
 8003b82:	46bd      	mov	sp, r7
 8003b84:	b002      	add	sp, #8
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	ffff0000 	.word	0xffff0000
 8003b8c:	00008003 	.word	0x00008003

08003b90 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003b9a:	200f      	movs	r0, #15
 8003b9c:	183b      	adds	r3, r7, r0
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	2141      	movs	r1, #65	@ 0x41
 8003ba2:	5c52      	ldrb	r2, [r2, r1]
 8003ba4:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2242      	movs	r2, #66	@ 0x42
 8003baa:	2100      	movs	r1, #0
 8003bac:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a72      	ldr	r2, [pc, #456]	@ (8003d7c <I2C_ITError+0x1ec>)
 8003bb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003bc6:	183b      	adds	r3, r7, r0
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	2b28      	cmp	r3, #40	@ 0x28
 8003bcc:	d007      	beq.n	8003bde <I2C_ITError+0x4e>
 8003bce:	183b      	adds	r3, r7, r0
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	2b29      	cmp	r3, #41	@ 0x29
 8003bd4:	d003      	beq.n	8003bde <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003bd6:	183b      	adds	r3, r7, r0
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	2b2a      	cmp	r3, #42	@ 0x2a
 8003bdc:	d10c      	bne.n	8003bf8 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2103      	movs	r1, #3
 8003be2:	0018      	movs	r0, r3
 8003be4:	f000 fbda 	bl	800439c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2241      	movs	r2, #65	@ 0x41
 8003bec:	2128      	movs	r1, #40	@ 0x28
 8003bee:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a63      	ldr	r2, [pc, #396]	@ (8003d80 <I2C_ITError+0x1f0>)
 8003bf4:	635a      	str	r2, [r3, #52]	@ 0x34
 8003bf6:	e032      	b.n	8003c5e <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003bf8:	4a62      	ldr	r2, [pc, #392]	@ (8003d84 <I2C_ITError+0x1f4>)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	0011      	movs	r1, r2
 8003bfe:	0018      	movs	r0, r3
 8003c00:	f000 fbcc 	bl	800439c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	0018      	movs	r0, r3
 8003c08:	f000 f8ef 	bl	8003dea <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2241      	movs	r2, #65	@ 0x41
 8003c10:	5c9b      	ldrb	r3, [r3, r2]
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b60      	cmp	r3, #96	@ 0x60
 8003c16:	d01f      	beq.n	8003c58 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2241      	movs	r2, #65	@ 0x41
 8003c1c:	2120      	movs	r1, #32
 8003c1e:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	2220      	movs	r2, #32
 8003c28:	4013      	ands	r3, r2
 8003c2a:	2b20      	cmp	r3, #32
 8003c2c:	d114      	bne.n	8003c58 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	2210      	movs	r2, #16
 8003c36:	4013      	ands	r3, r2
 8003c38:	2b10      	cmp	r3, #16
 8003c3a:	d109      	bne.n	8003c50 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2210      	movs	r2, #16
 8003c42:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c48:	2204      	movs	r2, #4
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2220      	movs	r2, #32
 8003c56:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c62:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d03b      	beq.n	8003ce4 <I2C_ITError+0x154>
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	2b11      	cmp	r3, #17
 8003c70:	d002      	beq.n	8003c78 <I2C_ITError+0xe8>
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2b21      	cmp	r3, #33	@ 0x21
 8003c76:	d135      	bne.n	8003ce4 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	2380      	movs	r3, #128	@ 0x80
 8003c80:	01db      	lsls	r3, r3, #7
 8003c82:	401a      	ands	r2, r3
 8003c84:	2380      	movs	r3, #128	@ 0x80
 8003c86:	01db      	lsls	r3, r3, #7
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d107      	bne.n	8003c9c <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	493c      	ldr	r1, [pc, #240]	@ (8003d88 <I2C_ITError+0x1f8>)
 8003c98:	400a      	ands	r2, r1
 8003c9a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	f7fe f946 	bl	8001f32 <HAL_DMA_GetState>
 8003ca6:	0003      	movs	r3, r0
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d016      	beq.n	8003cda <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb0:	4a36      	ldr	r2, [pc, #216]	@ (8003d8c <I2C_ITError+0x1fc>)
 8003cb2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2240      	movs	r2, #64	@ 0x40
 8003cb8:	2100      	movs	r1, #0
 8003cba:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cc0:	0018      	movs	r0, r3
 8003cc2:	f7fe f84f 	bl	8001d64 <HAL_DMA_Abort_IT>
 8003cc6:	1e03      	subs	r3, r0, #0
 8003cc8:	d051      	beq.n	8003d6e <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd4:	0018      	movs	r0, r3
 8003cd6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003cd8:	e049      	b.n	8003d6e <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	0018      	movs	r0, r3
 8003cde:	f000 f859 	bl	8003d94 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003ce2:	e044      	b.n	8003d6e <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d03b      	beq.n	8003d64 <I2C_ITError+0x1d4>
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	2b12      	cmp	r3, #18
 8003cf0:	d002      	beq.n	8003cf8 <I2C_ITError+0x168>
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	2b22      	cmp	r3, #34	@ 0x22
 8003cf6:	d135      	bne.n	8003d64 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	2380      	movs	r3, #128	@ 0x80
 8003d00:	021b      	lsls	r3, r3, #8
 8003d02:	401a      	ands	r2, r3
 8003d04:	2380      	movs	r3, #128	@ 0x80
 8003d06:	021b      	lsls	r3, r3, #8
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d107      	bne.n	8003d1c <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	491e      	ldr	r1, [pc, #120]	@ (8003d90 <I2C_ITError+0x200>)
 8003d18:	400a      	ands	r2, r1
 8003d1a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d20:	0018      	movs	r0, r3
 8003d22:	f7fe f906 	bl	8001f32 <HAL_DMA_GetState>
 8003d26:	0003      	movs	r3, r0
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d016      	beq.n	8003d5a <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d30:	4a16      	ldr	r2, [pc, #88]	@ (8003d8c <I2C_ITError+0x1fc>)
 8003d32:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2240      	movs	r2, #64	@ 0x40
 8003d38:	2100      	movs	r1, #0
 8003d3a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d40:	0018      	movs	r0, r3
 8003d42:	f7fe f80f 	bl	8001d64 <HAL_DMA_Abort_IT>
 8003d46:	1e03      	subs	r3, r0, #0
 8003d48:	d013      	beq.n	8003d72 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d54:	0018      	movs	r0, r3
 8003d56:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d58:	e00b      	b.n	8003d72 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	0018      	movs	r0, r3
 8003d5e:	f000 f819 	bl	8003d94 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d62:	e006      	b.n	8003d72 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	0018      	movs	r0, r3
 8003d68:	f000 f814 	bl	8003d94 <I2C_TreatErrorCallback>
  }
}
 8003d6c:	e002      	b.n	8003d74 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003d6e:	46c0      	nop			@ (mov r8, r8)
 8003d70:	e000      	b.n	8003d74 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d72:	46c0      	nop			@ (mov r8, r8)
}
 8003d74:	46c0      	nop			@ (mov r8, r8)
 8003d76:	46bd      	mov	sp, r7
 8003d78:	b004      	add	sp, #16
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	ffff0000 	.word	0xffff0000
 8003d80:	08002c5d 	.word	0x08002c5d
 8003d84:	00008003 	.word	0x00008003
 8003d88:	ffffbfff 	.word	0xffffbfff
 8003d8c:	08003e2f 	.word	0x08003e2f
 8003d90:	ffff7fff 	.word	0xffff7fff

08003d94 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2241      	movs	r2, #65	@ 0x41
 8003da0:	5c9b      	ldrb	r3, [r3, r2]
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b60      	cmp	r3, #96	@ 0x60
 8003da6:	d110      	bne.n	8003dca <I2C_TreatErrorCallback+0x36>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2241      	movs	r2, #65	@ 0x41
 8003dac:	2120      	movs	r1, #32
 8003dae:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2240      	movs	r2, #64	@ 0x40
 8003dba:	2100      	movs	r1, #0
 8003dbc:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	0010      	movs	r0, r2
 8003dc6:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003dc8:	e00b      	b.n	8003de2 <I2C_TreatErrorCallback+0x4e>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2240      	movs	r2, #64	@ 0x40
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCallback(hi2c);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	0010      	movs	r0, r2
 8003de0:	4798      	blx	r3
}
 8003de2:	46c0      	nop			@ (mov r8, r8)
 8003de4:	46bd      	mov	sp, r7
 8003de6:	b002      	add	sp, #8
 8003de8:	bd80      	pop	{r7, pc}

08003dea <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b082      	sub	sp, #8
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	2202      	movs	r2, #2
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d103      	bne.n	8003e08 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2200      	movs	r2, #0
 8003e06:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	4013      	ands	r3, r2
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d007      	beq.n	8003e26 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	699a      	ldr	r2, [r3, #24]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2101      	movs	r1, #1
 8003e22:	430a      	orrs	r2, r1
 8003e24:	619a      	str	r2, [r3, #24]
  }
}
 8003e26:	46c0      	nop			@ (mov r8, r8)
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	b002      	add	sp, #8
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b084      	sub	sp, #16
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d003      	beq.n	8003e4c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e48:	2200      	movs	r2, #0
 8003e4a:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d003      	beq.n	8003e5c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e58:	2200      	movs	r2, #0
 8003e5a:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	0018      	movs	r0, r3
 8003e60:	f7ff ff98 	bl	8003d94 <I2C_TreatErrorCallback>
}
 8003e64:	46c0      	nop			@ (mov r8, r8)
 8003e66:	46bd      	mov	sp, r7
 8003e68:	b004      	add	sp, #16
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	603b      	str	r3, [r7, #0]
 8003e78:	1dfb      	adds	r3, r7, #7
 8003e7a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e7c:	e030      	b.n	8003ee0 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	3301      	adds	r3, #1
 8003e82:	d02d      	beq.n	8003ee0 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e84:	f7fd f9b6 	bl	80011f4 <HAL_GetTick>
 8003e88:	0002      	movs	r2, r0
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	683a      	ldr	r2, [r7, #0]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d302      	bcc.n	8003e9a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d122      	bne.n	8003ee0 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	425a      	negs	r2, r3
 8003eaa:	4153      	adcs	r3, r2
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	001a      	movs	r2, r3
 8003eb0:	1dfb      	adds	r3, r7, #7
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d113      	bne.n	8003ee0 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2241      	movs	r2, #65	@ 0x41
 8003ec8:	2120      	movs	r1, #32
 8003eca:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2242      	movs	r2, #66	@ 0x42
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2240      	movs	r2, #64	@ 0x40
 8003ed8:	2100      	movs	r1, #0
 8003eda:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e00f      	b.n	8003f00 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	425a      	negs	r2, r3
 8003ef0:	4153      	adcs	r3, r2
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	001a      	movs	r2, r3
 8003ef6:	1dfb      	adds	r3, r7, #7
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d0bf      	beq.n	8003e7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	0018      	movs	r0, r3
 8003f02:	46bd      	mov	sp, r7
 8003f04:	b004      	add	sp, #16
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f14:	e032      	b.n	8003f7c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	68b9      	ldr	r1, [r7, #8]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	f000 f87d 	bl	800401c <I2C_IsErrorOccurred>
 8003f22:	1e03      	subs	r3, r0, #0
 8003f24:	d001      	beq.n	8003f2a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e030      	b.n	8003f8c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	d025      	beq.n	8003f7c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f30:	f7fd f960 	bl	80011f4 <HAL_GetTick>
 8003f34:	0002      	movs	r2, r0
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d302      	bcc.n	8003f46 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d11a      	bne.n	8003f7c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	2202      	movs	r2, #2
 8003f4e:	4013      	ands	r3, r2
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d013      	beq.n	8003f7c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f58:	2220      	movs	r2, #32
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2241      	movs	r2, #65	@ 0x41
 8003f64:	2120      	movs	r1, #32
 8003f66:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2242      	movs	r2, #66	@ 0x42
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2240      	movs	r2, #64	@ 0x40
 8003f74:	2100      	movs	r1, #0
 8003f76:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e007      	b.n	8003f8c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	2202      	movs	r2, #2
 8003f84:	4013      	ands	r3, r2
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d1c5      	bne.n	8003f16 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	b004      	add	sp, #16
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fa0:	e02f      	b.n	8004002 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	68b9      	ldr	r1, [r7, #8]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	0018      	movs	r0, r3
 8003faa:	f000 f837 	bl	800401c <I2C_IsErrorOccurred>
 8003fae:	1e03      	subs	r3, r0, #0
 8003fb0:	d001      	beq.n	8003fb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e02d      	b.n	8004012 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fb6:	f7fd f91d 	bl	80011f4 <HAL_GetTick>
 8003fba:	0002      	movs	r2, r0
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	68ba      	ldr	r2, [r7, #8]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d302      	bcc.n	8003fcc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d11a      	bne.n	8004002 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	2b20      	cmp	r3, #32
 8003fd8:	d013      	beq.n	8004002 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fde:	2220      	movs	r2, #32
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2241      	movs	r2, #65	@ 0x41
 8003fea:	2120      	movs	r1, #32
 8003fec:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2242      	movs	r2, #66	@ 0x42
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2240      	movs	r2, #64	@ 0x40
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e007      	b.n	8004012 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	2220      	movs	r2, #32
 800400a:	4013      	ands	r3, r2
 800400c:	2b20      	cmp	r3, #32
 800400e:	d1c8      	bne.n	8003fa2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	0018      	movs	r0, r3
 8004014:	46bd      	mov	sp, r7
 8004016:	b004      	add	sp, #16
 8004018:	bd80      	pop	{r7, pc}
	...

0800401c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b08a      	sub	sp, #40	@ 0x28
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004028:	2327      	movs	r3, #39	@ 0x27
 800402a:	18fb      	adds	r3, r7, r3
 800402c:	2200      	movs	r2, #0
 800402e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004038:	2300      	movs	r3, #0
 800403a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	2210      	movs	r2, #16
 8004044:	4013      	ands	r3, r2
 8004046:	d100      	bne.n	800404a <I2C_IsErrorOccurred+0x2e>
 8004048:	e079      	b.n	800413e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2210      	movs	r2, #16
 8004050:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004052:	e057      	b.n	8004104 <I2C_IsErrorOccurred+0xe8>
 8004054:	2227      	movs	r2, #39	@ 0x27
 8004056:	18bb      	adds	r3, r7, r2
 8004058:	18ba      	adds	r2, r7, r2
 800405a:	7812      	ldrb	r2, [r2, #0]
 800405c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	3301      	adds	r3, #1
 8004062:	d04f      	beq.n	8004104 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004064:	f7fd f8c6 	bl	80011f4 <HAL_GetTick>
 8004068:	0002      	movs	r2, r0
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	429a      	cmp	r2, r3
 8004072:	d302      	bcc.n	800407a <I2C_IsErrorOccurred+0x5e>
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d144      	bne.n	8004104 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	2380      	movs	r3, #128	@ 0x80
 8004082:	01db      	lsls	r3, r3, #7
 8004084:	4013      	ands	r3, r2
 8004086:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004088:	2013      	movs	r0, #19
 800408a:	183b      	adds	r3, r7, r0
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	2142      	movs	r1, #66	@ 0x42
 8004090:	5c52      	ldrb	r2, [r2, r1]
 8004092:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	699a      	ldr	r2, [r3, #24]
 800409a:	2380      	movs	r3, #128	@ 0x80
 800409c:	021b      	lsls	r3, r3, #8
 800409e:	401a      	ands	r2, r3
 80040a0:	2380      	movs	r3, #128	@ 0x80
 80040a2:	021b      	lsls	r3, r3, #8
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d126      	bne.n	80040f6 <I2C_IsErrorOccurred+0xda>
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	2380      	movs	r3, #128	@ 0x80
 80040ac:	01db      	lsls	r3, r3, #7
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d021      	beq.n	80040f6 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80040b2:	183b      	adds	r3, r7, r0
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	2b20      	cmp	r3, #32
 80040b8:	d01d      	beq.n	80040f6 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2180      	movs	r1, #128	@ 0x80
 80040c6:	01c9      	lsls	r1, r1, #7
 80040c8:	430a      	orrs	r2, r1
 80040ca:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80040cc:	f7fd f892 	bl	80011f4 <HAL_GetTick>
 80040d0:	0003      	movs	r3, r0
 80040d2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040d4:	e00f      	b.n	80040f6 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80040d6:	f7fd f88d 	bl	80011f4 <HAL_GetTick>
 80040da:	0002      	movs	r2, r0
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b19      	cmp	r3, #25
 80040e2:	d908      	bls.n	80040f6 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80040e4:	6a3b      	ldr	r3, [r7, #32]
 80040e6:	2220      	movs	r2, #32
 80040e8:	4313      	orrs	r3, r2
 80040ea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80040ec:	2327      	movs	r3, #39	@ 0x27
 80040ee:	18fb      	adds	r3, r7, r3
 80040f0:	2201      	movs	r2, #1
 80040f2:	701a      	strb	r2, [r3, #0]

              break;
 80040f4:	e006      	b.n	8004104 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	2220      	movs	r2, #32
 80040fe:	4013      	ands	r3, r2
 8004100:	2b20      	cmp	r3, #32
 8004102:	d1e8      	bne.n	80040d6 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	2220      	movs	r2, #32
 800410c:	4013      	ands	r3, r2
 800410e:	2b20      	cmp	r3, #32
 8004110:	d004      	beq.n	800411c <I2C_IsErrorOccurred+0x100>
 8004112:	2327      	movs	r3, #39	@ 0x27
 8004114:	18fb      	adds	r3, r7, r3
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d09b      	beq.n	8004054 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800411c:	2327      	movs	r3, #39	@ 0x27
 800411e:	18fb      	adds	r3, r7, r3
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d103      	bne.n	800412e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2220      	movs	r2, #32
 800412c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800412e:	6a3b      	ldr	r3, [r7, #32]
 8004130:	2204      	movs	r2, #4
 8004132:	4313      	orrs	r3, r2
 8004134:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004136:	2327      	movs	r3, #39	@ 0x27
 8004138:	18fb      	adds	r3, r7, r3
 800413a:	2201      	movs	r2, #1
 800413c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004146:	69ba      	ldr	r2, [r7, #24]
 8004148:	2380      	movs	r3, #128	@ 0x80
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	4013      	ands	r3, r2
 800414e:	d00c      	beq.n	800416a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004150:	6a3b      	ldr	r3, [r7, #32]
 8004152:	2201      	movs	r2, #1
 8004154:	4313      	orrs	r3, r2
 8004156:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2280      	movs	r2, #128	@ 0x80
 800415e:	0052      	lsls	r2, r2, #1
 8004160:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004162:	2327      	movs	r3, #39	@ 0x27
 8004164:	18fb      	adds	r3, r7, r3
 8004166:	2201      	movs	r2, #1
 8004168:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800416a:	69ba      	ldr	r2, [r7, #24]
 800416c:	2380      	movs	r3, #128	@ 0x80
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	4013      	ands	r3, r2
 8004172:	d00c      	beq.n	800418e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004174:	6a3b      	ldr	r3, [r7, #32]
 8004176:	2208      	movs	r2, #8
 8004178:	4313      	orrs	r3, r2
 800417a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2280      	movs	r2, #128	@ 0x80
 8004182:	00d2      	lsls	r2, r2, #3
 8004184:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004186:	2327      	movs	r3, #39	@ 0x27
 8004188:	18fb      	adds	r3, r7, r3
 800418a:	2201      	movs	r2, #1
 800418c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800418e:	69ba      	ldr	r2, [r7, #24]
 8004190:	2380      	movs	r3, #128	@ 0x80
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	4013      	ands	r3, r2
 8004196:	d00c      	beq.n	80041b2 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	2202      	movs	r2, #2
 800419c:	4313      	orrs	r3, r2
 800419e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2280      	movs	r2, #128	@ 0x80
 80041a6:	0092      	lsls	r2, r2, #2
 80041a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041aa:	2327      	movs	r3, #39	@ 0x27
 80041ac:	18fb      	adds	r3, r7, r3
 80041ae:	2201      	movs	r2, #1
 80041b0:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80041b2:	2327      	movs	r3, #39	@ 0x27
 80041b4:	18fb      	adds	r3, r7, r3
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d01d      	beq.n	80041f8 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	0018      	movs	r0, r3
 80041c0:	f7ff fe13 	bl	8003dea <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	490e      	ldr	r1, [pc, #56]	@ (8004208 <I2C_IsErrorOccurred+0x1ec>)
 80041d0:	400a      	ands	r2, r1
 80041d2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041d8:	6a3b      	ldr	r3, [r7, #32]
 80041da:	431a      	orrs	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2241      	movs	r2, #65	@ 0x41
 80041e4:	2120      	movs	r1, #32
 80041e6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2242      	movs	r2, #66	@ 0x42
 80041ec:	2100      	movs	r1, #0
 80041ee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2240      	movs	r2, #64	@ 0x40
 80041f4:	2100      	movs	r1, #0
 80041f6:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80041f8:	2327      	movs	r3, #39	@ 0x27
 80041fa:	18fb      	adds	r3, r7, r3
 80041fc:	781b      	ldrb	r3, [r3, #0]
}
 80041fe:	0018      	movs	r0, r3
 8004200:	46bd      	mov	sp, r7
 8004202:	b00a      	add	sp, #40	@ 0x28
 8004204:	bd80      	pop	{r7, pc}
 8004206:	46c0      	nop			@ (mov r8, r8)
 8004208:	fe00e800 	.word	0xfe00e800

0800420c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800420c:	b590      	push	{r4, r7, lr}
 800420e:	b087      	sub	sp, #28
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	0008      	movs	r0, r1
 8004216:	0011      	movs	r1, r2
 8004218:	607b      	str	r3, [r7, #4]
 800421a:	240a      	movs	r4, #10
 800421c:	193b      	adds	r3, r7, r4
 800421e:	1c02      	adds	r2, r0, #0
 8004220:	801a      	strh	r2, [r3, #0]
 8004222:	2009      	movs	r0, #9
 8004224:	183b      	adds	r3, r7, r0
 8004226:	1c0a      	adds	r2, r1, #0
 8004228:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800422a:	193b      	adds	r3, r7, r4
 800422c:	881b      	ldrh	r3, [r3, #0]
 800422e:	059b      	lsls	r3, r3, #22
 8004230:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004232:	183b      	adds	r3, r7, r0
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	0419      	lsls	r1, r3, #16
 8004238:	23ff      	movs	r3, #255	@ 0xff
 800423a:	041b      	lsls	r3, r3, #16
 800423c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800423e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004246:	4313      	orrs	r3, r2
 8004248:	005b      	lsls	r3, r3, #1
 800424a:	085b      	lsrs	r3, r3, #1
 800424c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004256:	0d51      	lsrs	r1, r2, #21
 8004258:	2280      	movs	r2, #128	@ 0x80
 800425a:	00d2      	lsls	r2, r2, #3
 800425c:	400a      	ands	r2, r1
 800425e:	4907      	ldr	r1, [pc, #28]	@ (800427c <I2C_TransferConfig+0x70>)
 8004260:	430a      	orrs	r2, r1
 8004262:	43d2      	mvns	r2, r2
 8004264:	401a      	ands	r2, r3
 8004266:	0011      	movs	r1, r2
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	430a      	orrs	r2, r1
 8004270:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004272:	46c0      	nop			@ (mov r8, r8)
 8004274:	46bd      	mov	sp, r7
 8004276:	b007      	add	sp, #28
 8004278:	bd90      	pop	{r4, r7, pc}
 800427a:	46c0      	nop			@ (mov r8, r8)
 800427c:	03ff63ff 	.word	0x03ff63ff

08004280 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	000a      	movs	r2, r1
 800428a:	1cbb      	adds	r3, r7, #2
 800428c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800428e:	2300      	movs	r3, #0
 8004290:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004296:	4b3e      	ldr	r3, [pc, #248]	@ (8004390 <I2C_Enable_IRQ+0x110>)
 8004298:	429a      	cmp	r2, r3
 800429a:	d035      	beq.n	8004308 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80042a0:	4b3c      	ldr	r3, [pc, #240]	@ (8004394 <I2C_Enable_IRQ+0x114>)
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d030      	beq.n	8004308 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80042aa:	4b3b      	ldr	r3, [pc, #236]	@ (8004398 <I2C_Enable_IRQ+0x118>)
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d02b      	beq.n	8004308 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80042b0:	1cbb      	adds	r3, r7, #2
 80042b2:	2200      	movs	r2, #0
 80042b4:	5e9b      	ldrsh	r3, [r3, r2]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	da03      	bge.n	80042c2 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	22b8      	movs	r2, #184	@ 0xb8
 80042be:	4313      	orrs	r3, r2
 80042c0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80042c2:	1cbb      	adds	r3, r7, #2
 80042c4:	881b      	ldrh	r3, [r3, #0]
 80042c6:	2201      	movs	r2, #1
 80042c8:	4013      	ands	r3, r2
 80042ca:	d003      	beq.n	80042d4 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	22f2      	movs	r2, #242	@ 0xf2
 80042d0:	4313      	orrs	r3, r2
 80042d2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80042d4:	1cbb      	adds	r3, r7, #2
 80042d6:	881b      	ldrh	r3, [r3, #0]
 80042d8:	2202      	movs	r2, #2
 80042da:	4013      	ands	r3, r2
 80042dc:	d003      	beq.n	80042e6 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	22f4      	movs	r2, #244	@ 0xf4
 80042e2:	4313      	orrs	r3, r2
 80042e4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80042e6:	1cbb      	adds	r3, r7, #2
 80042e8:	881b      	ldrh	r3, [r3, #0]
 80042ea:	2b10      	cmp	r3, #16
 80042ec:	d103      	bne.n	80042f6 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2290      	movs	r2, #144	@ 0x90
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80042f6:	1cbb      	adds	r3, r7, #2
 80042f8:	881b      	ldrh	r3, [r3, #0]
 80042fa:	2b20      	cmp	r3, #32
 80042fc:	d13c      	bne.n	8004378 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2220      	movs	r2, #32
 8004302:	4313      	orrs	r3, r2
 8004304:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004306:	e037      	b.n	8004378 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004308:	1cbb      	adds	r3, r7, #2
 800430a:	2200      	movs	r2, #0
 800430c:	5e9b      	ldrsh	r3, [r3, r2]
 800430e:	2b00      	cmp	r3, #0
 8004310:	da03      	bge.n	800431a <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	22b8      	movs	r2, #184	@ 0xb8
 8004316:	4313      	orrs	r3, r2
 8004318:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800431a:	1cbb      	adds	r3, r7, #2
 800431c:	881b      	ldrh	r3, [r3, #0]
 800431e:	2201      	movs	r2, #1
 8004320:	4013      	ands	r3, r2
 8004322:	d003      	beq.n	800432c <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	22f2      	movs	r2, #242	@ 0xf2
 8004328:	4313      	orrs	r3, r2
 800432a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800432c:	1cbb      	adds	r3, r7, #2
 800432e:	881b      	ldrh	r3, [r3, #0]
 8004330:	2202      	movs	r2, #2
 8004332:	4013      	ands	r3, r2
 8004334:	d003      	beq.n	800433e <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	22f4      	movs	r2, #244	@ 0xf4
 800433a:	4313      	orrs	r3, r2
 800433c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800433e:	1cbb      	adds	r3, r7, #2
 8004340:	881b      	ldrh	r3, [r3, #0]
 8004342:	2b10      	cmp	r3, #16
 8004344:	d103      	bne.n	800434e <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2290      	movs	r2, #144	@ 0x90
 800434a:	4313      	orrs	r3, r2
 800434c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800434e:	1cbb      	adds	r3, r7, #2
 8004350:	881b      	ldrh	r3, [r3, #0]
 8004352:	2b20      	cmp	r3, #32
 8004354:	d103      	bne.n	800435e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2260      	movs	r2, #96	@ 0x60
 800435a:	4313      	orrs	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004362:	4b0d      	ldr	r3, [pc, #52]	@ (8004398 <I2C_Enable_IRQ+0x118>)
 8004364:	429a      	cmp	r2, r3
 8004366:	d007      	beq.n	8004378 <I2C_Enable_IRQ+0xf8>
 8004368:	1cbb      	adds	r3, r7, #2
 800436a:	881b      	ldrh	r3, [r3, #0]
 800436c:	2b40      	cmp	r3, #64	@ 0x40
 800436e:	d103      	bne.n	8004378 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2240      	movs	r2, #64	@ 0x40
 8004374:	4313      	orrs	r3, r2
 8004376:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6819      	ldr	r1, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	430a      	orrs	r2, r1
 8004386:	601a      	str	r2, [r3, #0]
}
 8004388:	46c0      	nop			@ (mov r8, r8)
 800438a:	46bd      	mov	sp, r7
 800438c:	b004      	add	sp, #16
 800438e:	bd80      	pop	{r7, pc}
 8004390:	08002e5d 	.word	0x08002e5d
 8004394:	0800328d 	.word	0x0800328d
 8004398:	08003055 	.word	0x08003055

0800439c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	000a      	movs	r2, r1
 80043a6:	1cbb      	adds	r3, r7, #2
 80043a8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80043aa:	2300      	movs	r3, #0
 80043ac:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80043ae:	1cbb      	adds	r3, r7, #2
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	2201      	movs	r2, #1
 80043b4:	4013      	ands	r3, r2
 80043b6:	d010      	beq.n	80043da <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2242      	movs	r2, #66	@ 0x42
 80043bc:	4313      	orrs	r3, r2
 80043be:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2241      	movs	r2, #65	@ 0x41
 80043c4:	5c9b      	ldrb	r3, [r3, r2]
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	001a      	movs	r2, r3
 80043ca:	2328      	movs	r3, #40	@ 0x28
 80043cc:	4013      	ands	r3, r2
 80043ce:	2b28      	cmp	r3, #40	@ 0x28
 80043d0:	d003      	beq.n	80043da <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	22b0      	movs	r2, #176	@ 0xb0
 80043d6:	4313      	orrs	r3, r2
 80043d8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80043da:	1cbb      	adds	r3, r7, #2
 80043dc:	881b      	ldrh	r3, [r3, #0]
 80043de:	2202      	movs	r2, #2
 80043e0:	4013      	ands	r3, r2
 80043e2:	d010      	beq.n	8004406 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2244      	movs	r2, #68	@ 0x44
 80043e8:	4313      	orrs	r3, r2
 80043ea:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2241      	movs	r2, #65	@ 0x41
 80043f0:	5c9b      	ldrb	r3, [r3, r2]
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	001a      	movs	r2, r3
 80043f6:	2328      	movs	r3, #40	@ 0x28
 80043f8:	4013      	ands	r3, r2
 80043fa:	2b28      	cmp	r3, #40	@ 0x28
 80043fc:	d003      	beq.n	8004406 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	22b0      	movs	r2, #176	@ 0xb0
 8004402:	4313      	orrs	r3, r2
 8004404:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004406:	1cbb      	adds	r3, r7, #2
 8004408:	2200      	movs	r2, #0
 800440a:	5e9b      	ldrsh	r3, [r3, r2]
 800440c:	2b00      	cmp	r3, #0
 800440e:	da03      	bge.n	8004418 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	22b8      	movs	r2, #184	@ 0xb8
 8004414:	4313      	orrs	r3, r2
 8004416:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004418:	1cbb      	adds	r3, r7, #2
 800441a:	881b      	ldrh	r3, [r3, #0]
 800441c:	2b10      	cmp	r3, #16
 800441e:	d103      	bne.n	8004428 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2290      	movs	r2, #144	@ 0x90
 8004424:	4313      	orrs	r3, r2
 8004426:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004428:	1cbb      	adds	r3, r7, #2
 800442a:	881b      	ldrh	r3, [r3, #0]
 800442c:	2b20      	cmp	r3, #32
 800442e:	d103      	bne.n	8004438 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2220      	movs	r2, #32
 8004434:	4313      	orrs	r3, r2
 8004436:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004438:	1cbb      	adds	r3, r7, #2
 800443a:	881b      	ldrh	r3, [r3, #0]
 800443c:	2b40      	cmp	r3, #64	@ 0x40
 800443e:	d103      	bne.n	8004448 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2240      	movs	r2, #64	@ 0x40
 8004444:	4313      	orrs	r3, r2
 8004446:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	43d9      	mvns	r1, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	400a      	ands	r2, r1
 8004458:	601a      	str	r2, [r3, #0]
}
 800445a:	46c0      	nop			@ (mov r8, r8)
 800445c:	46bd      	mov	sp, r7
 800445e:	b004      	add	sp, #16
 8004460:	bd80      	pop	{r7, pc}
	...

08004464 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2241      	movs	r2, #65	@ 0x41
 8004472:	5c9b      	ldrb	r3, [r3, r2]
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b20      	cmp	r3, #32
 8004478:	d138      	bne.n	80044ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2240      	movs	r2, #64	@ 0x40
 800447e:	5c9b      	ldrb	r3, [r3, r2]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d101      	bne.n	8004488 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004484:	2302      	movs	r3, #2
 8004486:	e032      	b.n	80044ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2240      	movs	r2, #64	@ 0x40
 800448c:	2101      	movs	r1, #1
 800448e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2241      	movs	r2, #65	@ 0x41
 8004494:	2124      	movs	r1, #36	@ 0x24
 8004496:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2101      	movs	r1, #1
 80044a4:	438a      	bics	r2, r1
 80044a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4911      	ldr	r1, [pc, #68]	@ (80044f8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80044b4:	400a      	ands	r2, r1
 80044b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6819      	ldr	r1, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	430a      	orrs	r2, r1
 80044c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2101      	movs	r1, #1
 80044d4:	430a      	orrs	r2, r1
 80044d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2241      	movs	r2, #65	@ 0x41
 80044dc:	2120      	movs	r1, #32
 80044de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2240      	movs	r2, #64	@ 0x40
 80044e4:	2100      	movs	r1, #0
 80044e6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80044e8:	2300      	movs	r3, #0
 80044ea:	e000      	b.n	80044ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80044ec:	2302      	movs	r3, #2
  }
}
 80044ee:	0018      	movs	r0, r3
 80044f0:	46bd      	mov	sp, r7
 80044f2:	b002      	add	sp, #8
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	46c0      	nop			@ (mov r8, r8)
 80044f8:	ffffefff 	.word	0xffffefff

080044fc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2241      	movs	r2, #65	@ 0x41
 800450a:	5c9b      	ldrb	r3, [r3, r2]
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b20      	cmp	r3, #32
 8004510:	d139      	bne.n	8004586 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2240      	movs	r2, #64	@ 0x40
 8004516:	5c9b      	ldrb	r3, [r3, r2]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d101      	bne.n	8004520 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800451c:	2302      	movs	r3, #2
 800451e:	e033      	b.n	8004588 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2240      	movs	r2, #64	@ 0x40
 8004524:	2101      	movs	r1, #1
 8004526:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2241      	movs	r2, #65	@ 0x41
 800452c:	2124      	movs	r1, #36	@ 0x24
 800452e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2101      	movs	r1, #1
 800453c:	438a      	bics	r2, r1
 800453e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	4a11      	ldr	r2, [pc, #68]	@ (8004590 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800454c:	4013      	ands	r3, r2
 800454e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	021b      	lsls	r3, r3, #8
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	4313      	orrs	r3, r2
 8004558:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2101      	movs	r1, #1
 800456e:	430a      	orrs	r2, r1
 8004570:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2241      	movs	r2, #65	@ 0x41
 8004576:	2120      	movs	r1, #32
 8004578:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2240      	movs	r2, #64	@ 0x40
 800457e:	2100      	movs	r1, #0
 8004580:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004582:	2300      	movs	r3, #0
 8004584:	e000      	b.n	8004588 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004586:	2302      	movs	r3, #2
  }
}
 8004588:	0018      	movs	r0, r3
 800458a:	46bd      	mov	sp, r7
 800458c:	b004      	add	sp, #16
 800458e:	bd80      	pop	{r7, pc}
 8004590:	fffff0ff 	.word	0xfffff0ff

08004594 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b088      	sub	sp, #32
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d102      	bne.n	80045a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	f000 fb76 	bl	8004c94 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2201      	movs	r2, #1
 80045ae:	4013      	ands	r3, r2
 80045b0:	d100      	bne.n	80045b4 <HAL_RCC_OscConfig+0x20>
 80045b2:	e08e      	b.n	80046d2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80045b4:	4bc5      	ldr	r3, [pc, #788]	@ (80048cc <HAL_RCC_OscConfig+0x338>)
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	220c      	movs	r2, #12
 80045ba:	4013      	ands	r3, r2
 80045bc:	2b04      	cmp	r3, #4
 80045be:	d00e      	beq.n	80045de <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80045c0:	4bc2      	ldr	r3, [pc, #776]	@ (80048cc <HAL_RCC_OscConfig+0x338>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	220c      	movs	r2, #12
 80045c6:	4013      	ands	r3, r2
 80045c8:	2b08      	cmp	r3, #8
 80045ca:	d117      	bne.n	80045fc <HAL_RCC_OscConfig+0x68>
 80045cc:	4bbf      	ldr	r3, [pc, #764]	@ (80048cc <HAL_RCC_OscConfig+0x338>)
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	23c0      	movs	r3, #192	@ 0xc0
 80045d2:	025b      	lsls	r3, r3, #9
 80045d4:	401a      	ands	r2, r3
 80045d6:	2380      	movs	r3, #128	@ 0x80
 80045d8:	025b      	lsls	r3, r3, #9
 80045da:	429a      	cmp	r2, r3
 80045dc:	d10e      	bne.n	80045fc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045de:	4bbb      	ldr	r3, [pc, #748]	@ (80048cc <HAL_RCC_OscConfig+0x338>)
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	2380      	movs	r3, #128	@ 0x80
 80045e4:	029b      	lsls	r3, r3, #10
 80045e6:	4013      	ands	r3, r2
 80045e8:	d100      	bne.n	80045ec <HAL_RCC_OscConfig+0x58>
 80045ea:	e071      	b.n	80046d0 <HAL_RCC_OscConfig+0x13c>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d000      	beq.n	80045f6 <HAL_RCC_OscConfig+0x62>
 80045f4:	e06c      	b.n	80046d0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	f000 fb4c 	bl	8004c94 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d107      	bne.n	8004614 <HAL_RCC_OscConfig+0x80>
 8004604:	4bb1      	ldr	r3, [pc, #708]	@ (80048cc <HAL_RCC_OscConfig+0x338>)
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	4bb0      	ldr	r3, [pc, #704]	@ (80048cc <HAL_RCC_OscConfig+0x338>)
 800460a:	2180      	movs	r1, #128	@ 0x80
 800460c:	0249      	lsls	r1, r1, #9
 800460e:	430a      	orrs	r2, r1
 8004610:	601a      	str	r2, [r3, #0]
 8004612:	e02f      	b.n	8004674 <HAL_RCC_OscConfig+0xe0>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10c      	bne.n	8004636 <HAL_RCC_OscConfig+0xa2>
 800461c:	4bab      	ldr	r3, [pc, #684]	@ (80048cc <HAL_RCC_OscConfig+0x338>)
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	4baa      	ldr	r3, [pc, #680]	@ (80048cc <HAL_RCC_OscConfig+0x338>)
 8004622:	49ab      	ldr	r1, [pc, #684]	@ (80048d0 <HAL_RCC_OscConfig+0x33c>)
 8004624:	400a      	ands	r2, r1
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	4ba8      	ldr	r3, [pc, #672]	@ (80048cc <HAL_RCC_OscConfig+0x338>)
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	4ba7      	ldr	r3, [pc, #668]	@ (80048cc <HAL_RCC_OscConfig+0x338>)
 800462e:	49a9      	ldr	r1, [pc, #676]	@ (80048d4 <HAL_RCC_OscConfig+0x340>)
 8004630:	400a      	ands	r2, r1
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	e01e      	b.n	8004674 <HAL_RCC_OscConfig+0xe0>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	2b05      	cmp	r3, #5
 800463c:	d10e      	bne.n	800465c <HAL_RCC_OscConfig+0xc8>
 800463e:	4ba3      	ldr	r3, [pc, #652]	@ (80048cc <HAL_RCC_OscConfig+0x338>)
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	4ba2      	ldr	r3, [pc, #648]	@ (80048cc <HAL_RCC_OscConfig+0x338>)
 8004644:	2180      	movs	r1, #128	@ 0x80
 8004646:	02c9      	lsls	r1, r1, #11
 8004648:	430a      	orrs	r2, r1
 800464a:	601a      	str	r2, [r3, #0]
 800464c:	4b9f      	ldr	r3, [pc, #636]	@ (80048cc <HAL_RCC_OscConfig+0x338>)
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	4b9e      	ldr	r3, [pc, #632]	@ (80048cc <HAL_RCC_OscConfig+0x338>)
 8004652:	2180      	movs	r1, #128	@ 0x80
 8004654:	0249      	lsls	r1, r1, #9
 8004656:	430a      	orrs	r2, r1
 8004658:	601a      	str	r2, [r3, #0]
 800465a:	e00b      	b.n	8004674 <HAL_RCC_OscConfig+0xe0>
 800465c:	4b9b      	ldr	r3, [pc, #620]	@ (80048cc <HAL_RCC_OscConfig+0x338>)
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	4b9a      	ldr	r3, [pc, #616]	@ (80048cc <HAL_RCC_OscConfig+0x338>)
 8004662:	499b      	ldr	r1, [pc, #620]	@ (80048d0 <HAL_RCC_OscConfig+0x33c>)
 8004664:	400a      	ands	r2, r1
 8004666:	601a      	str	r2, [r3, #0]
 8004668:	4b98      	ldr	r3, [pc, #608]	@ (80048cc <HAL_RCC_OscConfig+0x338>)
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	4b97      	ldr	r3, [pc, #604]	@ (80048cc <HAL_RCC_OscConfig+0x338>)
 800466e:	4999      	ldr	r1, [pc, #612]	@ (80048d4 <HAL_RCC_OscConfig+0x340>)
 8004670:	400a      	ands	r2, r1
 8004672:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d014      	beq.n	80046a6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800467c:	f7fc fdba 	bl	80011f4 <HAL_GetTick>
 8004680:	0003      	movs	r3, r0
 8004682:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004684:	e008      	b.n	8004698 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004686:	f7fc fdb5 	bl	80011f4 <HAL_GetTick>
 800468a:	0002      	movs	r2, r0
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	2b64      	cmp	r3, #100	@ 0x64
 8004692:	d901      	bls.n	8004698 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e2fd      	b.n	8004c94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004698:	4b8c      	ldr	r3, [pc, #560]	@ (80048cc <HAL_RCC_OscConfig+0x338>)
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	2380      	movs	r3, #128	@ 0x80
 800469e:	029b      	lsls	r3, r3, #10
 80046a0:	4013      	ands	r3, r2
 80046a2:	d0f0      	beq.n	8004686 <HAL_RCC_OscConfig+0xf2>
 80046a4:	e015      	b.n	80046d2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a6:	f7fc fda5 	bl	80011f4 <HAL_GetTick>
 80046aa:	0003      	movs	r3, r0
 80046ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ae:	e008      	b.n	80046c2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046b0:	f7fc fda0 	bl	80011f4 <HAL_GetTick>
 80046b4:	0002      	movs	r2, r0
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b64      	cmp	r3, #100	@ 0x64
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e2e8      	b.n	8004c94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046c2:	4b82      	ldr	r3, [pc, #520]	@ (80048cc <HAL_RCC_OscConfig+0x338>)
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	2380      	movs	r3, #128	@ 0x80
 80046c8:	029b      	lsls	r3, r3, #10
 80046ca:	4013      	ands	r3, r2
 80046cc:	d1f0      	bne.n	80046b0 <HAL_RCC_OscConfig+0x11c>
 80046ce:	e000      	b.n	80046d2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046d0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2202      	movs	r2, #2
 80046d8:	4013      	ands	r3, r2
 80046da:	d100      	bne.n	80046de <HAL_RCC_OscConfig+0x14a>
 80046dc:	e06c      	b.n	80047b8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80046de:	4b7b      	ldr	r3, [pc, #492]	@ (80048cc <HAL_RCC_OscConfig+0x338>)
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	220c      	movs	r2, #12
 80046e4:	4013      	ands	r3, r2
 80046e6:	d00e      	beq.n	8004706 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80046e8:	4b78      	ldr	r3, [pc, #480]	@ (80048cc <HAL_RCC_OscConfig+0x338>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	220c      	movs	r2, #12
 80046ee:	4013      	ands	r3, r2
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d11f      	bne.n	8004734 <HAL_RCC_OscConfig+0x1a0>
 80046f4:	4b75      	ldr	r3, [pc, #468]	@ (80048cc <HAL_RCC_OscConfig+0x338>)
 80046f6:	685a      	ldr	r2, [r3, #4]
 80046f8:	23c0      	movs	r3, #192	@ 0xc0
 80046fa:	025b      	lsls	r3, r3, #9
 80046fc:	401a      	ands	r2, r3
 80046fe:	2380      	movs	r3, #128	@ 0x80
 8004700:	021b      	lsls	r3, r3, #8
 8004702:	429a      	cmp	r2, r3
 8004704:	d116      	bne.n	8004734 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004706:	4b71      	ldr	r3, [pc, #452]	@ (80048cc <HAL_RCC_OscConfig+0x338>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2202      	movs	r2, #2
 800470c:	4013      	ands	r3, r2
 800470e:	d005      	beq.n	800471c <HAL_RCC_OscConfig+0x188>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d001      	beq.n	800471c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e2bb      	b.n	8004c94 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800471c:	4b6b      	ldr	r3, [pc, #428]	@ (80048cc <HAL_RCC_OscConfig+0x338>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	22f8      	movs	r2, #248	@ 0xf8
 8004722:	4393      	bics	r3, r2
 8004724:	0019      	movs	r1, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	00da      	lsls	r2, r3, #3
 800472c:	4b67      	ldr	r3, [pc, #412]	@ (80048cc <HAL_RCC_OscConfig+0x338>)
 800472e:	430a      	orrs	r2, r1
 8004730:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004732:	e041      	b.n	80047b8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d024      	beq.n	8004786 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800473c:	4b63      	ldr	r3, [pc, #396]	@ (80048cc <HAL_RCC_OscConfig+0x338>)
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	4b62      	ldr	r3, [pc, #392]	@ (80048cc <HAL_RCC_OscConfig+0x338>)
 8004742:	2101      	movs	r1, #1
 8004744:	430a      	orrs	r2, r1
 8004746:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004748:	f7fc fd54 	bl	80011f4 <HAL_GetTick>
 800474c:	0003      	movs	r3, r0
 800474e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004750:	e008      	b.n	8004764 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004752:	f7fc fd4f 	bl	80011f4 <HAL_GetTick>
 8004756:	0002      	movs	r2, r0
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d901      	bls.n	8004764 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e297      	b.n	8004c94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004764:	4b59      	ldr	r3, [pc, #356]	@ (80048cc <HAL_RCC_OscConfig+0x338>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2202      	movs	r2, #2
 800476a:	4013      	ands	r3, r2
 800476c:	d0f1      	beq.n	8004752 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800476e:	4b57      	ldr	r3, [pc, #348]	@ (80048cc <HAL_RCC_OscConfig+0x338>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	22f8      	movs	r2, #248	@ 0xf8
 8004774:	4393      	bics	r3, r2
 8004776:	0019      	movs	r1, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	00da      	lsls	r2, r3, #3
 800477e:	4b53      	ldr	r3, [pc, #332]	@ (80048cc <HAL_RCC_OscConfig+0x338>)
 8004780:	430a      	orrs	r2, r1
 8004782:	601a      	str	r2, [r3, #0]
 8004784:	e018      	b.n	80047b8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004786:	4b51      	ldr	r3, [pc, #324]	@ (80048cc <HAL_RCC_OscConfig+0x338>)
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	4b50      	ldr	r3, [pc, #320]	@ (80048cc <HAL_RCC_OscConfig+0x338>)
 800478c:	2101      	movs	r1, #1
 800478e:	438a      	bics	r2, r1
 8004790:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004792:	f7fc fd2f 	bl	80011f4 <HAL_GetTick>
 8004796:	0003      	movs	r3, r0
 8004798:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800479c:	f7fc fd2a 	bl	80011f4 <HAL_GetTick>
 80047a0:	0002      	movs	r2, r0
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e272      	b.n	8004c94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ae:	4b47      	ldr	r3, [pc, #284]	@ (80048cc <HAL_RCC_OscConfig+0x338>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2202      	movs	r2, #2
 80047b4:	4013      	ands	r3, r2
 80047b6:	d1f1      	bne.n	800479c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2208      	movs	r2, #8
 80047be:	4013      	ands	r3, r2
 80047c0:	d036      	beq.n	8004830 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	69db      	ldr	r3, [r3, #28]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d019      	beq.n	80047fe <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047ca:	4b40      	ldr	r3, [pc, #256]	@ (80048cc <HAL_RCC_OscConfig+0x338>)
 80047cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047ce:	4b3f      	ldr	r3, [pc, #252]	@ (80048cc <HAL_RCC_OscConfig+0x338>)
 80047d0:	2101      	movs	r1, #1
 80047d2:	430a      	orrs	r2, r1
 80047d4:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047d6:	f7fc fd0d 	bl	80011f4 <HAL_GetTick>
 80047da:	0003      	movs	r3, r0
 80047dc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047de:	e008      	b.n	80047f2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047e0:	f7fc fd08 	bl	80011f4 <HAL_GetTick>
 80047e4:	0002      	movs	r2, r0
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e250      	b.n	8004c94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047f2:	4b36      	ldr	r3, [pc, #216]	@ (80048cc <HAL_RCC_OscConfig+0x338>)
 80047f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f6:	2202      	movs	r2, #2
 80047f8:	4013      	ands	r3, r2
 80047fa:	d0f1      	beq.n	80047e0 <HAL_RCC_OscConfig+0x24c>
 80047fc:	e018      	b.n	8004830 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047fe:	4b33      	ldr	r3, [pc, #204]	@ (80048cc <HAL_RCC_OscConfig+0x338>)
 8004800:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004802:	4b32      	ldr	r3, [pc, #200]	@ (80048cc <HAL_RCC_OscConfig+0x338>)
 8004804:	2101      	movs	r1, #1
 8004806:	438a      	bics	r2, r1
 8004808:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800480a:	f7fc fcf3 	bl	80011f4 <HAL_GetTick>
 800480e:	0003      	movs	r3, r0
 8004810:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004812:	e008      	b.n	8004826 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004814:	f7fc fcee 	bl	80011f4 <HAL_GetTick>
 8004818:	0002      	movs	r2, r0
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e236      	b.n	8004c94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004826:	4b29      	ldr	r3, [pc, #164]	@ (80048cc <HAL_RCC_OscConfig+0x338>)
 8004828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800482a:	2202      	movs	r2, #2
 800482c:	4013      	ands	r3, r2
 800482e:	d1f1      	bne.n	8004814 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2204      	movs	r2, #4
 8004836:	4013      	ands	r3, r2
 8004838:	d100      	bne.n	800483c <HAL_RCC_OscConfig+0x2a8>
 800483a:	e0b5      	b.n	80049a8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800483c:	201f      	movs	r0, #31
 800483e:	183b      	adds	r3, r7, r0
 8004840:	2200      	movs	r2, #0
 8004842:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004844:	4b21      	ldr	r3, [pc, #132]	@ (80048cc <HAL_RCC_OscConfig+0x338>)
 8004846:	69da      	ldr	r2, [r3, #28]
 8004848:	2380      	movs	r3, #128	@ 0x80
 800484a:	055b      	lsls	r3, r3, #21
 800484c:	4013      	ands	r3, r2
 800484e:	d110      	bne.n	8004872 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004850:	4b1e      	ldr	r3, [pc, #120]	@ (80048cc <HAL_RCC_OscConfig+0x338>)
 8004852:	69da      	ldr	r2, [r3, #28]
 8004854:	4b1d      	ldr	r3, [pc, #116]	@ (80048cc <HAL_RCC_OscConfig+0x338>)
 8004856:	2180      	movs	r1, #128	@ 0x80
 8004858:	0549      	lsls	r1, r1, #21
 800485a:	430a      	orrs	r2, r1
 800485c:	61da      	str	r2, [r3, #28]
 800485e:	4b1b      	ldr	r3, [pc, #108]	@ (80048cc <HAL_RCC_OscConfig+0x338>)
 8004860:	69da      	ldr	r2, [r3, #28]
 8004862:	2380      	movs	r3, #128	@ 0x80
 8004864:	055b      	lsls	r3, r3, #21
 8004866:	4013      	ands	r3, r2
 8004868:	60fb      	str	r3, [r7, #12]
 800486a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800486c:	183b      	adds	r3, r7, r0
 800486e:	2201      	movs	r2, #1
 8004870:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004872:	4b19      	ldr	r3, [pc, #100]	@ (80048d8 <HAL_RCC_OscConfig+0x344>)
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	2380      	movs	r3, #128	@ 0x80
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	4013      	ands	r3, r2
 800487c:	d11a      	bne.n	80048b4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800487e:	4b16      	ldr	r3, [pc, #88]	@ (80048d8 <HAL_RCC_OscConfig+0x344>)
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	4b15      	ldr	r3, [pc, #84]	@ (80048d8 <HAL_RCC_OscConfig+0x344>)
 8004884:	2180      	movs	r1, #128	@ 0x80
 8004886:	0049      	lsls	r1, r1, #1
 8004888:	430a      	orrs	r2, r1
 800488a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800488c:	f7fc fcb2 	bl	80011f4 <HAL_GetTick>
 8004890:	0003      	movs	r3, r0
 8004892:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004894:	e008      	b.n	80048a8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004896:	f7fc fcad 	bl	80011f4 <HAL_GetTick>
 800489a:	0002      	movs	r2, r0
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b64      	cmp	r3, #100	@ 0x64
 80048a2:	d901      	bls.n	80048a8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e1f5      	b.n	8004c94 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048a8:	4b0b      	ldr	r3, [pc, #44]	@ (80048d8 <HAL_RCC_OscConfig+0x344>)
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	2380      	movs	r3, #128	@ 0x80
 80048ae:	005b      	lsls	r3, r3, #1
 80048b0:	4013      	ands	r3, r2
 80048b2:	d0f0      	beq.n	8004896 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d10f      	bne.n	80048dc <HAL_RCC_OscConfig+0x348>
 80048bc:	4b03      	ldr	r3, [pc, #12]	@ (80048cc <HAL_RCC_OscConfig+0x338>)
 80048be:	6a1a      	ldr	r2, [r3, #32]
 80048c0:	4b02      	ldr	r3, [pc, #8]	@ (80048cc <HAL_RCC_OscConfig+0x338>)
 80048c2:	2101      	movs	r1, #1
 80048c4:	430a      	orrs	r2, r1
 80048c6:	621a      	str	r2, [r3, #32]
 80048c8:	e036      	b.n	8004938 <HAL_RCC_OscConfig+0x3a4>
 80048ca:	46c0      	nop			@ (mov r8, r8)
 80048cc:	40021000 	.word	0x40021000
 80048d0:	fffeffff 	.word	0xfffeffff
 80048d4:	fffbffff 	.word	0xfffbffff
 80048d8:	40007000 	.word	0x40007000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d10c      	bne.n	80048fe <HAL_RCC_OscConfig+0x36a>
 80048e4:	4bca      	ldr	r3, [pc, #808]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 80048e6:	6a1a      	ldr	r2, [r3, #32]
 80048e8:	4bc9      	ldr	r3, [pc, #804]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 80048ea:	2101      	movs	r1, #1
 80048ec:	438a      	bics	r2, r1
 80048ee:	621a      	str	r2, [r3, #32]
 80048f0:	4bc7      	ldr	r3, [pc, #796]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 80048f2:	6a1a      	ldr	r2, [r3, #32]
 80048f4:	4bc6      	ldr	r3, [pc, #792]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 80048f6:	2104      	movs	r1, #4
 80048f8:	438a      	bics	r2, r1
 80048fa:	621a      	str	r2, [r3, #32]
 80048fc:	e01c      	b.n	8004938 <HAL_RCC_OscConfig+0x3a4>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	2b05      	cmp	r3, #5
 8004904:	d10c      	bne.n	8004920 <HAL_RCC_OscConfig+0x38c>
 8004906:	4bc2      	ldr	r3, [pc, #776]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004908:	6a1a      	ldr	r2, [r3, #32]
 800490a:	4bc1      	ldr	r3, [pc, #772]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 800490c:	2104      	movs	r1, #4
 800490e:	430a      	orrs	r2, r1
 8004910:	621a      	str	r2, [r3, #32]
 8004912:	4bbf      	ldr	r3, [pc, #764]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004914:	6a1a      	ldr	r2, [r3, #32]
 8004916:	4bbe      	ldr	r3, [pc, #760]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004918:	2101      	movs	r1, #1
 800491a:	430a      	orrs	r2, r1
 800491c:	621a      	str	r2, [r3, #32]
 800491e:	e00b      	b.n	8004938 <HAL_RCC_OscConfig+0x3a4>
 8004920:	4bbb      	ldr	r3, [pc, #748]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004922:	6a1a      	ldr	r2, [r3, #32]
 8004924:	4bba      	ldr	r3, [pc, #744]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004926:	2101      	movs	r1, #1
 8004928:	438a      	bics	r2, r1
 800492a:	621a      	str	r2, [r3, #32]
 800492c:	4bb8      	ldr	r3, [pc, #736]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 800492e:	6a1a      	ldr	r2, [r3, #32]
 8004930:	4bb7      	ldr	r3, [pc, #732]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004932:	2104      	movs	r1, #4
 8004934:	438a      	bics	r2, r1
 8004936:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d014      	beq.n	800496a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004940:	f7fc fc58 	bl	80011f4 <HAL_GetTick>
 8004944:	0003      	movs	r3, r0
 8004946:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004948:	e009      	b.n	800495e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800494a:	f7fc fc53 	bl	80011f4 <HAL_GetTick>
 800494e:	0002      	movs	r2, r0
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	4aaf      	ldr	r2, [pc, #700]	@ (8004c14 <HAL_RCC_OscConfig+0x680>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e19a      	b.n	8004c94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800495e:	4bac      	ldr	r3, [pc, #688]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	2202      	movs	r2, #2
 8004964:	4013      	ands	r3, r2
 8004966:	d0f0      	beq.n	800494a <HAL_RCC_OscConfig+0x3b6>
 8004968:	e013      	b.n	8004992 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800496a:	f7fc fc43 	bl	80011f4 <HAL_GetTick>
 800496e:	0003      	movs	r3, r0
 8004970:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004972:	e009      	b.n	8004988 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004974:	f7fc fc3e 	bl	80011f4 <HAL_GetTick>
 8004978:	0002      	movs	r2, r0
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	4aa5      	ldr	r2, [pc, #660]	@ (8004c14 <HAL_RCC_OscConfig+0x680>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d901      	bls.n	8004988 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e185      	b.n	8004c94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004988:	4ba1      	ldr	r3, [pc, #644]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	2202      	movs	r2, #2
 800498e:	4013      	ands	r3, r2
 8004990:	d1f0      	bne.n	8004974 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004992:	231f      	movs	r3, #31
 8004994:	18fb      	adds	r3, r7, r3
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d105      	bne.n	80049a8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800499c:	4b9c      	ldr	r3, [pc, #624]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 800499e:	69da      	ldr	r2, [r3, #28]
 80049a0:	4b9b      	ldr	r3, [pc, #620]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 80049a2:	499d      	ldr	r1, [pc, #628]	@ (8004c18 <HAL_RCC_OscConfig+0x684>)
 80049a4:	400a      	ands	r2, r1
 80049a6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2210      	movs	r2, #16
 80049ae:	4013      	ands	r3, r2
 80049b0:	d063      	beq.n	8004a7a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d12a      	bne.n	8004a10 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80049ba:	4b95      	ldr	r3, [pc, #596]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 80049bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049be:	4b94      	ldr	r3, [pc, #592]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 80049c0:	2104      	movs	r1, #4
 80049c2:	430a      	orrs	r2, r1
 80049c4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80049c6:	4b92      	ldr	r3, [pc, #584]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 80049c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049ca:	4b91      	ldr	r3, [pc, #580]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 80049cc:	2101      	movs	r1, #1
 80049ce:	430a      	orrs	r2, r1
 80049d0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049d2:	f7fc fc0f 	bl	80011f4 <HAL_GetTick>
 80049d6:	0003      	movs	r3, r0
 80049d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80049da:	e008      	b.n	80049ee <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80049dc:	f7fc fc0a 	bl	80011f4 <HAL_GetTick>
 80049e0:	0002      	movs	r2, r0
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e152      	b.n	8004c94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80049ee:	4b88      	ldr	r3, [pc, #544]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 80049f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049f2:	2202      	movs	r2, #2
 80049f4:	4013      	ands	r3, r2
 80049f6:	d0f1      	beq.n	80049dc <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80049f8:	4b85      	ldr	r3, [pc, #532]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 80049fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049fc:	22f8      	movs	r2, #248	@ 0xf8
 80049fe:	4393      	bics	r3, r2
 8004a00:	0019      	movs	r1, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	00da      	lsls	r2, r3, #3
 8004a08:	4b81      	ldr	r3, [pc, #516]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8004a0e:	e034      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	695b      	ldr	r3, [r3, #20]
 8004a14:	3305      	adds	r3, #5
 8004a16:	d111      	bne.n	8004a3c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004a18:	4b7d      	ldr	r3, [pc, #500]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004a1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a1c:	4b7c      	ldr	r3, [pc, #496]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004a1e:	2104      	movs	r1, #4
 8004a20:	438a      	bics	r2, r1
 8004a22:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004a24:	4b7a      	ldr	r3, [pc, #488]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004a26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a28:	22f8      	movs	r2, #248	@ 0xf8
 8004a2a:	4393      	bics	r3, r2
 8004a2c:	0019      	movs	r1, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	00da      	lsls	r2, r3, #3
 8004a34:	4b76      	ldr	r3, [pc, #472]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004a36:	430a      	orrs	r2, r1
 8004a38:	635a      	str	r2, [r3, #52]	@ 0x34
 8004a3a:	e01e      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004a3c:	4b74      	ldr	r3, [pc, #464]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004a3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a40:	4b73      	ldr	r3, [pc, #460]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004a42:	2104      	movs	r1, #4
 8004a44:	430a      	orrs	r2, r1
 8004a46:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004a48:	4b71      	ldr	r3, [pc, #452]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004a4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a4c:	4b70      	ldr	r3, [pc, #448]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004a4e:	2101      	movs	r1, #1
 8004a50:	438a      	bics	r2, r1
 8004a52:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a54:	f7fc fbce 	bl	80011f4 <HAL_GetTick>
 8004a58:	0003      	movs	r3, r0
 8004a5a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004a5c:	e008      	b.n	8004a70 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004a5e:	f7fc fbc9 	bl	80011f4 <HAL_GetTick>
 8004a62:	0002      	movs	r2, r0
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d901      	bls.n	8004a70 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e111      	b.n	8004c94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004a70:	4b67      	ldr	r3, [pc, #412]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004a72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a74:	2202      	movs	r2, #2
 8004a76:	4013      	ands	r3, r2
 8004a78:	d1f1      	bne.n	8004a5e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	4013      	ands	r3, r2
 8004a82:	d05c      	beq.n	8004b3e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004a84:	4b62      	ldr	r3, [pc, #392]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	220c      	movs	r2, #12
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	2b0c      	cmp	r3, #12
 8004a8e:	d00e      	beq.n	8004aae <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004a90:	4b5f      	ldr	r3, [pc, #380]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	220c      	movs	r2, #12
 8004a96:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	d114      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004a9c:	4b5c      	ldr	r3, [pc, #368]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	23c0      	movs	r3, #192	@ 0xc0
 8004aa2:	025b      	lsls	r3, r3, #9
 8004aa4:	401a      	ands	r2, r3
 8004aa6:	23c0      	movs	r3, #192	@ 0xc0
 8004aa8:	025b      	lsls	r3, r3, #9
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d10b      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004aae:	4b58      	ldr	r3, [pc, #352]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004ab0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ab2:	2380      	movs	r3, #128	@ 0x80
 8004ab4:	029b      	lsls	r3, r3, #10
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	d040      	beq.n	8004b3c <HAL_RCC_OscConfig+0x5a8>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d03c      	beq.n	8004b3c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e0e6      	b.n	8004c94 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d01b      	beq.n	8004b06 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004ace:	4b50      	ldr	r3, [pc, #320]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004ad0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ad2:	4b4f      	ldr	r3, [pc, #316]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004ad4:	2180      	movs	r1, #128	@ 0x80
 8004ad6:	0249      	lsls	r1, r1, #9
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004adc:	f7fc fb8a 	bl	80011f4 <HAL_GetTick>
 8004ae0:	0003      	movs	r3, r0
 8004ae2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004ae4:	e008      	b.n	8004af8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ae6:	f7fc fb85 	bl	80011f4 <HAL_GetTick>
 8004aea:	0002      	movs	r2, r0
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d901      	bls.n	8004af8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e0cd      	b.n	8004c94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004af8:	4b45      	ldr	r3, [pc, #276]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004afa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004afc:	2380      	movs	r3, #128	@ 0x80
 8004afe:	029b      	lsls	r3, r3, #10
 8004b00:	4013      	ands	r3, r2
 8004b02:	d0f0      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x552>
 8004b04:	e01b      	b.n	8004b3e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004b06:	4b42      	ldr	r3, [pc, #264]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004b08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b0a:	4b41      	ldr	r3, [pc, #260]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004b0c:	4943      	ldr	r1, [pc, #268]	@ (8004c1c <HAL_RCC_OscConfig+0x688>)
 8004b0e:	400a      	ands	r2, r1
 8004b10:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b12:	f7fc fb6f 	bl	80011f4 <HAL_GetTick>
 8004b16:	0003      	movs	r3, r0
 8004b18:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004b1a:	e008      	b.n	8004b2e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b1c:	f7fc fb6a 	bl	80011f4 <HAL_GetTick>
 8004b20:	0002      	movs	r2, r0
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e0b2      	b.n	8004c94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004b2e:	4b38      	ldr	r3, [pc, #224]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004b30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b32:	2380      	movs	r3, #128	@ 0x80
 8004b34:	029b      	lsls	r3, r3, #10
 8004b36:	4013      	ands	r3, r2
 8004b38:	d1f0      	bne.n	8004b1c <HAL_RCC_OscConfig+0x588>
 8004b3a:	e000      	b.n	8004b3e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004b3c:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d100      	bne.n	8004b48 <HAL_RCC_OscConfig+0x5b4>
 8004b46:	e0a4      	b.n	8004c92 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b48:	4b31      	ldr	r3, [pc, #196]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	220c      	movs	r2, #12
 8004b4e:	4013      	ands	r3, r2
 8004b50:	2b08      	cmp	r3, #8
 8004b52:	d100      	bne.n	8004b56 <HAL_RCC_OscConfig+0x5c2>
 8004b54:	e078      	b.n	8004c48 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d14c      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b5e:	4b2c      	ldr	r3, [pc, #176]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	4b2b      	ldr	r3, [pc, #172]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004b64:	492e      	ldr	r1, [pc, #184]	@ (8004c20 <HAL_RCC_OscConfig+0x68c>)
 8004b66:	400a      	ands	r2, r1
 8004b68:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b6a:	f7fc fb43 	bl	80011f4 <HAL_GetTick>
 8004b6e:	0003      	movs	r3, r0
 8004b70:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b72:	e008      	b.n	8004b86 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b74:	f7fc fb3e 	bl	80011f4 <HAL_GetTick>
 8004b78:	0002      	movs	r2, r0
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e086      	b.n	8004c94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b86:	4b22      	ldr	r3, [pc, #136]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	2380      	movs	r3, #128	@ 0x80
 8004b8c:	049b      	lsls	r3, r3, #18
 8004b8e:	4013      	ands	r3, r2
 8004b90:	d1f0      	bne.n	8004b74 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b92:	4b1f      	ldr	r3, [pc, #124]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b96:	220f      	movs	r2, #15
 8004b98:	4393      	bics	r3, r2
 8004b9a:	0019      	movs	r1, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ba0:	4b1b      	ldr	r3, [pc, #108]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004ba6:	4b1a      	ldr	r3, [pc, #104]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	4a1e      	ldr	r2, [pc, #120]	@ (8004c24 <HAL_RCC_OscConfig+0x690>)
 8004bac:	4013      	ands	r3, r2
 8004bae:	0019      	movs	r1, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	4b15      	ldr	r3, [pc, #84]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bc0:	4b13      	ldr	r3, [pc, #76]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	4b12      	ldr	r3, [pc, #72]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004bc6:	2180      	movs	r1, #128	@ 0x80
 8004bc8:	0449      	lsls	r1, r1, #17
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bce:	f7fc fb11 	bl	80011f4 <HAL_GetTick>
 8004bd2:	0003      	movs	r3, r0
 8004bd4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004bd6:	e008      	b.n	8004bea <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bd8:	f7fc fb0c 	bl	80011f4 <HAL_GetTick>
 8004bdc:	0002      	movs	r2, r0
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e054      	b.n	8004c94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004bea:	4b09      	ldr	r3, [pc, #36]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	2380      	movs	r3, #128	@ 0x80
 8004bf0:	049b      	lsls	r3, r3, #18
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	d0f0      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x644>
 8004bf6:	e04c      	b.n	8004c92 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bf8:	4b05      	ldr	r3, [pc, #20]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	4b04      	ldr	r3, [pc, #16]	@ (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004bfe:	4908      	ldr	r1, [pc, #32]	@ (8004c20 <HAL_RCC_OscConfig+0x68c>)
 8004c00:	400a      	ands	r2, r1
 8004c02:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c04:	f7fc faf6 	bl	80011f4 <HAL_GetTick>
 8004c08:	0003      	movs	r3, r0
 8004c0a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c0c:	e015      	b.n	8004c3a <HAL_RCC_OscConfig+0x6a6>
 8004c0e:	46c0      	nop			@ (mov r8, r8)
 8004c10:	40021000 	.word	0x40021000
 8004c14:	00001388 	.word	0x00001388
 8004c18:	efffffff 	.word	0xefffffff
 8004c1c:	fffeffff 	.word	0xfffeffff
 8004c20:	feffffff 	.word	0xfeffffff
 8004c24:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c28:	f7fc fae4 	bl	80011f4 <HAL_GetTick>
 8004c2c:	0002      	movs	r2, r0
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e02c      	b.n	8004c94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c3a:	4b18      	ldr	r3, [pc, #96]	@ (8004c9c <HAL_RCC_OscConfig+0x708>)
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	2380      	movs	r3, #128	@ 0x80
 8004c40:	049b      	lsls	r3, r3, #18
 8004c42:	4013      	ands	r3, r2
 8004c44:	d1f0      	bne.n	8004c28 <HAL_RCC_OscConfig+0x694>
 8004c46:	e024      	b.n	8004c92 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d101      	bne.n	8004c54 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e01f      	b.n	8004c94 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004c54:	4b11      	ldr	r3, [pc, #68]	@ (8004c9c <HAL_RCC_OscConfig+0x708>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004c5a:	4b10      	ldr	r3, [pc, #64]	@ (8004c9c <HAL_RCC_OscConfig+0x708>)
 8004c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c5e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	23c0      	movs	r3, #192	@ 0xc0
 8004c64:	025b      	lsls	r3, r3, #9
 8004c66:	401a      	ands	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d10e      	bne.n	8004c8e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	220f      	movs	r2, #15
 8004c74:	401a      	ands	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d107      	bne.n	8004c8e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	23f0      	movs	r3, #240	@ 0xf0
 8004c82:	039b      	lsls	r3, r3, #14
 8004c84:	401a      	ands	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d001      	beq.n	8004c92 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e000      	b.n	8004c94 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	0018      	movs	r0, r3
 8004c96:	46bd      	mov	sp, r7
 8004c98:	b008      	add	sp, #32
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	40021000 	.word	0x40021000

08004ca0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d101      	bne.n	8004cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e0bf      	b.n	8004e34 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cb4:	4b61      	ldr	r3, [pc, #388]	@ (8004e3c <HAL_RCC_ClockConfig+0x19c>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	4013      	ands	r3, r2
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d911      	bls.n	8004ce6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cc2:	4b5e      	ldr	r3, [pc, #376]	@ (8004e3c <HAL_RCC_ClockConfig+0x19c>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	4393      	bics	r3, r2
 8004cca:	0019      	movs	r1, r3
 8004ccc:	4b5b      	ldr	r3, [pc, #364]	@ (8004e3c <HAL_RCC_ClockConfig+0x19c>)
 8004cce:	683a      	ldr	r2, [r7, #0]
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cd4:	4b59      	ldr	r3, [pc, #356]	@ (8004e3c <HAL_RCC_ClockConfig+0x19c>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	4013      	ands	r3, r2
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d001      	beq.n	8004ce6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e0a6      	b.n	8004e34 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2202      	movs	r2, #2
 8004cec:	4013      	ands	r3, r2
 8004cee:	d015      	beq.n	8004d1c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2204      	movs	r2, #4
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	d006      	beq.n	8004d08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004cfa:	4b51      	ldr	r3, [pc, #324]	@ (8004e40 <HAL_RCC_ClockConfig+0x1a0>)
 8004cfc:	685a      	ldr	r2, [r3, #4]
 8004cfe:	4b50      	ldr	r3, [pc, #320]	@ (8004e40 <HAL_RCC_ClockConfig+0x1a0>)
 8004d00:	21e0      	movs	r1, #224	@ 0xe0
 8004d02:	00c9      	lsls	r1, r1, #3
 8004d04:	430a      	orrs	r2, r1
 8004d06:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d08:	4b4d      	ldr	r3, [pc, #308]	@ (8004e40 <HAL_RCC_ClockConfig+0x1a0>)
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	22f0      	movs	r2, #240	@ 0xf0
 8004d0e:	4393      	bics	r3, r2
 8004d10:	0019      	movs	r1, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	689a      	ldr	r2, [r3, #8]
 8004d16:	4b4a      	ldr	r3, [pc, #296]	@ (8004e40 <HAL_RCC_ClockConfig+0x1a0>)
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2201      	movs	r2, #1
 8004d22:	4013      	ands	r3, r2
 8004d24:	d04c      	beq.n	8004dc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d107      	bne.n	8004d3e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d2e:	4b44      	ldr	r3, [pc, #272]	@ (8004e40 <HAL_RCC_ClockConfig+0x1a0>)
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	2380      	movs	r3, #128	@ 0x80
 8004d34:	029b      	lsls	r3, r3, #10
 8004d36:	4013      	ands	r3, r2
 8004d38:	d120      	bne.n	8004d7c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e07a      	b.n	8004e34 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d107      	bne.n	8004d56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d46:	4b3e      	ldr	r3, [pc, #248]	@ (8004e40 <HAL_RCC_ClockConfig+0x1a0>)
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	2380      	movs	r3, #128	@ 0x80
 8004d4c:	049b      	lsls	r3, r3, #18
 8004d4e:	4013      	ands	r3, r2
 8004d50:	d114      	bne.n	8004d7c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e06e      	b.n	8004e34 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	2b03      	cmp	r3, #3
 8004d5c:	d107      	bne.n	8004d6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004d5e:	4b38      	ldr	r3, [pc, #224]	@ (8004e40 <HAL_RCC_ClockConfig+0x1a0>)
 8004d60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d62:	2380      	movs	r3, #128	@ 0x80
 8004d64:	029b      	lsls	r3, r3, #10
 8004d66:	4013      	ands	r3, r2
 8004d68:	d108      	bne.n	8004d7c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e062      	b.n	8004e34 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d6e:	4b34      	ldr	r3, [pc, #208]	@ (8004e40 <HAL_RCC_ClockConfig+0x1a0>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2202      	movs	r2, #2
 8004d74:	4013      	ands	r3, r2
 8004d76:	d101      	bne.n	8004d7c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e05b      	b.n	8004e34 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d7c:	4b30      	ldr	r3, [pc, #192]	@ (8004e40 <HAL_RCC_ClockConfig+0x1a0>)
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	2203      	movs	r2, #3
 8004d82:	4393      	bics	r3, r2
 8004d84:	0019      	movs	r1, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	4b2d      	ldr	r3, [pc, #180]	@ (8004e40 <HAL_RCC_ClockConfig+0x1a0>)
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d90:	f7fc fa30 	bl	80011f4 <HAL_GetTick>
 8004d94:	0003      	movs	r3, r0
 8004d96:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d98:	e009      	b.n	8004dae <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d9a:	f7fc fa2b 	bl	80011f4 <HAL_GetTick>
 8004d9e:	0002      	movs	r2, r0
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	4a27      	ldr	r2, [pc, #156]	@ (8004e44 <HAL_RCC_ClockConfig+0x1a4>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e042      	b.n	8004e34 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dae:	4b24      	ldr	r3, [pc, #144]	@ (8004e40 <HAL_RCC_ClockConfig+0x1a0>)
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	220c      	movs	r2, #12
 8004db4:	401a      	ands	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d1ec      	bne.n	8004d9a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004dc0:	4b1e      	ldr	r3, [pc, #120]	@ (8004e3c <HAL_RCC_ClockConfig+0x19c>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d211      	bcs.n	8004df2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dce:	4b1b      	ldr	r3, [pc, #108]	@ (8004e3c <HAL_RCC_ClockConfig+0x19c>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	4393      	bics	r3, r2
 8004dd6:	0019      	movs	r1, r3
 8004dd8:	4b18      	ldr	r3, [pc, #96]	@ (8004e3c <HAL_RCC_ClockConfig+0x19c>)
 8004dda:	683a      	ldr	r2, [r7, #0]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004de0:	4b16      	ldr	r3, [pc, #88]	@ (8004e3c <HAL_RCC_ClockConfig+0x19c>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2201      	movs	r2, #1
 8004de6:	4013      	ands	r3, r2
 8004de8:	683a      	ldr	r2, [r7, #0]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d001      	beq.n	8004df2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e020      	b.n	8004e34 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2204      	movs	r2, #4
 8004df8:	4013      	ands	r3, r2
 8004dfa:	d009      	beq.n	8004e10 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004dfc:	4b10      	ldr	r3, [pc, #64]	@ (8004e40 <HAL_RCC_ClockConfig+0x1a0>)
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	4a11      	ldr	r2, [pc, #68]	@ (8004e48 <HAL_RCC_ClockConfig+0x1a8>)
 8004e02:	4013      	ands	r3, r2
 8004e04:	0019      	movs	r1, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68da      	ldr	r2, [r3, #12]
 8004e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e40 <HAL_RCC_ClockConfig+0x1a0>)
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004e10:	f000 f820 	bl	8004e54 <HAL_RCC_GetSysClockFreq>
 8004e14:	0001      	movs	r1, r0
 8004e16:	4b0a      	ldr	r3, [pc, #40]	@ (8004e40 <HAL_RCC_ClockConfig+0x1a0>)
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	091b      	lsrs	r3, r3, #4
 8004e1c:	220f      	movs	r2, #15
 8004e1e:	4013      	ands	r3, r2
 8004e20:	4a0a      	ldr	r2, [pc, #40]	@ (8004e4c <HAL_RCC_ClockConfig+0x1ac>)
 8004e22:	5cd3      	ldrb	r3, [r2, r3]
 8004e24:	000a      	movs	r2, r1
 8004e26:	40da      	lsrs	r2, r3
 8004e28:	4b09      	ldr	r3, [pc, #36]	@ (8004e50 <HAL_RCC_ClockConfig+0x1b0>)
 8004e2a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004e2c:	2003      	movs	r0, #3
 8004e2e:	f7fc f99b 	bl	8001168 <HAL_InitTick>
  
  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	0018      	movs	r0, r3
 8004e36:	46bd      	mov	sp, r7
 8004e38:	b004      	add	sp, #16
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	40022000 	.word	0x40022000
 8004e40:	40021000 	.word	0x40021000
 8004e44:	00001388 	.word	0x00001388
 8004e48:	fffff8ff 	.word	0xfffff8ff
 8004e4c:	0800623c 	.word	0x0800623c
 8004e50:	20000000 	.word	0x20000000

08004e54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	60fb      	str	r3, [r7, #12]
 8004e5e:	2300      	movs	r3, #0
 8004e60:	60bb      	str	r3, [r7, #8]
 8004e62:	2300      	movs	r3, #0
 8004e64:	617b      	str	r3, [r7, #20]
 8004e66:	2300      	movs	r3, #0
 8004e68:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004e6e:	4b2d      	ldr	r3, [pc, #180]	@ (8004f24 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	220c      	movs	r2, #12
 8004e78:	4013      	ands	r3, r2
 8004e7a:	2b0c      	cmp	r3, #12
 8004e7c:	d046      	beq.n	8004f0c <HAL_RCC_GetSysClockFreq+0xb8>
 8004e7e:	d848      	bhi.n	8004f12 <HAL_RCC_GetSysClockFreq+0xbe>
 8004e80:	2b04      	cmp	r3, #4
 8004e82:	d002      	beq.n	8004e8a <HAL_RCC_GetSysClockFreq+0x36>
 8004e84:	2b08      	cmp	r3, #8
 8004e86:	d003      	beq.n	8004e90 <HAL_RCC_GetSysClockFreq+0x3c>
 8004e88:	e043      	b.n	8004f12 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e8a:	4b27      	ldr	r3, [pc, #156]	@ (8004f28 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004e8c:	613b      	str	r3, [r7, #16]
      break;
 8004e8e:	e043      	b.n	8004f18 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	0c9b      	lsrs	r3, r3, #18
 8004e94:	220f      	movs	r2, #15
 8004e96:	4013      	ands	r3, r2
 8004e98:	4a24      	ldr	r2, [pc, #144]	@ (8004f2c <HAL_RCC_GetSysClockFreq+0xd8>)
 8004e9a:	5cd3      	ldrb	r3, [r2, r3]
 8004e9c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004e9e:	4b21      	ldr	r3, [pc, #132]	@ (8004f24 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea2:	220f      	movs	r2, #15
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	4a22      	ldr	r2, [pc, #136]	@ (8004f30 <HAL_RCC_GetSysClockFreq+0xdc>)
 8004ea8:	5cd3      	ldrb	r3, [r2, r3]
 8004eaa:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	23c0      	movs	r3, #192	@ 0xc0
 8004eb0:	025b      	lsls	r3, r3, #9
 8004eb2:	401a      	ands	r2, r3
 8004eb4:	2380      	movs	r3, #128	@ 0x80
 8004eb6:	025b      	lsls	r3, r3, #9
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d109      	bne.n	8004ed0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004ebc:	68b9      	ldr	r1, [r7, #8]
 8004ebe:	481a      	ldr	r0, [pc, #104]	@ (8004f28 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004ec0:	f7fb f92c 	bl	800011c <__udivsi3>
 8004ec4:	0003      	movs	r3, r0
 8004ec6:	001a      	movs	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4353      	muls	r3, r2
 8004ecc:	617b      	str	r3, [r7, #20]
 8004ece:	e01a      	b.n	8004f06 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	23c0      	movs	r3, #192	@ 0xc0
 8004ed4:	025b      	lsls	r3, r3, #9
 8004ed6:	401a      	ands	r2, r3
 8004ed8:	23c0      	movs	r3, #192	@ 0xc0
 8004eda:	025b      	lsls	r3, r3, #9
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d109      	bne.n	8004ef4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004ee0:	68b9      	ldr	r1, [r7, #8]
 8004ee2:	4814      	ldr	r0, [pc, #80]	@ (8004f34 <HAL_RCC_GetSysClockFreq+0xe0>)
 8004ee4:	f7fb f91a 	bl	800011c <__udivsi3>
 8004ee8:	0003      	movs	r3, r0
 8004eea:	001a      	movs	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4353      	muls	r3, r2
 8004ef0:	617b      	str	r3, [r7, #20]
 8004ef2:	e008      	b.n	8004f06 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004ef4:	68b9      	ldr	r1, [r7, #8]
 8004ef6:	480c      	ldr	r0, [pc, #48]	@ (8004f28 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004ef8:	f7fb f910 	bl	800011c <__udivsi3>
 8004efc:	0003      	movs	r3, r0
 8004efe:	001a      	movs	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4353      	muls	r3, r2
 8004f04:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	613b      	str	r3, [r7, #16]
      break;
 8004f0a:	e005      	b.n	8004f18 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004f0c:	4b09      	ldr	r3, [pc, #36]	@ (8004f34 <HAL_RCC_GetSysClockFreq+0xe0>)
 8004f0e:	613b      	str	r3, [r7, #16]
      break;
 8004f10:	e002      	b.n	8004f18 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004f12:	4b05      	ldr	r3, [pc, #20]	@ (8004f28 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004f14:	613b      	str	r3, [r7, #16]
      break;
 8004f16:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004f18:	693b      	ldr	r3, [r7, #16]
}
 8004f1a:	0018      	movs	r0, r3
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	b006      	add	sp, #24
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	46c0      	nop			@ (mov r8, r8)
 8004f24:	40021000 	.word	0x40021000
 8004f28:	007a1200 	.word	0x007a1200
 8004f2c:	08006278 	.word	0x08006278
 8004f30:	08006288 	.word	0x08006288
 8004f34:	02dc6c00 	.word	0x02dc6c00

08004f38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f40:	2300      	movs	r3, #0
 8004f42:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004f44:	2300      	movs	r3, #0
 8004f46:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	2380      	movs	r3, #128	@ 0x80
 8004f4e:	025b      	lsls	r3, r3, #9
 8004f50:	4013      	ands	r3, r2
 8004f52:	d100      	bne.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004f54:	e08e      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004f56:	2017      	movs	r0, #23
 8004f58:	183b      	adds	r3, r7, r0
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f5e:	4b67      	ldr	r3, [pc, #412]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004f60:	69da      	ldr	r2, [r3, #28]
 8004f62:	2380      	movs	r3, #128	@ 0x80
 8004f64:	055b      	lsls	r3, r3, #21
 8004f66:	4013      	ands	r3, r2
 8004f68:	d110      	bne.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f6a:	4b64      	ldr	r3, [pc, #400]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004f6c:	69da      	ldr	r2, [r3, #28]
 8004f6e:	4b63      	ldr	r3, [pc, #396]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004f70:	2180      	movs	r1, #128	@ 0x80
 8004f72:	0549      	lsls	r1, r1, #21
 8004f74:	430a      	orrs	r2, r1
 8004f76:	61da      	str	r2, [r3, #28]
 8004f78:	4b60      	ldr	r3, [pc, #384]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004f7a:	69da      	ldr	r2, [r3, #28]
 8004f7c:	2380      	movs	r3, #128	@ 0x80
 8004f7e:	055b      	lsls	r3, r3, #21
 8004f80:	4013      	ands	r3, r2
 8004f82:	60bb      	str	r3, [r7, #8]
 8004f84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f86:	183b      	adds	r3, r7, r0
 8004f88:	2201      	movs	r2, #1
 8004f8a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f8c:	4b5c      	ldr	r3, [pc, #368]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	2380      	movs	r3, #128	@ 0x80
 8004f92:	005b      	lsls	r3, r3, #1
 8004f94:	4013      	ands	r3, r2
 8004f96:	d11a      	bne.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f98:	4b59      	ldr	r3, [pc, #356]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	4b58      	ldr	r3, [pc, #352]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004f9e:	2180      	movs	r1, #128	@ 0x80
 8004fa0:	0049      	lsls	r1, r1, #1
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fa6:	f7fc f925 	bl	80011f4 <HAL_GetTick>
 8004faa:	0003      	movs	r3, r0
 8004fac:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fae:	e008      	b.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fb0:	f7fc f920 	bl	80011f4 <HAL_GetTick>
 8004fb4:	0002      	movs	r2, r0
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	2b64      	cmp	r3, #100	@ 0x64
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e097      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fc2:	4b4f      	ldr	r3, [pc, #316]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	2380      	movs	r3, #128	@ 0x80
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	4013      	ands	r3, r2
 8004fcc:	d0f0      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004fce:	4b4b      	ldr	r3, [pc, #300]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004fd0:	6a1a      	ldr	r2, [r3, #32]
 8004fd2:	23c0      	movs	r3, #192	@ 0xc0
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d034      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685a      	ldr	r2, [r3, #4]
 8004fe4:	23c0      	movs	r3, #192	@ 0xc0
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	4013      	ands	r3, r2
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d02c      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ff0:	4b42      	ldr	r3, [pc, #264]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004ff2:	6a1b      	ldr	r3, [r3, #32]
 8004ff4:	4a43      	ldr	r2, [pc, #268]	@ (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ffa:	4b40      	ldr	r3, [pc, #256]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004ffc:	6a1a      	ldr	r2, [r3, #32]
 8004ffe:	4b3f      	ldr	r3, [pc, #252]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005000:	2180      	movs	r1, #128	@ 0x80
 8005002:	0249      	lsls	r1, r1, #9
 8005004:	430a      	orrs	r2, r1
 8005006:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005008:	4b3c      	ldr	r3, [pc, #240]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800500a:	6a1a      	ldr	r2, [r3, #32]
 800500c:	4b3b      	ldr	r3, [pc, #236]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800500e:	493e      	ldr	r1, [pc, #248]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005010:	400a      	ands	r2, r1
 8005012:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005014:	4b39      	ldr	r3, [pc, #228]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2201      	movs	r2, #1
 800501e:	4013      	ands	r3, r2
 8005020:	d013      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005022:	f7fc f8e7 	bl	80011f4 <HAL_GetTick>
 8005026:	0003      	movs	r3, r0
 8005028:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800502a:	e009      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800502c:	f7fc f8e2 	bl	80011f4 <HAL_GetTick>
 8005030:	0002      	movs	r2, r0
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	4a35      	ldr	r2, [pc, #212]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d901      	bls.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e058      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005040:	4b2e      	ldr	r3, [pc, #184]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005042:	6a1b      	ldr	r3, [r3, #32]
 8005044:	2202      	movs	r2, #2
 8005046:	4013      	ands	r3, r2
 8005048:	d0f0      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800504a:	4b2c      	ldr	r3, [pc, #176]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	4a2d      	ldr	r2, [pc, #180]	@ (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005050:	4013      	ands	r3, r2
 8005052:	0019      	movs	r1, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	4b28      	ldr	r3, [pc, #160]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800505a:	430a      	orrs	r2, r1
 800505c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800505e:	2317      	movs	r3, #23
 8005060:	18fb      	adds	r3, r7, r3
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d105      	bne.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005068:	4b24      	ldr	r3, [pc, #144]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800506a:	69da      	ldr	r2, [r3, #28]
 800506c:	4b23      	ldr	r3, [pc, #140]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800506e:	4928      	ldr	r1, [pc, #160]	@ (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005070:	400a      	ands	r2, r1
 8005072:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2201      	movs	r2, #1
 800507a:	4013      	ands	r3, r2
 800507c:	d009      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800507e:	4b1f      	ldr	r3, [pc, #124]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005082:	2203      	movs	r2, #3
 8005084:	4393      	bics	r3, r2
 8005086:	0019      	movs	r1, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689a      	ldr	r2, [r3, #8]
 800508c:	4b1b      	ldr	r3, [pc, #108]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800508e:	430a      	orrs	r2, r1
 8005090:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2220      	movs	r2, #32
 8005098:	4013      	ands	r3, r2
 800509a:	d009      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800509c:	4b17      	ldr	r3, [pc, #92]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800509e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050a0:	2210      	movs	r2, #16
 80050a2:	4393      	bics	r3, r2
 80050a4:	0019      	movs	r1, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68da      	ldr	r2, [r3, #12]
 80050aa:	4b14      	ldr	r3, [pc, #80]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80050ac:	430a      	orrs	r2, r1
 80050ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	2380      	movs	r3, #128	@ 0x80
 80050b6:	029b      	lsls	r3, r3, #10
 80050b8:	4013      	ands	r3, r2
 80050ba:	d009      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050bc:	4b0f      	ldr	r3, [pc, #60]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80050be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050c0:	2280      	movs	r2, #128	@ 0x80
 80050c2:	4393      	bics	r3, r2
 80050c4:	0019      	movs	r1, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	695a      	ldr	r2, [r3, #20]
 80050ca:	4b0c      	ldr	r3, [pc, #48]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80050cc:	430a      	orrs	r2, r1
 80050ce:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	2380      	movs	r3, #128	@ 0x80
 80050d6:	00db      	lsls	r3, r3, #3
 80050d8:	4013      	ands	r3, r2
 80050da:	d009      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80050dc:	4b07      	ldr	r3, [pc, #28]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80050de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e0:	2240      	movs	r2, #64	@ 0x40
 80050e2:	4393      	bics	r3, r2
 80050e4:	0019      	movs	r1, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	691a      	ldr	r2, [r3, #16]
 80050ea:	4b04      	ldr	r3, [pc, #16]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80050ec:	430a      	orrs	r2, r1
 80050ee:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	0018      	movs	r0, r3
 80050f4:	46bd      	mov	sp, r7
 80050f6:	b006      	add	sp, #24
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	46c0      	nop			@ (mov r8, r8)
 80050fc:	40021000 	.word	0x40021000
 8005100:	40007000 	.word	0x40007000
 8005104:	fffffcff 	.word	0xfffffcff
 8005108:	fffeffff 	.word	0xfffeffff
 800510c:	00001388 	.word	0x00001388
 8005110:	efffffff 	.word	0xefffffff

08005114 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d101      	bne.n	8005126 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e042      	b.n	80051ac <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	223d      	movs	r2, #61	@ 0x3d
 800512a:	5c9b      	ldrb	r3, [r3, r2]
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d107      	bne.n	8005142 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	223c      	movs	r2, #60	@ 0x3c
 8005136:	2100      	movs	r1, #0
 8005138:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	0018      	movs	r0, r3
 800513e:	f7fb febd 	bl	8000ebc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	223d      	movs	r2, #61	@ 0x3d
 8005146:	2102      	movs	r1, #2
 8005148:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	3304      	adds	r3, #4
 8005152:	0019      	movs	r1, r3
 8005154:	0010      	movs	r0, r2
 8005156:	f000 f82d 	bl	80051b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2246      	movs	r2, #70	@ 0x46
 800515e:	2101      	movs	r1, #1
 8005160:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	223e      	movs	r2, #62	@ 0x3e
 8005166:	2101      	movs	r1, #1
 8005168:	5499      	strb	r1, [r3, r2]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	223f      	movs	r2, #63	@ 0x3f
 800516e:	2101      	movs	r1, #1
 8005170:	5499      	strb	r1, [r3, r2]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2240      	movs	r2, #64	@ 0x40
 8005176:	2101      	movs	r1, #1
 8005178:	5499      	strb	r1, [r3, r2]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2241      	movs	r2, #65	@ 0x41
 800517e:	2101      	movs	r1, #1
 8005180:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2242      	movs	r2, #66	@ 0x42
 8005186:	2101      	movs	r1, #1
 8005188:	5499      	strb	r1, [r3, r2]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2243      	movs	r2, #67	@ 0x43
 800518e:	2101      	movs	r1, #1
 8005190:	5499      	strb	r1, [r3, r2]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2244      	movs	r2, #68	@ 0x44
 8005196:	2101      	movs	r1, #1
 8005198:	5499      	strb	r1, [r3, r2]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2245      	movs	r2, #69	@ 0x45
 800519e:	2101      	movs	r1, #1
 80051a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	223d      	movs	r2, #61	@ 0x3d
 80051a6:	2101      	movs	r1, #1
 80051a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	0018      	movs	r0, r3
 80051ae:	46bd      	mov	sp, r7
 80051b0:	b002      	add	sp, #8
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a30      	ldr	r2, [pc, #192]	@ (8005288 <TIM_Base_SetConfig+0xd4>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d008      	beq.n	80051de <TIM_Base_SetConfig+0x2a>
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	2380      	movs	r3, #128	@ 0x80
 80051d0:	05db      	lsls	r3, r3, #23
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d003      	beq.n	80051de <TIM_Base_SetConfig+0x2a>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a2c      	ldr	r2, [pc, #176]	@ (800528c <TIM_Base_SetConfig+0xd8>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d108      	bne.n	80051f0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2270      	movs	r2, #112	@ 0x70
 80051e2:	4393      	bics	r3, r2
 80051e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a25      	ldr	r2, [pc, #148]	@ (8005288 <TIM_Base_SetConfig+0xd4>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d014      	beq.n	8005222 <TIM_Base_SetConfig+0x6e>
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	2380      	movs	r3, #128	@ 0x80
 80051fc:	05db      	lsls	r3, r3, #23
 80051fe:	429a      	cmp	r2, r3
 8005200:	d00f      	beq.n	8005222 <TIM_Base_SetConfig+0x6e>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a21      	ldr	r2, [pc, #132]	@ (800528c <TIM_Base_SetConfig+0xd8>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d00b      	beq.n	8005222 <TIM_Base_SetConfig+0x6e>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a20      	ldr	r2, [pc, #128]	@ (8005290 <TIM_Base_SetConfig+0xdc>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d007      	beq.n	8005222 <TIM_Base_SetConfig+0x6e>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a1f      	ldr	r2, [pc, #124]	@ (8005294 <TIM_Base_SetConfig+0xe0>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d003      	beq.n	8005222 <TIM_Base_SetConfig+0x6e>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a1e      	ldr	r2, [pc, #120]	@ (8005298 <TIM_Base_SetConfig+0xe4>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d108      	bne.n	8005234 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	4a1d      	ldr	r2, [pc, #116]	@ (800529c <TIM_Base_SetConfig+0xe8>)
 8005226:	4013      	ands	r3, r2
 8005228:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	4313      	orrs	r3, r2
 8005232:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2280      	movs	r2, #128	@ 0x80
 8005238:	4393      	bics	r3, r2
 800523a:	001a      	movs	r2, r3
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	695b      	ldr	r3, [r3, #20]
 8005240:	4313      	orrs	r3, r2
 8005242:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	689a      	ldr	r2, [r3, #8]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a0a      	ldr	r2, [pc, #40]	@ (8005288 <TIM_Base_SetConfig+0xd4>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d007      	beq.n	8005272 <TIM_Base_SetConfig+0xbe>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a0b      	ldr	r2, [pc, #44]	@ (8005294 <TIM_Base_SetConfig+0xe0>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d003      	beq.n	8005272 <TIM_Base_SetConfig+0xbe>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a0a      	ldr	r2, [pc, #40]	@ (8005298 <TIM_Base_SetConfig+0xe4>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d103      	bne.n	800527a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	691a      	ldr	r2, [r3, #16]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	615a      	str	r2, [r3, #20]
}
 8005280:	46c0      	nop			@ (mov r8, r8)
 8005282:	46bd      	mov	sp, r7
 8005284:	b004      	add	sp, #16
 8005286:	bd80      	pop	{r7, pc}
 8005288:	40012c00 	.word	0x40012c00
 800528c:	40000400 	.word	0x40000400
 8005290:	40002000 	.word	0x40002000
 8005294:	40014400 	.word	0x40014400
 8005298:	40014800 	.word	0x40014800
 800529c:	fffffcff 	.word	0xfffffcff

080052a0 <std>:
 80052a0:	2300      	movs	r3, #0
 80052a2:	b510      	push	{r4, lr}
 80052a4:	0004      	movs	r4, r0
 80052a6:	6003      	str	r3, [r0, #0]
 80052a8:	6043      	str	r3, [r0, #4]
 80052aa:	6083      	str	r3, [r0, #8]
 80052ac:	8181      	strh	r1, [r0, #12]
 80052ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80052b0:	81c2      	strh	r2, [r0, #14]
 80052b2:	6103      	str	r3, [r0, #16]
 80052b4:	6143      	str	r3, [r0, #20]
 80052b6:	6183      	str	r3, [r0, #24]
 80052b8:	0019      	movs	r1, r3
 80052ba:	2208      	movs	r2, #8
 80052bc:	305c      	adds	r0, #92	@ 0x5c
 80052be:	f000 f90f 	bl	80054e0 <memset>
 80052c2:	4b0b      	ldr	r3, [pc, #44]	@ (80052f0 <std+0x50>)
 80052c4:	6224      	str	r4, [r4, #32]
 80052c6:	6263      	str	r3, [r4, #36]	@ 0x24
 80052c8:	4b0a      	ldr	r3, [pc, #40]	@ (80052f4 <std+0x54>)
 80052ca:	62a3      	str	r3, [r4, #40]	@ 0x28
 80052cc:	4b0a      	ldr	r3, [pc, #40]	@ (80052f8 <std+0x58>)
 80052ce:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80052d0:	4b0a      	ldr	r3, [pc, #40]	@ (80052fc <std+0x5c>)
 80052d2:	6323      	str	r3, [r4, #48]	@ 0x30
 80052d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005300 <std+0x60>)
 80052d6:	429c      	cmp	r4, r3
 80052d8:	d005      	beq.n	80052e6 <std+0x46>
 80052da:	4b0a      	ldr	r3, [pc, #40]	@ (8005304 <std+0x64>)
 80052dc:	429c      	cmp	r4, r3
 80052de:	d002      	beq.n	80052e6 <std+0x46>
 80052e0:	4b09      	ldr	r3, [pc, #36]	@ (8005308 <std+0x68>)
 80052e2:	429c      	cmp	r4, r3
 80052e4:	d103      	bne.n	80052ee <std+0x4e>
 80052e6:	0020      	movs	r0, r4
 80052e8:	3058      	adds	r0, #88	@ 0x58
 80052ea:	f000 f979 	bl	80055e0 <__retarget_lock_init_recursive>
 80052ee:	bd10      	pop	{r4, pc}
 80052f0:	08005449 	.word	0x08005449
 80052f4:	08005471 	.word	0x08005471
 80052f8:	080054a9 	.word	0x080054a9
 80052fc:	080054d5 	.word	0x080054d5
 8005300:	20000258 	.word	0x20000258
 8005304:	200002c0 	.word	0x200002c0
 8005308:	20000328 	.word	0x20000328

0800530c <stdio_exit_handler>:
 800530c:	b510      	push	{r4, lr}
 800530e:	4a03      	ldr	r2, [pc, #12]	@ (800531c <stdio_exit_handler+0x10>)
 8005310:	4903      	ldr	r1, [pc, #12]	@ (8005320 <stdio_exit_handler+0x14>)
 8005312:	4804      	ldr	r0, [pc, #16]	@ (8005324 <stdio_exit_handler+0x18>)
 8005314:	f000 f86c 	bl	80053f0 <_fwalk_sglue>
 8005318:	bd10      	pop	{r4, pc}
 800531a:	46c0      	nop			@ (mov r8, r8)
 800531c:	2000000c 	.word	0x2000000c
 8005320:	08005e71 	.word	0x08005e71
 8005324:	2000001c 	.word	0x2000001c

08005328 <cleanup_stdio>:
 8005328:	6841      	ldr	r1, [r0, #4]
 800532a:	4b0b      	ldr	r3, [pc, #44]	@ (8005358 <cleanup_stdio+0x30>)
 800532c:	b510      	push	{r4, lr}
 800532e:	0004      	movs	r4, r0
 8005330:	4299      	cmp	r1, r3
 8005332:	d001      	beq.n	8005338 <cleanup_stdio+0x10>
 8005334:	f000 fd9c 	bl	8005e70 <_fflush_r>
 8005338:	68a1      	ldr	r1, [r4, #8]
 800533a:	4b08      	ldr	r3, [pc, #32]	@ (800535c <cleanup_stdio+0x34>)
 800533c:	4299      	cmp	r1, r3
 800533e:	d002      	beq.n	8005346 <cleanup_stdio+0x1e>
 8005340:	0020      	movs	r0, r4
 8005342:	f000 fd95 	bl	8005e70 <_fflush_r>
 8005346:	68e1      	ldr	r1, [r4, #12]
 8005348:	4b05      	ldr	r3, [pc, #20]	@ (8005360 <cleanup_stdio+0x38>)
 800534a:	4299      	cmp	r1, r3
 800534c:	d002      	beq.n	8005354 <cleanup_stdio+0x2c>
 800534e:	0020      	movs	r0, r4
 8005350:	f000 fd8e 	bl	8005e70 <_fflush_r>
 8005354:	bd10      	pop	{r4, pc}
 8005356:	46c0      	nop			@ (mov r8, r8)
 8005358:	20000258 	.word	0x20000258
 800535c:	200002c0 	.word	0x200002c0
 8005360:	20000328 	.word	0x20000328

08005364 <global_stdio_init.part.0>:
 8005364:	b510      	push	{r4, lr}
 8005366:	4b09      	ldr	r3, [pc, #36]	@ (800538c <global_stdio_init.part.0+0x28>)
 8005368:	4a09      	ldr	r2, [pc, #36]	@ (8005390 <global_stdio_init.part.0+0x2c>)
 800536a:	2104      	movs	r1, #4
 800536c:	601a      	str	r2, [r3, #0]
 800536e:	4809      	ldr	r0, [pc, #36]	@ (8005394 <global_stdio_init.part.0+0x30>)
 8005370:	2200      	movs	r2, #0
 8005372:	f7ff ff95 	bl	80052a0 <std>
 8005376:	2201      	movs	r2, #1
 8005378:	2109      	movs	r1, #9
 800537a:	4807      	ldr	r0, [pc, #28]	@ (8005398 <global_stdio_init.part.0+0x34>)
 800537c:	f7ff ff90 	bl	80052a0 <std>
 8005380:	2202      	movs	r2, #2
 8005382:	2112      	movs	r1, #18
 8005384:	4805      	ldr	r0, [pc, #20]	@ (800539c <global_stdio_init.part.0+0x38>)
 8005386:	f7ff ff8b 	bl	80052a0 <std>
 800538a:	bd10      	pop	{r4, pc}
 800538c:	20000390 	.word	0x20000390
 8005390:	0800530d 	.word	0x0800530d
 8005394:	20000258 	.word	0x20000258
 8005398:	200002c0 	.word	0x200002c0
 800539c:	20000328 	.word	0x20000328

080053a0 <__sfp_lock_acquire>:
 80053a0:	b510      	push	{r4, lr}
 80053a2:	4802      	ldr	r0, [pc, #8]	@ (80053ac <__sfp_lock_acquire+0xc>)
 80053a4:	f000 f91d 	bl	80055e2 <__retarget_lock_acquire_recursive>
 80053a8:	bd10      	pop	{r4, pc}
 80053aa:	46c0      	nop			@ (mov r8, r8)
 80053ac:	20000399 	.word	0x20000399

080053b0 <__sfp_lock_release>:
 80053b0:	b510      	push	{r4, lr}
 80053b2:	4802      	ldr	r0, [pc, #8]	@ (80053bc <__sfp_lock_release+0xc>)
 80053b4:	f000 f916 	bl	80055e4 <__retarget_lock_release_recursive>
 80053b8:	bd10      	pop	{r4, pc}
 80053ba:	46c0      	nop			@ (mov r8, r8)
 80053bc:	20000399 	.word	0x20000399

080053c0 <__sinit>:
 80053c0:	b510      	push	{r4, lr}
 80053c2:	0004      	movs	r4, r0
 80053c4:	f7ff ffec 	bl	80053a0 <__sfp_lock_acquire>
 80053c8:	6a23      	ldr	r3, [r4, #32]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d002      	beq.n	80053d4 <__sinit+0x14>
 80053ce:	f7ff ffef 	bl	80053b0 <__sfp_lock_release>
 80053d2:	bd10      	pop	{r4, pc}
 80053d4:	4b04      	ldr	r3, [pc, #16]	@ (80053e8 <__sinit+0x28>)
 80053d6:	6223      	str	r3, [r4, #32]
 80053d8:	4b04      	ldr	r3, [pc, #16]	@ (80053ec <__sinit+0x2c>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d1f6      	bne.n	80053ce <__sinit+0xe>
 80053e0:	f7ff ffc0 	bl	8005364 <global_stdio_init.part.0>
 80053e4:	e7f3      	b.n	80053ce <__sinit+0xe>
 80053e6:	46c0      	nop			@ (mov r8, r8)
 80053e8:	08005329 	.word	0x08005329
 80053ec:	20000390 	.word	0x20000390

080053f0 <_fwalk_sglue>:
 80053f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053f2:	0014      	movs	r4, r2
 80053f4:	2600      	movs	r6, #0
 80053f6:	9000      	str	r0, [sp, #0]
 80053f8:	9101      	str	r1, [sp, #4]
 80053fa:	68a5      	ldr	r5, [r4, #8]
 80053fc:	6867      	ldr	r7, [r4, #4]
 80053fe:	3f01      	subs	r7, #1
 8005400:	d504      	bpl.n	800540c <_fwalk_sglue+0x1c>
 8005402:	6824      	ldr	r4, [r4, #0]
 8005404:	2c00      	cmp	r4, #0
 8005406:	d1f8      	bne.n	80053fa <_fwalk_sglue+0xa>
 8005408:	0030      	movs	r0, r6
 800540a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800540c:	89ab      	ldrh	r3, [r5, #12]
 800540e:	2b01      	cmp	r3, #1
 8005410:	d908      	bls.n	8005424 <_fwalk_sglue+0x34>
 8005412:	220e      	movs	r2, #14
 8005414:	5eab      	ldrsh	r3, [r5, r2]
 8005416:	3301      	adds	r3, #1
 8005418:	d004      	beq.n	8005424 <_fwalk_sglue+0x34>
 800541a:	0029      	movs	r1, r5
 800541c:	9800      	ldr	r0, [sp, #0]
 800541e:	9b01      	ldr	r3, [sp, #4]
 8005420:	4798      	blx	r3
 8005422:	4306      	orrs	r6, r0
 8005424:	3568      	adds	r5, #104	@ 0x68
 8005426:	e7ea      	b.n	80053fe <_fwalk_sglue+0xe>

08005428 <iprintf>:
 8005428:	b40f      	push	{r0, r1, r2, r3}
 800542a:	b507      	push	{r0, r1, r2, lr}
 800542c:	4905      	ldr	r1, [pc, #20]	@ (8005444 <iprintf+0x1c>)
 800542e:	ab04      	add	r3, sp, #16
 8005430:	6808      	ldr	r0, [r1, #0]
 8005432:	cb04      	ldmia	r3!, {r2}
 8005434:	6881      	ldr	r1, [r0, #8]
 8005436:	9301      	str	r3, [sp, #4]
 8005438:	f000 f9fa 	bl	8005830 <_vfiprintf_r>
 800543c:	b003      	add	sp, #12
 800543e:	bc08      	pop	{r3}
 8005440:	b004      	add	sp, #16
 8005442:	4718      	bx	r3
 8005444:	20000018 	.word	0x20000018

08005448 <__sread>:
 8005448:	b570      	push	{r4, r5, r6, lr}
 800544a:	000c      	movs	r4, r1
 800544c:	250e      	movs	r5, #14
 800544e:	5f49      	ldrsh	r1, [r1, r5]
 8005450:	f000 f874 	bl	800553c <_read_r>
 8005454:	2800      	cmp	r0, #0
 8005456:	db03      	blt.n	8005460 <__sread+0x18>
 8005458:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800545a:	181b      	adds	r3, r3, r0
 800545c:	6563      	str	r3, [r4, #84]	@ 0x54
 800545e:	bd70      	pop	{r4, r5, r6, pc}
 8005460:	89a3      	ldrh	r3, [r4, #12]
 8005462:	4a02      	ldr	r2, [pc, #8]	@ (800546c <__sread+0x24>)
 8005464:	4013      	ands	r3, r2
 8005466:	81a3      	strh	r3, [r4, #12]
 8005468:	e7f9      	b.n	800545e <__sread+0x16>
 800546a:	46c0      	nop			@ (mov r8, r8)
 800546c:	ffffefff 	.word	0xffffefff

08005470 <__swrite>:
 8005470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005472:	001f      	movs	r7, r3
 8005474:	898b      	ldrh	r3, [r1, #12]
 8005476:	0005      	movs	r5, r0
 8005478:	000c      	movs	r4, r1
 800547a:	0016      	movs	r6, r2
 800547c:	05db      	lsls	r3, r3, #23
 800547e:	d505      	bpl.n	800548c <__swrite+0x1c>
 8005480:	230e      	movs	r3, #14
 8005482:	5ec9      	ldrsh	r1, [r1, r3]
 8005484:	2200      	movs	r2, #0
 8005486:	2302      	movs	r3, #2
 8005488:	f000 f844 	bl	8005514 <_lseek_r>
 800548c:	89a3      	ldrh	r3, [r4, #12]
 800548e:	4a05      	ldr	r2, [pc, #20]	@ (80054a4 <__swrite+0x34>)
 8005490:	0028      	movs	r0, r5
 8005492:	4013      	ands	r3, r2
 8005494:	81a3      	strh	r3, [r4, #12]
 8005496:	0032      	movs	r2, r6
 8005498:	230e      	movs	r3, #14
 800549a:	5ee1      	ldrsh	r1, [r4, r3]
 800549c:	003b      	movs	r3, r7
 800549e:	f000 f861 	bl	8005564 <_write_r>
 80054a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054a4:	ffffefff 	.word	0xffffefff

080054a8 <__sseek>:
 80054a8:	b570      	push	{r4, r5, r6, lr}
 80054aa:	000c      	movs	r4, r1
 80054ac:	250e      	movs	r5, #14
 80054ae:	5f49      	ldrsh	r1, [r1, r5]
 80054b0:	f000 f830 	bl	8005514 <_lseek_r>
 80054b4:	89a3      	ldrh	r3, [r4, #12]
 80054b6:	1c42      	adds	r2, r0, #1
 80054b8:	d103      	bne.n	80054c2 <__sseek+0x1a>
 80054ba:	4a05      	ldr	r2, [pc, #20]	@ (80054d0 <__sseek+0x28>)
 80054bc:	4013      	ands	r3, r2
 80054be:	81a3      	strh	r3, [r4, #12]
 80054c0:	bd70      	pop	{r4, r5, r6, pc}
 80054c2:	2280      	movs	r2, #128	@ 0x80
 80054c4:	0152      	lsls	r2, r2, #5
 80054c6:	4313      	orrs	r3, r2
 80054c8:	81a3      	strh	r3, [r4, #12]
 80054ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80054cc:	e7f8      	b.n	80054c0 <__sseek+0x18>
 80054ce:	46c0      	nop			@ (mov r8, r8)
 80054d0:	ffffefff 	.word	0xffffefff

080054d4 <__sclose>:
 80054d4:	b510      	push	{r4, lr}
 80054d6:	230e      	movs	r3, #14
 80054d8:	5ec9      	ldrsh	r1, [r1, r3]
 80054da:	f000 f809 	bl	80054f0 <_close_r>
 80054de:	bd10      	pop	{r4, pc}

080054e0 <memset>:
 80054e0:	0003      	movs	r3, r0
 80054e2:	1882      	adds	r2, r0, r2
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d100      	bne.n	80054ea <memset+0xa>
 80054e8:	4770      	bx	lr
 80054ea:	7019      	strb	r1, [r3, #0]
 80054ec:	3301      	adds	r3, #1
 80054ee:	e7f9      	b.n	80054e4 <memset+0x4>

080054f0 <_close_r>:
 80054f0:	2300      	movs	r3, #0
 80054f2:	b570      	push	{r4, r5, r6, lr}
 80054f4:	4d06      	ldr	r5, [pc, #24]	@ (8005510 <_close_r+0x20>)
 80054f6:	0004      	movs	r4, r0
 80054f8:	0008      	movs	r0, r1
 80054fa:	602b      	str	r3, [r5, #0]
 80054fc:	f7fb fd75 	bl	8000fea <_close>
 8005500:	1c43      	adds	r3, r0, #1
 8005502:	d103      	bne.n	800550c <_close_r+0x1c>
 8005504:	682b      	ldr	r3, [r5, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d000      	beq.n	800550c <_close_r+0x1c>
 800550a:	6023      	str	r3, [r4, #0]
 800550c:	bd70      	pop	{r4, r5, r6, pc}
 800550e:	46c0      	nop			@ (mov r8, r8)
 8005510:	20000394 	.word	0x20000394

08005514 <_lseek_r>:
 8005514:	b570      	push	{r4, r5, r6, lr}
 8005516:	0004      	movs	r4, r0
 8005518:	0008      	movs	r0, r1
 800551a:	0011      	movs	r1, r2
 800551c:	001a      	movs	r2, r3
 800551e:	2300      	movs	r3, #0
 8005520:	4d05      	ldr	r5, [pc, #20]	@ (8005538 <_lseek_r+0x24>)
 8005522:	602b      	str	r3, [r5, #0]
 8005524:	f7fb fd82 	bl	800102c <_lseek>
 8005528:	1c43      	adds	r3, r0, #1
 800552a:	d103      	bne.n	8005534 <_lseek_r+0x20>
 800552c:	682b      	ldr	r3, [r5, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d000      	beq.n	8005534 <_lseek_r+0x20>
 8005532:	6023      	str	r3, [r4, #0]
 8005534:	bd70      	pop	{r4, r5, r6, pc}
 8005536:	46c0      	nop			@ (mov r8, r8)
 8005538:	20000394 	.word	0x20000394

0800553c <_read_r>:
 800553c:	b570      	push	{r4, r5, r6, lr}
 800553e:	0004      	movs	r4, r0
 8005540:	0008      	movs	r0, r1
 8005542:	0011      	movs	r1, r2
 8005544:	001a      	movs	r2, r3
 8005546:	2300      	movs	r3, #0
 8005548:	4d05      	ldr	r5, [pc, #20]	@ (8005560 <_read_r+0x24>)
 800554a:	602b      	str	r3, [r5, #0]
 800554c:	f7fb fd14 	bl	8000f78 <_read>
 8005550:	1c43      	adds	r3, r0, #1
 8005552:	d103      	bne.n	800555c <_read_r+0x20>
 8005554:	682b      	ldr	r3, [r5, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d000      	beq.n	800555c <_read_r+0x20>
 800555a:	6023      	str	r3, [r4, #0]
 800555c:	bd70      	pop	{r4, r5, r6, pc}
 800555e:	46c0      	nop			@ (mov r8, r8)
 8005560:	20000394 	.word	0x20000394

08005564 <_write_r>:
 8005564:	b570      	push	{r4, r5, r6, lr}
 8005566:	0004      	movs	r4, r0
 8005568:	0008      	movs	r0, r1
 800556a:	0011      	movs	r1, r2
 800556c:	001a      	movs	r2, r3
 800556e:	2300      	movs	r3, #0
 8005570:	4d05      	ldr	r5, [pc, #20]	@ (8005588 <_write_r+0x24>)
 8005572:	602b      	str	r3, [r5, #0]
 8005574:	f7fb fd1d 	bl	8000fb2 <_write>
 8005578:	1c43      	adds	r3, r0, #1
 800557a:	d103      	bne.n	8005584 <_write_r+0x20>
 800557c:	682b      	ldr	r3, [r5, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d000      	beq.n	8005584 <_write_r+0x20>
 8005582:	6023      	str	r3, [r4, #0]
 8005584:	bd70      	pop	{r4, r5, r6, pc}
 8005586:	46c0      	nop			@ (mov r8, r8)
 8005588:	20000394 	.word	0x20000394

0800558c <__errno>:
 800558c:	4b01      	ldr	r3, [pc, #4]	@ (8005594 <__errno+0x8>)
 800558e:	6818      	ldr	r0, [r3, #0]
 8005590:	4770      	bx	lr
 8005592:	46c0      	nop			@ (mov r8, r8)
 8005594:	20000018 	.word	0x20000018

08005598 <__libc_init_array>:
 8005598:	b570      	push	{r4, r5, r6, lr}
 800559a:	2600      	movs	r6, #0
 800559c:	4c0c      	ldr	r4, [pc, #48]	@ (80055d0 <__libc_init_array+0x38>)
 800559e:	4d0d      	ldr	r5, [pc, #52]	@ (80055d4 <__libc_init_array+0x3c>)
 80055a0:	1b64      	subs	r4, r4, r5
 80055a2:	10a4      	asrs	r4, r4, #2
 80055a4:	42a6      	cmp	r6, r4
 80055a6:	d109      	bne.n	80055bc <__libc_init_array+0x24>
 80055a8:	2600      	movs	r6, #0
 80055aa:	f000 fddb 	bl	8006164 <_init>
 80055ae:	4c0a      	ldr	r4, [pc, #40]	@ (80055d8 <__libc_init_array+0x40>)
 80055b0:	4d0a      	ldr	r5, [pc, #40]	@ (80055dc <__libc_init_array+0x44>)
 80055b2:	1b64      	subs	r4, r4, r5
 80055b4:	10a4      	asrs	r4, r4, #2
 80055b6:	42a6      	cmp	r6, r4
 80055b8:	d105      	bne.n	80055c6 <__libc_init_array+0x2e>
 80055ba:	bd70      	pop	{r4, r5, r6, pc}
 80055bc:	00b3      	lsls	r3, r6, #2
 80055be:	58eb      	ldr	r3, [r5, r3]
 80055c0:	4798      	blx	r3
 80055c2:	3601      	adds	r6, #1
 80055c4:	e7ee      	b.n	80055a4 <__libc_init_array+0xc>
 80055c6:	00b3      	lsls	r3, r6, #2
 80055c8:	58eb      	ldr	r3, [r5, r3]
 80055ca:	4798      	blx	r3
 80055cc:	3601      	adds	r6, #1
 80055ce:	e7f2      	b.n	80055b6 <__libc_init_array+0x1e>
 80055d0:	080062cc 	.word	0x080062cc
 80055d4:	080062cc 	.word	0x080062cc
 80055d8:	080062d0 	.word	0x080062d0
 80055dc:	080062cc 	.word	0x080062cc

080055e0 <__retarget_lock_init_recursive>:
 80055e0:	4770      	bx	lr

080055e2 <__retarget_lock_acquire_recursive>:
 80055e2:	4770      	bx	lr

080055e4 <__retarget_lock_release_recursive>:
 80055e4:	4770      	bx	lr
	...

080055e8 <_free_r>:
 80055e8:	b570      	push	{r4, r5, r6, lr}
 80055ea:	0005      	movs	r5, r0
 80055ec:	1e0c      	subs	r4, r1, #0
 80055ee:	d010      	beq.n	8005612 <_free_r+0x2a>
 80055f0:	3c04      	subs	r4, #4
 80055f2:	6823      	ldr	r3, [r4, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	da00      	bge.n	80055fa <_free_r+0x12>
 80055f8:	18e4      	adds	r4, r4, r3
 80055fa:	0028      	movs	r0, r5
 80055fc:	f000 f8e0 	bl	80057c0 <__malloc_lock>
 8005600:	4a1d      	ldr	r2, [pc, #116]	@ (8005678 <_free_r+0x90>)
 8005602:	6813      	ldr	r3, [r2, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d105      	bne.n	8005614 <_free_r+0x2c>
 8005608:	6063      	str	r3, [r4, #4]
 800560a:	6014      	str	r4, [r2, #0]
 800560c:	0028      	movs	r0, r5
 800560e:	f000 f8df 	bl	80057d0 <__malloc_unlock>
 8005612:	bd70      	pop	{r4, r5, r6, pc}
 8005614:	42a3      	cmp	r3, r4
 8005616:	d908      	bls.n	800562a <_free_r+0x42>
 8005618:	6820      	ldr	r0, [r4, #0]
 800561a:	1821      	adds	r1, r4, r0
 800561c:	428b      	cmp	r3, r1
 800561e:	d1f3      	bne.n	8005608 <_free_r+0x20>
 8005620:	6819      	ldr	r1, [r3, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	1809      	adds	r1, r1, r0
 8005626:	6021      	str	r1, [r4, #0]
 8005628:	e7ee      	b.n	8005608 <_free_r+0x20>
 800562a:	001a      	movs	r2, r3
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d001      	beq.n	8005636 <_free_r+0x4e>
 8005632:	42a3      	cmp	r3, r4
 8005634:	d9f9      	bls.n	800562a <_free_r+0x42>
 8005636:	6811      	ldr	r1, [r2, #0]
 8005638:	1850      	adds	r0, r2, r1
 800563a:	42a0      	cmp	r0, r4
 800563c:	d10b      	bne.n	8005656 <_free_r+0x6e>
 800563e:	6820      	ldr	r0, [r4, #0]
 8005640:	1809      	adds	r1, r1, r0
 8005642:	1850      	adds	r0, r2, r1
 8005644:	6011      	str	r1, [r2, #0]
 8005646:	4283      	cmp	r3, r0
 8005648:	d1e0      	bne.n	800560c <_free_r+0x24>
 800564a:	6818      	ldr	r0, [r3, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	1841      	adds	r1, r0, r1
 8005650:	6011      	str	r1, [r2, #0]
 8005652:	6053      	str	r3, [r2, #4]
 8005654:	e7da      	b.n	800560c <_free_r+0x24>
 8005656:	42a0      	cmp	r0, r4
 8005658:	d902      	bls.n	8005660 <_free_r+0x78>
 800565a:	230c      	movs	r3, #12
 800565c:	602b      	str	r3, [r5, #0]
 800565e:	e7d5      	b.n	800560c <_free_r+0x24>
 8005660:	6820      	ldr	r0, [r4, #0]
 8005662:	1821      	adds	r1, r4, r0
 8005664:	428b      	cmp	r3, r1
 8005666:	d103      	bne.n	8005670 <_free_r+0x88>
 8005668:	6819      	ldr	r1, [r3, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	1809      	adds	r1, r1, r0
 800566e:	6021      	str	r1, [r4, #0]
 8005670:	6063      	str	r3, [r4, #4]
 8005672:	6054      	str	r4, [r2, #4]
 8005674:	e7ca      	b.n	800560c <_free_r+0x24>
 8005676:	46c0      	nop			@ (mov r8, r8)
 8005678:	200003a0 	.word	0x200003a0

0800567c <sbrk_aligned>:
 800567c:	b570      	push	{r4, r5, r6, lr}
 800567e:	4e0f      	ldr	r6, [pc, #60]	@ (80056bc <sbrk_aligned+0x40>)
 8005680:	000d      	movs	r5, r1
 8005682:	6831      	ldr	r1, [r6, #0]
 8005684:	0004      	movs	r4, r0
 8005686:	2900      	cmp	r1, #0
 8005688:	d102      	bne.n	8005690 <sbrk_aligned+0x14>
 800568a:	f000 fcbd 	bl	8006008 <_sbrk_r>
 800568e:	6030      	str	r0, [r6, #0]
 8005690:	0029      	movs	r1, r5
 8005692:	0020      	movs	r0, r4
 8005694:	f000 fcb8 	bl	8006008 <_sbrk_r>
 8005698:	1c43      	adds	r3, r0, #1
 800569a:	d103      	bne.n	80056a4 <sbrk_aligned+0x28>
 800569c:	2501      	movs	r5, #1
 800569e:	426d      	negs	r5, r5
 80056a0:	0028      	movs	r0, r5
 80056a2:	bd70      	pop	{r4, r5, r6, pc}
 80056a4:	2303      	movs	r3, #3
 80056a6:	1cc5      	adds	r5, r0, #3
 80056a8:	439d      	bics	r5, r3
 80056aa:	42a8      	cmp	r0, r5
 80056ac:	d0f8      	beq.n	80056a0 <sbrk_aligned+0x24>
 80056ae:	1a29      	subs	r1, r5, r0
 80056b0:	0020      	movs	r0, r4
 80056b2:	f000 fca9 	bl	8006008 <_sbrk_r>
 80056b6:	3001      	adds	r0, #1
 80056b8:	d1f2      	bne.n	80056a0 <sbrk_aligned+0x24>
 80056ba:	e7ef      	b.n	800569c <sbrk_aligned+0x20>
 80056bc:	2000039c 	.word	0x2000039c

080056c0 <_malloc_r>:
 80056c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056c2:	2203      	movs	r2, #3
 80056c4:	1ccb      	adds	r3, r1, #3
 80056c6:	4393      	bics	r3, r2
 80056c8:	3308      	adds	r3, #8
 80056ca:	0005      	movs	r5, r0
 80056cc:	001f      	movs	r7, r3
 80056ce:	2b0c      	cmp	r3, #12
 80056d0:	d234      	bcs.n	800573c <_malloc_r+0x7c>
 80056d2:	270c      	movs	r7, #12
 80056d4:	42b9      	cmp	r1, r7
 80056d6:	d833      	bhi.n	8005740 <_malloc_r+0x80>
 80056d8:	0028      	movs	r0, r5
 80056da:	f000 f871 	bl	80057c0 <__malloc_lock>
 80056de:	4e37      	ldr	r6, [pc, #220]	@ (80057bc <_malloc_r+0xfc>)
 80056e0:	6833      	ldr	r3, [r6, #0]
 80056e2:	001c      	movs	r4, r3
 80056e4:	2c00      	cmp	r4, #0
 80056e6:	d12f      	bne.n	8005748 <_malloc_r+0x88>
 80056e8:	0039      	movs	r1, r7
 80056ea:	0028      	movs	r0, r5
 80056ec:	f7ff ffc6 	bl	800567c <sbrk_aligned>
 80056f0:	0004      	movs	r4, r0
 80056f2:	1c43      	adds	r3, r0, #1
 80056f4:	d15f      	bne.n	80057b6 <_malloc_r+0xf6>
 80056f6:	6834      	ldr	r4, [r6, #0]
 80056f8:	9400      	str	r4, [sp, #0]
 80056fa:	9b00      	ldr	r3, [sp, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d14a      	bne.n	8005796 <_malloc_r+0xd6>
 8005700:	2c00      	cmp	r4, #0
 8005702:	d052      	beq.n	80057aa <_malloc_r+0xea>
 8005704:	6823      	ldr	r3, [r4, #0]
 8005706:	0028      	movs	r0, r5
 8005708:	18e3      	adds	r3, r4, r3
 800570a:	9900      	ldr	r1, [sp, #0]
 800570c:	9301      	str	r3, [sp, #4]
 800570e:	f000 fc7b 	bl	8006008 <_sbrk_r>
 8005712:	9b01      	ldr	r3, [sp, #4]
 8005714:	4283      	cmp	r3, r0
 8005716:	d148      	bne.n	80057aa <_malloc_r+0xea>
 8005718:	6823      	ldr	r3, [r4, #0]
 800571a:	0028      	movs	r0, r5
 800571c:	1aff      	subs	r7, r7, r3
 800571e:	0039      	movs	r1, r7
 8005720:	f7ff ffac 	bl	800567c <sbrk_aligned>
 8005724:	3001      	adds	r0, #1
 8005726:	d040      	beq.n	80057aa <_malloc_r+0xea>
 8005728:	6823      	ldr	r3, [r4, #0]
 800572a:	19db      	adds	r3, r3, r7
 800572c:	6023      	str	r3, [r4, #0]
 800572e:	6833      	ldr	r3, [r6, #0]
 8005730:	685a      	ldr	r2, [r3, #4]
 8005732:	2a00      	cmp	r2, #0
 8005734:	d133      	bne.n	800579e <_malloc_r+0xde>
 8005736:	9b00      	ldr	r3, [sp, #0]
 8005738:	6033      	str	r3, [r6, #0]
 800573a:	e019      	b.n	8005770 <_malloc_r+0xb0>
 800573c:	2b00      	cmp	r3, #0
 800573e:	dac9      	bge.n	80056d4 <_malloc_r+0x14>
 8005740:	230c      	movs	r3, #12
 8005742:	602b      	str	r3, [r5, #0]
 8005744:	2000      	movs	r0, #0
 8005746:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005748:	6821      	ldr	r1, [r4, #0]
 800574a:	1bc9      	subs	r1, r1, r7
 800574c:	d420      	bmi.n	8005790 <_malloc_r+0xd0>
 800574e:	290b      	cmp	r1, #11
 8005750:	d90a      	bls.n	8005768 <_malloc_r+0xa8>
 8005752:	19e2      	adds	r2, r4, r7
 8005754:	6027      	str	r7, [r4, #0]
 8005756:	42a3      	cmp	r3, r4
 8005758:	d104      	bne.n	8005764 <_malloc_r+0xa4>
 800575a:	6032      	str	r2, [r6, #0]
 800575c:	6863      	ldr	r3, [r4, #4]
 800575e:	6011      	str	r1, [r2, #0]
 8005760:	6053      	str	r3, [r2, #4]
 8005762:	e005      	b.n	8005770 <_malloc_r+0xb0>
 8005764:	605a      	str	r2, [r3, #4]
 8005766:	e7f9      	b.n	800575c <_malloc_r+0x9c>
 8005768:	6862      	ldr	r2, [r4, #4]
 800576a:	42a3      	cmp	r3, r4
 800576c:	d10e      	bne.n	800578c <_malloc_r+0xcc>
 800576e:	6032      	str	r2, [r6, #0]
 8005770:	0028      	movs	r0, r5
 8005772:	f000 f82d 	bl	80057d0 <__malloc_unlock>
 8005776:	0020      	movs	r0, r4
 8005778:	2207      	movs	r2, #7
 800577a:	300b      	adds	r0, #11
 800577c:	1d23      	adds	r3, r4, #4
 800577e:	4390      	bics	r0, r2
 8005780:	1ac2      	subs	r2, r0, r3
 8005782:	4298      	cmp	r0, r3
 8005784:	d0df      	beq.n	8005746 <_malloc_r+0x86>
 8005786:	1a1b      	subs	r3, r3, r0
 8005788:	50a3      	str	r3, [r4, r2]
 800578a:	e7dc      	b.n	8005746 <_malloc_r+0x86>
 800578c:	605a      	str	r2, [r3, #4]
 800578e:	e7ef      	b.n	8005770 <_malloc_r+0xb0>
 8005790:	0023      	movs	r3, r4
 8005792:	6864      	ldr	r4, [r4, #4]
 8005794:	e7a6      	b.n	80056e4 <_malloc_r+0x24>
 8005796:	9c00      	ldr	r4, [sp, #0]
 8005798:	6863      	ldr	r3, [r4, #4]
 800579a:	9300      	str	r3, [sp, #0]
 800579c:	e7ad      	b.n	80056fa <_malloc_r+0x3a>
 800579e:	001a      	movs	r2, r3
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	42a3      	cmp	r3, r4
 80057a4:	d1fb      	bne.n	800579e <_malloc_r+0xde>
 80057a6:	2300      	movs	r3, #0
 80057a8:	e7da      	b.n	8005760 <_malloc_r+0xa0>
 80057aa:	230c      	movs	r3, #12
 80057ac:	0028      	movs	r0, r5
 80057ae:	602b      	str	r3, [r5, #0]
 80057b0:	f000 f80e 	bl	80057d0 <__malloc_unlock>
 80057b4:	e7c6      	b.n	8005744 <_malloc_r+0x84>
 80057b6:	6007      	str	r7, [r0, #0]
 80057b8:	e7da      	b.n	8005770 <_malloc_r+0xb0>
 80057ba:	46c0      	nop			@ (mov r8, r8)
 80057bc:	200003a0 	.word	0x200003a0

080057c0 <__malloc_lock>:
 80057c0:	b510      	push	{r4, lr}
 80057c2:	4802      	ldr	r0, [pc, #8]	@ (80057cc <__malloc_lock+0xc>)
 80057c4:	f7ff ff0d 	bl	80055e2 <__retarget_lock_acquire_recursive>
 80057c8:	bd10      	pop	{r4, pc}
 80057ca:	46c0      	nop			@ (mov r8, r8)
 80057cc:	20000398 	.word	0x20000398

080057d0 <__malloc_unlock>:
 80057d0:	b510      	push	{r4, lr}
 80057d2:	4802      	ldr	r0, [pc, #8]	@ (80057dc <__malloc_unlock+0xc>)
 80057d4:	f7ff ff06 	bl	80055e4 <__retarget_lock_release_recursive>
 80057d8:	bd10      	pop	{r4, pc}
 80057da:	46c0      	nop			@ (mov r8, r8)
 80057dc:	20000398 	.word	0x20000398

080057e0 <__sfputc_r>:
 80057e0:	6893      	ldr	r3, [r2, #8]
 80057e2:	b510      	push	{r4, lr}
 80057e4:	3b01      	subs	r3, #1
 80057e6:	6093      	str	r3, [r2, #8]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	da04      	bge.n	80057f6 <__sfputc_r+0x16>
 80057ec:	6994      	ldr	r4, [r2, #24]
 80057ee:	42a3      	cmp	r3, r4
 80057f0:	db07      	blt.n	8005802 <__sfputc_r+0x22>
 80057f2:	290a      	cmp	r1, #10
 80057f4:	d005      	beq.n	8005802 <__sfputc_r+0x22>
 80057f6:	6813      	ldr	r3, [r2, #0]
 80057f8:	1c58      	adds	r0, r3, #1
 80057fa:	6010      	str	r0, [r2, #0]
 80057fc:	7019      	strb	r1, [r3, #0]
 80057fe:	0008      	movs	r0, r1
 8005800:	bd10      	pop	{r4, pc}
 8005802:	f000 fb60 	bl	8005ec6 <__swbuf_r>
 8005806:	0001      	movs	r1, r0
 8005808:	e7f9      	b.n	80057fe <__sfputc_r+0x1e>

0800580a <__sfputs_r>:
 800580a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800580c:	0006      	movs	r6, r0
 800580e:	000f      	movs	r7, r1
 8005810:	0014      	movs	r4, r2
 8005812:	18d5      	adds	r5, r2, r3
 8005814:	42ac      	cmp	r4, r5
 8005816:	d101      	bne.n	800581c <__sfputs_r+0x12>
 8005818:	2000      	movs	r0, #0
 800581a:	e007      	b.n	800582c <__sfputs_r+0x22>
 800581c:	7821      	ldrb	r1, [r4, #0]
 800581e:	003a      	movs	r2, r7
 8005820:	0030      	movs	r0, r6
 8005822:	f7ff ffdd 	bl	80057e0 <__sfputc_r>
 8005826:	3401      	adds	r4, #1
 8005828:	1c43      	adds	r3, r0, #1
 800582a:	d1f3      	bne.n	8005814 <__sfputs_r+0xa>
 800582c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005830 <_vfiprintf_r>:
 8005830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005832:	b0a1      	sub	sp, #132	@ 0x84
 8005834:	000f      	movs	r7, r1
 8005836:	0015      	movs	r5, r2
 8005838:	001e      	movs	r6, r3
 800583a:	9003      	str	r0, [sp, #12]
 800583c:	2800      	cmp	r0, #0
 800583e:	d004      	beq.n	800584a <_vfiprintf_r+0x1a>
 8005840:	6a03      	ldr	r3, [r0, #32]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <_vfiprintf_r+0x1a>
 8005846:	f7ff fdbb 	bl	80053c0 <__sinit>
 800584a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800584c:	07db      	lsls	r3, r3, #31
 800584e:	d405      	bmi.n	800585c <_vfiprintf_r+0x2c>
 8005850:	89bb      	ldrh	r3, [r7, #12]
 8005852:	059b      	lsls	r3, r3, #22
 8005854:	d402      	bmi.n	800585c <_vfiprintf_r+0x2c>
 8005856:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005858:	f7ff fec3 	bl	80055e2 <__retarget_lock_acquire_recursive>
 800585c:	89bb      	ldrh	r3, [r7, #12]
 800585e:	071b      	lsls	r3, r3, #28
 8005860:	d502      	bpl.n	8005868 <_vfiprintf_r+0x38>
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d113      	bne.n	8005890 <_vfiprintf_r+0x60>
 8005868:	0039      	movs	r1, r7
 800586a:	9803      	ldr	r0, [sp, #12]
 800586c:	f000 fb6e 	bl	8005f4c <__swsetup_r>
 8005870:	2800      	cmp	r0, #0
 8005872:	d00d      	beq.n	8005890 <_vfiprintf_r+0x60>
 8005874:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005876:	07db      	lsls	r3, r3, #31
 8005878:	d503      	bpl.n	8005882 <_vfiprintf_r+0x52>
 800587a:	2001      	movs	r0, #1
 800587c:	4240      	negs	r0, r0
 800587e:	b021      	add	sp, #132	@ 0x84
 8005880:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005882:	89bb      	ldrh	r3, [r7, #12]
 8005884:	059b      	lsls	r3, r3, #22
 8005886:	d4f8      	bmi.n	800587a <_vfiprintf_r+0x4a>
 8005888:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800588a:	f7ff feab 	bl	80055e4 <__retarget_lock_release_recursive>
 800588e:	e7f4      	b.n	800587a <_vfiprintf_r+0x4a>
 8005890:	2300      	movs	r3, #0
 8005892:	ac08      	add	r4, sp, #32
 8005894:	6163      	str	r3, [r4, #20]
 8005896:	3320      	adds	r3, #32
 8005898:	7663      	strb	r3, [r4, #25]
 800589a:	3310      	adds	r3, #16
 800589c:	76a3      	strb	r3, [r4, #26]
 800589e:	9607      	str	r6, [sp, #28]
 80058a0:	002e      	movs	r6, r5
 80058a2:	7833      	ldrb	r3, [r6, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d001      	beq.n	80058ac <_vfiprintf_r+0x7c>
 80058a8:	2b25      	cmp	r3, #37	@ 0x25
 80058aa:	d148      	bne.n	800593e <_vfiprintf_r+0x10e>
 80058ac:	1b73      	subs	r3, r6, r5
 80058ae:	9305      	str	r3, [sp, #20]
 80058b0:	42ae      	cmp	r6, r5
 80058b2:	d00b      	beq.n	80058cc <_vfiprintf_r+0x9c>
 80058b4:	002a      	movs	r2, r5
 80058b6:	0039      	movs	r1, r7
 80058b8:	9803      	ldr	r0, [sp, #12]
 80058ba:	f7ff ffa6 	bl	800580a <__sfputs_r>
 80058be:	3001      	adds	r0, #1
 80058c0:	d100      	bne.n	80058c4 <_vfiprintf_r+0x94>
 80058c2:	e0ae      	b.n	8005a22 <_vfiprintf_r+0x1f2>
 80058c4:	6963      	ldr	r3, [r4, #20]
 80058c6:	9a05      	ldr	r2, [sp, #20]
 80058c8:	189b      	adds	r3, r3, r2
 80058ca:	6163      	str	r3, [r4, #20]
 80058cc:	7833      	ldrb	r3, [r6, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d100      	bne.n	80058d4 <_vfiprintf_r+0xa4>
 80058d2:	e0a6      	b.n	8005a22 <_vfiprintf_r+0x1f2>
 80058d4:	2201      	movs	r2, #1
 80058d6:	2300      	movs	r3, #0
 80058d8:	4252      	negs	r2, r2
 80058da:	6062      	str	r2, [r4, #4]
 80058dc:	a904      	add	r1, sp, #16
 80058de:	3254      	adds	r2, #84	@ 0x54
 80058e0:	1852      	adds	r2, r2, r1
 80058e2:	1c75      	adds	r5, r6, #1
 80058e4:	6023      	str	r3, [r4, #0]
 80058e6:	60e3      	str	r3, [r4, #12]
 80058e8:	60a3      	str	r3, [r4, #8]
 80058ea:	7013      	strb	r3, [r2, #0]
 80058ec:	65a3      	str	r3, [r4, #88]	@ 0x58
 80058ee:	4b59      	ldr	r3, [pc, #356]	@ (8005a54 <_vfiprintf_r+0x224>)
 80058f0:	2205      	movs	r2, #5
 80058f2:	0018      	movs	r0, r3
 80058f4:	7829      	ldrb	r1, [r5, #0]
 80058f6:	9305      	str	r3, [sp, #20]
 80058f8:	f000 fb98 	bl	800602c <memchr>
 80058fc:	1c6e      	adds	r6, r5, #1
 80058fe:	2800      	cmp	r0, #0
 8005900:	d11f      	bne.n	8005942 <_vfiprintf_r+0x112>
 8005902:	6822      	ldr	r2, [r4, #0]
 8005904:	06d3      	lsls	r3, r2, #27
 8005906:	d504      	bpl.n	8005912 <_vfiprintf_r+0xe2>
 8005908:	2353      	movs	r3, #83	@ 0x53
 800590a:	a904      	add	r1, sp, #16
 800590c:	185b      	adds	r3, r3, r1
 800590e:	2120      	movs	r1, #32
 8005910:	7019      	strb	r1, [r3, #0]
 8005912:	0713      	lsls	r3, r2, #28
 8005914:	d504      	bpl.n	8005920 <_vfiprintf_r+0xf0>
 8005916:	2353      	movs	r3, #83	@ 0x53
 8005918:	a904      	add	r1, sp, #16
 800591a:	185b      	adds	r3, r3, r1
 800591c:	212b      	movs	r1, #43	@ 0x2b
 800591e:	7019      	strb	r1, [r3, #0]
 8005920:	782b      	ldrb	r3, [r5, #0]
 8005922:	2b2a      	cmp	r3, #42	@ 0x2a
 8005924:	d016      	beq.n	8005954 <_vfiprintf_r+0x124>
 8005926:	002e      	movs	r6, r5
 8005928:	2100      	movs	r1, #0
 800592a:	200a      	movs	r0, #10
 800592c:	68e3      	ldr	r3, [r4, #12]
 800592e:	7832      	ldrb	r2, [r6, #0]
 8005930:	1c75      	adds	r5, r6, #1
 8005932:	3a30      	subs	r2, #48	@ 0x30
 8005934:	2a09      	cmp	r2, #9
 8005936:	d950      	bls.n	80059da <_vfiprintf_r+0x1aa>
 8005938:	2900      	cmp	r1, #0
 800593a:	d111      	bne.n	8005960 <_vfiprintf_r+0x130>
 800593c:	e017      	b.n	800596e <_vfiprintf_r+0x13e>
 800593e:	3601      	adds	r6, #1
 8005940:	e7af      	b.n	80058a2 <_vfiprintf_r+0x72>
 8005942:	9b05      	ldr	r3, [sp, #20]
 8005944:	6822      	ldr	r2, [r4, #0]
 8005946:	1ac0      	subs	r0, r0, r3
 8005948:	2301      	movs	r3, #1
 800594a:	4083      	lsls	r3, r0
 800594c:	4313      	orrs	r3, r2
 800594e:	0035      	movs	r5, r6
 8005950:	6023      	str	r3, [r4, #0]
 8005952:	e7cc      	b.n	80058ee <_vfiprintf_r+0xbe>
 8005954:	9b07      	ldr	r3, [sp, #28]
 8005956:	1d19      	adds	r1, r3, #4
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	9107      	str	r1, [sp, #28]
 800595c:	2b00      	cmp	r3, #0
 800595e:	db01      	blt.n	8005964 <_vfiprintf_r+0x134>
 8005960:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005962:	e004      	b.n	800596e <_vfiprintf_r+0x13e>
 8005964:	425b      	negs	r3, r3
 8005966:	60e3      	str	r3, [r4, #12]
 8005968:	2302      	movs	r3, #2
 800596a:	4313      	orrs	r3, r2
 800596c:	6023      	str	r3, [r4, #0]
 800596e:	7833      	ldrb	r3, [r6, #0]
 8005970:	2b2e      	cmp	r3, #46	@ 0x2e
 8005972:	d10c      	bne.n	800598e <_vfiprintf_r+0x15e>
 8005974:	7873      	ldrb	r3, [r6, #1]
 8005976:	2b2a      	cmp	r3, #42	@ 0x2a
 8005978:	d134      	bne.n	80059e4 <_vfiprintf_r+0x1b4>
 800597a:	9b07      	ldr	r3, [sp, #28]
 800597c:	3602      	adds	r6, #2
 800597e:	1d1a      	adds	r2, r3, #4
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	9207      	str	r2, [sp, #28]
 8005984:	2b00      	cmp	r3, #0
 8005986:	da01      	bge.n	800598c <_vfiprintf_r+0x15c>
 8005988:	2301      	movs	r3, #1
 800598a:	425b      	negs	r3, r3
 800598c:	9309      	str	r3, [sp, #36]	@ 0x24
 800598e:	4d32      	ldr	r5, [pc, #200]	@ (8005a58 <_vfiprintf_r+0x228>)
 8005990:	2203      	movs	r2, #3
 8005992:	0028      	movs	r0, r5
 8005994:	7831      	ldrb	r1, [r6, #0]
 8005996:	f000 fb49 	bl	800602c <memchr>
 800599a:	2800      	cmp	r0, #0
 800599c:	d006      	beq.n	80059ac <_vfiprintf_r+0x17c>
 800599e:	2340      	movs	r3, #64	@ 0x40
 80059a0:	1b40      	subs	r0, r0, r5
 80059a2:	4083      	lsls	r3, r0
 80059a4:	6822      	ldr	r2, [r4, #0]
 80059a6:	3601      	adds	r6, #1
 80059a8:	4313      	orrs	r3, r2
 80059aa:	6023      	str	r3, [r4, #0]
 80059ac:	7831      	ldrb	r1, [r6, #0]
 80059ae:	2206      	movs	r2, #6
 80059b0:	482a      	ldr	r0, [pc, #168]	@ (8005a5c <_vfiprintf_r+0x22c>)
 80059b2:	1c75      	adds	r5, r6, #1
 80059b4:	7621      	strb	r1, [r4, #24]
 80059b6:	f000 fb39 	bl	800602c <memchr>
 80059ba:	2800      	cmp	r0, #0
 80059bc:	d040      	beq.n	8005a40 <_vfiprintf_r+0x210>
 80059be:	4b28      	ldr	r3, [pc, #160]	@ (8005a60 <_vfiprintf_r+0x230>)
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d122      	bne.n	8005a0a <_vfiprintf_r+0x1da>
 80059c4:	2207      	movs	r2, #7
 80059c6:	9b07      	ldr	r3, [sp, #28]
 80059c8:	3307      	adds	r3, #7
 80059ca:	4393      	bics	r3, r2
 80059cc:	3308      	adds	r3, #8
 80059ce:	9307      	str	r3, [sp, #28]
 80059d0:	6963      	ldr	r3, [r4, #20]
 80059d2:	9a04      	ldr	r2, [sp, #16]
 80059d4:	189b      	adds	r3, r3, r2
 80059d6:	6163      	str	r3, [r4, #20]
 80059d8:	e762      	b.n	80058a0 <_vfiprintf_r+0x70>
 80059da:	4343      	muls	r3, r0
 80059dc:	002e      	movs	r6, r5
 80059de:	2101      	movs	r1, #1
 80059e0:	189b      	adds	r3, r3, r2
 80059e2:	e7a4      	b.n	800592e <_vfiprintf_r+0xfe>
 80059e4:	2300      	movs	r3, #0
 80059e6:	200a      	movs	r0, #10
 80059e8:	0019      	movs	r1, r3
 80059ea:	3601      	adds	r6, #1
 80059ec:	6063      	str	r3, [r4, #4]
 80059ee:	7832      	ldrb	r2, [r6, #0]
 80059f0:	1c75      	adds	r5, r6, #1
 80059f2:	3a30      	subs	r2, #48	@ 0x30
 80059f4:	2a09      	cmp	r2, #9
 80059f6:	d903      	bls.n	8005a00 <_vfiprintf_r+0x1d0>
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d0c8      	beq.n	800598e <_vfiprintf_r+0x15e>
 80059fc:	9109      	str	r1, [sp, #36]	@ 0x24
 80059fe:	e7c6      	b.n	800598e <_vfiprintf_r+0x15e>
 8005a00:	4341      	muls	r1, r0
 8005a02:	002e      	movs	r6, r5
 8005a04:	2301      	movs	r3, #1
 8005a06:	1889      	adds	r1, r1, r2
 8005a08:	e7f1      	b.n	80059ee <_vfiprintf_r+0x1be>
 8005a0a:	aa07      	add	r2, sp, #28
 8005a0c:	9200      	str	r2, [sp, #0]
 8005a0e:	0021      	movs	r1, r4
 8005a10:	003a      	movs	r2, r7
 8005a12:	4b14      	ldr	r3, [pc, #80]	@ (8005a64 <_vfiprintf_r+0x234>)
 8005a14:	9803      	ldr	r0, [sp, #12]
 8005a16:	e000      	b.n	8005a1a <_vfiprintf_r+0x1ea>
 8005a18:	bf00      	nop
 8005a1a:	9004      	str	r0, [sp, #16]
 8005a1c:	9b04      	ldr	r3, [sp, #16]
 8005a1e:	3301      	adds	r3, #1
 8005a20:	d1d6      	bne.n	80059d0 <_vfiprintf_r+0x1a0>
 8005a22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a24:	07db      	lsls	r3, r3, #31
 8005a26:	d405      	bmi.n	8005a34 <_vfiprintf_r+0x204>
 8005a28:	89bb      	ldrh	r3, [r7, #12]
 8005a2a:	059b      	lsls	r3, r3, #22
 8005a2c:	d402      	bmi.n	8005a34 <_vfiprintf_r+0x204>
 8005a2e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005a30:	f7ff fdd8 	bl	80055e4 <__retarget_lock_release_recursive>
 8005a34:	89bb      	ldrh	r3, [r7, #12]
 8005a36:	065b      	lsls	r3, r3, #25
 8005a38:	d500      	bpl.n	8005a3c <_vfiprintf_r+0x20c>
 8005a3a:	e71e      	b.n	800587a <_vfiprintf_r+0x4a>
 8005a3c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005a3e:	e71e      	b.n	800587e <_vfiprintf_r+0x4e>
 8005a40:	aa07      	add	r2, sp, #28
 8005a42:	9200      	str	r2, [sp, #0]
 8005a44:	0021      	movs	r1, r4
 8005a46:	003a      	movs	r2, r7
 8005a48:	4b06      	ldr	r3, [pc, #24]	@ (8005a64 <_vfiprintf_r+0x234>)
 8005a4a:	9803      	ldr	r0, [sp, #12]
 8005a4c:	f000 f87c 	bl	8005b48 <_printf_i>
 8005a50:	e7e3      	b.n	8005a1a <_vfiprintf_r+0x1ea>
 8005a52:	46c0      	nop			@ (mov r8, r8)
 8005a54:	08006298 	.word	0x08006298
 8005a58:	0800629e 	.word	0x0800629e
 8005a5c:	080062a2 	.word	0x080062a2
 8005a60:	00000000 	.word	0x00000000
 8005a64:	0800580b 	.word	0x0800580b

08005a68 <_printf_common>:
 8005a68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a6a:	0016      	movs	r6, r2
 8005a6c:	9301      	str	r3, [sp, #4]
 8005a6e:	688a      	ldr	r2, [r1, #8]
 8005a70:	690b      	ldr	r3, [r1, #16]
 8005a72:	000c      	movs	r4, r1
 8005a74:	9000      	str	r0, [sp, #0]
 8005a76:	4293      	cmp	r3, r2
 8005a78:	da00      	bge.n	8005a7c <_printf_common+0x14>
 8005a7a:	0013      	movs	r3, r2
 8005a7c:	0022      	movs	r2, r4
 8005a7e:	6033      	str	r3, [r6, #0]
 8005a80:	3243      	adds	r2, #67	@ 0x43
 8005a82:	7812      	ldrb	r2, [r2, #0]
 8005a84:	2a00      	cmp	r2, #0
 8005a86:	d001      	beq.n	8005a8c <_printf_common+0x24>
 8005a88:	3301      	adds	r3, #1
 8005a8a:	6033      	str	r3, [r6, #0]
 8005a8c:	6823      	ldr	r3, [r4, #0]
 8005a8e:	069b      	lsls	r3, r3, #26
 8005a90:	d502      	bpl.n	8005a98 <_printf_common+0x30>
 8005a92:	6833      	ldr	r3, [r6, #0]
 8005a94:	3302      	adds	r3, #2
 8005a96:	6033      	str	r3, [r6, #0]
 8005a98:	6822      	ldr	r2, [r4, #0]
 8005a9a:	2306      	movs	r3, #6
 8005a9c:	0015      	movs	r5, r2
 8005a9e:	401d      	ands	r5, r3
 8005aa0:	421a      	tst	r2, r3
 8005aa2:	d027      	beq.n	8005af4 <_printf_common+0x8c>
 8005aa4:	0023      	movs	r3, r4
 8005aa6:	3343      	adds	r3, #67	@ 0x43
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	1e5a      	subs	r2, r3, #1
 8005aac:	4193      	sbcs	r3, r2
 8005aae:	6822      	ldr	r2, [r4, #0]
 8005ab0:	0692      	lsls	r2, r2, #26
 8005ab2:	d430      	bmi.n	8005b16 <_printf_common+0xae>
 8005ab4:	0022      	movs	r2, r4
 8005ab6:	9901      	ldr	r1, [sp, #4]
 8005ab8:	9800      	ldr	r0, [sp, #0]
 8005aba:	9d08      	ldr	r5, [sp, #32]
 8005abc:	3243      	adds	r2, #67	@ 0x43
 8005abe:	47a8      	blx	r5
 8005ac0:	3001      	adds	r0, #1
 8005ac2:	d025      	beq.n	8005b10 <_printf_common+0xa8>
 8005ac4:	2206      	movs	r2, #6
 8005ac6:	6823      	ldr	r3, [r4, #0]
 8005ac8:	2500      	movs	r5, #0
 8005aca:	4013      	ands	r3, r2
 8005acc:	2b04      	cmp	r3, #4
 8005ace:	d105      	bne.n	8005adc <_printf_common+0x74>
 8005ad0:	6833      	ldr	r3, [r6, #0]
 8005ad2:	68e5      	ldr	r5, [r4, #12]
 8005ad4:	1aed      	subs	r5, r5, r3
 8005ad6:	43eb      	mvns	r3, r5
 8005ad8:	17db      	asrs	r3, r3, #31
 8005ada:	401d      	ands	r5, r3
 8005adc:	68a3      	ldr	r3, [r4, #8]
 8005ade:	6922      	ldr	r2, [r4, #16]
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	dd01      	ble.n	8005ae8 <_printf_common+0x80>
 8005ae4:	1a9b      	subs	r3, r3, r2
 8005ae6:	18ed      	adds	r5, r5, r3
 8005ae8:	2600      	movs	r6, #0
 8005aea:	42b5      	cmp	r5, r6
 8005aec:	d120      	bne.n	8005b30 <_printf_common+0xc8>
 8005aee:	2000      	movs	r0, #0
 8005af0:	e010      	b.n	8005b14 <_printf_common+0xac>
 8005af2:	3501      	adds	r5, #1
 8005af4:	68e3      	ldr	r3, [r4, #12]
 8005af6:	6832      	ldr	r2, [r6, #0]
 8005af8:	1a9b      	subs	r3, r3, r2
 8005afa:	42ab      	cmp	r3, r5
 8005afc:	ddd2      	ble.n	8005aa4 <_printf_common+0x3c>
 8005afe:	0022      	movs	r2, r4
 8005b00:	2301      	movs	r3, #1
 8005b02:	9901      	ldr	r1, [sp, #4]
 8005b04:	9800      	ldr	r0, [sp, #0]
 8005b06:	9f08      	ldr	r7, [sp, #32]
 8005b08:	3219      	adds	r2, #25
 8005b0a:	47b8      	blx	r7
 8005b0c:	3001      	adds	r0, #1
 8005b0e:	d1f0      	bne.n	8005af2 <_printf_common+0x8a>
 8005b10:	2001      	movs	r0, #1
 8005b12:	4240      	negs	r0, r0
 8005b14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005b16:	2030      	movs	r0, #48	@ 0x30
 8005b18:	18e1      	adds	r1, r4, r3
 8005b1a:	3143      	adds	r1, #67	@ 0x43
 8005b1c:	7008      	strb	r0, [r1, #0]
 8005b1e:	0021      	movs	r1, r4
 8005b20:	1c5a      	adds	r2, r3, #1
 8005b22:	3145      	adds	r1, #69	@ 0x45
 8005b24:	7809      	ldrb	r1, [r1, #0]
 8005b26:	18a2      	adds	r2, r4, r2
 8005b28:	3243      	adds	r2, #67	@ 0x43
 8005b2a:	3302      	adds	r3, #2
 8005b2c:	7011      	strb	r1, [r2, #0]
 8005b2e:	e7c1      	b.n	8005ab4 <_printf_common+0x4c>
 8005b30:	0022      	movs	r2, r4
 8005b32:	2301      	movs	r3, #1
 8005b34:	9901      	ldr	r1, [sp, #4]
 8005b36:	9800      	ldr	r0, [sp, #0]
 8005b38:	9f08      	ldr	r7, [sp, #32]
 8005b3a:	321a      	adds	r2, #26
 8005b3c:	47b8      	blx	r7
 8005b3e:	3001      	adds	r0, #1
 8005b40:	d0e6      	beq.n	8005b10 <_printf_common+0xa8>
 8005b42:	3601      	adds	r6, #1
 8005b44:	e7d1      	b.n	8005aea <_printf_common+0x82>
	...

08005b48 <_printf_i>:
 8005b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b4a:	b08b      	sub	sp, #44	@ 0x2c
 8005b4c:	9206      	str	r2, [sp, #24]
 8005b4e:	000a      	movs	r2, r1
 8005b50:	3243      	adds	r2, #67	@ 0x43
 8005b52:	9307      	str	r3, [sp, #28]
 8005b54:	9005      	str	r0, [sp, #20]
 8005b56:	9203      	str	r2, [sp, #12]
 8005b58:	7e0a      	ldrb	r2, [r1, #24]
 8005b5a:	000c      	movs	r4, r1
 8005b5c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005b5e:	2a78      	cmp	r2, #120	@ 0x78
 8005b60:	d809      	bhi.n	8005b76 <_printf_i+0x2e>
 8005b62:	2a62      	cmp	r2, #98	@ 0x62
 8005b64:	d80b      	bhi.n	8005b7e <_printf_i+0x36>
 8005b66:	2a00      	cmp	r2, #0
 8005b68:	d100      	bne.n	8005b6c <_printf_i+0x24>
 8005b6a:	e0bc      	b.n	8005ce6 <_printf_i+0x19e>
 8005b6c:	497b      	ldr	r1, [pc, #492]	@ (8005d5c <_printf_i+0x214>)
 8005b6e:	9104      	str	r1, [sp, #16]
 8005b70:	2a58      	cmp	r2, #88	@ 0x58
 8005b72:	d100      	bne.n	8005b76 <_printf_i+0x2e>
 8005b74:	e090      	b.n	8005c98 <_printf_i+0x150>
 8005b76:	0025      	movs	r5, r4
 8005b78:	3542      	adds	r5, #66	@ 0x42
 8005b7a:	702a      	strb	r2, [r5, #0]
 8005b7c:	e022      	b.n	8005bc4 <_printf_i+0x7c>
 8005b7e:	0010      	movs	r0, r2
 8005b80:	3863      	subs	r0, #99	@ 0x63
 8005b82:	2815      	cmp	r0, #21
 8005b84:	d8f7      	bhi.n	8005b76 <_printf_i+0x2e>
 8005b86:	f7fa fabf 	bl	8000108 <__gnu_thumb1_case_shi>
 8005b8a:	0016      	.short	0x0016
 8005b8c:	fff6001f 	.word	0xfff6001f
 8005b90:	fff6fff6 	.word	0xfff6fff6
 8005b94:	001ffff6 	.word	0x001ffff6
 8005b98:	fff6fff6 	.word	0xfff6fff6
 8005b9c:	fff6fff6 	.word	0xfff6fff6
 8005ba0:	003600a1 	.word	0x003600a1
 8005ba4:	fff60080 	.word	0xfff60080
 8005ba8:	00b2fff6 	.word	0x00b2fff6
 8005bac:	0036fff6 	.word	0x0036fff6
 8005bb0:	fff6fff6 	.word	0xfff6fff6
 8005bb4:	0084      	.short	0x0084
 8005bb6:	0025      	movs	r5, r4
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	3542      	adds	r5, #66	@ 0x42
 8005bbc:	1d11      	adds	r1, r2, #4
 8005bbe:	6019      	str	r1, [r3, #0]
 8005bc0:	6813      	ldr	r3, [r2, #0]
 8005bc2:	702b      	strb	r3, [r5, #0]
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e0a0      	b.n	8005d0a <_printf_i+0x1c2>
 8005bc8:	6818      	ldr	r0, [r3, #0]
 8005bca:	6809      	ldr	r1, [r1, #0]
 8005bcc:	1d02      	adds	r2, r0, #4
 8005bce:	060d      	lsls	r5, r1, #24
 8005bd0:	d50b      	bpl.n	8005bea <_printf_i+0xa2>
 8005bd2:	6806      	ldr	r6, [r0, #0]
 8005bd4:	601a      	str	r2, [r3, #0]
 8005bd6:	2e00      	cmp	r6, #0
 8005bd8:	da03      	bge.n	8005be2 <_printf_i+0x9a>
 8005bda:	232d      	movs	r3, #45	@ 0x2d
 8005bdc:	9a03      	ldr	r2, [sp, #12]
 8005bde:	4276      	negs	r6, r6
 8005be0:	7013      	strb	r3, [r2, #0]
 8005be2:	4b5e      	ldr	r3, [pc, #376]	@ (8005d5c <_printf_i+0x214>)
 8005be4:	270a      	movs	r7, #10
 8005be6:	9304      	str	r3, [sp, #16]
 8005be8:	e018      	b.n	8005c1c <_printf_i+0xd4>
 8005bea:	6806      	ldr	r6, [r0, #0]
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	0649      	lsls	r1, r1, #25
 8005bf0:	d5f1      	bpl.n	8005bd6 <_printf_i+0x8e>
 8005bf2:	b236      	sxth	r6, r6
 8005bf4:	e7ef      	b.n	8005bd6 <_printf_i+0x8e>
 8005bf6:	6808      	ldr	r0, [r1, #0]
 8005bf8:	6819      	ldr	r1, [r3, #0]
 8005bfa:	c940      	ldmia	r1!, {r6}
 8005bfc:	0605      	lsls	r5, r0, #24
 8005bfe:	d402      	bmi.n	8005c06 <_printf_i+0xbe>
 8005c00:	0640      	lsls	r0, r0, #25
 8005c02:	d500      	bpl.n	8005c06 <_printf_i+0xbe>
 8005c04:	b2b6      	uxth	r6, r6
 8005c06:	6019      	str	r1, [r3, #0]
 8005c08:	4b54      	ldr	r3, [pc, #336]	@ (8005d5c <_printf_i+0x214>)
 8005c0a:	270a      	movs	r7, #10
 8005c0c:	9304      	str	r3, [sp, #16]
 8005c0e:	2a6f      	cmp	r2, #111	@ 0x6f
 8005c10:	d100      	bne.n	8005c14 <_printf_i+0xcc>
 8005c12:	3f02      	subs	r7, #2
 8005c14:	0023      	movs	r3, r4
 8005c16:	2200      	movs	r2, #0
 8005c18:	3343      	adds	r3, #67	@ 0x43
 8005c1a:	701a      	strb	r2, [r3, #0]
 8005c1c:	6863      	ldr	r3, [r4, #4]
 8005c1e:	60a3      	str	r3, [r4, #8]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	db03      	blt.n	8005c2c <_printf_i+0xe4>
 8005c24:	2104      	movs	r1, #4
 8005c26:	6822      	ldr	r2, [r4, #0]
 8005c28:	438a      	bics	r2, r1
 8005c2a:	6022      	str	r2, [r4, #0]
 8005c2c:	2e00      	cmp	r6, #0
 8005c2e:	d102      	bne.n	8005c36 <_printf_i+0xee>
 8005c30:	9d03      	ldr	r5, [sp, #12]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00c      	beq.n	8005c50 <_printf_i+0x108>
 8005c36:	9d03      	ldr	r5, [sp, #12]
 8005c38:	0030      	movs	r0, r6
 8005c3a:	0039      	movs	r1, r7
 8005c3c:	f7fa faf4 	bl	8000228 <__aeabi_uidivmod>
 8005c40:	9b04      	ldr	r3, [sp, #16]
 8005c42:	3d01      	subs	r5, #1
 8005c44:	5c5b      	ldrb	r3, [r3, r1]
 8005c46:	702b      	strb	r3, [r5, #0]
 8005c48:	0033      	movs	r3, r6
 8005c4a:	0006      	movs	r6, r0
 8005c4c:	429f      	cmp	r7, r3
 8005c4e:	d9f3      	bls.n	8005c38 <_printf_i+0xf0>
 8005c50:	2f08      	cmp	r7, #8
 8005c52:	d109      	bne.n	8005c68 <_printf_i+0x120>
 8005c54:	6823      	ldr	r3, [r4, #0]
 8005c56:	07db      	lsls	r3, r3, #31
 8005c58:	d506      	bpl.n	8005c68 <_printf_i+0x120>
 8005c5a:	6862      	ldr	r2, [r4, #4]
 8005c5c:	6923      	ldr	r3, [r4, #16]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	dc02      	bgt.n	8005c68 <_printf_i+0x120>
 8005c62:	2330      	movs	r3, #48	@ 0x30
 8005c64:	3d01      	subs	r5, #1
 8005c66:	702b      	strb	r3, [r5, #0]
 8005c68:	9b03      	ldr	r3, [sp, #12]
 8005c6a:	1b5b      	subs	r3, r3, r5
 8005c6c:	6123      	str	r3, [r4, #16]
 8005c6e:	9b07      	ldr	r3, [sp, #28]
 8005c70:	0021      	movs	r1, r4
 8005c72:	9300      	str	r3, [sp, #0]
 8005c74:	9805      	ldr	r0, [sp, #20]
 8005c76:	9b06      	ldr	r3, [sp, #24]
 8005c78:	aa09      	add	r2, sp, #36	@ 0x24
 8005c7a:	f7ff fef5 	bl	8005a68 <_printf_common>
 8005c7e:	3001      	adds	r0, #1
 8005c80:	d148      	bne.n	8005d14 <_printf_i+0x1cc>
 8005c82:	2001      	movs	r0, #1
 8005c84:	4240      	negs	r0, r0
 8005c86:	b00b      	add	sp, #44	@ 0x2c
 8005c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c8a:	2220      	movs	r2, #32
 8005c8c:	6809      	ldr	r1, [r1, #0]
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	6022      	str	r2, [r4, #0]
 8005c92:	2278      	movs	r2, #120	@ 0x78
 8005c94:	4932      	ldr	r1, [pc, #200]	@ (8005d60 <_printf_i+0x218>)
 8005c96:	9104      	str	r1, [sp, #16]
 8005c98:	0021      	movs	r1, r4
 8005c9a:	3145      	adds	r1, #69	@ 0x45
 8005c9c:	700a      	strb	r2, [r1, #0]
 8005c9e:	6819      	ldr	r1, [r3, #0]
 8005ca0:	6822      	ldr	r2, [r4, #0]
 8005ca2:	c940      	ldmia	r1!, {r6}
 8005ca4:	0610      	lsls	r0, r2, #24
 8005ca6:	d402      	bmi.n	8005cae <_printf_i+0x166>
 8005ca8:	0650      	lsls	r0, r2, #25
 8005caa:	d500      	bpl.n	8005cae <_printf_i+0x166>
 8005cac:	b2b6      	uxth	r6, r6
 8005cae:	6019      	str	r1, [r3, #0]
 8005cb0:	07d3      	lsls	r3, r2, #31
 8005cb2:	d502      	bpl.n	8005cba <_printf_i+0x172>
 8005cb4:	2320      	movs	r3, #32
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	6023      	str	r3, [r4, #0]
 8005cba:	2e00      	cmp	r6, #0
 8005cbc:	d001      	beq.n	8005cc2 <_printf_i+0x17a>
 8005cbe:	2710      	movs	r7, #16
 8005cc0:	e7a8      	b.n	8005c14 <_printf_i+0xcc>
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	6823      	ldr	r3, [r4, #0]
 8005cc6:	4393      	bics	r3, r2
 8005cc8:	6023      	str	r3, [r4, #0]
 8005cca:	e7f8      	b.n	8005cbe <_printf_i+0x176>
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	680d      	ldr	r5, [r1, #0]
 8005cd0:	1d10      	adds	r0, r2, #4
 8005cd2:	6949      	ldr	r1, [r1, #20]
 8005cd4:	6018      	str	r0, [r3, #0]
 8005cd6:	6813      	ldr	r3, [r2, #0]
 8005cd8:	062e      	lsls	r6, r5, #24
 8005cda:	d501      	bpl.n	8005ce0 <_printf_i+0x198>
 8005cdc:	6019      	str	r1, [r3, #0]
 8005cde:	e002      	b.n	8005ce6 <_printf_i+0x19e>
 8005ce0:	066d      	lsls	r5, r5, #25
 8005ce2:	d5fb      	bpl.n	8005cdc <_printf_i+0x194>
 8005ce4:	8019      	strh	r1, [r3, #0]
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	9d03      	ldr	r5, [sp, #12]
 8005cea:	6123      	str	r3, [r4, #16]
 8005cec:	e7bf      	b.n	8005c6e <_printf_i+0x126>
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	1d11      	adds	r1, r2, #4
 8005cf2:	6019      	str	r1, [r3, #0]
 8005cf4:	6815      	ldr	r5, [r2, #0]
 8005cf6:	2100      	movs	r1, #0
 8005cf8:	0028      	movs	r0, r5
 8005cfa:	6862      	ldr	r2, [r4, #4]
 8005cfc:	f000 f996 	bl	800602c <memchr>
 8005d00:	2800      	cmp	r0, #0
 8005d02:	d001      	beq.n	8005d08 <_printf_i+0x1c0>
 8005d04:	1b40      	subs	r0, r0, r5
 8005d06:	6060      	str	r0, [r4, #4]
 8005d08:	6863      	ldr	r3, [r4, #4]
 8005d0a:	6123      	str	r3, [r4, #16]
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	9a03      	ldr	r2, [sp, #12]
 8005d10:	7013      	strb	r3, [r2, #0]
 8005d12:	e7ac      	b.n	8005c6e <_printf_i+0x126>
 8005d14:	002a      	movs	r2, r5
 8005d16:	6923      	ldr	r3, [r4, #16]
 8005d18:	9906      	ldr	r1, [sp, #24]
 8005d1a:	9805      	ldr	r0, [sp, #20]
 8005d1c:	9d07      	ldr	r5, [sp, #28]
 8005d1e:	47a8      	blx	r5
 8005d20:	3001      	adds	r0, #1
 8005d22:	d0ae      	beq.n	8005c82 <_printf_i+0x13a>
 8005d24:	6823      	ldr	r3, [r4, #0]
 8005d26:	079b      	lsls	r3, r3, #30
 8005d28:	d415      	bmi.n	8005d56 <_printf_i+0x20e>
 8005d2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d2c:	68e0      	ldr	r0, [r4, #12]
 8005d2e:	4298      	cmp	r0, r3
 8005d30:	daa9      	bge.n	8005c86 <_printf_i+0x13e>
 8005d32:	0018      	movs	r0, r3
 8005d34:	e7a7      	b.n	8005c86 <_printf_i+0x13e>
 8005d36:	0022      	movs	r2, r4
 8005d38:	2301      	movs	r3, #1
 8005d3a:	9906      	ldr	r1, [sp, #24]
 8005d3c:	9805      	ldr	r0, [sp, #20]
 8005d3e:	9e07      	ldr	r6, [sp, #28]
 8005d40:	3219      	adds	r2, #25
 8005d42:	47b0      	blx	r6
 8005d44:	3001      	adds	r0, #1
 8005d46:	d09c      	beq.n	8005c82 <_printf_i+0x13a>
 8005d48:	3501      	adds	r5, #1
 8005d4a:	68e3      	ldr	r3, [r4, #12]
 8005d4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d4e:	1a9b      	subs	r3, r3, r2
 8005d50:	42ab      	cmp	r3, r5
 8005d52:	dcf0      	bgt.n	8005d36 <_printf_i+0x1ee>
 8005d54:	e7e9      	b.n	8005d2a <_printf_i+0x1e2>
 8005d56:	2500      	movs	r5, #0
 8005d58:	e7f7      	b.n	8005d4a <_printf_i+0x202>
 8005d5a:	46c0      	nop			@ (mov r8, r8)
 8005d5c:	080062a9 	.word	0x080062a9
 8005d60:	080062ba 	.word	0x080062ba

08005d64 <__sflush_r>:
 8005d64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d66:	220c      	movs	r2, #12
 8005d68:	5e8b      	ldrsh	r3, [r1, r2]
 8005d6a:	0005      	movs	r5, r0
 8005d6c:	000c      	movs	r4, r1
 8005d6e:	071a      	lsls	r2, r3, #28
 8005d70:	d456      	bmi.n	8005e20 <__sflush_r+0xbc>
 8005d72:	684a      	ldr	r2, [r1, #4]
 8005d74:	2a00      	cmp	r2, #0
 8005d76:	dc02      	bgt.n	8005d7e <__sflush_r+0x1a>
 8005d78:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8005d7a:	2a00      	cmp	r2, #0
 8005d7c:	dd4e      	ble.n	8005e1c <__sflush_r+0xb8>
 8005d7e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8005d80:	2f00      	cmp	r7, #0
 8005d82:	d04b      	beq.n	8005e1c <__sflush_r+0xb8>
 8005d84:	2200      	movs	r2, #0
 8005d86:	2080      	movs	r0, #128	@ 0x80
 8005d88:	682e      	ldr	r6, [r5, #0]
 8005d8a:	602a      	str	r2, [r5, #0]
 8005d8c:	001a      	movs	r2, r3
 8005d8e:	0140      	lsls	r0, r0, #5
 8005d90:	6a21      	ldr	r1, [r4, #32]
 8005d92:	4002      	ands	r2, r0
 8005d94:	4203      	tst	r3, r0
 8005d96:	d033      	beq.n	8005e00 <__sflush_r+0x9c>
 8005d98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005d9a:	89a3      	ldrh	r3, [r4, #12]
 8005d9c:	075b      	lsls	r3, r3, #29
 8005d9e:	d506      	bpl.n	8005dae <__sflush_r+0x4a>
 8005da0:	6863      	ldr	r3, [r4, #4]
 8005da2:	1ad2      	subs	r2, r2, r3
 8005da4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d001      	beq.n	8005dae <__sflush_r+0x4a>
 8005daa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005dac:	1ad2      	subs	r2, r2, r3
 8005dae:	2300      	movs	r3, #0
 8005db0:	0028      	movs	r0, r5
 8005db2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8005db4:	6a21      	ldr	r1, [r4, #32]
 8005db6:	47b8      	blx	r7
 8005db8:	89a2      	ldrh	r2, [r4, #12]
 8005dba:	1c43      	adds	r3, r0, #1
 8005dbc:	d106      	bne.n	8005dcc <__sflush_r+0x68>
 8005dbe:	6829      	ldr	r1, [r5, #0]
 8005dc0:	291d      	cmp	r1, #29
 8005dc2:	d846      	bhi.n	8005e52 <__sflush_r+0xee>
 8005dc4:	4b29      	ldr	r3, [pc, #164]	@ (8005e6c <__sflush_r+0x108>)
 8005dc6:	410b      	asrs	r3, r1
 8005dc8:	07db      	lsls	r3, r3, #31
 8005dca:	d442      	bmi.n	8005e52 <__sflush_r+0xee>
 8005dcc:	2300      	movs	r3, #0
 8005dce:	6063      	str	r3, [r4, #4]
 8005dd0:	6923      	ldr	r3, [r4, #16]
 8005dd2:	6023      	str	r3, [r4, #0]
 8005dd4:	04d2      	lsls	r2, r2, #19
 8005dd6:	d505      	bpl.n	8005de4 <__sflush_r+0x80>
 8005dd8:	1c43      	adds	r3, r0, #1
 8005dda:	d102      	bne.n	8005de2 <__sflush_r+0x7e>
 8005ddc:	682b      	ldr	r3, [r5, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d100      	bne.n	8005de4 <__sflush_r+0x80>
 8005de2:	6560      	str	r0, [r4, #84]	@ 0x54
 8005de4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005de6:	602e      	str	r6, [r5, #0]
 8005de8:	2900      	cmp	r1, #0
 8005dea:	d017      	beq.n	8005e1c <__sflush_r+0xb8>
 8005dec:	0023      	movs	r3, r4
 8005dee:	3344      	adds	r3, #68	@ 0x44
 8005df0:	4299      	cmp	r1, r3
 8005df2:	d002      	beq.n	8005dfa <__sflush_r+0x96>
 8005df4:	0028      	movs	r0, r5
 8005df6:	f7ff fbf7 	bl	80055e8 <_free_r>
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	6363      	str	r3, [r4, #52]	@ 0x34
 8005dfe:	e00d      	b.n	8005e1c <__sflush_r+0xb8>
 8005e00:	2301      	movs	r3, #1
 8005e02:	0028      	movs	r0, r5
 8005e04:	47b8      	blx	r7
 8005e06:	0002      	movs	r2, r0
 8005e08:	1c43      	adds	r3, r0, #1
 8005e0a:	d1c6      	bne.n	8005d9a <__sflush_r+0x36>
 8005e0c:	682b      	ldr	r3, [r5, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d0c3      	beq.n	8005d9a <__sflush_r+0x36>
 8005e12:	2b1d      	cmp	r3, #29
 8005e14:	d001      	beq.n	8005e1a <__sflush_r+0xb6>
 8005e16:	2b16      	cmp	r3, #22
 8005e18:	d11a      	bne.n	8005e50 <__sflush_r+0xec>
 8005e1a:	602e      	str	r6, [r5, #0]
 8005e1c:	2000      	movs	r0, #0
 8005e1e:	e01e      	b.n	8005e5e <__sflush_r+0xfa>
 8005e20:	690e      	ldr	r6, [r1, #16]
 8005e22:	2e00      	cmp	r6, #0
 8005e24:	d0fa      	beq.n	8005e1c <__sflush_r+0xb8>
 8005e26:	680f      	ldr	r7, [r1, #0]
 8005e28:	600e      	str	r6, [r1, #0]
 8005e2a:	1bba      	subs	r2, r7, r6
 8005e2c:	9201      	str	r2, [sp, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	079b      	lsls	r3, r3, #30
 8005e32:	d100      	bne.n	8005e36 <__sflush_r+0xd2>
 8005e34:	694a      	ldr	r2, [r1, #20]
 8005e36:	60a2      	str	r2, [r4, #8]
 8005e38:	9b01      	ldr	r3, [sp, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	ddee      	ble.n	8005e1c <__sflush_r+0xb8>
 8005e3e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005e40:	0032      	movs	r2, r6
 8005e42:	001f      	movs	r7, r3
 8005e44:	0028      	movs	r0, r5
 8005e46:	9b01      	ldr	r3, [sp, #4]
 8005e48:	6a21      	ldr	r1, [r4, #32]
 8005e4a:	47b8      	blx	r7
 8005e4c:	2800      	cmp	r0, #0
 8005e4e:	dc07      	bgt.n	8005e60 <__sflush_r+0xfc>
 8005e50:	89a2      	ldrh	r2, [r4, #12]
 8005e52:	2340      	movs	r3, #64	@ 0x40
 8005e54:	2001      	movs	r0, #1
 8005e56:	4313      	orrs	r3, r2
 8005e58:	b21b      	sxth	r3, r3
 8005e5a:	81a3      	strh	r3, [r4, #12]
 8005e5c:	4240      	negs	r0, r0
 8005e5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005e60:	9b01      	ldr	r3, [sp, #4]
 8005e62:	1836      	adds	r6, r6, r0
 8005e64:	1a1b      	subs	r3, r3, r0
 8005e66:	9301      	str	r3, [sp, #4]
 8005e68:	e7e6      	b.n	8005e38 <__sflush_r+0xd4>
 8005e6a:	46c0      	nop			@ (mov r8, r8)
 8005e6c:	dfbffffe 	.word	0xdfbffffe

08005e70 <_fflush_r>:
 8005e70:	690b      	ldr	r3, [r1, #16]
 8005e72:	b570      	push	{r4, r5, r6, lr}
 8005e74:	0005      	movs	r5, r0
 8005e76:	000c      	movs	r4, r1
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d102      	bne.n	8005e82 <_fflush_r+0x12>
 8005e7c:	2500      	movs	r5, #0
 8005e7e:	0028      	movs	r0, r5
 8005e80:	bd70      	pop	{r4, r5, r6, pc}
 8005e82:	2800      	cmp	r0, #0
 8005e84:	d004      	beq.n	8005e90 <_fflush_r+0x20>
 8005e86:	6a03      	ldr	r3, [r0, #32]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d101      	bne.n	8005e90 <_fflush_r+0x20>
 8005e8c:	f7ff fa98 	bl	80053c0 <__sinit>
 8005e90:	220c      	movs	r2, #12
 8005e92:	5ea3      	ldrsh	r3, [r4, r2]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d0f1      	beq.n	8005e7c <_fflush_r+0xc>
 8005e98:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005e9a:	07d2      	lsls	r2, r2, #31
 8005e9c:	d404      	bmi.n	8005ea8 <_fflush_r+0x38>
 8005e9e:	059b      	lsls	r3, r3, #22
 8005ea0:	d402      	bmi.n	8005ea8 <_fflush_r+0x38>
 8005ea2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ea4:	f7ff fb9d 	bl	80055e2 <__retarget_lock_acquire_recursive>
 8005ea8:	0028      	movs	r0, r5
 8005eaa:	0021      	movs	r1, r4
 8005eac:	f7ff ff5a 	bl	8005d64 <__sflush_r>
 8005eb0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005eb2:	0005      	movs	r5, r0
 8005eb4:	07db      	lsls	r3, r3, #31
 8005eb6:	d4e2      	bmi.n	8005e7e <_fflush_r+0xe>
 8005eb8:	89a3      	ldrh	r3, [r4, #12]
 8005eba:	059b      	lsls	r3, r3, #22
 8005ebc:	d4df      	bmi.n	8005e7e <_fflush_r+0xe>
 8005ebe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ec0:	f7ff fb90 	bl	80055e4 <__retarget_lock_release_recursive>
 8005ec4:	e7db      	b.n	8005e7e <_fflush_r+0xe>

08005ec6 <__swbuf_r>:
 8005ec6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ec8:	0006      	movs	r6, r0
 8005eca:	000d      	movs	r5, r1
 8005ecc:	0014      	movs	r4, r2
 8005ece:	2800      	cmp	r0, #0
 8005ed0:	d004      	beq.n	8005edc <__swbuf_r+0x16>
 8005ed2:	6a03      	ldr	r3, [r0, #32]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d101      	bne.n	8005edc <__swbuf_r+0x16>
 8005ed8:	f7ff fa72 	bl	80053c0 <__sinit>
 8005edc:	69a3      	ldr	r3, [r4, #24]
 8005ede:	60a3      	str	r3, [r4, #8]
 8005ee0:	89a3      	ldrh	r3, [r4, #12]
 8005ee2:	071b      	lsls	r3, r3, #28
 8005ee4:	d502      	bpl.n	8005eec <__swbuf_r+0x26>
 8005ee6:	6923      	ldr	r3, [r4, #16]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d109      	bne.n	8005f00 <__swbuf_r+0x3a>
 8005eec:	0021      	movs	r1, r4
 8005eee:	0030      	movs	r0, r6
 8005ef0:	f000 f82c 	bl	8005f4c <__swsetup_r>
 8005ef4:	2800      	cmp	r0, #0
 8005ef6:	d003      	beq.n	8005f00 <__swbuf_r+0x3a>
 8005ef8:	2501      	movs	r5, #1
 8005efa:	426d      	negs	r5, r5
 8005efc:	0028      	movs	r0, r5
 8005efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f00:	6923      	ldr	r3, [r4, #16]
 8005f02:	6820      	ldr	r0, [r4, #0]
 8005f04:	b2ef      	uxtb	r7, r5
 8005f06:	1ac0      	subs	r0, r0, r3
 8005f08:	6963      	ldr	r3, [r4, #20]
 8005f0a:	b2ed      	uxtb	r5, r5
 8005f0c:	4283      	cmp	r3, r0
 8005f0e:	dc05      	bgt.n	8005f1c <__swbuf_r+0x56>
 8005f10:	0021      	movs	r1, r4
 8005f12:	0030      	movs	r0, r6
 8005f14:	f7ff ffac 	bl	8005e70 <_fflush_r>
 8005f18:	2800      	cmp	r0, #0
 8005f1a:	d1ed      	bne.n	8005ef8 <__swbuf_r+0x32>
 8005f1c:	68a3      	ldr	r3, [r4, #8]
 8005f1e:	3001      	adds	r0, #1
 8005f20:	3b01      	subs	r3, #1
 8005f22:	60a3      	str	r3, [r4, #8]
 8005f24:	6823      	ldr	r3, [r4, #0]
 8005f26:	1c5a      	adds	r2, r3, #1
 8005f28:	6022      	str	r2, [r4, #0]
 8005f2a:	701f      	strb	r7, [r3, #0]
 8005f2c:	6963      	ldr	r3, [r4, #20]
 8005f2e:	4283      	cmp	r3, r0
 8005f30:	d004      	beq.n	8005f3c <__swbuf_r+0x76>
 8005f32:	89a3      	ldrh	r3, [r4, #12]
 8005f34:	07db      	lsls	r3, r3, #31
 8005f36:	d5e1      	bpl.n	8005efc <__swbuf_r+0x36>
 8005f38:	2d0a      	cmp	r5, #10
 8005f3a:	d1df      	bne.n	8005efc <__swbuf_r+0x36>
 8005f3c:	0021      	movs	r1, r4
 8005f3e:	0030      	movs	r0, r6
 8005f40:	f7ff ff96 	bl	8005e70 <_fflush_r>
 8005f44:	2800      	cmp	r0, #0
 8005f46:	d0d9      	beq.n	8005efc <__swbuf_r+0x36>
 8005f48:	e7d6      	b.n	8005ef8 <__swbuf_r+0x32>
	...

08005f4c <__swsetup_r>:
 8005f4c:	4b2d      	ldr	r3, [pc, #180]	@ (8006004 <__swsetup_r+0xb8>)
 8005f4e:	b570      	push	{r4, r5, r6, lr}
 8005f50:	0005      	movs	r5, r0
 8005f52:	6818      	ldr	r0, [r3, #0]
 8005f54:	000c      	movs	r4, r1
 8005f56:	2800      	cmp	r0, #0
 8005f58:	d004      	beq.n	8005f64 <__swsetup_r+0x18>
 8005f5a:	6a03      	ldr	r3, [r0, #32]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d101      	bne.n	8005f64 <__swsetup_r+0x18>
 8005f60:	f7ff fa2e 	bl	80053c0 <__sinit>
 8005f64:	230c      	movs	r3, #12
 8005f66:	5ee2      	ldrsh	r2, [r4, r3]
 8005f68:	0713      	lsls	r3, r2, #28
 8005f6a:	d423      	bmi.n	8005fb4 <__swsetup_r+0x68>
 8005f6c:	06d3      	lsls	r3, r2, #27
 8005f6e:	d407      	bmi.n	8005f80 <__swsetup_r+0x34>
 8005f70:	2309      	movs	r3, #9
 8005f72:	602b      	str	r3, [r5, #0]
 8005f74:	2340      	movs	r3, #64	@ 0x40
 8005f76:	2001      	movs	r0, #1
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	81a3      	strh	r3, [r4, #12]
 8005f7c:	4240      	negs	r0, r0
 8005f7e:	e03a      	b.n	8005ff6 <__swsetup_r+0xaa>
 8005f80:	0752      	lsls	r2, r2, #29
 8005f82:	d513      	bpl.n	8005fac <__swsetup_r+0x60>
 8005f84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f86:	2900      	cmp	r1, #0
 8005f88:	d008      	beq.n	8005f9c <__swsetup_r+0x50>
 8005f8a:	0023      	movs	r3, r4
 8005f8c:	3344      	adds	r3, #68	@ 0x44
 8005f8e:	4299      	cmp	r1, r3
 8005f90:	d002      	beq.n	8005f98 <__swsetup_r+0x4c>
 8005f92:	0028      	movs	r0, r5
 8005f94:	f7ff fb28 	bl	80055e8 <_free_r>
 8005f98:	2300      	movs	r3, #0
 8005f9a:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f9c:	2224      	movs	r2, #36	@ 0x24
 8005f9e:	89a3      	ldrh	r3, [r4, #12]
 8005fa0:	4393      	bics	r3, r2
 8005fa2:	81a3      	strh	r3, [r4, #12]
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	6063      	str	r3, [r4, #4]
 8005fa8:	6923      	ldr	r3, [r4, #16]
 8005faa:	6023      	str	r3, [r4, #0]
 8005fac:	2308      	movs	r3, #8
 8005fae:	89a2      	ldrh	r2, [r4, #12]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	81a3      	strh	r3, [r4, #12]
 8005fb4:	6923      	ldr	r3, [r4, #16]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10b      	bne.n	8005fd2 <__swsetup_r+0x86>
 8005fba:	21a0      	movs	r1, #160	@ 0xa0
 8005fbc:	2280      	movs	r2, #128	@ 0x80
 8005fbe:	89a3      	ldrh	r3, [r4, #12]
 8005fc0:	0089      	lsls	r1, r1, #2
 8005fc2:	0092      	lsls	r2, r2, #2
 8005fc4:	400b      	ands	r3, r1
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d003      	beq.n	8005fd2 <__swsetup_r+0x86>
 8005fca:	0021      	movs	r1, r4
 8005fcc:	0028      	movs	r0, r5
 8005fce:	f000 f863 	bl	8006098 <__smakebuf_r>
 8005fd2:	230c      	movs	r3, #12
 8005fd4:	5ee2      	ldrsh	r2, [r4, r3]
 8005fd6:	2101      	movs	r1, #1
 8005fd8:	0013      	movs	r3, r2
 8005fda:	400b      	ands	r3, r1
 8005fdc:	420a      	tst	r2, r1
 8005fde:	d00b      	beq.n	8005ff8 <__swsetup_r+0xac>
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	60a3      	str	r3, [r4, #8]
 8005fe4:	6963      	ldr	r3, [r4, #20]
 8005fe6:	425b      	negs	r3, r3
 8005fe8:	61a3      	str	r3, [r4, #24]
 8005fea:	2000      	movs	r0, #0
 8005fec:	6923      	ldr	r3, [r4, #16]
 8005fee:	4283      	cmp	r3, r0
 8005ff0:	d101      	bne.n	8005ff6 <__swsetup_r+0xaa>
 8005ff2:	0613      	lsls	r3, r2, #24
 8005ff4:	d4be      	bmi.n	8005f74 <__swsetup_r+0x28>
 8005ff6:	bd70      	pop	{r4, r5, r6, pc}
 8005ff8:	0791      	lsls	r1, r2, #30
 8005ffa:	d400      	bmi.n	8005ffe <__swsetup_r+0xb2>
 8005ffc:	6963      	ldr	r3, [r4, #20]
 8005ffe:	60a3      	str	r3, [r4, #8]
 8006000:	e7f3      	b.n	8005fea <__swsetup_r+0x9e>
 8006002:	46c0      	nop			@ (mov r8, r8)
 8006004:	20000018 	.word	0x20000018

08006008 <_sbrk_r>:
 8006008:	2300      	movs	r3, #0
 800600a:	b570      	push	{r4, r5, r6, lr}
 800600c:	4d06      	ldr	r5, [pc, #24]	@ (8006028 <_sbrk_r+0x20>)
 800600e:	0004      	movs	r4, r0
 8006010:	0008      	movs	r0, r1
 8006012:	602b      	str	r3, [r5, #0]
 8006014:	f7fb f816 	bl	8001044 <_sbrk>
 8006018:	1c43      	adds	r3, r0, #1
 800601a:	d103      	bne.n	8006024 <_sbrk_r+0x1c>
 800601c:	682b      	ldr	r3, [r5, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d000      	beq.n	8006024 <_sbrk_r+0x1c>
 8006022:	6023      	str	r3, [r4, #0]
 8006024:	bd70      	pop	{r4, r5, r6, pc}
 8006026:	46c0      	nop			@ (mov r8, r8)
 8006028:	20000394 	.word	0x20000394

0800602c <memchr>:
 800602c:	b2c9      	uxtb	r1, r1
 800602e:	1882      	adds	r2, r0, r2
 8006030:	4290      	cmp	r0, r2
 8006032:	d101      	bne.n	8006038 <memchr+0xc>
 8006034:	2000      	movs	r0, #0
 8006036:	4770      	bx	lr
 8006038:	7803      	ldrb	r3, [r0, #0]
 800603a:	428b      	cmp	r3, r1
 800603c:	d0fb      	beq.n	8006036 <memchr+0xa>
 800603e:	3001      	adds	r0, #1
 8006040:	e7f6      	b.n	8006030 <memchr+0x4>
	...

08006044 <__swhatbuf_r>:
 8006044:	b570      	push	{r4, r5, r6, lr}
 8006046:	000e      	movs	r6, r1
 8006048:	001d      	movs	r5, r3
 800604a:	230e      	movs	r3, #14
 800604c:	5ec9      	ldrsh	r1, [r1, r3]
 800604e:	0014      	movs	r4, r2
 8006050:	b096      	sub	sp, #88	@ 0x58
 8006052:	2900      	cmp	r1, #0
 8006054:	da0c      	bge.n	8006070 <__swhatbuf_r+0x2c>
 8006056:	89b2      	ldrh	r2, [r6, #12]
 8006058:	2380      	movs	r3, #128	@ 0x80
 800605a:	0011      	movs	r1, r2
 800605c:	4019      	ands	r1, r3
 800605e:	421a      	tst	r2, r3
 8006060:	d114      	bne.n	800608c <__swhatbuf_r+0x48>
 8006062:	2380      	movs	r3, #128	@ 0x80
 8006064:	00db      	lsls	r3, r3, #3
 8006066:	2000      	movs	r0, #0
 8006068:	6029      	str	r1, [r5, #0]
 800606a:	6023      	str	r3, [r4, #0]
 800606c:	b016      	add	sp, #88	@ 0x58
 800606e:	bd70      	pop	{r4, r5, r6, pc}
 8006070:	466a      	mov	r2, sp
 8006072:	f000 f853 	bl	800611c <_fstat_r>
 8006076:	2800      	cmp	r0, #0
 8006078:	dbed      	blt.n	8006056 <__swhatbuf_r+0x12>
 800607a:	23f0      	movs	r3, #240	@ 0xf0
 800607c:	9901      	ldr	r1, [sp, #4]
 800607e:	021b      	lsls	r3, r3, #8
 8006080:	4019      	ands	r1, r3
 8006082:	4b04      	ldr	r3, [pc, #16]	@ (8006094 <__swhatbuf_r+0x50>)
 8006084:	18c9      	adds	r1, r1, r3
 8006086:	424b      	negs	r3, r1
 8006088:	4159      	adcs	r1, r3
 800608a:	e7ea      	b.n	8006062 <__swhatbuf_r+0x1e>
 800608c:	2100      	movs	r1, #0
 800608e:	2340      	movs	r3, #64	@ 0x40
 8006090:	e7e9      	b.n	8006066 <__swhatbuf_r+0x22>
 8006092:	46c0      	nop			@ (mov r8, r8)
 8006094:	ffffe000 	.word	0xffffe000

08006098 <__smakebuf_r>:
 8006098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800609a:	2602      	movs	r6, #2
 800609c:	898b      	ldrh	r3, [r1, #12]
 800609e:	0005      	movs	r5, r0
 80060a0:	000c      	movs	r4, r1
 80060a2:	b085      	sub	sp, #20
 80060a4:	4233      	tst	r3, r6
 80060a6:	d007      	beq.n	80060b8 <__smakebuf_r+0x20>
 80060a8:	0023      	movs	r3, r4
 80060aa:	3347      	adds	r3, #71	@ 0x47
 80060ac:	6023      	str	r3, [r4, #0]
 80060ae:	6123      	str	r3, [r4, #16]
 80060b0:	2301      	movs	r3, #1
 80060b2:	6163      	str	r3, [r4, #20]
 80060b4:	b005      	add	sp, #20
 80060b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060b8:	ab03      	add	r3, sp, #12
 80060ba:	aa02      	add	r2, sp, #8
 80060bc:	f7ff ffc2 	bl	8006044 <__swhatbuf_r>
 80060c0:	9f02      	ldr	r7, [sp, #8]
 80060c2:	9001      	str	r0, [sp, #4]
 80060c4:	0039      	movs	r1, r7
 80060c6:	0028      	movs	r0, r5
 80060c8:	f7ff fafa 	bl	80056c0 <_malloc_r>
 80060cc:	2800      	cmp	r0, #0
 80060ce:	d108      	bne.n	80060e2 <__smakebuf_r+0x4a>
 80060d0:	220c      	movs	r2, #12
 80060d2:	5ea3      	ldrsh	r3, [r4, r2]
 80060d4:	059a      	lsls	r2, r3, #22
 80060d6:	d4ed      	bmi.n	80060b4 <__smakebuf_r+0x1c>
 80060d8:	2203      	movs	r2, #3
 80060da:	4393      	bics	r3, r2
 80060dc:	431e      	orrs	r6, r3
 80060de:	81a6      	strh	r6, [r4, #12]
 80060e0:	e7e2      	b.n	80060a8 <__smakebuf_r+0x10>
 80060e2:	2380      	movs	r3, #128	@ 0x80
 80060e4:	89a2      	ldrh	r2, [r4, #12]
 80060e6:	6020      	str	r0, [r4, #0]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	81a3      	strh	r3, [r4, #12]
 80060ec:	9b03      	ldr	r3, [sp, #12]
 80060ee:	6120      	str	r0, [r4, #16]
 80060f0:	6167      	str	r7, [r4, #20]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00c      	beq.n	8006110 <__smakebuf_r+0x78>
 80060f6:	0028      	movs	r0, r5
 80060f8:	230e      	movs	r3, #14
 80060fa:	5ee1      	ldrsh	r1, [r4, r3]
 80060fc:	f000 f820 	bl	8006140 <_isatty_r>
 8006100:	2800      	cmp	r0, #0
 8006102:	d005      	beq.n	8006110 <__smakebuf_r+0x78>
 8006104:	2303      	movs	r3, #3
 8006106:	89a2      	ldrh	r2, [r4, #12]
 8006108:	439a      	bics	r2, r3
 800610a:	3b02      	subs	r3, #2
 800610c:	4313      	orrs	r3, r2
 800610e:	81a3      	strh	r3, [r4, #12]
 8006110:	89a3      	ldrh	r3, [r4, #12]
 8006112:	9a01      	ldr	r2, [sp, #4]
 8006114:	4313      	orrs	r3, r2
 8006116:	81a3      	strh	r3, [r4, #12]
 8006118:	e7cc      	b.n	80060b4 <__smakebuf_r+0x1c>
	...

0800611c <_fstat_r>:
 800611c:	2300      	movs	r3, #0
 800611e:	b570      	push	{r4, r5, r6, lr}
 8006120:	4d06      	ldr	r5, [pc, #24]	@ (800613c <_fstat_r+0x20>)
 8006122:	0004      	movs	r4, r0
 8006124:	0008      	movs	r0, r1
 8006126:	0011      	movs	r1, r2
 8006128:	602b      	str	r3, [r5, #0]
 800612a:	f7fa ff68 	bl	8000ffe <_fstat>
 800612e:	1c43      	adds	r3, r0, #1
 8006130:	d103      	bne.n	800613a <_fstat_r+0x1e>
 8006132:	682b      	ldr	r3, [r5, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d000      	beq.n	800613a <_fstat_r+0x1e>
 8006138:	6023      	str	r3, [r4, #0]
 800613a:	bd70      	pop	{r4, r5, r6, pc}
 800613c:	20000394 	.word	0x20000394

08006140 <_isatty_r>:
 8006140:	2300      	movs	r3, #0
 8006142:	b570      	push	{r4, r5, r6, lr}
 8006144:	4d06      	ldr	r5, [pc, #24]	@ (8006160 <_isatty_r+0x20>)
 8006146:	0004      	movs	r4, r0
 8006148:	0008      	movs	r0, r1
 800614a:	602b      	str	r3, [r5, #0]
 800614c:	f7fa ff65 	bl	800101a <_isatty>
 8006150:	1c43      	adds	r3, r0, #1
 8006152:	d103      	bne.n	800615c <_isatty_r+0x1c>
 8006154:	682b      	ldr	r3, [r5, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d000      	beq.n	800615c <_isatty_r+0x1c>
 800615a:	6023      	str	r3, [r4, #0]
 800615c:	bd70      	pop	{r4, r5, r6, pc}
 800615e:	46c0      	nop			@ (mov r8, r8)
 8006160:	20000394 	.word	0x20000394

08006164 <_init>:
 8006164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006166:	46c0      	nop			@ (mov r8, r8)
 8006168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800616a:	bc08      	pop	{r3}
 800616c:	469e      	mov	lr, r3
 800616e:	4770      	bx	lr

08006170 <_fini>:
 8006170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006172:	46c0      	nop			@ (mov r8, r8)
 8006174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006176:	bc08      	pop	{r3}
 8006178:	469e      	mov	lr, r3
 800617a:	4770      	bx	lr


SensorBoard-Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003164  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003224  08003224  00013224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003254  08003254  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003254  08003254  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003254  08003254  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003254  08003254  00013254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003258  08003258  00013258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800325c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  2000000c  08003268  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08003268  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aea6  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cec  00000000  00000000  0002af1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bc8  00000000  00000000  0002cc10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000928  00000000  00000000  0002d7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018465  00000000  00000000  0002e100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c9ab  00000000  00000000  00046565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ecbe  00000000  00000000  00052f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002a6c  00000000  00000000  000e1bd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000e463c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800320c 	.word	0x0800320c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800320c 	.word	0x0800320c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <ADC_DMA_AVG>:
/*
 * @brief Averages an ADC channel over the DMA buffer, achieves better resolution
 * @param ADC_PIN - ADC channel pin
 * @retval uint16_t - averaged ADC DMA value on success, -1 if invalid pin
 */
uint16_t ADC_DMA_AVG(uint16_t ADC_Pin) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b086      	sub	sp, #24
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	1dbb      	adds	r3, r7, #6
 800022a:	801a      	strh	r2, [r3, #0]
	int channel;
	int i;
	uint32_t adc_sum;

	switch (ADC_Pin) {
 800022c:	1dbb      	adds	r3, r7, #6
 800022e:	881b      	ldrh	r3, [r3, #0]
 8000230:	2b80      	cmp	r3, #128	; 0x80
 8000232:	d00b      	beq.n	800024c <ADC_DMA_AVG+0x2c>
 8000234:	dc10      	bgt.n	8000258 <ADC_DMA_AVG+0x38>
 8000236:	2b40      	cmp	r3, #64	; 0x40
 8000238:	d005      	beq.n	8000246 <ADC_DMA_AVG+0x26>
 800023a:	dc0d      	bgt.n	8000258 <ADC_DMA_AVG+0x38>
 800023c:	2b01      	cmp	r3, #1
 800023e:	d007      	beq.n	8000250 <ADC_DMA_AVG+0x30>
 8000240:	2b02      	cmp	r3, #2
 8000242:	d007      	beq.n	8000254 <ADC_DMA_AVG+0x34>
 8000244:	e008      	b.n	8000258 <ADC_DMA_AVG+0x38>
		case S1_Pin:
			channel = 0;
 8000246:	2300      	movs	r3, #0
 8000248:	617b      	str	r3, [r7, #20]
			break;
 800024a:	e008      	b.n	800025e <ADC_DMA_AVG+0x3e>
		case S2_Pin:
			channel = 1;
 800024c:	2301      	movs	r3, #1
 800024e:	617b      	str	r3, [r7, #20]
		case S3_Pin:
			channel = 2;
 8000250:	2302      	movs	r3, #2
 8000252:	617b      	str	r3, [r7, #20]
		case S4_Pin:
			channel = 3;
 8000254:	2303      	movs	r3, #3
 8000256:	617b      	str	r3, [r7, #20]
		default:
			channel = -1;
 8000258:	2301      	movs	r3, #1
 800025a:	425b      	negs	r3, r3
 800025c:	617b      	str	r3, [r7, #20]
	}

	if (channel == -1) {
 800025e:	697b      	ldr	r3, [r7, #20]
 8000260:	3301      	adds	r3, #1
 8000262:	d101      	bne.n	8000268 <ADC_DMA_AVG+0x48>
		return -1;
 8000264:	4b0f      	ldr	r3, [pc, #60]	; (80002a4 <ADC_DMA_AVG+0x84>)
 8000266:	e018      	b.n	800029a <ADC_DMA_AVG+0x7a>
	}

	adc_sum = 0;
 8000268:	2300      	movs	r3, #0
 800026a:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < AVG_PER_CHANNEL; i++) {
 800026c:	2300      	movs	r3, #0
 800026e:	613b      	str	r3, [r7, #16]
 8000270:	e00d      	b.n	800028e <ADC_DMA_AVG+0x6e>
		adc_sum += ADC_DMA_BUFF[channel + (i * NUM_ADC_CHANNELS)];
 8000272:	693b      	ldr	r3, [r7, #16]
 8000274:	009a      	lsls	r2, r3, #2
 8000276:	697b      	ldr	r3, [r7, #20]
 8000278:	18d2      	adds	r2, r2, r3
 800027a:	4b0b      	ldr	r3, [pc, #44]	; (80002a8 <ADC_DMA_AVG+0x88>)
 800027c:	0052      	lsls	r2, r2, #1
 800027e:	5ad3      	ldrh	r3, [r2, r3]
 8000280:	001a      	movs	r2, r3
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	189b      	adds	r3, r3, r2
 8000286:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < AVG_PER_CHANNEL; i++) {
 8000288:	693b      	ldr	r3, [r7, #16]
 800028a:	3301      	adds	r3, #1
 800028c:	613b      	str	r3, [r7, #16]
 800028e:	693b      	ldr	r3, [r7, #16]
 8000290:	2b03      	cmp	r3, #3
 8000292:	ddee      	ble.n	8000272 <ADC_DMA_AVG+0x52>
	}

	return adc_sum / AVG_PER_CHANNEL;
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	089b      	lsrs	r3, r3, #2
 8000298:	b29b      	uxth	r3, r3
}
 800029a:	0018      	movs	r0, r3
 800029c:	46bd      	mov	sp, r7
 800029e:	b006      	add	sp, #24
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	46c0      	nop			; (mov r8, r8)
 80002a4:	0000ffff 	.word	0x0000ffff
 80002a8:	2000017c 	.word	0x2000017c

080002ac <ADC_CAN_Package>:
/*
 * @brief Packages ADC values into CAN packet
 * @param ADC_PIN - ADC channel pin
 * @retval bool - true on success
 */
bool ADC_CAN_Package(uint16_t ADC_Pin) {
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	0002      	movs	r2, r0
 80002b4:	1dbb      	adds	r3, r7, #6
 80002b6:	801a      	strh	r2, [r3, #0]
	uint16_t *value;
	switch (ADC_Pin) {
 80002b8:	1dbb      	adds	r3, r7, #6
 80002ba:	881b      	ldrh	r3, [r3, #0]
 80002bc:	2b80      	cmp	r3, #128	; 0x80
 80002be:	d00b      	beq.n	80002d8 <ADC_CAN_Package+0x2c>
 80002c0:	dc10      	bgt.n	80002e4 <ADC_CAN_Package+0x38>
 80002c2:	2b40      	cmp	r3, #64	; 0x40
 80002c4:	d005      	beq.n	80002d2 <ADC_CAN_Package+0x26>
 80002c6:	dc0d      	bgt.n	80002e4 <ADC_CAN_Package+0x38>
 80002c8:	2b01      	cmp	r3, #1
 80002ca:	d007      	beq.n	80002dc <ADC_CAN_Package+0x30>
 80002cc:	2b02      	cmp	r3, #2
 80002ce:	d007      	beq.n	80002e0 <ADC_CAN_Package+0x34>
 80002d0:	e008      	b.n	80002e4 <ADC_CAN_Package+0x38>
		case S1_Pin:
			value = (uint16_t *)&TxData[0];
 80002d2:	4b0f      	ldr	r3, [pc, #60]	; (8000310 <ADC_CAN_Package+0x64>)
 80002d4:	60fb      	str	r3, [r7, #12]
			break;
 80002d6:	e007      	b.n	80002e8 <ADC_CAN_Package+0x3c>
		case S2_Pin:
			value = (uint16_t *)&TxData[2];
 80002d8:	4b0e      	ldr	r3, [pc, #56]	; (8000314 <ADC_CAN_Package+0x68>)
 80002da:	60fb      	str	r3, [r7, #12]
		case S3_Pin:
			value = (uint16_t *)&TxData[4];
 80002dc:	4b0e      	ldr	r3, [pc, #56]	; (8000318 <ADC_CAN_Package+0x6c>)
 80002de:	60fb      	str	r3, [r7, #12]
		case S4_Pin:
			value = (uint16_t *)&TxData[6];
 80002e0:	4b0e      	ldr	r3, [pc, #56]	; (800031c <ADC_CAN_Package+0x70>)
 80002e2:	60fb      	str	r3, [r7, #12]
		default:
			value = NULL;
 80002e4:	2300      	movs	r3, #0
 80002e6:	60fb      	str	r3, [r7, #12]
	}

	if (!value) {
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d101      	bne.n	80002f2 <ADC_CAN_Package+0x46>
		return 0;
 80002ee:	2300      	movs	r3, #0
 80002f0:	e009      	b.n	8000306 <ADC_CAN_Package+0x5a>
	}

	*value = ADC_DMA_AVG(ADC_Pin);
 80002f2:	1dbb      	adds	r3, r7, #6
 80002f4:	881b      	ldrh	r3, [r3, #0]
 80002f6:	0018      	movs	r0, r3
 80002f8:	f7ff ff92 	bl	8000220 <ADC_DMA_AVG>
 80002fc:	0003      	movs	r3, r0
 80002fe:	001a      	movs	r2, r3
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	801a      	strh	r2, [r3, #0]
	return 1;
 8000304:	2301      	movs	r3, #1
}
 8000306:	0018      	movs	r0, r3
 8000308:	46bd      	mov	sp, r7
 800030a:	b004      	add	sp, #16
 800030c:	bd80      	pop	{r7, pc}
 800030e:	46c0      	nop			; (mov r8, r8)
 8000310:	20000170 	.word	0x20000170
 8000314:	20000172 	.word	0x20000172
 8000318:	20000174 	.word	0x20000174
 800031c:	20000176 	.word	0x20000176

08000320 <HAL_TIM_PeriodElapsedCallback>:

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and send CAN packet
  if (htim == &htim16)
 8000328:	687a      	ldr	r2, [r7, #4]
 800032a:	4b0d      	ldr	r3, [pc, #52]	; (8000360 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800032c:	429a      	cmp	r2, r3
 800032e:	d113      	bne.n	8000358 <HAL_TIM_PeriodElapsedCallback+0x38>
  {
	if (!ADC_CAN_Package(S1_Pin) || HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 8000330:	2040      	movs	r0, #64	; 0x40
 8000332:	f7ff ffbb 	bl	80002ac <ADC_CAN_Package>
 8000336:	0003      	movs	r3, r0
 8000338:	001a      	movs	r2, r3
 800033a:	2301      	movs	r3, #1
 800033c:	4053      	eors	r3, r2
 800033e:	b2db      	uxtb	r3, r3
 8000340:	2b00      	cmp	r3, #0
 8000342:	d107      	bne.n	8000354 <HAL_TIM_PeriodElapsedCallback+0x34>
 8000344:	4b07      	ldr	r3, [pc, #28]	; (8000364 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000346:	4a08      	ldr	r2, [pc, #32]	; (8000368 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000348:	4908      	ldr	r1, [pc, #32]	; (800036c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800034a:	4809      	ldr	r0, [pc, #36]	; (8000370 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800034c:	f001 faa6 	bl	800189c <HAL_CAN_AddTxMessage>
 8000350:	1e03      	subs	r3, r0, #0
 8000352:	d001      	beq.n	8000358 <HAL_TIM_PeriodElapsedCallback+0x38>
		Error_Handler();
 8000354:	f000 fa24 	bl	80007a0 <Error_Handler>
	}
  }
}
 8000358:	46c0      	nop			; (mov r8, r8)
 800035a:	46bd      	mov	sp, r7
 800035c:	b002      	add	sp, #8
 800035e:	bd80      	pop	{r7, pc}
 8000360:	20000110 	.word	0x20000110
 8000364:	20000178 	.word	0x20000178
 8000368:	20000170 	.word	0x20000170
 800036c:	20000158 	.word	0x20000158
 8000370:	200000ac 	.word	0x200000ac

08000374 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000378:	f000 fbba 	bl	8000af0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800037c:	f000 f824 	bl	80003c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000380:	f000 f9b8 	bl	80006f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000384:	f000 f998 	bl	80006b8 <MX_DMA_Init>
  MX_CAN_Init();
 8000388:	f000 f8de 	bl	8000548 <MX_CAN_Init>
  MX_ADC_Init();
 800038c:	f000 f858 	bl	8000440 <MX_ADC_Init>
  MX_TIM16_Init();
 8000390:	f000 f95c 	bl	800064c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_ADC_Start_DMA(&hadc, (uint32_t *)ADC_DMA_BUFF, NUM_ADC_CHANNELS * AVG_PER_CHANNEL) != HAL_OK) {
 8000394:	4909      	ldr	r1, [pc, #36]	; (80003bc <main+0x48>)
 8000396:	4b0a      	ldr	r3, [pc, #40]	; (80003c0 <main+0x4c>)
 8000398:	2210      	movs	r2, #16
 800039a:	0018      	movs	r0, r3
 800039c:	f000 fd4c 	bl	8000e38 <HAL_ADC_Start_DMA>
 80003a0:	1e03      	subs	r3, r0, #0
 80003a2:	d001      	beq.n	80003a8 <main+0x34>
	  Error_Handler();
 80003a4:	f000 f9fc 	bl	80007a0 <Error_Handler>
  }

  if (HAL_TIM_Base_Start_IT(&htim16) != HAL_OK) {
 80003a8:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <main+0x50>)
 80003aa:	0018      	movs	r0, r3
 80003ac:	f002 fcfa 	bl	8002da4 <HAL_TIM_Base_Start_IT>
 80003b0:	1e03      	subs	r3, r0, #0
 80003b2:	d001      	beq.n	80003b8 <main+0x44>
	  Error_Handler();
 80003b4:	f000 f9f4 	bl	80007a0 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003b8:	e7fe      	b.n	80003b8 <main+0x44>
 80003ba:	46c0      	nop			; (mov r8, r8)
 80003bc:	2000017c 	.word	0x2000017c
 80003c0:	20000028 	.word	0x20000028
 80003c4:	20000110 	.word	0x20000110

080003c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c8:	b590      	push	{r4, r7, lr}
 80003ca:	b093      	sub	sp, #76	; 0x4c
 80003cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ce:	2414      	movs	r4, #20
 80003d0:	193b      	adds	r3, r7, r4
 80003d2:	0018      	movs	r0, r3
 80003d4:	2334      	movs	r3, #52	; 0x34
 80003d6:	001a      	movs	r2, r3
 80003d8:	2100      	movs	r1, #0
 80003da:	f002 feeb 	bl	80031b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	0018      	movs	r0, r3
 80003e2:	2310      	movs	r3, #16
 80003e4:	001a      	movs	r2, r3
 80003e6:	2100      	movs	r1, #0
 80003e8:	f002 fee4 	bl	80031b4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003ec:	193b      	adds	r3, r7, r4
 80003ee:	2201      	movs	r2, #1
 80003f0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003f2:	193b      	adds	r3, r7, r4
 80003f4:	2201      	movs	r2, #1
 80003f6:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003f8:	193b      	adds	r3, r7, r4
 80003fa:	2200      	movs	r2, #0
 80003fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003fe:	193b      	adds	r3, r7, r4
 8000400:	0018      	movs	r0, r3
 8000402:	f001 ffab 	bl	800235c <HAL_RCC_OscConfig>
 8000406:	1e03      	subs	r3, r0, #0
 8000408:	d001      	beq.n	800040e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800040a:	f000 f9c9 	bl	80007a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	2207      	movs	r2, #7
 8000412:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000414:	1d3b      	adds	r3, r7, #4
 8000416:	2201      	movs	r2, #1
 8000418:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	2200      	movs	r2, #0
 800041e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	2200      	movs	r2, #0
 8000424:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000426:	1d3b      	adds	r3, r7, #4
 8000428:	2100      	movs	r1, #0
 800042a:	0018      	movs	r0, r3
 800042c:	f002 fb1c 	bl	8002a68 <HAL_RCC_ClockConfig>
 8000430:	1e03      	subs	r3, r0, #0
 8000432:	d001      	beq.n	8000438 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000434:	f000 f9b4 	bl	80007a0 <Error_Handler>
  }
}
 8000438:	46c0      	nop			; (mov r8, r8)
 800043a:	46bd      	mov	sp, r7
 800043c:	b013      	add	sp, #76	; 0x4c
 800043e:	bd90      	pop	{r4, r7, pc}

08000440 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000446:	1d3b      	adds	r3, r7, #4
 8000448:	0018      	movs	r0, r3
 800044a:	230c      	movs	r3, #12
 800044c:	001a      	movs	r2, r3
 800044e:	2100      	movs	r1, #0
 8000450:	f002 feb0 	bl	80031b4 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000454:	4b3a      	ldr	r3, [pc, #232]	; (8000540 <MX_ADC_Init+0x100>)
 8000456:	4a3b      	ldr	r2, [pc, #236]	; (8000544 <MX_ADC_Init+0x104>)
 8000458:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800045a:	4b39      	ldr	r3, [pc, #228]	; (8000540 <MX_ADC_Init+0x100>)
 800045c:	2280      	movs	r2, #128	; 0x80
 800045e:	0612      	lsls	r2, r2, #24
 8000460:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000462:	4b37      	ldr	r3, [pc, #220]	; (8000540 <MX_ADC_Init+0x100>)
 8000464:	2200      	movs	r2, #0
 8000466:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000468:	4b35      	ldr	r3, [pc, #212]	; (8000540 <MX_ADC_Init+0x100>)
 800046a:	2200      	movs	r2, #0
 800046c:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800046e:	4b34      	ldr	r3, [pc, #208]	; (8000540 <MX_ADC_Init+0x100>)
 8000470:	2201      	movs	r2, #1
 8000472:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000474:	4b32      	ldr	r3, [pc, #200]	; (8000540 <MX_ADC_Init+0x100>)
 8000476:	2204      	movs	r2, #4
 8000478:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800047a:	4b31      	ldr	r3, [pc, #196]	; (8000540 <MX_ADC_Init+0x100>)
 800047c:	2200      	movs	r2, #0
 800047e:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000480:	4b2f      	ldr	r3, [pc, #188]	; (8000540 <MX_ADC_Init+0x100>)
 8000482:	2200      	movs	r2, #0
 8000484:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000486:	4b2e      	ldr	r3, [pc, #184]	; (8000540 <MX_ADC_Init+0x100>)
 8000488:	2201      	movs	r2, #1
 800048a:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800048c:	4b2c      	ldr	r3, [pc, #176]	; (8000540 <MX_ADC_Init+0x100>)
 800048e:	2200      	movs	r2, #0
 8000490:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000492:	4b2b      	ldr	r3, [pc, #172]	; (8000540 <MX_ADC_Init+0x100>)
 8000494:	22c2      	movs	r2, #194	; 0xc2
 8000496:	32ff      	adds	r2, #255	; 0xff
 8000498:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800049a:	4b29      	ldr	r3, [pc, #164]	; (8000540 <MX_ADC_Init+0x100>)
 800049c:	2200      	movs	r2, #0
 800049e:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 80004a0:	4b27      	ldr	r3, [pc, #156]	; (8000540 <MX_ADC_Init+0x100>)
 80004a2:	2224      	movs	r2, #36	; 0x24
 80004a4:	2101      	movs	r1, #1
 80004a6:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004a8:	4b25      	ldr	r3, [pc, #148]	; (8000540 <MX_ADC_Init+0x100>)
 80004aa:	2201      	movs	r2, #1
 80004ac:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80004ae:	4b24      	ldr	r3, [pc, #144]	; (8000540 <MX_ADC_Init+0x100>)
 80004b0:	0018      	movs	r0, r3
 80004b2:	f000 fb81 	bl	8000bb8 <HAL_ADC_Init>
 80004b6:	1e03      	subs	r3, r0, #0
 80004b8:	d001      	beq.n	80004be <MX_ADC_Init+0x7e>
  {
    Error_Handler();
 80004ba:	f000 f971 	bl	80007a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80004be:	1d3b      	adds	r3, r7, #4
 80004c0:	2206      	movs	r2, #6
 80004c2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80004c4:	1d3b      	adds	r3, r7, #4
 80004c6:	2280      	movs	r2, #128	; 0x80
 80004c8:	0152      	lsls	r2, r2, #5
 80004ca:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	2280      	movs	r2, #128	; 0x80
 80004d0:	0552      	lsls	r2, r2, #21
 80004d2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80004d4:	1d3a      	adds	r2, r7, #4
 80004d6:	4b1a      	ldr	r3, [pc, #104]	; (8000540 <MX_ADC_Init+0x100>)
 80004d8:	0011      	movs	r1, r2
 80004da:	0018      	movs	r0, r3
 80004dc:	f000 fd46 	bl	8000f6c <HAL_ADC_ConfigChannel>
 80004e0:	1e03      	subs	r3, r0, #0
 80004e2:	d001      	beq.n	80004e8 <MX_ADC_Init+0xa8>
  {
    Error_Handler();
 80004e4:	f000 f95c 	bl	80007a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	2207      	movs	r2, #7
 80004ec:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80004ee:	1d3a      	adds	r2, r7, #4
 80004f0:	4b13      	ldr	r3, [pc, #76]	; (8000540 <MX_ADC_Init+0x100>)
 80004f2:	0011      	movs	r1, r2
 80004f4:	0018      	movs	r0, r3
 80004f6:	f000 fd39 	bl	8000f6c <HAL_ADC_ConfigChannel>
 80004fa:	1e03      	subs	r3, r0, #0
 80004fc:	d001      	beq.n	8000502 <MX_ADC_Init+0xc2>
  {
    Error_Handler();
 80004fe:	f000 f94f 	bl	80007a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	2208      	movs	r2, #8
 8000506:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000508:	1d3a      	adds	r2, r7, #4
 800050a:	4b0d      	ldr	r3, [pc, #52]	; (8000540 <MX_ADC_Init+0x100>)
 800050c:	0011      	movs	r1, r2
 800050e:	0018      	movs	r0, r3
 8000510:	f000 fd2c 	bl	8000f6c <HAL_ADC_ConfigChannel>
 8000514:	1e03      	subs	r3, r0, #0
 8000516:	d001      	beq.n	800051c <MX_ADC_Init+0xdc>
  {
    Error_Handler();
 8000518:	f000 f942 	bl	80007a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	2209      	movs	r2, #9
 8000520:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000522:	1d3a      	adds	r2, r7, #4
 8000524:	4b06      	ldr	r3, [pc, #24]	; (8000540 <MX_ADC_Init+0x100>)
 8000526:	0011      	movs	r1, r2
 8000528:	0018      	movs	r0, r3
 800052a:	f000 fd1f 	bl	8000f6c <HAL_ADC_ConfigChannel>
 800052e:	1e03      	subs	r3, r0, #0
 8000530:	d001      	beq.n	8000536 <MX_ADC_Init+0xf6>
  {
    Error_Handler();
 8000532:	f000 f935 	bl	80007a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	46bd      	mov	sp, r7
 800053a:	b004      	add	sp, #16
 800053c:	bd80      	pop	{r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	20000028 	.word	0x20000028
 8000544:	40012400 	.word	0x40012400

08000548 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b08a      	sub	sp, #40	; 0x28
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800054e:	4b3b      	ldr	r3, [pc, #236]	; (800063c <MX_CAN_Init+0xf4>)
 8000550:	4a3b      	ldr	r2, [pc, #236]	; (8000640 <MX_CAN_Init+0xf8>)
 8000552:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 1;
 8000554:	4b39      	ldr	r3, [pc, #228]	; (800063c <MX_CAN_Init+0xf4>)
 8000556:	2201      	movs	r2, #1
 8000558:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800055a:	4b38      	ldr	r3, [pc, #224]	; (800063c <MX_CAN_Init+0xf4>)
 800055c:	2200      	movs	r2, #0
 800055e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000560:	4b36      	ldr	r3, [pc, #216]	; (800063c <MX_CAN_Init+0xf4>)
 8000562:	2200      	movs	r2, #0
 8000564:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000566:	4b35      	ldr	r3, [pc, #212]	; (800063c <MX_CAN_Init+0xf4>)
 8000568:	22c0      	movs	r2, #192	; 0xc0
 800056a:	0312      	lsls	r2, r2, #12
 800056c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800056e:	4b33      	ldr	r3, [pc, #204]	; (800063c <MX_CAN_Init+0xf4>)
 8000570:	2280      	movs	r2, #128	; 0x80
 8000572:	0352      	lsls	r2, r2, #13
 8000574:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000576:	4b31      	ldr	r3, [pc, #196]	; (800063c <MX_CAN_Init+0xf4>)
 8000578:	2200      	movs	r2, #0
 800057a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 800057c:	4b2f      	ldr	r3, [pc, #188]	; (800063c <MX_CAN_Init+0xf4>)
 800057e:	2201      	movs	r2, #1
 8000580:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000582:	4b2e      	ldr	r3, [pc, #184]	; (800063c <MX_CAN_Init+0xf4>)
 8000584:	2200      	movs	r2, #0
 8000586:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000588:	4b2c      	ldr	r3, [pc, #176]	; (800063c <MX_CAN_Init+0xf4>)
 800058a:	2200      	movs	r2, #0
 800058c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800058e:	4b2b      	ldr	r3, [pc, #172]	; (800063c <MX_CAN_Init+0xf4>)
 8000590:	2200      	movs	r2, #0
 8000592:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000594:	4b29      	ldr	r3, [pc, #164]	; (800063c <MX_CAN_Init+0xf4>)
 8000596:	2200      	movs	r2, #0
 8000598:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800059a:	4b28      	ldr	r3, [pc, #160]	; (800063c <MX_CAN_Init+0xf4>)
 800059c:	0018      	movs	r0, r3
 800059e:	f000 fefb 	bl	8001398 <HAL_CAN_Init>
 80005a2:	1e03      	subs	r3, r0, #0
 80005a4:	d001      	beq.n	80005aa <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80005a6:	f000 f8fb 	bl	80007a0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  CAN_FilterTypeDef sFilterConfig;

  sFilterConfig.FilterActivation=ENABLE;
 80005aa:	003b      	movs	r3, r7
 80005ac:	2201      	movs	r2, #1
 80005ae:	621a      	str	r2, [r3, #32]
  sFilterConfig.FilterFIFOAssignment=CAN_RX_FIFO0; //set fifo assignment
 80005b0:	003b      	movs	r3, r7
 80005b2:	2200      	movs	r2, #0
 80005b4:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterIdHigh = 0;
 80005b6:	003b      	movs	r3, r7
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0;
 80005bc:	003b      	movs	r3, r7
 80005be:	2200      	movs	r2, #0
 80005c0:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0;
 80005c2:	003b      	movs	r3, r7
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0;
 80005c8:	003b      	movs	r3, r7
 80005ca:	2200      	movs	r2, #0
 80005cc:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT; //set filter scale
 80005ce:	003b      	movs	r3, r7
 80005d0:	2201      	movs	r2, #1
 80005d2:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterBank = 0;
 80005d4:	003b      	movs	r3, r7
 80005d6:	2200      	movs	r2, #0
 80005d8:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005da:	003b      	movs	r3, r7
 80005dc:	2200      	movs	r2, #0
 80005de:	619a      	str	r2, [r3, #24]
  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 80005e0:	003a      	movs	r2, r7
 80005e2:	4b16      	ldr	r3, [pc, #88]	; (800063c <MX_CAN_Init+0xf4>)
 80005e4:	0011      	movs	r1, r2
 80005e6:	0018      	movs	r0, r3
 80005e8:	f001 f820 	bl	800162c <HAL_CAN_ConfigFilter>

  if (HAL_CAN_Start(&hcan) != HAL_OK)
 80005ec:	4b13      	ldr	r3, [pc, #76]	; (800063c <MX_CAN_Init+0xf4>)
 80005ee:	0018      	movs	r0, r3
 80005f0:	f001 f90e 	bl	8001810 <HAL_CAN_Start>
 80005f4:	1e03      	subs	r3, r0, #0
 80005f6:	d001      	beq.n	80005fc <MX_CAN_Init+0xb4>
  {
     Error_Handler ();
 80005f8:	f000 f8d2 	bl	80007a0 <Error_Handler>
  }

  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80005fc:	4b0f      	ldr	r3, [pc, #60]	; (800063c <MX_CAN_Init+0xf4>)
 80005fe:	2102      	movs	r1, #2
 8000600:	0018      	movs	r0, r3
 8000602:	f001 fa1d 	bl	8001a40 <HAL_CAN_ActivateNotification>
 8000606:	1e03      	subs	r3, r0, #0
 8000608:	d001      	beq.n	800060e <MX_CAN_Init+0xc6>
  {
      Error_Handler();
 800060a:	f000 f8c9 	bl	80007a0 <Error_Handler>
  }

  TxHeader.StdId = 0x321;
 800060e:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <MX_CAN_Init+0xfc>)
 8000610:	4a0d      	ldr	r2, [pc, #52]	; (8000648 <MX_CAN_Init+0x100>)
 8000612:	601a      	str	r2, [r3, #0]
  TxHeader.ExtId = 0;
 8000614:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <MX_CAN_Init+0xfc>)
 8000616:	2200      	movs	r2, #0
 8000618:	605a      	str	r2, [r3, #4]
  TxHeader.RTR = CAN_RTR_DATA;
 800061a:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <MX_CAN_Init+0xfc>)
 800061c:	2200      	movs	r2, #0
 800061e:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 8000620:	4b08      	ldr	r3, [pc, #32]	; (8000644 <MX_CAN_Init+0xfc>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 2;
 8000626:	4b07      	ldr	r3, [pc, #28]	; (8000644 <MX_CAN_Init+0xfc>)
 8000628:	2202      	movs	r2, #2
 800062a:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <MX_CAN_Init+0xfc>)
 800062e:	2200      	movs	r2, #0
 8000630:	751a      	strb	r2, [r3, #20]
  /* USER CODE END CAN_Init 2 */

}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	46bd      	mov	sp, r7
 8000636:	b00a      	add	sp, #40	; 0x28
 8000638:	bd80      	pop	{r7, pc}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	200000ac 	.word	0x200000ac
 8000640:	40006400 	.word	0x40006400
 8000644:	20000158 	.word	0x20000158
 8000648:	00000321 	.word	0x00000321

0800064c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000650:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <MX_TIM16_Init+0x5c>)
 8000652:	4a16      	ldr	r2, [pc, #88]	; (80006ac <MX_TIM16_Init+0x60>)
 8000654:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1600;
 8000656:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <MX_TIM16_Init+0x5c>)
 8000658:	22c8      	movs	r2, #200	; 0xc8
 800065a:	00d2      	lsls	r2, r2, #3
 800065c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800065e:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <MX_TIM16_Init+0x5c>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000 - 1;
 8000664:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <MX_TIM16_Init+0x5c>)
 8000666:	4a12      	ldr	r2, [pc, #72]	; (80006b0 <MX_TIM16_Init+0x64>)
 8000668:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <MX_TIM16_Init+0x5c>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000670:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <MX_TIM16_Init+0x5c>)
 8000672:	2200      	movs	r2, #0
 8000674:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <MX_TIM16_Init+0x5c>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800067c:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <MX_TIM16_Init+0x5c>)
 800067e:	0018      	movs	r0, r3
 8000680:	f002 fb40 	bl	8002d04 <HAL_TIM_Base_Init>
 8000684:	1e03      	subs	r3, r0, #0
 8000686:	d001      	beq.n	800068c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000688:	f000 f88a 	bl	80007a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  // Setting period manually and re-initing so I don't have to update every ioc change
  htim16.Init.Period = TIME_PERIOD - 1;
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <MX_TIM16_Init+0x5c>)
 800068e:	4a09      	ldr	r2, [pc, #36]	; (80006b4 <MX_TIM16_Init+0x68>)
 8000690:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000692:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <MX_TIM16_Init+0x5c>)
 8000694:	0018      	movs	r0, r3
 8000696:	f002 fb35 	bl	8002d04 <HAL_TIM_Base_Init>
 800069a:	1e03      	subs	r3, r0, #0
 800069c:	d001      	beq.n	80006a2 <MX_TIM16_Init+0x56>
  {
    Error_Handler();
 800069e:	f000 f87f 	bl	80007a0 <Error_Handler>
  }


  /* USER CODE END TIM16_Init 2 */

}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000110 	.word	0x20000110
 80006ac:	40014400 	.word	0x40014400
 80006b0:	0000270f 	.word	0x0000270f
 80006b4:	000003e7 	.word	0x000003e7

080006b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006be:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MX_DMA_Init+0x38>)
 80006c0:	695a      	ldr	r2, [r3, #20]
 80006c2:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <MX_DMA_Init+0x38>)
 80006c4:	2101      	movs	r1, #1
 80006c6:	430a      	orrs	r2, r1
 80006c8:	615a      	str	r2, [r3, #20]
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_DMA_Init+0x38>)
 80006cc:	695b      	ldr	r3, [r3, #20]
 80006ce:	2201      	movs	r2, #1
 80006d0:	4013      	ands	r3, r2
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2100      	movs	r1, #0
 80006da:	2009      	movs	r0, #9
 80006dc:	f001 faee 	bl	8001cbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006e0:	2009      	movs	r0, #9
 80006e2:	f001 fb00 	bl	8001ce6 <HAL_NVIC_EnableIRQ>

}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	46bd      	mov	sp, r7
 80006ea:	b002      	add	sp, #8
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	40021000 	.word	0x40021000

080006f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f4:	b590      	push	{r4, r7, lr}
 80006f6:	b089      	sub	sp, #36	; 0x24
 80006f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fa:	240c      	movs	r4, #12
 80006fc:	193b      	adds	r3, r7, r4
 80006fe:	0018      	movs	r0, r3
 8000700:	2314      	movs	r3, #20
 8000702:	001a      	movs	r2, r3
 8000704:	2100      	movs	r1, #0
 8000706:	f002 fd55 	bl	80031b4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <MX_GPIO_Init+0xa4>)
 800070c:	695a      	ldr	r2, [r3, #20]
 800070e:	4b22      	ldr	r3, [pc, #136]	; (8000798 <MX_GPIO_Init+0xa4>)
 8000710:	2180      	movs	r1, #128	; 0x80
 8000712:	03c9      	lsls	r1, r1, #15
 8000714:	430a      	orrs	r2, r1
 8000716:	615a      	str	r2, [r3, #20]
 8000718:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <MX_GPIO_Init+0xa4>)
 800071a:	695a      	ldr	r2, [r3, #20]
 800071c:	2380      	movs	r3, #128	; 0x80
 800071e:	03db      	lsls	r3, r3, #15
 8000720:	4013      	ands	r3, r2
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000726:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <MX_GPIO_Init+0xa4>)
 8000728:	695a      	ldr	r2, [r3, #20]
 800072a:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <MX_GPIO_Init+0xa4>)
 800072c:	2180      	movs	r1, #128	; 0x80
 800072e:	0289      	lsls	r1, r1, #10
 8000730:	430a      	orrs	r2, r1
 8000732:	615a      	str	r2, [r3, #20]
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <MX_GPIO_Init+0xa4>)
 8000736:	695a      	ldr	r2, [r3, #20]
 8000738:	2380      	movs	r3, #128	; 0x80
 800073a:	029b      	lsls	r3, r3, #10
 800073c:	4013      	ands	r3, r2
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <MX_GPIO_Init+0xa4>)
 8000744:	695a      	ldr	r2, [r3, #20]
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <MX_GPIO_Init+0xa4>)
 8000748:	2180      	movs	r1, #128	; 0x80
 800074a:	02c9      	lsls	r1, r1, #11
 800074c:	430a      	orrs	r2, r1
 800074e:	615a      	str	r2, [r3, #20]
 8000750:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_GPIO_Init+0xa4>)
 8000752:	695a      	ldr	r2, [r3, #20]
 8000754:	2380      	movs	r3, #128	; 0x80
 8000756:	02db      	lsls	r3, r3, #11
 8000758:	4013      	ands	r3, r2
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_SLEEP_GPIO_Port, CAN_SLEEP_Pin, GPIO_PIN_RESET);
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_GPIO_Init+0xa8>)
 8000760:	2200      	movs	r2, #0
 8000762:	2108      	movs	r1, #8
 8000764:	0018      	movs	r0, r3
 8000766:	f001 fddb 	bl	8002320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAN_SLEEP_Pin */
  GPIO_InitStruct.Pin = CAN_SLEEP_Pin;
 800076a:	0021      	movs	r1, r4
 800076c:	187b      	adds	r3, r7, r1
 800076e:	2208      	movs	r2, #8
 8000770:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000772:	187b      	adds	r3, r7, r1
 8000774:	2201      	movs	r2, #1
 8000776:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000778:	187b      	adds	r3, r7, r1
 800077a:	2202      	movs	r2, #2
 800077c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077e:	187b      	adds	r3, r7, r1
 8000780:	2200      	movs	r2, #0
 8000782:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CAN_SLEEP_GPIO_Port, &GPIO_InitStruct);
 8000784:	187b      	adds	r3, r7, r1
 8000786:	4a05      	ldr	r2, [pc, #20]	; (800079c <MX_GPIO_Init+0xa8>)
 8000788:	0019      	movs	r1, r3
 800078a:	0010      	movs	r0, r2
 800078c:	f001 fc60 	bl	8002050 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000790:	46c0      	nop			; (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	b009      	add	sp, #36	; 0x24
 8000796:	bd90      	pop	{r4, r7, pc}
 8000798:	40021000 	.word	0x40021000
 800079c:	48000400 	.word	0x48000400

080007a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a4:	b672      	cpsid	i
}
 80007a6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
   __disable_irq();
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <Error_Handler+0x8>
	...

080007ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b2:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <HAL_MspInit+0x44>)
 80007b4:	699a      	ldr	r2, [r3, #24]
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <HAL_MspInit+0x44>)
 80007b8:	2101      	movs	r1, #1
 80007ba:	430a      	orrs	r2, r1
 80007bc:	619a      	str	r2, [r3, #24]
 80007be:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <HAL_MspInit+0x44>)
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	2201      	movs	r2, #1
 80007c4:	4013      	ands	r3, r2
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <HAL_MspInit+0x44>)
 80007cc:	69da      	ldr	r2, [r3, #28]
 80007ce:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <HAL_MspInit+0x44>)
 80007d0:	2180      	movs	r1, #128	; 0x80
 80007d2:	0549      	lsls	r1, r1, #21
 80007d4:	430a      	orrs	r2, r1
 80007d6:	61da      	str	r2, [r3, #28]
 80007d8:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <HAL_MspInit+0x44>)
 80007da:	69da      	ldr	r2, [r3, #28]
 80007dc:	2380      	movs	r3, #128	; 0x80
 80007de:	055b      	lsls	r3, r3, #21
 80007e0:	4013      	ands	r3, r2
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	46bd      	mov	sp, r7
 80007ea:	b002      	add	sp, #8
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	40021000 	.word	0x40021000

080007f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007f4:	b590      	push	{r4, r7, lr}
 80007f6:	b08b      	sub	sp, #44	; 0x2c
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fc:	2414      	movs	r4, #20
 80007fe:	193b      	adds	r3, r7, r4
 8000800:	0018      	movs	r0, r3
 8000802:	2314      	movs	r3, #20
 8000804:	001a      	movs	r2, r3
 8000806:	2100      	movs	r1, #0
 8000808:	f002 fcd4 	bl	80031b4 <memset>
  if(hadc->Instance==ADC1)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a3b      	ldr	r2, [pc, #236]	; (8000900 <HAL_ADC_MspInit+0x10c>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d170      	bne.n	80008f8 <HAL_ADC_MspInit+0x104>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000816:	4b3b      	ldr	r3, [pc, #236]	; (8000904 <HAL_ADC_MspInit+0x110>)
 8000818:	699a      	ldr	r2, [r3, #24]
 800081a:	4b3a      	ldr	r3, [pc, #232]	; (8000904 <HAL_ADC_MspInit+0x110>)
 800081c:	2180      	movs	r1, #128	; 0x80
 800081e:	0089      	lsls	r1, r1, #2
 8000820:	430a      	orrs	r2, r1
 8000822:	619a      	str	r2, [r3, #24]
 8000824:	4b37      	ldr	r3, [pc, #220]	; (8000904 <HAL_ADC_MspInit+0x110>)
 8000826:	699a      	ldr	r2, [r3, #24]
 8000828:	2380      	movs	r3, #128	; 0x80
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	4013      	ands	r3, r2
 800082e:	613b      	str	r3, [r7, #16]
 8000830:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	4b34      	ldr	r3, [pc, #208]	; (8000904 <HAL_ADC_MspInit+0x110>)
 8000834:	695a      	ldr	r2, [r3, #20]
 8000836:	4b33      	ldr	r3, [pc, #204]	; (8000904 <HAL_ADC_MspInit+0x110>)
 8000838:	2180      	movs	r1, #128	; 0x80
 800083a:	0289      	lsls	r1, r1, #10
 800083c:	430a      	orrs	r2, r1
 800083e:	615a      	str	r2, [r3, #20]
 8000840:	4b30      	ldr	r3, [pc, #192]	; (8000904 <HAL_ADC_MspInit+0x110>)
 8000842:	695a      	ldr	r2, [r3, #20]
 8000844:	2380      	movs	r3, #128	; 0x80
 8000846:	029b      	lsls	r3, r3, #10
 8000848:	4013      	ands	r3, r2
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800084e:	4b2d      	ldr	r3, [pc, #180]	; (8000904 <HAL_ADC_MspInit+0x110>)
 8000850:	695a      	ldr	r2, [r3, #20]
 8000852:	4b2c      	ldr	r3, [pc, #176]	; (8000904 <HAL_ADC_MspInit+0x110>)
 8000854:	2180      	movs	r1, #128	; 0x80
 8000856:	02c9      	lsls	r1, r1, #11
 8000858:	430a      	orrs	r2, r1
 800085a:	615a      	str	r2, [r3, #20]
 800085c:	4b29      	ldr	r3, [pc, #164]	; (8000904 <HAL_ADC_MspInit+0x110>)
 800085e:	695a      	ldr	r2, [r3, #20]
 8000860:	2380      	movs	r3, #128	; 0x80
 8000862:	02db      	lsls	r3, r3, #11
 8000864:	4013      	ands	r3, r2
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = S1_Pin|S2_Pin;
 800086a:	193b      	adds	r3, r7, r4
 800086c:	22c0      	movs	r2, #192	; 0xc0
 800086e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000870:	193b      	adds	r3, r7, r4
 8000872:	2203      	movs	r2, #3
 8000874:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	193b      	adds	r3, r7, r4
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087c:	193a      	adds	r2, r7, r4
 800087e:	2390      	movs	r3, #144	; 0x90
 8000880:	05db      	lsls	r3, r3, #23
 8000882:	0011      	movs	r1, r2
 8000884:	0018      	movs	r0, r3
 8000886:	f001 fbe3 	bl	8002050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = S3_Pin|S4_Pin;
 800088a:	193b      	adds	r3, r7, r4
 800088c:	2203      	movs	r2, #3
 800088e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000890:	193b      	adds	r3, r7, r4
 8000892:	2203      	movs	r2, #3
 8000894:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	193b      	adds	r3, r7, r4
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089c:	193b      	adds	r3, r7, r4
 800089e:	4a1a      	ldr	r2, [pc, #104]	; (8000908 <HAL_ADC_MspInit+0x114>)
 80008a0:	0019      	movs	r1, r3
 80008a2:	0010      	movs	r0, r2
 80008a4:	f001 fbd4 	bl	8002050 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80008a8:	4b18      	ldr	r3, [pc, #96]	; (800090c <HAL_ADC_MspInit+0x118>)
 80008aa:	4a19      	ldr	r2, [pc, #100]	; (8000910 <HAL_ADC_MspInit+0x11c>)
 80008ac:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008ae:	4b17      	ldr	r3, [pc, #92]	; (800090c <HAL_ADC_MspInit+0x118>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80008b4:	4b15      	ldr	r3, [pc, #84]	; (800090c <HAL_ADC_MspInit+0x118>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80008ba:	4b14      	ldr	r3, [pc, #80]	; (800090c <HAL_ADC_MspInit+0x118>)
 80008bc:	2280      	movs	r2, #128	; 0x80
 80008be:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <HAL_ADC_MspInit+0x118>)
 80008c2:	2280      	movs	r2, #128	; 0x80
 80008c4:	0052      	lsls	r2, r2, #1
 80008c6:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008c8:	4b10      	ldr	r3, [pc, #64]	; (800090c <HAL_ADC_MspInit+0x118>)
 80008ca:	2280      	movs	r2, #128	; 0x80
 80008cc:	00d2      	lsls	r2, r2, #3
 80008ce:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80008d0:	4b0e      	ldr	r3, [pc, #56]	; (800090c <HAL_ADC_MspInit+0x118>)
 80008d2:	2220      	movs	r2, #32
 80008d4:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80008d6:	4b0d      	ldr	r3, [pc, #52]	; (800090c <HAL_ADC_MspInit+0x118>)
 80008d8:	2200      	movs	r2, #0
 80008da:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80008dc:	4b0b      	ldr	r3, [pc, #44]	; (800090c <HAL_ADC_MspInit+0x118>)
 80008de:	0018      	movs	r0, r3
 80008e0:	f001 fa1e 	bl	8001d20 <HAL_DMA_Init>
 80008e4:	1e03      	subs	r3, r0, #0
 80008e6:	d001      	beq.n	80008ec <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 80008e8:	f7ff ff5a 	bl	80007a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4a07      	ldr	r2, [pc, #28]	; (800090c <HAL_ADC_MspInit+0x118>)
 80008f0:	631a      	str	r2, [r3, #48]	; 0x30
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <HAL_ADC_MspInit+0x118>)
 80008f4:	687a      	ldr	r2, [r7, #4]
 80008f6:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008f8:	46c0      	nop			; (mov r8, r8)
 80008fa:	46bd      	mov	sp, r7
 80008fc:	b00b      	add	sp, #44	; 0x2c
 80008fe:	bd90      	pop	{r4, r7, pc}
 8000900:	40012400 	.word	0x40012400
 8000904:	40021000 	.word	0x40021000
 8000908:	48000400 	.word	0x48000400
 800090c:	20000068 	.word	0x20000068
 8000910:	40020008 	.word	0x40020008

08000914 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000914:	b590      	push	{r4, r7, lr}
 8000916:	b08b      	sub	sp, #44	; 0x2c
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091c:	2414      	movs	r4, #20
 800091e:	193b      	adds	r3, r7, r4
 8000920:	0018      	movs	r0, r3
 8000922:	2314      	movs	r3, #20
 8000924:	001a      	movs	r2, r3
 8000926:	2100      	movs	r1, #0
 8000928:	f002 fc44 	bl	80031b4 <memset>
  if(hcan->Instance==CAN)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a1d      	ldr	r2, [pc, #116]	; (80009a8 <HAL_CAN_MspInit+0x94>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d133      	bne.n	800099e <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000936:	4b1d      	ldr	r3, [pc, #116]	; (80009ac <HAL_CAN_MspInit+0x98>)
 8000938:	69da      	ldr	r2, [r3, #28]
 800093a:	4b1c      	ldr	r3, [pc, #112]	; (80009ac <HAL_CAN_MspInit+0x98>)
 800093c:	2180      	movs	r1, #128	; 0x80
 800093e:	0489      	lsls	r1, r1, #18
 8000940:	430a      	orrs	r2, r1
 8000942:	61da      	str	r2, [r3, #28]
 8000944:	4b19      	ldr	r3, [pc, #100]	; (80009ac <HAL_CAN_MspInit+0x98>)
 8000946:	69da      	ldr	r2, [r3, #28]
 8000948:	2380      	movs	r3, #128	; 0x80
 800094a:	049b      	lsls	r3, r3, #18
 800094c:	4013      	ands	r3, r2
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	4b16      	ldr	r3, [pc, #88]	; (80009ac <HAL_CAN_MspInit+0x98>)
 8000954:	695a      	ldr	r2, [r3, #20]
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <HAL_CAN_MspInit+0x98>)
 8000958:	2180      	movs	r1, #128	; 0x80
 800095a:	0289      	lsls	r1, r1, #10
 800095c:	430a      	orrs	r2, r1
 800095e:	615a      	str	r2, [r3, #20]
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <HAL_CAN_MspInit+0x98>)
 8000962:	695a      	ldr	r2, [r3, #20]
 8000964:	2380      	movs	r3, #128	; 0x80
 8000966:	029b      	lsls	r3, r3, #10
 8000968:	4013      	ands	r3, r2
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800096e:	193b      	adds	r3, r7, r4
 8000970:	22c0      	movs	r2, #192	; 0xc0
 8000972:	0152      	lsls	r2, r2, #5
 8000974:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	0021      	movs	r1, r4
 8000978:	187b      	adds	r3, r7, r1
 800097a:	2202      	movs	r2, #2
 800097c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	187b      	adds	r3, r7, r1
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000984:	187b      	adds	r3, r7, r1
 8000986:	2203      	movs	r2, #3
 8000988:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 800098a:	187b      	adds	r3, r7, r1
 800098c:	2204      	movs	r2, #4
 800098e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000990:	187a      	adds	r2, r7, r1
 8000992:	2390      	movs	r3, #144	; 0x90
 8000994:	05db      	lsls	r3, r3, #23
 8000996:	0011      	movs	r1, r2
 8000998:	0018      	movs	r0, r3
 800099a:	f001 fb59 	bl	8002050 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	b00b      	add	sp, #44	; 0x2c
 80009a4:	bd90      	pop	{r4, r7, pc}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	40006400 	.word	0x40006400
 80009ac:	40021000 	.word	0x40021000

080009b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a0e      	ldr	r2, [pc, #56]	; (80009f8 <HAL_TIM_Base_MspInit+0x48>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d115      	bne.n	80009ee <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <HAL_TIM_Base_MspInit+0x4c>)
 80009c4:	699a      	ldr	r2, [r3, #24]
 80009c6:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <HAL_TIM_Base_MspInit+0x4c>)
 80009c8:	2180      	movs	r1, #128	; 0x80
 80009ca:	0289      	lsls	r1, r1, #10
 80009cc:	430a      	orrs	r2, r1
 80009ce:	619a      	str	r2, [r3, #24]
 80009d0:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <HAL_TIM_Base_MspInit+0x4c>)
 80009d2:	699a      	ldr	r2, [r3, #24]
 80009d4:	2380      	movs	r3, #128	; 0x80
 80009d6:	029b      	lsls	r3, r3, #10
 80009d8:	4013      	ands	r3, r2
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	2100      	movs	r1, #0
 80009e2:	2015      	movs	r0, #21
 80009e4:	f001 f96a 	bl	8001cbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80009e8:	2015      	movs	r0, #21
 80009ea:	f001 f97c 	bl	8001ce6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	46bd      	mov	sp, r7
 80009f2:	b004      	add	sp, #16
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	40014400 	.word	0x40014400
 80009fc:	40021000 	.word	0x40021000

08000a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a04:	e7fe      	b.n	8000a04 <NMI_Handler+0x4>

08000a06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a0a:	e7fe      	b.n	8000a0a <HardFault_Handler+0x4>

08000a0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a10:	46c0      	nop			; (mov r8, r8)
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a24:	f000 f8ac 	bl	8000b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a28:	46c0      	nop			; (mov r8, r8)
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
	...

08000a30 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000a34:	4b03      	ldr	r3, [pc, #12]	; (8000a44 <DMA1_Channel1_IRQHandler+0x14>)
 8000a36:	0018      	movs	r0, r3
 8000a38:	f001 fa20 	bl	8001e7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a3c:	46c0      	nop			; (mov r8, r8)
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	20000068 	.word	0x20000068

08000a48 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000a4c:	4b03      	ldr	r3, [pc, #12]	; (8000a5c <TIM16_IRQHandler+0x14>)
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f002 f9f4 	bl	8002e3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000a54:	46c0      	nop			; (mov r8, r8)
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	20000110 	.word	0x20000110

08000a60 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000a64:	46c0      	nop			; (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
	...

08000a6c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a6c:	4813      	ldr	r0, [pc, #76]	; (8000abc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a6e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a70:	f7ff fff6 	bl	8000a60 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000a74:	4812      	ldr	r0, [pc, #72]	; (8000ac0 <LoopForever+0x6>)
    LDR R1, [R0]
 8000a76:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000a78:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000a7a:	4a12      	ldr	r2, [pc, #72]	; (8000ac4 <LoopForever+0xa>)
    CMP R1, R2
 8000a7c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000a7e:	d105      	bne.n	8000a8c <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000a80:	4811      	ldr	r0, [pc, #68]	; (8000ac8 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000a82:	4912      	ldr	r1, [pc, #72]	; (8000acc <LoopForever+0x12>)
    STR R1, [R0]
 8000a84:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000a86:	4812      	ldr	r0, [pc, #72]	; (8000ad0 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000a88:	4912      	ldr	r1, [pc, #72]	; (8000ad4 <LoopForever+0x1a>)
    STR R1, [R0]
 8000a8a:	6001      	str	r1, [r0, #0]

08000a8c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a8c:	4812      	ldr	r0, [pc, #72]	; (8000ad8 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000a8e:	4913      	ldr	r1, [pc, #76]	; (8000adc <LoopForever+0x22>)
  ldr r2, =_sidata
 8000a90:	4a13      	ldr	r2, [pc, #76]	; (8000ae0 <LoopForever+0x26>)
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a94:	e002      	b.n	8000a9c <LoopCopyDataInit>

08000a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a9a:	3304      	adds	r3, #4

08000a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa0:	d3f9      	bcc.n	8000a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aa2:	4a10      	ldr	r2, [pc, #64]	; (8000ae4 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000aa4:	4c10      	ldr	r4, [pc, #64]	; (8000ae8 <LoopForever+0x2e>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa8:	e001      	b.n	8000aae <LoopFillZerobss>

08000aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aac:	3204      	adds	r2, #4

08000aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab0:	d3fb      	bcc.n	8000aaa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ab2:	f002 fb87 	bl	80031c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ab6:	f7ff fc5d 	bl	8000374 <main>

08000aba <LoopForever>:

LoopForever:
    b LoopForever
 8000aba:	e7fe      	b.n	8000aba <LoopForever>
  ldr   r0, =_estack
 8000abc:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000ac0:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000ac4:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000ac8:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000acc:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000ad0:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000ad4:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000ad8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000adc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ae0:	0800325c 	.word	0x0800325c
  ldr r2, =_sbss
 8000ae4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ae8:	200001a0 	.word	0x200001a0

08000aec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000aec:	e7fe      	b.n	8000aec <ADC1_IRQHandler>
	...

08000af0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000af4:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <HAL_Init+0x24>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <HAL_Init+0x24>)
 8000afa:	2110      	movs	r1, #16
 8000afc:	430a      	orrs	r2, r1
 8000afe:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000b00:	2003      	movs	r0, #3
 8000b02:	f000 f809 	bl	8000b18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b06:	f7ff fe51 	bl	80007ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b0a:	2300      	movs	r3, #0
}
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	40022000 	.word	0x40022000

08000b18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b18:	b590      	push	{r4, r7, lr}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b20:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <HAL_InitTick+0x5c>)
 8000b22:	681c      	ldr	r4, [r3, #0]
 8000b24:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <HAL_InitTick+0x60>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	0019      	movs	r1, r3
 8000b2a:	23fa      	movs	r3, #250	; 0xfa
 8000b2c:	0098      	lsls	r0, r3, #2
 8000b2e:	f7ff faeb 	bl	8000108 <__udivsi3>
 8000b32:	0003      	movs	r3, r0
 8000b34:	0019      	movs	r1, r3
 8000b36:	0020      	movs	r0, r4
 8000b38:	f7ff fae6 	bl	8000108 <__udivsi3>
 8000b3c:	0003      	movs	r3, r0
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f001 f8e1 	bl	8001d06 <HAL_SYSTICK_Config>
 8000b44:	1e03      	subs	r3, r0, #0
 8000b46:	d001      	beq.n	8000b4c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	e00f      	b.n	8000b6c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2b03      	cmp	r3, #3
 8000b50:	d80b      	bhi.n	8000b6a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	2301      	movs	r3, #1
 8000b56:	425b      	negs	r3, r3
 8000b58:	2200      	movs	r2, #0
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f001 f8ae 	bl	8001cbc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <HAL_InitTick+0x64>)
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000b66:	2300      	movs	r3, #0
 8000b68:	e000      	b.n	8000b6c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
}
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	b003      	add	sp, #12
 8000b72:	bd90      	pop	{r4, r7, pc}
 8000b74:	20000000 	.word	0x20000000
 8000b78:	20000008 	.word	0x20000008
 8000b7c:	20000004 	.word	0x20000004

08000b80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b84:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <HAL_IncTick+0x1c>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	001a      	movs	r2, r3
 8000b8a:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <HAL_IncTick+0x20>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	18d2      	adds	r2, r2, r3
 8000b90:	4b03      	ldr	r3, [pc, #12]	; (8000ba0 <HAL_IncTick+0x20>)
 8000b92:	601a      	str	r2, [r3, #0]
}
 8000b94:	46c0      	nop			; (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	20000008 	.word	0x20000008
 8000ba0:	2000019c 	.word	0x2000019c

08000ba4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba8:	4b02      	ldr	r3, [pc, #8]	; (8000bb4 <HAL_GetTick+0x10>)
 8000baa:	681b      	ldr	r3, [r3, #0]
}
 8000bac:	0018      	movs	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	2000019c 	.word	0x2000019c

08000bb8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bc0:	230f      	movs	r3, #15
 8000bc2:	18fb      	adds	r3, r7, r3
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d101      	bne.n	8000bd6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e125      	b.n	8000e22 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d10a      	bne.n	8000bf4 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2200      	movs	r2, #0
 8000be2:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2234      	movs	r2, #52	; 0x34
 8000be8:	2100      	movs	r1, #0
 8000bea:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f7ff fe00 	bl	80007f4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bf8:	2210      	movs	r2, #16
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	d000      	beq.n	8000c00 <HAL_ADC_Init+0x48>
 8000bfe:	e103      	b.n	8000e08 <HAL_ADC_Init+0x250>
 8000c00:	230f      	movs	r3, #15
 8000c02:	18fb      	adds	r3, r7, r3
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d000      	beq.n	8000c0c <HAL_ADC_Init+0x54>
 8000c0a:	e0fd      	b.n	8000e08 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	2204      	movs	r2, #4
 8000c14:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000c16:	d000      	beq.n	8000c1a <HAL_ADC_Init+0x62>
 8000c18:	e0f6      	b.n	8000e08 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c1e:	4a83      	ldr	r2, [pc, #524]	; (8000e2c <HAL_ADC_Init+0x274>)
 8000c20:	4013      	ands	r3, r2
 8000c22:	2202      	movs	r2, #2
 8000c24:	431a      	orrs	r2, r3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	2203      	movs	r2, #3
 8000c32:	4013      	ands	r3, r2
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d112      	bne.n	8000c5e <HAL_ADC_Init+0xa6>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	2201      	movs	r2, #1
 8000c40:	4013      	ands	r3, r2
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d009      	beq.n	8000c5a <HAL_ADC_Init+0xa2>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	68da      	ldr	r2, [r3, #12]
 8000c4c:	2380      	movs	r3, #128	; 0x80
 8000c4e:	021b      	lsls	r3, r3, #8
 8000c50:	401a      	ands	r2, r3
 8000c52:	2380      	movs	r3, #128	; 0x80
 8000c54:	021b      	lsls	r3, r3, #8
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d101      	bne.n	8000c5e <HAL_ADC_Init+0xa6>
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e000      	b.n	8000c60 <HAL_ADC_Init+0xa8>
 8000c5e:	2300      	movs	r3, #0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d116      	bne.n	8000c92 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	2218      	movs	r2, #24
 8000c6c:	4393      	bics	r3, r2
 8000c6e:	0019      	movs	r1, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	689a      	ldr	r2, [r3, #8]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	430a      	orrs	r2, r1
 8000c7a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	691b      	ldr	r3, [r3, #16]
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	0899      	lsrs	r1, r3, #2
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	685a      	ldr	r2, [r3, #4]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	430a      	orrs	r2, r1
 8000c90:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	68da      	ldr	r2, [r3, #12]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4964      	ldr	r1, [pc, #400]	; (8000e30 <HAL_ADC_Init+0x278>)
 8000c9e:	400a      	ands	r2, r1
 8000ca0:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	7e1b      	ldrb	r3, [r3, #24]
 8000ca6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	7e5b      	ldrb	r3, [r3, #25]
 8000cac:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000cae:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	7e9b      	ldrb	r3, [r3, #26]
 8000cb4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000cb6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d002      	beq.n	8000cc6 <HAL_ADC_Init+0x10e>
 8000cc0:	2380      	movs	r3, #128	; 0x80
 8000cc2:	015b      	lsls	r3, r3, #5
 8000cc4:	e000      	b.n	8000cc8 <HAL_ADC_Init+0x110>
 8000cc6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000cc8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000cce:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	691b      	ldr	r3, [r3, #16]
 8000cd4:	2b02      	cmp	r3, #2
 8000cd6:	d101      	bne.n	8000cdc <HAL_ADC_Init+0x124>
 8000cd8:	2304      	movs	r3, #4
 8000cda:	e000      	b.n	8000cde <HAL_ADC_Init+0x126>
 8000cdc:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000cde:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2124      	movs	r1, #36	; 0x24
 8000ce4:	5c5b      	ldrb	r3, [r3, r1]
 8000ce6:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000ce8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000cea:	68ba      	ldr	r2, [r7, #8]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	7edb      	ldrb	r3, [r3, #27]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d115      	bne.n	8000d24 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	7e9b      	ldrb	r3, [r3, #26]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d105      	bne.n	8000d0c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	2280      	movs	r2, #128	; 0x80
 8000d04:	0252      	lsls	r2, r2, #9
 8000d06:	4313      	orrs	r3, r2
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	e00b      	b.n	8000d24 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d10:	2220      	movs	r2, #32
 8000d12:	431a      	orrs	r2, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	431a      	orrs	r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	69da      	ldr	r2, [r3, #28]
 8000d28:	23c2      	movs	r3, #194	; 0xc2
 8000d2a:	33ff      	adds	r3, #255	; 0xff
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d007      	beq.n	8000d40 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	68ba      	ldr	r2, [r7, #8]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	68d9      	ldr	r1, [r3, #12]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	68ba      	ldr	r2, [r7, #8]
 8000d4c:	430a      	orrs	r2, r1
 8000d4e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d54:	2380      	movs	r3, #128	; 0x80
 8000d56:	055b      	lsls	r3, r3, #21
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d01b      	beq.n	8000d94 <HAL_ADC_Init+0x1dc>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d017      	beq.n	8000d94 <HAL_ADC_Init+0x1dc>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d013      	beq.n	8000d94 <HAL_ADC_Init+0x1dc>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d70:	2b03      	cmp	r3, #3
 8000d72:	d00f      	beq.n	8000d94 <HAL_ADC_Init+0x1dc>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d78:	2b04      	cmp	r3, #4
 8000d7a:	d00b      	beq.n	8000d94 <HAL_ADC_Init+0x1dc>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d80:	2b05      	cmp	r3, #5
 8000d82:	d007      	beq.n	8000d94 <HAL_ADC_Init+0x1dc>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d88:	2b06      	cmp	r3, #6
 8000d8a:	d003      	beq.n	8000d94 <HAL_ADC_Init+0x1dc>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d90:	2b07      	cmp	r3, #7
 8000d92:	d112      	bne.n	8000dba <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	695a      	ldr	r2, [r3, #20]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2107      	movs	r1, #7
 8000da0:	438a      	bics	r2, r1
 8000da2:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	6959      	ldr	r1, [r3, #20]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dae:	2207      	movs	r2, #7
 8000db0:	401a      	ands	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	430a      	orrs	r2, r1
 8000db8:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	4a1c      	ldr	r2, [pc, #112]	; (8000e34 <HAL_ADC_Init+0x27c>)
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	68ba      	ldr	r2, [r7, #8]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d10b      	bne.n	8000de2 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	4393      	bics	r3, r2
 8000dd8:	2201      	movs	r2, #1
 8000dda:	431a      	orrs	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000de0:	e01c      	b.n	8000e1c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000de6:	2212      	movs	r2, #18
 8000de8:	4393      	bics	r3, r2
 8000dea:	2210      	movs	r2, #16
 8000dec:	431a      	orrs	r2, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000df6:	2201      	movs	r2, #1
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000dfe:	230f      	movs	r3, #15
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	2201      	movs	r2, #1
 8000e04:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000e06:	e009      	b.n	8000e1c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e0c:	2210      	movs	r2, #16
 8000e0e:	431a      	orrs	r2, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000e14:	230f      	movs	r3, #15
 8000e16:	18fb      	adds	r3, r7, r3
 8000e18:	2201      	movs	r2, #1
 8000e1a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e1c:	230f      	movs	r3, #15
 8000e1e:	18fb      	adds	r3, r7, r3
 8000e20:	781b      	ldrb	r3, [r3, #0]
}
 8000e22:	0018      	movs	r0, r3
 8000e24:	46bd      	mov	sp, r7
 8000e26:	b004      	add	sp, #16
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	fffffefd 	.word	0xfffffefd
 8000e30:	fffe0219 	.word	0xfffe0219
 8000e34:	833fffe7 	.word	0x833fffe7

08000e38 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000e38:	b590      	push	{r4, r7, lr}
 8000e3a:	b087      	sub	sp, #28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e44:	2317      	movs	r3, #23
 8000e46:	18fb      	adds	r3, r7, r3
 8000e48:	2200      	movs	r2, #0
 8000e4a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	2204      	movs	r2, #4
 8000e54:	4013      	ands	r3, r2
 8000e56:	d15e      	bne.n	8000f16 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	2234      	movs	r2, #52	; 0x34
 8000e5c:	5c9b      	ldrb	r3, [r3, r2]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d101      	bne.n	8000e66 <HAL_ADC_Start_DMA+0x2e>
 8000e62:	2302      	movs	r3, #2
 8000e64:	e05e      	b.n	8000f24 <HAL_ADC_Start_DMA+0xec>
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	2234      	movs	r2, #52	; 0x34
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	7e5b      	ldrb	r3, [r3, #25]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d007      	beq.n	8000e86 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000e76:	2317      	movs	r3, #23
 8000e78:	18fc      	adds	r4, r7, r3
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	f000 f983 	bl	8001188 <ADC_Enable>
 8000e82:	0003      	movs	r3, r0
 8000e84:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000e86:	2317      	movs	r3, #23
 8000e88:	18fb      	adds	r3, r7, r3
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d146      	bne.n	8000f1e <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e94:	4a25      	ldr	r2, [pc, #148]	; (8000f2c <HAL_ADC_Start_DMA+0xf4>)
 8000e96:	4013      	ands	r3, r2
 8000e98:	2280      	movs	r2, #128	; 0x80
 8000e9a:	0052      	lsls	r2, r2, #1
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	2234      	movs	r2, #52	; 0x34
 8000eac:	2100      	movs	r1, #0
 8000eae:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb4:	4a1e      	ldr	r2, [pc, #120]	; (8000f30 <HAL_ADC_Start_DMA+0xf8>)
 8000eb6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebc:	4a1d      	ldr	r2, [pc, #116]	; (8000f34 <HAL_ADC_Start_DMA+0xfc>)
 8000ebe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec4:	4a1c      	ldr	r2, [pc, #112]	; (8000f38 <HAL_ADC_Start_DMA+0x100>)
 8000ec6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	221c      	movs	r2, #28
 8000ece:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	685a      	ldr	r2, [r3, #4]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2110      	movs	r1, #16
 8000edc:	430a      	orrs	r2, r1
 8000ede:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	68da      	ldr	r2, [r3, #12]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2101      	movs	r1, #1
 8000eec:	430a      	orrs	r2, r1
 8000eee:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	3340      	adds	r3, #64	; 0x40
 8000efa:	0019      	movs	r1, r3
 8000efc:	68ba      	ldr	r2, [r7, #8]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f000 ff56 	bl	8001db0 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	689a      	ldr	r2, [r3, #8]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2104      	movs	r1, #4
 8000f10:	430a      	orrs	r2, r1
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	e003      	b.n	8000f1e <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000f16:	2317      	movs	r3, #23
 8000f18:	18fb      	adds	r3, r7, r3
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000f1e:	2317      	movs	r3, #23
 8000f20:	18fb      	adds	r3, r7, r3
 8000f22:	781b      	ldrb	r3, [r3, #0]
}
 8000f24:	0018      	movs	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	b007      	add	sp, #28
 8000f2a:	bd90      	pop	{r4, r7, pc}
 8000f2c:	fffff0fe 	.word	0xfffff0fe
 8000f30:	08001291 	.word	0x08001291
 8000f34:	08001345 	.word	0x08001345
 8000f38:	08001363 	.word	0x08001363

08000f3c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000f44:	46c0      	nop			; (mov r8, r8)
 8000f46:	46bd      	mov	sp, r7
 8000f48:	b002      	add	sp, #8
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000f54:	46c0      	nop			; (mov r8, r8)
 8000f56:	46bd      	mov	sp, r7
 8000f58:	b002      	add	sp, #8
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000f64:	46c0      	nop			; (mov r8, r8)
 8000f66:	46bd      	mov	sp, r7
 8000f68:	b002      	add	sp, #8
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f76:	230f      	movs	r3, #15
 8000f78:	18fb      	adds	r3, r7, r3
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f86:	2380      	movs	r3, #128	; 0x80
 8000f88:	055b      	lsls	r3, r3, #21
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d011      	beq.n	8000fb2 <HAL_ADC_ConfigChannel+0x46>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d00d      	beq.n	8000fb2 <HAL_ADC_ConfigChannel+0x46>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d009      	beq.n	8000fb2 <HAL_ADC_ConfigChannel+0x46>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa2:	2b03      	cmp	r3, #3
 8000fa4:	d005      	beq.n	8000fb2 <HAL_ADC_ConfigChannel+0x46>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000faa:	2b04      	cmp	r3, #4
 8000fac:	d001      	beq.n	8000fb2 <HAL_ADC_ConfigChannel+0x46>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2234      	movs	r2, #52	; 0x34
 8000fb6:	5c9b      	ldrb	r3, [r3, r2]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d101      	bne.n	8000fc0 <HAL_ADC_ConfigChannel+0x54>
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	e0d0      	b.n	8001162 <HAL_ADC_ConfigChannel+0x1f6>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2234      	movs	r2, #52	; 0x34
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	2204      	movs	r2, #4
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	d000      	beq.n	8000fd6 <HAL_ADC_ConfigChannel+0x6a>
 8000fd4:	e0b4      	b.n	8001140 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	4a64      	ldr	r2, [pc, #400]	; (800116c <HAL_ADC_ConfigChannel+0x200>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d100      	bne.n	8000fe2 <HAL_ADC_ConfigChannel+0x76>
 8000fe0:	e082      	b.n	80010e8 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2201      	movs	r2, #1
 8000fee:	409a      	lsls	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ffc:	2380      	movs	r3, #128	; 0x80
 8000ffe:	055b      	lsls	r3, r3, #21
 8001000:	429a      	cmp	r2, r3
 8001002:	d037      	beq.n	8001074 <HAL_ADC_ConfigChannel+0x108>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001008:	2b01      	cmp	r3, #1
 800100a:	d033      	beq.n	8001074 <HAL_ADC_ConfigChannel+0x108>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001010:	2b02      	cmp	r3, #2
 8001012:	d02f      	beq.n	8001074 <HAL_ADC_ConfigChannel+0x108>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001018:	2b03      	cmp	r3, #3
 800101a:	d02b      	beq.n	8001074 <HAL_ADC_ConfigChannel+0x108>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001020:	2b04      	cmp	r3, #4
 8001022:	d027      	beq.n	8001074 <HAL_ADC_ConfigChannel+0x108>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001028:	2b05      	cmp	r3, #5
 800102a:	d023      	beq.n	8001074 <HAL_ADC_ConfigChannel+0x108>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001030:	2b06      	cmp	r3, #6
 8001032:	d01f      	beq.n	8001074 <HAL_ADC_ConfigChannel+0x108>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001038:	2b07      	cmp	r3, #7
 800103a:	d01b      	beq.n	8001074 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	689a      	ldr	r2, [r3, #8]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	2107      	movs	r1, #7
 8001048:	400b      	ands	r3, r1
 800104a:	429a      	cmp	r2, r3
 800104c:	d012      	beq.n	8001074 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	695a      	ldr	r2, [r3, #20]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2107      	movs	r1, #7
 800105a:	438a      	bics	r2, r1
 800105c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	6959      	ldr	r1, [r3, #20]
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	2207      	movs	r2, #7
 800106a:	401a      	ands	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	430a      	orrs	r2, r1
 8001072:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b10      	cmp	r3, #16
 800107a:	d007      	beq.n	800108c <HAL_ADC_ConfigChannel+0x120>
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2b11      	cmp	r3, #17
 8001082:	d003      	beq.n	800108c <HAL_ADC_ConfigChannel+0x120>
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b12      	cmp	r3, #18
 800108a:	d163      	bne.n	8001154 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800108c:	4b38      	ldr	r3, [pc, #224]	; (8001170 <HAL_ADC_ConfigChannel+0x204>)
 800108e:	6819      	ldr	r1, [r3, #0]
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b10      	cmp	r3, #16
 8001096:	d009      	beq.n	80010ac <HAL_ADC_ConfigChannel+0x140>
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b11      	cmp	r3, #17
 800109e:	d102      	bne.n	80010a6 <HAL_ADC_ConfigChannel+0x13a>
 80010a0:	2380      	movs	r3, #128	; 0x80
 80010a2:	03db      	lsls	r3, r3, #15
 80010a4:	e004      	b.n	80010b0 <HAL_ADC_ConfigChannel+0x144>
 80010a6:	2380      	movs	r3, #128	; 0x80
 80010a8:	045b      	lsls	r3, r3, #17
 80010aa:	e001      	b.n	80010b0 <HAL_ADC_ConfigChannel+0x144>
 80010ac:	2380      	movs	r3, #128	; 0x80
 80010ae:	041b      	lsls	r3, r3, #16
 80010b0:	4a2f      	ldr	r2, [pc, #188]	; (8001170 <HAL_ADC_ConfigChannel+0x204>)
 80010b2:	430b      	orrs	r3, r1
 80010b4:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2b10      	cmp	r3, #16
 80010bc:	d14a      	bne.n	8001154 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010be:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <HAL_ADC_ConfigChannel+0x208>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	492d      	ldr	r1, [pc, #180]	; (8001178 <HAL_ADC_ConfigChannel+0x20c>)
 80010c4:	0018      	movs	r0, r3
 80010c6:	f7ff f81f 	bl	8000108 <__udivsi3>
 80010ca:	0003      	movs	r3, r0
 80010cc:	001a      	movs	r2, r3
 80010ce:	0013      	movs	r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	189b      	adds	r3, r3, r2
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010d8:	e002      	b.n	80010e0 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	3b01      	subs	r3, #1
 80010de:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1f9      	bne.n	80010da <HAL_ADC_ConfigChannel+0x16e>
 80010e6:	e035      	b.n	8001154 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2101      	movs	r1, #1
 80010f4:	4099      	lsls	r1, r3
 80010f6:	000b      	movs	r3, r1
 80010f8:	43d9      	mvns	r1, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	400a      	ands	r2, r1
 8001100:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2b10      	cmp	r3, #16
 8001108:	d007      	beq.n	800111a <HAL_ADC_ConfigChannel+0x1ae>
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b11      	cmp	r3, #17
 8001110:	d003      	beq.n	800111a <HAL_ADC_ConfigChannel+0x1ae>
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2b12      	cmp	r3, #18
 8001118:	d11c      	bne.n	8001154 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <HAL_ADC_ConfigChannel+0x204>)
 800111c:	6819      	ldr	r1, [r3, #0]
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2b10      	cmp	r3, #16
 8001124:	d007      	beq.n	8001136 <HAL_ADC_ConfigChannel+0x1ca>
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2b11      	cmp	r3, #17
 800112c:	d101      	bne.n	8001132 <HAL_ADC_ConfigChannel+0x1c6>
 800112e:	4b13      	ldr	r3, [pc, #76]	; (800117c <HAL_ADC_ConfigChannel+0x210>)
 8001130:	e002      	b.n	8001138 <HAL_ADC_ConfigChannel+0x1cc>
 8001132:	4b13      	ldr	r3, [pc, #76]	; (8001180 <HAL_ADC_ConfigChannel+0x214>)
 8001134:	e000      	b.n	8001138 <HAL_ADC_ConfigChannel+0x1cc>
 8001136:	4b13      	ldr	r3, [pc, #76]	; (8001184 <HAL_ADC_ConfigChannel+0x218>)
 8001138:	4a0d      	ldr	r2, [pc, #52]	; (8001170 <HAL_ADC_ConfigChannel+0x204>)
 800113a:	400b      	ands	r3, r1
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	e009      	b.n	8001154 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001144:	2220      	movs	r2, #32
 8001146:	431a      	orrs	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800114c:	230f      	movs	r3, #15
 800114e:	18fb      	adds	r3, r7, r3
 8001150:	2201      	movs	r2, #1
 8001152:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2234      	movs	r2, #52	; 0x34
 8001158:	2100      	movs	r1, #0
 800115a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800115c:	230f      	movs	r3, #15
 800115e:	18fb      	adds	r3, r7, r3
 8001160:	781b      	ldrb	r3, [r3, #0]
}
 8001162:	0018      	movs	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	b004      	add	sp, #16
 8001168:	bd80      	pop	{r7, pc}
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	00001001 	.word	0x00001001
 8001170:	40012708 	.word	0x40012708
 8001174:	20000000 	.word	0x20000000
 8001178:	000f4240 	.word	0x000f4240
 800117c:	ffbfffff 	.word	0xffbfffff
 8001180:	feffffff 	.word	0xfeffffff
 8001184:	ff7fffff 	.word	0xff7fffff

08001188 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001194:	2300      	movs	r3, #0
 8001196:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	2203      	movs	r2, #3
 80011a0:	4013      	ands	r3, r2
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d112      	bne.n	80011cc <ADC_Enable+0x44>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2201      	movs	r2, #1
 80011ae:	4013      	ands	r3, r2
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d009      	beq.n	80011c8 <ADC_Enable+0x40>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	68da      	ldr	r2, [r3, #12]
 80011ba:	2380      	movs	r3, #128	; 0x80
 80011bc:	021b      	lsls	r3, r3, #8
 80011be:	401a      	ands	r2, r3
 80011c0:	2380      	movs	r3, #128	; 0x80
 80011c2:	021b      	lsls	r3, r3, #8
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d101      	bne.n	80011cc <ADC_Enable+0x44>
 80011c8:	2301      	movs	r3, #1
 80011ca:	e000      	b.n	80011ce <ADC_Enable+0x46>
 80011cc:	2300      	movs	r3, #0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d152      	bne.n	8001278 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	4a2a      	ldr	r2, [pc, #168]	; (8001284 <ADC_Enable+0xfc>)
 80011da:	4013      	ands	r3, r2
 80011dc:	d00d      	beq.n	80011fa <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011e2:	2210      	movs	r2, #16
 80011e4:	431a      	orrs	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ee:	2201      	movs	r2, #1
 80011f0:	431a      	orrs	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e03f      	b.n	800127a <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	689a      	ldr	r2, [r3, #8]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2101      	movs	r1, #1
 8001206:	430a      	orrs	r2, r1
 8001208:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800120a:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <ADC_Enable+0x100>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	491f      	ldr	r1, [pc, #124]	; (800128c <ADC_Enable+0x104>)
 8001210:	0018      	movs	r0, r3
 8001212:	f7fe ff79 	bl	8000108 <__udivsi3>
 8001216:	0003      	movs	r3, r0
 8001218:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800121a:	e002      	b.n	8001222 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	3b01      	subs	r3, #1
 8001220:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d1f9      	bne.n	800121c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001228:	f7ff fcbc 	bl	8000ba4 <HAL_GetTick>
 800122c:	0003      	movs	r3, r0
 800122e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001230:	e01b      	b.n	800126a <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001232:	f7ff fcb7 	bl	8000ba4 <HAL_GetTick>
 8001236:	0002      	movs	r2, r0
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b02      	cmp	r3, #2
 800123e:	d914      	bls.n	800126a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2201      	movs	r2, #1
 8001248:	4013      	ands	r3, r2
 800124a:	2b01      	cmp	r3, #1
 800124c:	d00d      	beq.n	800126a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001252:	2210      	movs	r2, #16
 8001254:	431a      	orrs	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800125e:	2201      	movs	r2, #1
 8001260:	431a      	orrs	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e007      	b.n	800127a <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2201      	movs	r2, #1
 8001272:	4013      	ands	r3, r2
 8001274:	2b01      	cmp	r3, #1
 8001276:	d1dc      	bne.n	8001232 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001278:	2300      	movs	r3, #0
}
 800127a:	0018      	movs	r0, r3
 800127c:	46bd      	mov	sp, r7
 800127e:	b004      	add	sp, #16
 8001280:	bd80      	pop	{r7, pc}
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	80000017 	.word	0x80000017
 8001288:	20000000 	.word	0x20000000
 800128c:	000f4240 	.word	0x000f4240

08001290 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012a2:	2250      	movs	r2, #80	; 0x50
 80012a4:	4013      	ands	r3, r2
 80012a6:	d140      	bne.n	800132a <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ac:	2280      	movs	r2, #128	; 0x80
 80012ae:	0092      	lsls	r2, r2, #2
 80012b0:	431a      	orrs	r2, r3
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	68da      	ldr	r2, [r3, #12]
 80012bc:	23c0      	movs	r3, #192	; 0xc0
 80012be:	011b      	lsls	r3, r3, #4
 80012c0:	4013      	ands	r3, r2
 80012c2:	d12d      	bne.n	8001320 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d129      	bne.n	8001320 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2208      	movs	r2, #8
 80012d4:	4013      	ands	r3, r2
 80012d6:	2b08      	cmp	r3, #8
 80012d8:	d122      	bne.n	8001320 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	2204      	movs	r2, #4
 80012e2:	4013      	ands	r3, r2
 80012e4:	d110      	bne.n	8001308 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	685a      	ldr	r2, [r3, #4]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	210c      	movs	r1, #12
 80012f2:	438a      	bics	r2, r1
 80012f4:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012fa:	4a11      	ldr	r2, [pc, #68]	; (8001340 <ADC_DMAConvCplt+0xb0>)
 80012fc:	4013      	ands	r3, r2
 80012fe:	2201      	movs	r2, #1
 8001300:	431a      	orrs	r2, r3
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	639a      	str	r2, [r3, #56]	; 0x38
 8001306:	e00b      	b.n	8001320 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800130c:	2220      	movs	r2, #32
 800130e:	431a      	orrs	r2, r3
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001318:	2201      	movs	r2, #1
 800131a:	431a      	orrs	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	0018      	movs	r0, r3
 8001324:	f7ff fe0a 	bl	8000f3c <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8001328:	e005      	b.n	8001336 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	0010      	movs	r0, r2
 8001334:	4798      	blx	r3
}
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	46bd      	mov	sp, r7
 800133a:	b004      	add	sp, #16
 800133c:	bd80      	pop	{r7, pc}
 800133e:	46c0      	nop			; (mov r8, r8)
 8001340:	fffffefe 	.word	0xfffffefe

08001344 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001350:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	0018      	movs	r0, r3
 8001356:	f7ff fdf9 	bl	8000f4c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800135a:	46c0      	nop			; (mov r8, r8)
 800135c:	46bd      	mov	sp, r7
 800135e:	b004      	add	sp, #16
 8001360:	bd80      	pop	{r7, pc}

08001362 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b084      	sub	sp, #16
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001374:	2240      	movs	r2, #64	; 0x40
 8001376:	431a      	orrs	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001380:	2204      	movs	r2, #4
 8001382:	431a      	orrs	r2, r3
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	0018      	movs	r0, r3
 800138c:	f7ff fde6 	bl	8000f5c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001390:	46c0      	nop			; (mov r8, r8)
 8001392:	46bd      	mov	sp, r7
 8001394:	b004      	add	sp, #16
 8001396:	bd80      	pop	{r7, pc}

08001398 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e11f      	b.n	80015ea <HAL_CAN_Init+0x252>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2220      	movs	r2, #32
 80013ae:	5c9b      	ldrb	r3, [r3, r2]
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d132      	bne.n	800141c <HAL_CAN_Init+0x84>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a8e      	ldr	r2, [pc, #568]	; (80015f4 <HAL_CAN_Init+0x25c>)
 80013ba:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a8e      	ldr	r2, [pc, #568]	; (80015f8 <HAL_CAN_Init+0x260>)
 80013c0:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a8d      	ldr	r2, [pc, #564]	; (80015fc <HAL_CAN_Init+0x264>)
 80013c6:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a8d      	ldr	r2, [pc, #564]	; (8001600 <HAL_CAN_Init+0x268>)
 80013cc:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a8c      	ldr	r2, [pc, #560]	; (8001604 <HAL_CAN_Init+0x26c>)
 80013d2:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a8c      	ldr	r2, [pc, #560]	; (8001608 <HAL_CAN_Init+0x270>)
 80013d8:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a8b      	ldr	r2, [pc, #556]	; (800160c <HAL_CAN_Init+0x274>)
 80013de:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a8b      	ldr	r2, [pc, #556]	; (8001610 <HAL_CAN_Init+0x278>)
 80013e4:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a8a      	ldr	r2, [pc, #552]	; (8001614 <HAL_CAN_Init+0x27c>)
 80013ea:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a8a      	ldr	r2, [pc, #552]	; (8001618 <HAL_CAN_Init+0x280>)
 80013f0:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a89      	ldr	r2, [pc, #548]	; (800161c <HAL_CAN_Init+0x284>)
 80013f6:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4a89      	ldr	r2, [pc, #548]	; (8001620 <HAL_CAN_Init+0x288>)
 80013fc:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a88      	ldr	r2, [pc, #544]	; (8001624 <HAL_CAN_Init+0x28c>)
 8001402:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001408:	2b00      	cmp	r3, #0
 800140a:	d102      	bne.n	8001412 <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a86      	ldr	r2, [pc, #536]	; (8001628 <HAL_CAN_Init+0x290>)
 8001410:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	0010      	movs	r0, r2
 800141a:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2101      	movs	r1, #1
 8001428:	430a      	orrs	r2, r1
 800142a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800142c:	f7ff fbba 	bl	8000ba4 <HAL_GetTick>
 8001430:	0003      	movs	r3, r0
 8001432:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001434:	e013      	b.n	800145e <HAL_CAN_Init+0xc6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001436:	f7ff fbb5 	bl	8000ba4 <HAL_GetTick>
 800143a:	0002      	movs	r2, r0
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b0a      	cmp	r3, #10
 8001442:	d90c      	bls.n	800145e <HAL_CAN_Init+0xc6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001448:	2280      	movs	r2, #128	; 0x80
 800144a:	0292      	lsls	r2, r2, #10
 800144c:	431a      	orrs	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2220      	movs	r2, #32
 8001456:	2105      	movs	r1, #5
 8001458:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e0c5      	b.n	80015ea <HAL_CAN_Init+0x252>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2201      	movs	r2, #1
 8001466:	4013      	ands	r3, r2
 8001468:	d0e5      	beq.n	8001436 <HAL_CAN_Init+0x9e>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2102      	movs	r1, #2
 8001476:	438a      	bics	r2, r1
 8001478:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800147a:	f7ff fb93 	bl	8000ba4 <HAL_GetTick>
 800147e:	0003      	movs	r3, r0
 8001480:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001482:	e013      	b.n	80014ac <HAL_CAN_Init+0x114>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001484:	f7ff fb8e 	bl	8000ba4 <HAL_GetTick>
 8001488:	0002      	movs	r2, r0
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b0a      	cmp	r3, #10
 8001490:	d90c      	bls.n	80014ac <HAL_CAN_Init+0x114>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001496:	2280      	movs	r2, #128	; 0x80
 8001498:	0292      	lsls	r2, r2, #10
 800149a:	431a      	orrs	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2220      	movs	r2, #32
 80014a4:	2105      	movs	r1, #5
 80014a6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e09e      	b.n	80015ea <HAL_CAN_Init+0x252>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2202      	movs	r2, #2
 80014b4:	4013      	ands	r3, r2
 80014b6:	d1e5      	bne.n	8001484 <HAL_CAN_Init+0xec>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	7e1b      	ldrb	r3, [r3, #24]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d108      	bne.n	80014d2 <HAL_CAN_Init+0x13a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2180      	movs	r1, #128	; 0x80
 80014cc:	430a      	orrs	r2, r1
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	e007      	b.n	80014e2 <HAL_CAN_Init+0x14a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2180      	movs	r1, #128	; 0x80
 80014de:	438a      	bics	r2, r1
 80014e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	7e5b      	ldrb	r3, [r3, #25]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d108      	bne.n	80014fc <HAL_CAN_Init+0x164>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2140      	movs	r1, #64	; 0x40
 80014f6:	430a      	orrs	r2, r1
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	e007      	b.n	800150c <HAL_CAN_Init+0x174>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2140      	movs	r1, #64	; 0x40
 8001508:	438a      	bics	r2, r1
 800150a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	7e9b      	ldrb	r3, [r3, #26]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d108      	bne.n	8001526 <HAL_CAN_Init+0x18e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2120      	movs	r1, #32
 8001520:	430a      	orrs	r2, r1
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	e007      	b.n	8001536 <HAL_CAN_Init+0x19e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2120      	movs	r1, #32
 8001532:	438a      	bics	r2, r1
 8001534:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	7edb      	ldrb	r3, [r3, #27]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d108      	bne.n	8001550 <HAL_CAN_Init+0x1b8>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2110      	movs	r1, #16
 800154a:	438a      	bics	r2, r1
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	e007      	b.n	8001560 <HAL_CAN_Init+0x1c8>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2110      	movs	r1, #16
 800155c:	430a      	orrs	r2, r1
 800155e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	7f1b      	ldrb	r3, [r3, #28]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d108      	bne.n	800157a <HAL_CAN_Init+0x1e2>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2108      	movs	r1, #8
 8001574:	430a      	orrs	r2, r1
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	e007      	b.n	800158a <HAL_CAN_Init+0x1f2>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2108      	movs	r1, #8
 8001586:	438a      	bics	r2, r1
 8001588:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	7f5b      	ldrb	r3, [r3, #29]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d108      	bne.n	80015a4 <HAL_CAN_Init+0x20c>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2104      	movs	r1, #4
 800159e:	430a      	orrs	r2, r1
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	e007      	b.n	80015b4 <HAL_CAN_Init+0x21c>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2104      	movs	r1, #4
 80015b0:	438a      	bics	r2, r1
 80015b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689a      	ldr	r2, [r3, #8]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	431a      	orrs	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	431a      	orrs	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	695b      	ldr	r3, [r3, #20]
 80015c8:	431a      	orrs	r2, r3
 80015ca:	0011      	movs	r1, r2
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	1e5a      	subs	r2, r3, #1
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	430a      	orrs	r2, r1
 80015d8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2220      	movs	r2, #32
 80015e4:	2101      	movs	r1, #1
 80015e6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	0018      	movs	r0, r3
 80015ec:	46bd      	mov	sp, r7
 80015ee:	b004      	add	sp, #16
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	46c0      	nop			; (mov r8, r8)
 80015f4:	08001af5 	.word	0x08001af5
 80015f8:	08001b05 	.word	0x08001b05
 80015fc:	08001b15 	.word	0x08001b15
 8001600:	08001b25 	.word	0x08001b25
 8001604:	08001a95 	.word	0x08001a95
 8001608:	08001aa5 	.word	0x08001aa5
 800160c:	08001ab5 	.word	0x08001ab5
 8001610:	08001ac5 	.word	0x08001ac5
 8001614:	08001ad5 	.word	0x08001ad5
 8001618:	08001ae5 	.word	0x08001ae5
 800161c:	08001b35 	.word	0x08001b35
 8001620:	08001b45 	.word	0x08001b45
 8001624:	08001b55 	.word	0x08001b55
 8001628:	08000915 	.word	0x08000915

0800162c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800163c:	2013      	movs	r0, #19
 800163e:	183b      	adds	r3, r7, r0
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	2120      	movs	r1, #32
 8001644:	5c52      	ldrb	r2, [r2, r1]
 8001646:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8001648:	0002      	movs	r2, r0
 800164a:	18bb      	adds	r3, r7, r2
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d004      	beq.n	800165c <HAL_CAN_ConfigFilter+0x30>
 8001652:	18bb      	adds	r3, r7, r2
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b02      	cmp	r3, #2
 8001658:	d000      	beq.n	800165c <HAL_CAN_ConfigFilter+0x30>
 800165a:	e0cd      	b.n	80017f8 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800165c:	697a      	ldr	r2, [r7, #20]
 800165e:	2380      	movs	r3, #128	; 0x80
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	58d3      	ldr	r3, [r2, r3]
 8001664:	2201      	movs	r2, #1
 8001666:	431a      	orrs	r2, r3
 8001668:	0011      	movs	r1, r2
 800166a:	697a      	ldr	r2, [r7, #20]
 800166c:	2380      	movs	r3, #128	; 0x80
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	221f      	movs	r2, #31
 8001678:	4013      	ands	r3, r2
 800167a:	2201      	movs	r2, #1
 800167c:	409a      	lsls	r2, r3
 800167e:	0013      	movs	r3, r2
 8001680:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001682:	697a      	ldr	r2, [r7, #20]
 8001684:	2387      	movs	r3, #135	; 0x87
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	58d3      	ldr	r3, [r2, r3]
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	43d2      	mvns	r2, r2
 800168e:	401a      	ands	r2, r3
 8001690:	0011      	movs	r1, r2
 8001692:	697a      	ldr	r2, [r7, #20]
 8001694:	2387      	movs	r3, #135	; 0x87
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d129      	bne.n	80016f6 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80016a2:	697a      	ldr	r2, [r7, #20]
 80016a4:	2383      	movs	r3, #131	; 0x83
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	58d3      	ldr	r3, [r2, r3]
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	43d2      	mvns	r2, r2
 80016ae:	401a      	ands	r2, r3
 80016b0:	0011      	movs	r1, r2
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	2383      	movs	r3, #131	; 0x83
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	041b      	lsls	r3, r3, #16
 80016c6:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80016cc:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	3248      	adds	r2, #72	; 0x48
 80016d2:	00d2      	lsls	r2, r2, #3
 80016d4:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	041b      	lsls	r3, r3, #16
 80016e2:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016e8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016ea:	6979      	ldr	r1, [r7, #20]
 80016ec:	3348      	adds	r3, #72	; 0x48
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	18cb      	adds	r3, r1, r3
 80016f2:	3304      	adds	r3, #4
 80016f4:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d128      	bne.n	8001750 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80016fe:	697a      	ldr	r2, [r7, #20]
 8001700:	2383      	movs	r3, #131	; 0x83
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	58d2      	ldr	r2, [r2, r3]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	431a      	orrs	r2, r3
 800170a:	0011      	movs	r1, r2
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	2383      	movs	r3, #131	; 0x83
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	041b      	lsls	r3, r3, #16
 8001720:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001726:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	3248      	adds	r2, #72	; 0x48
 800172c:	00d2      	lsls	r2, r2, #3
 800172e:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	041b      	lsls	r3, r3, #16
 800173c:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001742:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001744:	6979      	ldr	r1, [r7, #20]
 8001746:	3348      	adds	r3, #72	; 0x48
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	18cb      	adds	r3, r1, r3
 800174c:	3304      	adds	r3, #4
 800174e:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d10c      	bne.n	8001772 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001758:	697a      	ldr	r2, [r7, #20]
 800175a:	2381      	movs	r3, #129	; 0x81
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	58d3      	ldr	r3, [r2, r3]
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	43d2      	mvns	r2, r2
 8001764:	401a      	ands	r2, r3
 8001766:	0011      	movs	r1, r2
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	2381      	movs	r3, #129	; 0x81
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	50d1      	str	r1, [r2, r3]
 8001770:	e00a      	b.n	8001788 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	2381      	movs	r3, #129	; 0x81
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	58d2      	ldr	r2, [r2, r3]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	431a      	orrs	r2, r3
 800177e:	0011      	movs	r1, r2
 8001780:	697a      	ldr	r2, [r7, #20]
 8001782:	2381      	movs	r3, #129	; 0x81
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d10c      	bne.n	80017aa <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001790:	697a      	ldr	r2, [r7, #20]
 8001792:	2385      	movs	r3, #133	; 0x85
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	58d3      	ldr	r3, [r2, r3]
 8001798:	68fa      	ldr	r2, [r7, #12]
 800179a:	43d2      	mvns	r2, r2
 800179c:	401a      	ands	r2, r3
 800179e:	0011      	movs	r1, r2
 80017a0:	697a      	ldr	r2, [r7, #20]
 80017a2:	2385      	movs	r3, #133	; 0x85
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	50d1      	str	r1, [r2, r3]
 80017a8:	e00a      	b.n	80017c0 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	2385      	movs	r3, #133	; 0x85
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	58d2      	ldr	r2, [r2, r3]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	431a      	orrs	r2, r3
 80017b6:	0011      	movs	r1, r2
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	2385      	movs	r3, #133	; 0x85
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d10a      	bne.n	80017de <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80017c8:	697a      	ldr	r2, [r7, #20]
 80017ca:	2387      	movs	r3, #135	; 0x87
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	58d2      	ldr	r2, [r2, r3]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	431a      	orrs	r2, r3
 80017d4:	0011      	movs	r1, r2
 80017d6:	697a      	ldr	r2, [r7, #20]
 80017d8:	2387      	movs	r3, #135	; 0x87
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	2380      	movs	r3, #128	; 0x80
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	58d3      	ldr	r3, [r2, r3]
 80017e6:	2201      	movs	r2, #1
 80017e8:	4393      	bics	r3, r2
 80017ea:	0019      	movs	r1, r3
 80017ec:	697a      	ldr	r2, [r7, #20]
 80017ee:	2380      	movs	r3, #128	; 0x80
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 80017f4:	2300      	movs	r3, #0
 80017f6:	e007      	b.n	8001808 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fc:	2280      	movs	r2, #128	; 0x80
 80017fe:	02d2      	lsls	r2, r2, #11
 8001800:	431a      	orrs	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
  }
}
 8001808:	0018      	movs	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	b006      	add	sp, #24
 800180e:	bd80      	pop	{r7, pc}

08001810 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2220      	movs	r2, #32
 800181c:	5c9b      	ldrb	r3, [r3, r2]
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b01      	cmp	r3, #1
 8001822:	d12f      	bne.n	8001884 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2220      	movs	r2, #32
 8001828:	2102      	movs	r1, #2
 800182a:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2101      	movs	r1, #1
 8001838:	438a      	bics	r2, r1
 800183a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800183c:	f7ff f9b2 	bl	8000ba4 <HAL_GetTick>
 8001840:	0003      	movs	r3, r0
 8001842:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001844:	e013      	b.n	800186e <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001846:	f7ff f9ad 	bl	8000ba4 <HAL_GetTick>
 800184a:	0002      	movs	r2, r0
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b0a      	cmp	r3, #10
 8001852:	d90c      	bls.n	800186e <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001858:	2280      	movs	r2, #128	; 0x80
 800185a:	0292      	lsls	r2, r2, #10
 800185c:	431a      	orrs	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2220      	movs	r2, #32
 8001866:	2105      	movs	r1, #5
 8001868:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e012      	b.n	8001894 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	2201      	movs	r2, #1
 8001876:	4013      	ands	r3, r2
 8001878:	d1e5      	bne.n	8001846 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001880:	2300      	movs	r3, #0
 8001882:	e007      	b.n	8001894 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001888:	2280      	movs	r2, #128	; 0x80
 800188a:	0312      	lsls	r2, r2, #12
 800188c:	431a      	orrs	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
  }
}
 8001894:	0018      	movs	r0, r3
 8001896:	46bd      	mov	sp, r7
 8001898:	b004      	add	sp, #16
 800189a:	bd80      	pop	{r7, pc}

0800189c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b088      	sub	sp, #32
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
 80018a8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80018aa:	201f      	movs	r0, #31
 80018ac:	183b      	adds	r3, r7, r0
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	2120      	movs	r1, #32
 80018b2:	5c52      	ldrb	r2, [r2, r1]
 80018b4:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80018be:	183b      	adds	r3, r7, r0
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d004      	beq.n	80018d0 <HAL_CAN_AddTxMessage+0x34>
 80018c6:	183b      	adds	r3, r7, r0
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d000      	beq.n	80018d0 <HAL_CAN_AddTxMessage+0x34>
 80018ce:	e0ab      	b.n	8001a28 <HAL_CAN_AddTxMessage+0x18c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	2380      	movs	r3, #128	; 0x80
 80018d4:	04db      	lsls	r3, r3, #19
 80018d6:	4013      	ands	r3, r2
 80018d8:	d10a      	bne.n	80018f0 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	2380      	movs	r3, #128	; 0x80
 80018de:	051b      	lsls	r3, r3, #20
 80018e0:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80018e2:	d105      	bne.n	80018f0 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	2380      	movs	r3, #128	; 0x80
 80018e8:	055b      	lsls	r3, r3, #21
 80018ea:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80018ec:	d100      	bne.n	80018f0 <HAL_CAN_AddTxMessage+0x54>
 80018ee:	e092      	b.n	8001a16 <HAL_CAN_AddTxMessage+0x17a>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	0e1b      	lsrs	r3, r3, #24
 80018f4:	2203      	movs	r2, #3
 80018f6:	4013      	ands	r3, r2
 80018f8:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80018fa:	2201      	movs	r2, #1
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	409a      	lsls	r2, r3
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d10c      	bne.n	8001926 <HAL_CAN_AddTxMessage+0x8a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4311      	orrs	r1, r2
 800191c:	697a      	ldr	r2, [r7, #20]
 800191e:	3218      	adds	r2, #24
 8001920:	0112      	lsls	r2, r2, #4
 8001922:	50d1      	str	r1, [r2, r3]
 8001924:	e00f      	b.n	8001946 <HAL_CAN_AddTxMessage+0xaa>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001930:	431a      	orrs	r2, r3
 8001932:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 800193c:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	3218      	adds	r2, #24
 8001942:	0112      	lsls	r2, r2, #4
 8001944:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6819      	ldr	r1, [r3, #0]
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	691a      	ldr	r2, [r3, #16]
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	3318      	adds	r3, #24
 8001952:	011b      	lsls	r3, r3, #4
 8001954:	18cb      	adds	r3, r1, r3
 8001956:	3304      	adds	r3, #4
 8001958:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	7d1b      	ldrb	r3, [r3, #20]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d112      	bne.n	8001988 <HAL_CAN_AddTxMessage+0xec>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	3318      	adds	r3, #24
 800196a:	011b      	lsls	r3, r3, #4
 800196c:	18d3      	adds	r3, r2, r3
 800196e:	3304      	adds	r3, #4
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6819      	ldr	r1, [r3, #0]
 8001976:	2380      	movs	r3, #128	; 0x80
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	431a      	orrs	r2, r3
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	3318      	adds	r3, #24
 8001980:	011b      	lsls	r3, r3, #4
 8001982:	18cb      	adds	r3, r1, r3
 8001984:	3304      	adds	r3, #4
 8001986:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3307      	adds	r3, #7
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	061a      	lsls	r2, r3, #24
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3306      	adds	r3, #6
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	041b      	lsls	r3, r3, #16
 8001998:	431a      	orrs	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3305      	adds	r3, #5
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	021b      	lsls	r3, r3, #8
 80019a2:	431a      	orrs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3304      	adds	r3, #4
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	0019      	movs	r1, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6818      	ldr	r0, [r3, #0]
 80019b0:	430a      	orrs	r2, r1
 80019b2:	6979      	ldr	r1, [r7, #20]
 80019b4:	23c6      	movs	r3, #198	; 0xc6
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	0109      	lsls	r1, r1, #4
 80019ba:	1841      	adds	r1, r0, r1
 80019bc:	18cb      	adds	r3, r1, r3
 80019be:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3303      	adds	r3, #3
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	061a      	lsls	r2, r3, #24
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3302      	adds	r3, #2
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	041b      	lsls	r3, r3, #16
 80019d0:	431a      	orrs	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	3301      	adds	r3, #1
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	021b      	lsls	r3, r3, #8
 80019da:	431a      	orrs	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	0019      	movs	r1, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6818      	ldr	r0, [r3, #0]
 80019e6:	430a      	orrs	r2, r1
 80019e8:	6979      	ldr	r1, [r7, #20]
 80019ea:	23c4      	movs	r3, #196	; 0xc4
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	0109      	lsls	r1, r1, #4
 80019f0:	1841      	adds	r1, r0, r1
 80019f2:	18cb      	adds	r3, r1, r3
 80019f4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	697a      	ldr	r2, [r7, #20]
 80019fc:	3218      	adds	r2, #24
 80019fe:	0112      	lsls	r2, r2, #4
 8001a00:	58d2      	ldr	r2, [r2, r3]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2101      	movs	r1, #1
 8001a08:	4311      	orrs	r1, r2
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	3218      	adds	r2, #24
 8001a0e:	0112      	lsls	r2, r2, #4
 8001a10:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8001a12:	2300      	movs	r3, #0
 8001a14:	e010      	b.n	8001a38 <HAL_CAN_AddTxMessage+0x19c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1a:	2280      	movs	r2, #128	; 0x80
 8001a1c:	0392      	lsls	r2, r2, #14
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e007      	b.n	8001a38 <HAL_CAN_AddTxMessage+0x19c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2c:	2280      	movs	r2, #128	; 0x80
 8001a2e:	02d2      	lsls	r2, r2, #11
 8001a30:	431a      	orrs	r2, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
  }
}
 8001a38:	0018      	movs	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	b008      	add	sp, #32
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a4a:	200f      	movs	r0, #15
 8001a4c:	183b      	adds	r3, r7, r0
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	2120      	movs	r1, #32
 8001a52:	5c52      	ldrb	r2, [r2, r1]
 8001a54:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a56:	0002      	movs	r2, r0
 8001a58:	18bb      	adds	r3, r7, r2
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d003      	beq.n	8001a68 <HAL_CAN_ActivateNotification+0x28>
 8001a60:	18bb      	adds	r3, r7, r2
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d109      	bne.n	8001a7c <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6959      	ldr	r1, [r3, #20]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	430a      	orrs	r2, r1
 8001a76:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	e007      	b.n	8001a8c <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a80:	2280      	movs	r2, #128	; 0x80
 8001a82:	02d2      	lsls	r2, r2, #11
 8001a84:	431a      	orrs	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
  }
}
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	b004      	add	sp, #16
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001a9c:	46c0      	nop			; (mov r8, r8)
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	b002      	add	sp, #8
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001aac:	46c0      	nop			; (mov r8, r8)
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	b002      	add	sp, #8
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001abc:	46c0      	nop			; (mov r8, r8)
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	b002      	add	sp, #8
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001acc:	46c0      	nop			; (mov r8, r8)
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	b002      	add	sp, #8
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001adc:	46c0      	nop			; (mov r8, r8)
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	b002      	add	sp, #8
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001aec:	46c0      	nop			; (mov r8, r8)
 8001aee:	46bd      	mov	sp, r7
 8001af0:	b002      	add	sp, #8
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001afc:	46c0      	nop			; (mov r8, r8)
 8001afe:	46bd      	mov	sp, r7
 8001b00:	b002      	add	sp, #8
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001b0c:	46c0      	nop			; (mov r8, r8)
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	b002      	add	sp, #8
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001b1c:	46c0      	nop			; (mov r8, r8)
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	b002      	add	sp, #8
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001b2c:	46c0      	nop			; (mov r8, r8)
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	b002      	add	sp, #8
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001b3c:	46c0      	nop			; (mov r8, r8)
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	b002      	add	sp, #8
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001b4c:	46c0      	nop			; (mov r8, r8)
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	b002      	add	sp, #8
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001b5c:	46c0      	nop			; (mov r8, r8)
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	b002      	add	sp, #8
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	0002      	movs	r2, r0
 8001b6c:	1dfb      	adds	r3, r7, #7
 8001b6e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b70:	1dfb      	adds	r3, r7, #7
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b7f      	cmp	r3, #127	; 0x7f
 8001b76:	d809      	bhi.n	8001b8c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b78:	1dfb      	adds	r3, r7, #7
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	001a      	movs	r2, r3
 8001b7e:	231f      	movs	r3, #31
 8001b80:	401a      	ands	r2, r3
 8001b82:	4b04      	ldr	r3, [pc, #16]	; (8001b94 <__NVIC_EnableIRQ+0x30>)
 8001b84:	2101      	movs	r1, #1
 8001b86:	4091      	lsls	r1, r2
 8001b88:	000a      	movs	r2, r1
 8001b8a:	601a      	str	r2, [r3, #0]
  }
}
 8001b8c:	46c0      	nop			; (mov r8, r8)
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	b002      	add	sp, #8
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	e000e100 	.word	0xe000e100

08001b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b98:	b590      	push	{r4, r7, lr}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	0002      	movs	r2, r0
 8001ba0:	6039      	str	r1, [r7, #0]
 8001ba2:	1dfb      	adds	r3, r7, #7
 8001ba4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ba6:	1dfb      	adds	r3, r7, #7
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	2b7f      	cmp	r3, #127	; 0x7f
 8001bac:	d828      	bhi.n	8001c00 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bae:	4a2f      	ldr	r2, [pc, #188]	; (8001c6c <__NVIC_SetPriority+0xd4>)
 8001bb0:	1dfb      	adds	r3, r7, #7
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	b25b      	sxtb	r3, r3
 8001bb6:	089b      	lsrs	r3, r3, #2
 8001bb8:	33c0      	adds	r3, #192	; 0xc0
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	589b      	ldr	r3, [r3, r2]
 8001bbe:	1dfa      	adds	r2, r7, #7
 8001bc0:	7812      	ldrb	r2, [r2, #0]
 8001bc2:	0011      	movs	r1, r2
 8001bc4:	2203      	movs	r2, #3
 8001bc6:	400a      	ands	r2, r1
 8001bc8:	00d2      	lsls	r2, r2, #3
 8001bca:	21ff      	movs	r1, #255	; 0xff
 8001bcc:	4091      	lsls	r1, r2
 8001bce:	000a      	movs	r2, r1
 8001bd0:	43d2      	mvns	r2, r2
 8001bd2:	401a      	ands	r2, r3
 8001bd4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	019b      	lsls	r3, r3, #6
 8001bda:	22ff      	movs	r2, #255	; 0xff
 8001bdc:	401a      	ands	r2, r3
 8001bde:	1dfb      	adds	r3, r7, #7
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	0018      	movs	r0, r3
 8001be4:	2303      	movs	r3, #3
 8001be6:	4003      	ands	r3, r0
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bec:	481f      	ldr	r0, [pc, #124]	; (8001c6c <__NVIC_SetPriority+0xd4>)
 8001bee:	1dfb      	adds	r3, r7, #7
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	b25b      	sxtb	r3, r3
 8001bf4:	089b      	lsrs	r3, r3, #2
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	33c0      	adds	r3, #192	; 0xc0
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001bfe:	e031      	b.n	8001c64 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c00:	4a1b      	ldr	r2, [pc, #108]	; (8001c70 <__NVIC_SetPriority+0xd8>)
 8001c02:	1dfb      	adds	r3, r7, #7
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	0019      	movs	r1, r3
 8001c08:	230f      	movs	r3, #15
 8001c0a:	400b      	ands	r3, r1
 8001c0c:	3b08      	subs	r3, #8
 8001c0e:	089b      	lsrs	r3, r3, #2
 8001c10:	3306      	adds	r3, #6
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	18d3      	adds	r3, r2, r3
 8001c16:	3304      	adds	r3, #4
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	1dfa      	adds	r2, r7, #7
 8001c1c:	7812      	ldrb	r2, [r2, #0]
 8001c1e:	0011      	movs	r1, r2
 8001c20:	2203      	movs	r2, #3
 8001c22:	400a      	ands	r2, r1
 8001c24:	00d2      	lsls	r2, r2, #3
 8001c26:	21ff      	movs	r1, #255	; 0xff
 8001c28:	4091      	lsls	r1, r2
 8001c2a:	000a      	movs	r2, r1
 8001c2c:	43d2      	mvns	r2, r2
 8001c2e:	401a      	ands	r2, r3
 8001c30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	019b      	lsls	r3, r3, #6
 8001c36:	22ff      	movs	r2, #255	; 0xff
 8001c38:	401a      	ands	r2, r3
 8001c3a:	1dfb      	adds	r3, r7, #7
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	0018      	movs	r0, r3
 8001c40:	2303      	movs	r3, #3
 8001c42:	4003      	ands	r3, r0
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c48:	4809      	ldr	r0, [pc, #36]	; (8001c70 <__NVIC_SetPriority+0xd8>)
 8001c4a:	1dfb      	adds	r3, r7, #7
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	001c      	movs	r4, r3
 8001c50:	230f      	movs	r3, #15
 8001c52:	4023      	ands	r3, r4
 8001c54:	3b08      	subs	r3, #8
 8001c56:	089b      	lsrs	r3, r3, #2
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	3306      	adds	r3, #6
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	18c3      	adds	r3, r0, r3
 8001c60:	3304      	adds	r3, #4
 8001c62:	601a      	str	r2, [r3, #0]
}
 8001c64:	46c0      	nop			; (mov r8, r8)
 8001c66:	46bd      	mov	sp, r7
 8001c68:	b003      	add	sp, #12
 8001c6a:	bd90      	pop	{r4, r7, pc}
 8001c6c:	e000e100 	.word	0xe000e100
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	1e5a      	subs	r2, r3, #1
 8001c80:	2380      	movs	r3, #128	; 0x80
 8001c82:	045b      	lsls	r3, r3, #17
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d301      	bcc.n	8001c8c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e010      	b.n	8001cae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c8c:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <SysTick_Config+0x44>)
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	3a01      	subs	r2, #1
 8001c92:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c94:	2301      	movs	r3, #1
 8001c96:	425b      	negs	r3, r3
 8001c98:	2103      	movs	r1, #3
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	f7ff ff7c 	bl	8001b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca0:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <SysTick_Config+0x44>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ca6:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <SysTick_Config+0x44>)
 8001ca8:	2207      	movs	r2, #7
 8001caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	0018      	movs	r0, r3
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	b002      	add	sp, #8
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	46c0      	nop			; (mov r8, r8)
 8001cb8:	e000e010 	.word	0xe000e010

08001cbc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	607a      	str	r2, [r7, #4]
 8001cc6:	210f      	movs	r1, #15
 8001cc8:	187b      	adds	r3, r7, r1
 8001cca:	1c02      	adds	r2, r0, #0
 8001ccc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001cce:	68ba      	ldr	r2, [r7, #8]
 8001cd0:	187b      	adds	r3, r7, r1
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	b25b      	sxtb	r3, r3
 8001cd6:	0011      	movs	r1, r2
 8001cd8:	0018      	movs	r0, r3
 8001cda:	f7ff ff5d 	bl	8001b98 <__NVIC_SetPriority>
}
 8001cde:	46c0      	nop			; (mov r8, r8)
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	b004      	add	sp, #16
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	0002      	movs	r2, r0
 8001cee:	1dfb      	adds	r3, r7, #7
 8001cf0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cf2:	1dfb      	adds	r3, r7, #7
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	b25b      	sxtb	r3, r3
 8001cf8:	0018      	movs	r0, r3
 8001cfa:	f7ff ff33 	bl	8001b64 <__NVIC_EnableIRQ>
}
 8001cfe:	46c0      	nop			; (mov r8, r8)
 8001d00:	46bd      	mov	sp, r7
 8001d02:	b002      	add	sp, #8
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	0018      	movs	r0, r3
 8001d12:	f7ff ffaf 	bl	8001c74 <SysTick_Config>
 8001d16:	0003      	movs	r3, r0
}
 8001d18:	0018      	movs	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	b002      	add	sp, #8
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e036      	b.n	8001da4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2221      	movs	r2, #33	; 0x21
 8001d3a:	2102      	movs	r1, #2
 8001d3c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	4a18      	ldr	r2, [pc, #96]	; (8001dac <HAL_DMA_Init+0x8c>)
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001d56:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	69db      	ldr	r3, [r3, #28]
 8001d74:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	0018      	movs	r0, r3
 8001d88:	f000 f946 	bl	8002018 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2221      	movs	r2, #33	; 0x21
 8001d96:	2101      	movs	r1, #1
 8001d98:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2220      	movs	r2, #32
 8001d9e:	2100      	movs	r1, #0
 8001da0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	0018      	movs	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	b004      	add	sp, #16
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	ffffc00f 	.word	0xffffc00f

08001db0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
 8001dbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dbe:	2317      	movs	r3, #23
 8001dc0:	18fb      	adds	r3, r7, r3
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2220      	movs	r2, #32
 8001dca:	5c9b      	ldrb	r3, [r3, r2]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d101      	bne.n	8001dd4 <HAL_DMA_Start_IT+0x24>
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	e04f      	b.n	8001e74 <HAL_DMA_Start_IT+0xc4>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2220      	movs	r2, #32
 8001dd8:	2101      	movs	r1, #1
 8001dda:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2221      	movs	r2, #33	; 0x21
 8001de0:	5c9b      	ldrb	r3, [r3, r2]
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d13a      	bne.n	8001e5e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2221      	movs	r2, #33	; 0x21
 8001dec:	2102      	movs	r1, #2
 8001dee:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2101      	movs	r1, #1
 8001e02:	438a      	bics	r2, r1
 8001e04:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	68b9      	ldr	r1, [r7, #8]
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f000 f8d7 	bl	8001fc0 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d008      	beq.n	8001e2c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	210e      	movs	r1, #14
 8001e26:	430a      	orrs	r2, r1
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	e00f      	b.n	8001e4c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	210a      	movs	r1, #10
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2104      	movs	r1, #4
 8001e48:	438a      	bics	r2, r1
 8001e4a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2101      	movs	r1, #1
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	e007      	b.n	8001e6e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2220      	movs	r2, #32
 8001e62:	2100      	movs	r1, #0
 8001e64:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001e66:	2317      	movs	r3, #23
 8001e68:	18fb      	adds	r3, r7, r3
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001e6e:	2317      	movs	r3, #23
 8001e70:	18fb      	adds	r3, r7, r3
 8001e72:	781b      	ldrb	r3, [r3, #0]
}
 8001e74:	0018      	movs	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	b006      	add	sp, #24
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	2204      	movs	r2, #4
 8001e9a:	409a      	lsls	r2, r3
 8001e9c:	0013      	movs	r3, r2
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d024      	beq.n	8001eee <HAL_DMA_IRQHandler+0x72>
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	2204      	movs	r2, #4
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	d020      	beq.n	8001eee <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2220      	movs	r2, #32
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d107      	bne.n	8001ec8 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2104      	movs	r1, #4
 8001ec4:	438a      	bics	r2, r1
 8001ec6:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed0:	2104      	movs	r1, #4
 8001ed2:	4091      	lsls	r1, r2
 8001ed4:	000a      	movs	r2, r1
 8001ed6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d100      	bne.n	8001ee2 <HAL_DMA_IRQHandler+0x66>
 8001ee0:	e06a      	b.n	8001fb8 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	0010      	movs	r0, r2
 8001eea:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001eec:	e064      	b.n	8001fb8 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	0013      	movs	r3, r2
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	4013      	ands	r3, r2
 8001efc:	d02b      	beq.n	8001f56 <HAL_DMA_IRQHandler+0xda>
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	2202      	movs	r2, #2
 8001f02:	4013      	ands	r3, r2
 8001f04:	d027      	beq.n	8001f56 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2220      	movs	r2, #32
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d10b      	bne.n	8001f2a <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	210a      	movs	r1, #10
 8001f1e:	438a      	bics	r2, r1
 8001f20:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2221      	movs	r2, #33	; 0x21
 8001f26:	2101      	movs	r1, #1
 8001f28:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f32:	2102      	movs	r1, #2
 8001f34:	4091      	lsls	r1, r2
 8001f36:	000a      	movs	r2, r1
 8001f38:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2220      	movs	r2, #32
 8001f3e:	2100      	movs	r1, #0
 8001f40:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d036      	beq.n	8001fb8 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	0010      	movs	r0, r2
 8001f52:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001f54:	e030      	b.n	8001fb8 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	2208      	movs	r2, #8
 8001f5c:	409a      	lsls	r2, r3
 8001f5e:	0013      	movs	r3, r2
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	4013      	ands	r3, r2
 8001f64:	d028      	beq.n	8001fb8 <HAL_DMA_IRQHandler+0x13c>
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	2208      	movs	r2, #8
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d024      	beq.n	8001fb8 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	210e      	movs	r1, #14
 8001f7a:	438a      	bics	r2, r1
 8001f7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f86:	2101      	movs	r1, #1
 8001f88:	4091      	lsls	r1, r2
 8001f8a:	000a      	movs	r2, r1
 8001f8c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2221      	movs	r2, #33	; 0x21
 8001f98:	2101      	movs	r1, #1
 8001f9a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2220      	movs	r2, #32
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d005      	beq.n	8001fb8 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	0010      	movs	r0, r2
 8001fb4:	4798      	blx	r3
    }
  }
}
 8001fb6:	e7ff      	b.n	8001fb8 <HAL_DMA_IRQHandler+0x13c>
 8001fb8:	46c0      	nop			; (mov r8, r8)
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	b004      	add	sp, #16
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
 8001fcc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	4091      	lsls	r1, r2
 8001fda:	000a      	movs	r2, r1
 8001fdc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b10      	cmp	r3, #16
 8001fec:	d108      	bne.n	8002000 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001ffe:	e007      	b.n	8002010 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68ba      	ldr	r2, [r7, #8]
 8002006:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	60da      	str	r2, [r3, #12]
}
 8002010:	46c0      	nop			; (mov r8, r8)
 8002012:	46bd      	mov	sp, r7
 8002014:	b004      	add	sp, #16
 8002016:	bd80      	pop	{r7, pc}

08002018 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a08      	ldr	r2, [pc, #32]	; (8002048 <DMA_CalcBaseAndBitshift+0x30>)
 8002026:	4694      	mov	ip, r2
 8002028:	4463      	add	r3, ip
 800202a:	2114      	movs	r1, #20
 800202c:	0018      	movs	r0, r3
 800202e:	f7fe f86b 	bl	8000108 <__udivsi3>
 8002032:	0003      	movs	r3, r0
 8002034:	009a      	lsls	r2, r3, #2
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a03      	ldr	r2, [pc, #12]	; (800204c <DMA_CalcBaseAndBitshift+0x34>)
 800203e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002040:	46c0      	nop			; (mov r8, r8)
 8002042:	46bd      	mov	sp, r7
 8002044:	b002      	add	sp, #8
 8002046:	bd80      	pop	{r7, pc}
 8002048:	bffdfff8 	.word	0xbffdfff8
 800204c:	40020000 	.word	0x40020000

08002050 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800205e:	e149      	b.n	80022f4 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2101      	movs	r1, #1
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	4091      	lsls	r1, r2
 800206a:	000a      	movs	r2, r1
 800206c:	4013      	ands	r3, r2
 800206e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d100      	bne.n	8002078 <HAL_GPIO_Init+0x28>
 8002076:	e13a      	b.n	80022ee <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2203      	movs	r2, #3
 800207e:	4013      	ands	r3, r2
 8002080:	2b01      	cmp	r3, #1
 8002082:	d005      	beq.n	8002090 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2203      	movs	r2, #3
 800208a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800208c:	2b02      	cmp	r3, #2
 800208e:	d130      	bne.n	80020f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	2203      	movs	r2, #3
 800209c:	409a      	lsls	r2, r3
 800209e:	0013      	movs	r3, r2
 80020a0:	43da      	mvns	r2, r3
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	4013      	ands	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	68da      	ldr	r2, [r3, #12]
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	409a      	lsls	r2, r3
 80020b2:	0013      	movs	r3, r2
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020c6:	2201      	movs	r2, #1
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	409a      	lsls	r2, r3
 80020cc:	0013      	movs	r3, r2
 80020ce:	43da      	mvns	r2, r3
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	4013      	ands	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	091b      	lsrs	r3, r3, #4
 80020dc:	2201      	movs	r2, #1
 80020de:	401a      	ands	r2, r3
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	409a      	lsls	r2, r3
 80020e4:	0013      	movs	r3, r2
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2203      	movs	r2, #3
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b03      	cmp	r3, #3
 80020fc:	d017      	beq.n	800212e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	2203      	movs	r2, #3
 800210a:	409a      	lsls	r2, r3
 800210c:	0013      	movs	r3, r2
 800210e:	43da      	mvns	r2, r3
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	4013      	ands	r3, r2
 8002114:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	689a      	ldr	r2, [r3, #8]
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	409a      	lsls	r2, r3
 8002120:	0013      	movs	r3, r2
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	4313      	orrs	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	2203      	movs	r2, #3
 8002134:	4013      	ands	r3, r2
 8002136:	2b02      	cmp	r3, #2
 8002138:	d123      	bne.n	8002182 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	08da      	lsrs	r2, r3, #3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3208      	adds	r2, #8
 8002142:	0092      	lsls	r2, r2, #2
 8002144:	58d3      	ldr	r3, [r2, r3]
 8002146:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	2207      	movs	r2, #7
 800214c:	4013      	ands	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	220f      	movs	r2, #15
 8002152:	409a      	lsls	r2, r3
 8002154:	0013      	movs	r3, r2
 8002156:	43da      	mvns	r2, r3
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	4013      	ands	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	691a      	ldr	r2, [r3, #16]
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	2107      	movs	r1, #7
 8002166:	400b      	ands	r3, r1
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	409a      	lsls	r2, r3
 800216c:	0013      	movs	r3, r2
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	4313      	orrs	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	08da      	lsrs	r2, r3, #3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3208      	adds	r2, #8
 800217c:	0092      	lsls	r2, r2, #2
 800217e:	6939      	ldr	r1, [r7, #16]
 8002180:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	2203      	movs	r2, #3
 800218e:	409a      	lsls	r2, r3
 8002190:	0013      	movs	r3, r2
 8002192:	43da      	mvns	r2, r3
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	4013      	ands	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2203      	movs	r2, #3
 80021a0:	401a      	ands	r2, r3
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	409a      	lsls	r2, r3
 80021a8:	0013      	movs	r3, r2
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	23c0      	movs	r3, #192	; 0xc0
 80021bc:	029b      	lsls	r3, r3, #10
 80021be:	4013      	ands	r3, r2
 80021c0:	d100      	bne.n	80021c4 <HAL_GPIO_Init+0x174>
 80021c2:	e094      	b.n	80022ee <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c4:	4b51      	ldr	r3, [pc, #324]	; (800230c <HAL_GPIO_Init+0x2bc>)
 80021c6:	699a      	ldr	r2, [r3, #24]
 80021c8:	4b50      	ldr	r3, [pc, #320]	; (800230c <HAL_GPIO_Init+0x2bc>)
 80021ca:	2101      	movs	r1, #1
 80021cc:	430a      	orrs	r2, r1
 80021ce:	619a      	str	r2, [r3, #24]
 80021d0:	4b4e      	ldr	r3, [pc, #312]	; (800230c <HAL_GPIO_Init+0x2bc>)
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	2201      	movs	r2, #1
 80021d6:	4013      	ands	r3, r2
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021dc:	4a4c      	ldr	r2, [pc, #304]	; (8002310 <HAL_GPIO_Init+0x2c0>)
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	089b      	lsrs	r3, r3, #2
 80021e2:	3302      	adds	r3, #2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	589b      	ldr	r3, [r3, r2]
 80021e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	2203      	movs	r2, #3
 80021ee:	4013      	ands	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	220f      	movs	r2, #15
 80021f4:	409a      	lsls	r2, r3
 80021f6:	0013      	movs	r3, r2
 80021f8:	43da      	mvns	r2, r3
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4013      	ands	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	2390      	movs	r3, #144	; 0x90
 8002204:	05db      	lsls	r3, r3, #23
 8002206:	429a      	cmp	r2, r3
 8002208:	d00d      	beq.n	8002226 <HAL_GPIO_Init+0x1d6>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a41      	ldr	r2, [pc, #260]	; (8002314 <HAL_GPIO_Init+0x2c4>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d007      	beq.n	8002222 <HAL_GPIO_Init+0x1d2>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a40      	ldr	r2, [pc, #256]	; (8002318 <HAL_GPIO_Init+0x2c8>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d101      	bne.n	800221e <HAL_GPIO_Init+0x1ce>
 800221a:	2302      	movs	r3, #2
 800221c:	e004      	b.n	8002228 <HAL_GPIO_Init+0x1d8>
 800221e:	2305      	movs	r3, #5
 8002220:	e002      	b.n	8002228 <HAL_GPIO_Init+0x1d8>
 8002222:	2301      	movs	r3, #1
 8002224:	e000      	b.n	8002228 <HAL_GPIO_Init+0x1d8>
 8002226:	2300      	movs	r3, #0
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	2103      	movs	r1, #3
 800222c:	400a      	ands	r2, r1
 800222e:	0092      	lsls	r2, r2, #2
 8002230:	4093      	lsls	r3, r2
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	4313      	orrs	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002238:	4935      	ldr	r1, [pc, #212]	; (8002310 <HAL_GPIO_Init+0x2c0>)
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	089b      	lsrs	r3, r3, #2
 800223e:	3302      	adds	r3, #2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002246:	4b35      	ldr	r3, [pc, #212]	; (800231c <HAL_GPIO_Init+0x2cc>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	43da      	mvns	r2, r3
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	4013      	ands	r3, r2
 8002254:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	2380      	movs	r3, #128	; 0x80
 800225c:	035b      	lsls	r3, r3, #13
 800225e:	4013      	ands	r3, r2
 8002260:	d003      	beq.n	800226a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4313      	orrs	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800226a:	4b2c      	ldr	r3, [pc, #176]	; (800231c <HAL_GPIO_Init+0x2cc>)
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002270:	4b2a      	ldr	r3, [pc, #168]	; (800231c <HAL_GPIO_Init+0x2cc>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	43da      	mvns	r2, r3
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4013      	ands	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	2380      	movs	r3, #128	; 0x80
 8002286:	039b      	lsls	r3, r3, #14
 8002288:	4013      	ands	r3, r2
 800228a:	d003      	beq.n	8002294 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	4313      	orrs	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002294:	4b21      	ldr	r3, [pc, #132]	; (800231c <HAL_GPIO_Init+0x2cc>)
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800229a:	4b20      	ldr	r3, [pc, #128]	; (800231c <HAL_GPIO_Init+0x2cc>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	43da      	mvns	r2, r3
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	4013      	ands	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	2380      	movs	r3, #128	; 0x80
 80022b0:	029b      	lsls	r3, r3, #10
 80022b2:	4013      	ands	r3, r2
 80022b4:	d003      	beq.n	80022be <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80022be:	4b17      	ldr	r3, [pc, #92]	; (800231c <HAL_GPIO_Init+0x2cc>)
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80022c4:	4b15      	ldr	r3, [pc, #84]	; (800231c <HAL_GPIO_Init+0x2cc>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	43da      	mvns	r2, r3
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	4013      	ands	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	2380      	movs	r3, #128	; 0x80
 80022da:	025b      	lsls	r3, r3, #9
 80022dc:	4013      	ands	r3, r2
 80022de:	d003      	beq.n	80022e8 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80022e8:	4b0c      	ldr	r3, [pc, #48]	; (800231c <HAL_GPIO_Init+0x2cc>)
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	3301      	adds	r3, #1
 80022f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	40da      	lsrs	r2, r3
 80022fc:	1e13      	subs	r3, r2, #0
 80022fe:	d000      	beq.n	8002302 <HAL_GPIO_Init+0x2b2>
 8002300:	e6ae      	b.n	8002060 <HAL_GPIO_Init+0x10>
  } 
}
 8002302:	46c0      	nop			; (mov r8, r8)
 8002304:	46c0      	nop			; (mov r8, r8)
 8002306:	46bd      	mov	sp, r7
 8002308:	b006      	add	sp, #24
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40021000 	.word	0x40021000
 8002310:	40010000 	.word	0x40010000
 8002314:	48000400 	.word	0x48000400
 8002318:	48000800 	.word	0x48000800
 800231c:	40010400 	.word	0x40010400

08002320 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	0008      	movs	r0, r1
 800232a:	0011      	movs	r1, r2
 800232c:	1cbb      	adds	r3, r7, #2
 800232e:	1c02      	adds	r2, r0, #0
 8002330:	801a      	strh	r2, [r3, #0]
 8002332:	1c7b      	adds	r3, r7, #1
 8002334:	1c0a      	adds	r2, r1, #0
 8002336:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002338:	1c7b      	adds	r3, r7, #1
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d004      	beq.n	800234a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002340:	1cbb      	adds	r3, r7, #2
 8002342:	881a      	ldrh	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002348:	e003      	b.n	8002352 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800234a:	1cbb      	adds	r3, r7, #2
 800234c:	881a      	ldrh	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002352:	46c0      	nop			; (mov r8, r8)
 8002354:	46bd      	mov	sp, r7
 8002356:	b002      	add	sp, #8
 8002358:	bd80      	pop	{r7, pc}
	...

0800235c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b088      	sub	sp, #32
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d102      	bne.n	8002370 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	f000 fb76 	bl	8002a5c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2201      	movs	r2, #1
 8002376:	4013      	ands	r3, r2
 8002378:	d100      	bne.n	800237c <HAL_RCC_OscConfig+0x20>
 800237a:	e08e      	b.n	800249a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800237c:	4bc5      	ldr	r3, [pc, #788]	; (8002694 <HAL_RCC_OscConfig+0x338>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	220c      	movs	r2, #12
 8002382:	4013      	ands	r3, r2
 8002384:	2b04      	cmp	r3, #4
 8002386:	d00e      	beq.n	80023a6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002388:	4bc2      	ldr	r3, [pc, #776]	; (8002694 <HAL_RCC_OscConfig+0x338>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	220c      	movs	r2, #12
 800238e:	4013      	ands	r3, r2
 8002390:	2b08      	cmp	r3, #8
 8002392:	d117      	bne.n	80023c4 <HAL_RCC_OscConfig+0x68>
 8002394:	4bbf      	ldr	r3, [pc, #764]	; (8002694 <HAL_RCC_OscConfig+0x338>)
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	23c0      	movs	r3, #192	; 0xc0
 800239a:	025b      	lsls	r3, r3, #9
 800239c:	401a      	ands	r2, r3
 800239e:	2380      	movs	r3, #128	; 0x80
 80023a0:	025b      	lsls	r3, r3, #9
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d10e      	bne.n	80023c4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a6:	4bbb      	ldr	r3, [pc, #748]	; (8002694 <HAL_RCC_OscConfig+0x338>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	2380      	movs	r3, #128	; 0x80
 80023ac:	029b      	lsls	r3, r3, #10
 80023ae:	4013      	ands	r3, r2
 80023b0:	d100      	bne.n	80023b4 <HAL_RCC_OscConfig+0x58>
 80023b2:	e071      	b.n	8002498 <HAL_RCC_OscConfig+0x13c>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d000      	beq.n	80023be <HAL_RCC_OscConfig+0x62>
 80023bc:	e06c      	b.n	8002498 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	f000 fb4c 	bl	8002a5c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d107      	bne.n	80023dc <HAL_RCC_OscConfig+0x80>
 80023cc:	4bb1      	ldr	r3, [pc, #708]	; (8002694 <HAL_RCC_OscConfig+0x338>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	4bb0      	ldr	r3, [pc, #704]	; (8002694 <HAL_RCC_OscConfig+0x338>)
 80023d2:	2180      	movs	r1, #128	; 0x80
 80023d4:	0249      	lsls	r1, r1, #9
 80023d6:	430a      	orrs	r2, r1
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	e02f      	b.n	800243c <HAL_RCC_OscConfig+0xe0>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d10c      	bne.n	80023fe <HAL_RCC_OscConfig+0xa2>
 80023e4:	4bab      	ldr	r3, [pc, #684]	; (8002694 <HAL_RCC_OscConfig+0x338>)
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	4baa      	ldr	r3, [pc, #680]	; (8002694 <HAL_RCC_OscConfig+0x338>)
 80023ea:	49ab      	ldr	r1, [pc, #684]	; (8002698 <HAL_RCC_OscConfig+0x33c>)
 80023ec:	400a      	ands	r2, r1
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	4ba8      	ldr	r3, [pc, #672]	; (8002694 <HAL_RCC_OscConfig+0x338>)
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	4ba7      	ldr	r3, [pc, #668]	; (8002694 <HAL_RCC_OscConfig+0x338>)
 80023f6:	49a9      	ldr	r1, [pc, #676]	; (800269c <HAL_RCC_OscConfig+0x340>)
 80023f8:	400a      	ands	r2, r1
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	e01e      	b.n	800243c <HAL_RCC_OscConfig+0xe0>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b05      	cmp	r3, #5
 8002404:	d10e      	bne.n	8002424 <HAL_RCC_OscConfig+0xc8>
 8002406:	4ba3      	ldr	r3, [pc, #652]	; (8002694 <HAL_RCC_OscConfig+0x338>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	4ba2      	ldr	r3, [pc, #648]	; (8002694 <HAL_RCC_OscConfig+0x338>)
 800240c:	2180      	movs	r1, #128	; 0x80
 800240e:	02c9      	lsls	r1, r1, #11
 8002410:	430a      	orrs	r2, r1
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	4b9f      	ldr	r3, [pc, #636]	; (8002694 <HAL_RCC_OscConfig+0x338>)
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	4b9e      	ldr	r3, [pc, #632]	; (8002694 <HAL_RCC_OscConfig+0x338>)
 800241a:	2180      	movs	r1, #128	; 0x80
 800241c:	0249      	lsls	r1, r1, #9
 800241e:	430a      	orrs	r2, r1
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	e00b      	b.n	800243c <HAL_RCC_OscConfig+0xe0>
 8002424:	4b9b      	ldr	r3, [pc, #620]	; (8002694 <HAL_RCC_OscConfig+0x338>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	4b9a      	ldr	r3, [pc, #616]	; (8002694 <HAL_RCC_OscConfig+0x338>)
 800242a:	499b      	ldr	r1, [pc, #620]	; (8002698 <HAL_RCC_OscConfig+0x33c>)
 800242c:	400a      	ands	r2, r1
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	4b98      	ldr	r3, [pc, #608]	; (8002694 <HAL_RCC_OscConfig+0x338>)
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	4b97      	ldr	r3, [pc, #604]	; (8002694 <HAL_RCC_OscConfig+0x338>)
 8002436:	4999      	ldr	r1, [pc, #612]	; (800269c <HAL_RCC_OscConfig+0x340>)
 8002438:	400a      	ands	r2, r1
 800243a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d014      	beq.n	800246e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002444:	f7fe fbae 	bl	8000ba4 <HAL_GetTick>
 8002448:	0003      	movs	r3, r0
 800244a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800244e:	f7fe fba9 	bl	8000ba4 <HAL_GetTick>
 8002452:	0002      	movs	r2, r0
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b64      	cmp	r3, #100	; 0x64
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e2fd      	b.n	8002a5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002460:	4b8c      	ldr	r3, [pc, #560]	; (8002694 <HAL_RCC_OscConfig+0x338>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	2380      	movs	r3, #128	; 0x80
 8002466:	029b      	lsls	r3, r3, #10
 8002468:	4013      	ands	r3, r2
 800246a:	d0f0      	beq.n	800244e <HAL_RCC_OscConfig+0xf2>
 800246c:	e015      	b.n	800249a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246e:	f7fe fb99 	bl	8000ba4 <HAL_GetTick>
 8002472:	0003      	movs	r3, r0
 8002474:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002478:	f7fe fb94 	bl	8000ba4 <HAL_GetTick>
 800247c:	0002      	movs	r2, r0
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b64      	cmp	r3, #100	; 0x64
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e2e8      	b.n	8002a5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800248a:	4b82      	ldr	r3, [pc, #520]	; (8002694 <HAL_RCC_OscConfig+0x338>)
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	2380      	movs	r3, #128	; 0x80
 8002490:	029b      	lsls	r3, r3, #10
 8002492:	4013      	ands	r3, r2
 8002494:	d1f0      	bne.n	8002478 <HAL_RCC_OscConfig+0x11c>
 8002496:	e000      	b.n	800249a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002498:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2202      	movs	r2, #2
 80024a0:	4013      	ands	r3, r2
 80024a2:	d100      	bne.n	80024a6 <HAL_RCC_OscConfig+0x14a>
 80024a4:	e06c      	b.n	8002580 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80024a6:	4b7b      	ldr	r3, [pc, #492]	; (8002694 <HAL_RCC_OscConfig+0x338>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	220c      	movs	r2, #12
 80024ac:	4013      	ands	r3, r2
 80024ae:	d00e      	beq.n	80024ce <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80024b0:	4b78      	ldr	r3, [pc, #480]	; (8002694 <HAL_RCC_OscConfig+0x338>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	220c      	movs	r2, #12
 80024b6:	4013      	ands	r3, r2
 80024b8:	2b08      	cmp	r3, #8
 80024ba:	d11f      	bne.n	80024fc <HAL_RCC_OscConfig+0x1a0>
 80024bc:	4b75      	ldr	r3, [pc, #468]	; (8002694 <HAL_RCC_OscConfig+0x338>)
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	23c0      	movs	r3, #192	; 0xc0
 80024c2:	025b      	lsls	r3, r3, #9
 80024c4:	401a      	ands	r2, r3
 80024c6:	2380      	movs	r3, #128	; 0x80
 80024c8:	021b      	lsls	r3, r3, #8
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d116      	bne.n	80024fc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ce:	4b71      	ldr	r3, [pc, #452]	; (8002694 <HAL_RCC_OscConfig+0x338>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2202      	movs	r2, #2
 80024d4:	4013      	ands	r3, r2
 80024d6:	d005      	beq.n	80024e4 <HAL_RCC_OscConfig+0x188>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d001      	beq.n	80024e4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e2bb      	b.n	8002a5c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e4:	4b6b      	ldr	r3, [pc, #428]	; (8002694 <HAL_RCC_OscConfig+0x338>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	22f8      	movs	r2, #248	; 0xf8
 80024ea:	4393      	bics	r3, r2
 80024ec:	0019      	movs	r1, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	00da      	lsls	r2, r3, #3
 80024f4:	4b67      	ldr	r3, [pc, #412]	; (8002694 <HAL_RCC_OscConfig+0x338>)
 80024f6:	430a      	orrs	r2, r1
 80024f8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024fa:	e041      	b.n	8002580 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d024      	beq.n	800254e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002504:	4b63      	ldr	r3, [pc, #396]	; (8002694 <HAL_RCC_OscConfig+0x338>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4b62      	ldr	r3, [pc, #392]	; (8002694 <HAL_RCC_OscConfig+0x338>)
 800250a:	2101      	movs	r1, #1
 800250c:	430a      	orrs	r2, r1
 800250e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002510:	f7fe fb48 	bl	8000ba4 <HAL_GetTick>
 8002514:	0003      	movs	r3, r0
 8002516:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002518:	e008      	b.n	800252c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800251a:	f7fe fb43 	bl	8000ba4 <HAL_GetTick>
 800251e:	0002      	movs	r2, r0
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e297      	b.n	8002a5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800252c:	4b59      	ldr	r3, [pc, #356]	; (8002694 <HAL_RCC_OscConfig+0x338>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2202      	movs	r2, #2
 8002532:	4013      	ands	r3, r2
 8002534:	d0f1      	beq.n	800251a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002536:	4b57      	ldr	r3, [pc, #348]	; (8002694 <HAL_RCC_OscConfig+0x338>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	22f8      	movs	r2, #248	; 0xf8
 800253c:	4393      	bics	r3, r2
 800253e:	0019      	movs	r1, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	00da      	lsls	r2, r3, #3
 8002546:	4b53      	ldr	r3, [pc, #332]	; (8002694 <HAL_RCC_OscConfig+0x338>)
 8002548:	430a      	orrs	r2, r1
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	e018      	b.n	8002580 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800254e:	4b51      	ldr	r3, [pc, #324]	; (8002694 <HAL_RCC_OscConfig+0x338>)
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	4b50      	ldr	r3, [pc, #320]	; (8002694 <HAL_RCC_OscConfig+0x338>)
 8002554:	2101      	movs	r1, #1
 8002556:	438a      	bics	r2, r1
 8002558:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255a:	f7fe fb23 	bl	8000ba4 <HAL_GetTick>
 800255e:	0003      	movs	r3, r0
 8002560:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002564:	f7fe fb1e 	bl	8000ba4 <HAL_GetTick>
 8002568:	0002      	movs	r2, r0
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e272      	b.n	8002a5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002576:	4b47      	ldr	r3, [pc, #284]	; (8002694 <HAL_RCC_OscConfig+0x338>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2202      	movs	r2, #2
 800257c:	4013      	ands	r3, r2
 800257e:	d1f1      	bne.n	8002564 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2208      	movs	r2, #8
 8002586:	4013      	ands	r3, r2
 8002588:	d036      	beq.n	80025f8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d019      	beq.n	80025c6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002592:	4b40      	ldr	r3, [pc, #256]	; (8002694 <HAL_RCC_OscConfig+0x338>)
 8002594:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002596:	4b3f      	ldr	r3, [pc, #252]	; (8002694 <HAL_RCC_OscConfig+0x338>)
 8002598:	2101      	movs	r1, #1
 800259a:	430a      	orrs	r2, r1
 800259c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259e:	f7fe fb01 	bl	8000ba4 <HAL_GetTick>
 80025a2:	0003      	movs	r3, r0
 80025a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025a8:	f7fe fafc 	bl	8000ba4 <HAL_GetTick>
 80025ac:	0002      	movs	r2, r0
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e250      	b.n	8002a5c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ba:	4b36      	ldr	r3, [pc, #216]	; (8002694 <HAL_RCC_OscConfig+0x338>)
 80025bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025be:	2202      	movs	r2, #2
 80025c0:	4013      	ands	r3, r2
 80025c2:	d0f1      	beq.n	80025a8 <HAL_RCC_OscConfig+0x24c>
 80025c4:	e018      	b.n	80025f8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025c6:	4b33      	ldr	r3, [pc, #204]	; (8002694 <HAL_RCC_OscConfig+0x338>)
 80025c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025ca:	4b32      	ldr	r3, [pc, #200]	; (8002694 <HAL_RCC_OscConfig+0x338>)
 80025cc:	2101      	movs	r1, #1
 80025ce:	438a      	bics	r2, r1
 80025d0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d2:	f7fe fae7 	bl	8000ba4 <HAL_GetTick>
 80025d6:	0003      	movs	r3, r0
 80025d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025dc:	f7fe fae2 	bl	8000ba4 <HAL_GetTick>
 80025e0:	0002      	movs	r2, r0
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e236      	b.n	8002a5c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ee:	4b29      	ldr	r3, [pc, #164]	; (8002694 <HAL_RCC_OscConfig+0x338>)
 80025f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f2:	2202      	movs	r2, #2
 80025f4:	4013      	ands	r3, r2
 80025f6:	d1f1      	bne.n	80025dc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2204      	movs	r2, #4
 80025fe:	4013      	ands	r3, r2
 8002600:	d100      	bne.n	8002604 <HAL_RCC_OscConfig+0x2a8>
 8002602:	e0b5      	b.n	8002770 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002604:	201f      	movs	r0, #31
 8002606:	183b      	adds	r3, r7, r0
 8002608:	2200      	movs	r2, #0
 800260a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800260c:	4b21      	ldr	r3, [pc, #132]	; (8002694 <HAL_RCC_OscConfig+0x338>)
 800260e:	69da      	ldr	r2, [r3, #28]
 8002610:	2380      	movs	r3, #128	; 0x80
 8002612:	055b      	lsls	r3, r3, #21
 8002614:	4013      	ands	r3, r2
 8002616:	d110      	bne.n	800263a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002618:	4b1e      	ldr	r3, [pc, #120]	; (8002694 <HAL_RCC_OscConfig+0x338>)
 800261a:	69da      	ldr	r2, [r3, #28]
 800261c:	4b1d      	ldr	r3, [pc, #116]	; (8002694 <HAL_RCC_OscConfig+0x338>)
 800261e:	2180      	movs	r1, #128	; 0x80
 8002620:	0549      	lsls	r1, r1, #21
 8002622:	430a      	orrs	r2, r1
 8002624:	61da      	str	r2, [r3, #28]
 8002626:	4b1b      	ldr	r3, [pc, #108]	; (8002694 <HAL_RCC_OscConfig+0x338>)
 8002628:	69da      	ldr	r2, [r3, #28]
 800262a:	2380      	movs	r3, #128	; 0x80
 800262c:	055b      	lsls	r3, r3, #21
 800262e:	4013      	ands	r3, r2
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002634:	183b      	adds	r3, r7, r0
 8002636:	2201      	movs	r2, #1
 8002638:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800263a:	4b19      	ldr	r3, [pc, #100]	; (80026a0 <HAL_RCC_OscConfig+0x344>)
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	2380      	movs	r3, #128	; 0x80
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	4013      	ands	r3, r2
 8002644:	d11a      	bne.n	800267c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002646:	4b16      	ldr	r3, [pc, #88]	; (80026a0 <HAL_RCC_OscConfig+0x344>)
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <HAL_RCC_OscConfig+0x344>)
 800264c:	2180      	movs	r1, #128	; 0x80
 800264e:	0049      	lsls	r1, r1, #1
 8002650:	430a      	orrs	r2, r1
 8002652:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002654:	f7fe faa6 	bl	8000ba4 <HAL_GetTick>
 8002658:	0003      	movs	r3, r0
 800265a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800265e:	f7fe faa1 	bl	8000ba4 <HAL_GetTick>
 8002662:	0002      	movs	r2, r0
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b64      	cmp	r3, #100	; 0x64
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e1f5      	b.n	8002a5c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002670:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <HAL_RCC_OscConfig+0x344>)
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	2380      	movs	r3, #128	; 0x80
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	4013      	ands	r3, r2
 800267a:	d0f0      	beq.n	800265e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d10f      	bne.n	80026a4 <HAL_RCC_OscConfig+0x348>
 8002684:	4b03      	ldr	r3, [pc, #12]	; (8002694 <HAL_RCC_OscConfig+0x338>)
 8002686:	6a1a      	ldr	r2, [r3, #32]
 8002688:	4b02      	ldr	r3, [pc, #8]	; (8002694 <HAL_RCC_OscConfig+0x338>)
 800268a:	2101      	movs	r1, #1
 800268c:	430a      	orrs	r2, r1
 800268e:	621a      	str	r2, [r3, #32]
 8002690:	e036      	b.n	8002700 <HAL_RCC_OscConfig+0x3a4>
 8002692:	46c0      	nop			; (mov r8, r8)
 8002694:	40021000 	.word	0x40021000
 8002698:	fffeffff 	.word	0xfffeffff
 800269c:	fffbffff 	.word	0xfffbffff
 80026a0:	40007000 	.word	0x40007000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10c      	bne.n	80026c6 <HAL_RCC_OscConfig+0x36a>
 80026ac:	4bca      	ldr	r3, [pc, #808]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80026ae:	6a1a      	ldr	r2, [r3, #32]
 80026b0:	4bc9      	ldr	r3, [pc, #804]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80026b2:	2101      	movs	r1, #1
 80026b4:	438a      	bics	r2, r1
 80026b6:	621a      	str	r2, [r3, #32]
 80026b8:	4bc7      	ldr	r3, [pc, #796]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80026ba:	6a1a      	ldr	r2, [r3, #32]
 80026bc:	4bc6      	ldr	r3, [pc, #792]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80026be:	2104      	movs	r1, #4
 80026c0:	438a      	bics	r2, r1
 80026c2:	621a      	str	r2, [r3, #32]
 80026c4:	e01c      	b.n	8002700 <HAL_RCC_OscConfig+0x3a4>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	2b05      	cmp	r3, #5
 80026cc:	d10c      	bne.n	80026e8 <HAL_RCC_OscConfig+0x38c>
 80026ce:	4bc2      	ldr	r3, [pc, #776]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80026d0:	6a1a      	ldr	r2, [r3, #32]
 80026d2:	4bc1      	ldr	r3, [pc, #772]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80026d4:	2104      	movs	r1, #4
 80026d6:	430a      	orrs	r2, r1
 80026d8:	621a      	str	r2, [r3, #32]
 80026da:	4bbf      	ldr	r3, [pc, #764]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80026dc:	6a1a      	ldr	r2, [r3, #32]
 80026de:	4bbe      	ldr	r3, [pc, #760]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80026e0:	2101      	movs	r1, #1
 80026e2:	430a      	orrs	r2, r1
 80026e4:	621a      	str	r2, [r3, #32]
 80026e6:	e00b      	b.n	8002700 <HAL_RCC_OscConfig+0x3a4>
 80026e8:	4bbb      	ldr	r3, [pc, #748]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80026ea:	6a1a      	ldr	r2, [r3, #32]
 80026ec:	4bba      	ldr	r3, [pc, #744]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80026ee:	2101      	movs	r1, #1
 80026f0:	438a      	bics	r2, r1
 80026f2:	621a      	str	r2, [r3, #32]
 80026f4:	4bb8      	ldr	r3, [pc, #736]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80026f6:	6a1a      	ldr	r2, [r3, #32]
 80026f8:	4bb7      	ldr	r3, [pc, #732]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80026fa:	2104      	movs	r1, #4
 80026fc:	438a      	bics	r2, r1
 80026fe:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d014      	beq.n	8002732 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002708:	f7fe fa4c 	bl	8000ba4 <HAL_GetTick>
 800270c:	0003      	movs	r3, r0
 800270e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002710:	e009      	b.n	8002726 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002712:	f7fe fa47 	bl	8000ba4 <HAL_GetTick>
 8002716:	0002      	movs	r2, r0
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	4aaf      	ldr	r2, [pc, #700]	; (80029dc <HAL_RCC_OscConfig+0x680>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e19a      	b.n	8002a5c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002726:	4bac      	ldr	r3, [pc, #688]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	2202      	movs	r2, #2
 800272c:	4013      	ands	r3, r2
 800272e:	d0f0      	beq.n	8002712 <HAL_RCC_OscConfig+0x3b6>
 8002730:	e013      	b.n	800275a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002732:	f7fe fa37 	bl	8000ba4 <HAL_GetTick>
 8002736:	0003      	movs	r3, r0
 8002738:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800273a:	e009      	b.n	8002750 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800273c:	f7fe fa32 	bl	8000ba4 <HAL_GetTick>
 8002740:	0002      	movs	r2, r0
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	4aa5      	ldr	r2, [pc, #660]	; (80029dc <HAL_RCC_OscConfig+0x680>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e185      	b.n	8002a5c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002750:	4ba1      	ldr	r3, [pc, #644]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	2202      	movs	r2, #2
 8002756:	4013      	ands	r3, r2
 8002758:	d1f0      	bne.n	800273c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800275a:	231f      	movs	r3, #31
 800275c:	18fb      	adds	r3, r7, r3
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d105      	bne.n	8002770 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002764:	4b9c      	ldr	r3, [pc, #624]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 8002766:	69da      	ldr	r2, [r3, #28]
 8002768:	4b9b      	ldr	r3, [pc, #620]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 800276a:	499d      	ldr	r1, [pc, #628]	; (80029e0 <HAL_RCC_OscConfig+0x684>)
 800276c:	400a      	ands	r2, r1
 800276e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2210      	movs	r2, #16
 8002776:	4013      	ands	r3, r2
 8002778:	d063      	beq.n	8002842 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d12a      	bne.n	80027d8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002782:	4b95      	ldr	r3, [pc, #596]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 8002784:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002786:	4b94      	ldr	r3, [pc, #592]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 8002788:	2104      	movs	r1, #4
 800278a:	430a      	orrs	r2, r1
 800278c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800278e:	4b92      	ldr	r3, [pc, #584]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 8002790:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002792:	4b91      	ldr	r3, [pc, #580]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 8002794:	2101      	movs	r1, #1
 8002796:	430a      	orrs	r2, r1
 8002798:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800279a:	f7fe fa03 	bl	8000ba4 <HAL_GetTick>
 800279e:	0003      	movs	r3, r0
 80027a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80027a4:	f7fe f9fe 	bl	8000ba4 <HAL_GetTick>
 80027a8:	0002      	movs	r2, r0
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e152      	b.n	8002a5c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80027b6:	4b88      	ldr	r3, [pc, #544]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80027b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ba:	2202      	movs	r2, #2
 80027bc:	4013      	ands	r3, r2
 80027be:	d0f1      	beq.n	80027a4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80027c0:	4b85      	ldr	r3, [pc, #532]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80027c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c4:	22f8      	movs	r2, #248	; 0xf8
 80027c6:	4393      	bics	r3, r2
 80027c8:	0019      	movs	r1, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	00da      	lsls	r2, r3, #3
 80027d0:	4b81      	ldr	r3, [pc, #516]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80027d2:	430a      	orrs	r2, r1
 80027d4:	635a      	str	r2, [r3, #52]	; 0x34
 80027d6:	e034      	b.n	8002842 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	3305      	adds	r3, #5
 80027de:	d111      	bne.n	8002804 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80027e0:	4b7d      	ldr	r3, [pc, #500]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80027e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027e4:	4b7c      	ldr	r3, [pc, #496]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80027e6:	2104      	movs	r1, #4
 80027e8:	438a      	bics	r2, r1
 80027ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80027ec:	4b7a      	ldr	r3, [pc, #488]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80027ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f0:	22f8      	movs	r2, #248	; 0xf8
 80027f2:	4393      	bics	r3, r2
 80027f4:	0019      	movs	r1, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	00da      	lsls	r2, r3, #3
 80027fc:	4b76      	ldr	r3, [pc, #472]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80027fe:	430a      	orrs	r2, r1
 8002800:	635a      	str	r2, [r3, #52]	; 0x34
 8002802:	e01e      	b.n	8002842 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002804:	4b74      	ldr	r3, [pc, #464]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 8002806:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002808:	4b73      	ldr	r3, [pc, #460]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 800280a:	2104      	movs	r1, #4
 800280c:	430a      	orrs	r2, r1
 800280e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002810:	4b71      	ldr	r3, [pc, #452]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 8002812:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002814:	4b70      	ldr	r3, [pc, #448]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 8002816:	2101      	movs	r1, #1
 8002818:	438a      	bics	r2, r1
 800281a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800281c:	f7fe f9c2 	bl	8000ba4 <HAL_GetTick>
 8002820:	0003      	movs	r3, r0
 8002822:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002826:	f7fe f9bd 	bl	8000ba4 <HAL_GetTick>
 800282a:	0002      	movs	r2, r0
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e111      	b.n	8002a5c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002838:	4b67      	ldr	r3, [pc, #412]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 800283a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800283c:	2202      	movs	r2, #2
 800283e:	4013      	ands	r3, r2
 8002840:	d1f1      	bne.n	8002826 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2220      	movs	r2, #32
 8002848:	4013      	ands	r3, r2
 800284a:	d05c      	beq.n	8002906 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800284c:	4b62      	ldr	r3, [pc, #392]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	220c      	movs	r2, #12
 8002852:	4013      	ands	r3, r2
 8002854:	2b0c      	cmp	r3, #12
 8002856:	d00e      	beq.n	8002876 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002858:	4b5f      	ldr	r3, [pc, #380]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	220c      	movs	r2, #12
 800285e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002860:	2b08      	cmp	r3, #8
 8002862:	d114      	bne.n	800288e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002864:	4b5c      	ldr	r3, [pc, #368]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	23c0      	movs	r3, #192	; 0xc0
 800286a:	025b      	lsls	r3, r3, #9
 800286c:	401a      	ands	r2, r3
 800286e:	23c0      	movs	r3, #192	; 0xc0
 8002870:	025b      	lsls	r3, r3, #9
 8002872:	429a      	cmp	r2, r3
 8002874:	d10b      	bne.n	800288e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002876:	4b58      	ldr	r3, [pc, #352]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 8002878:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800287a:	2380      	movs	r3, #128	; 0x80
 800287c:	029b      	lsls	r3, r3, #10
 800287e:	4013      	ands	r3, r2
 8002880:	d040      	beq.n	8002904 <HAL_RCC_OscConfig+0x5a8>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d03c      	beq.n	8002904 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e0e6      	b.n	8002a5c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d01b      	beq.n	80028ce <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002896:	4b50      	ldr	r3, [pc, #320]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 8002898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800289a:	4b4f      	ldr	r3, [pc, #316]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 800289c:	2180      	movs	r1, #128	; 0x80
 800289e:	0249      	lsls	r1, r1, #9
 80028a0:	430a      	orrs	r2, r1
 80028a2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a4:	f7fe f97e 	bl	8000ba4 <HAL_GetTick>
 80028a8:	0003      	movs	r3, r0
 80028aa:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028ae:	f7fe f979 	bl	8000ba4 <HAL_GetTick>
 80028b2:	0002      	movs	r2, r0
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e0cd      	b.n	8002a5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80028c0:	4b45      	ldr	r3, [pc, #276]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80028c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028c4:	2380      	movs	r3, #128	; 0x80
 80028c6:	029b      	lsls	r3, r3, #10
 80028c8:	4013      	ands	r3, r2
 80028ca:	d0f0      	beq.n	80028ae <HAL_RCC_OscConfig+0x552>
 80028cc:	e01b      	b.n	8002906 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80028ce:	4b42      	ldr	r3, [pc, #264]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80028d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028d2:	4b41      	ldr	r3, [pc, #260]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80028d4:	4943      	ldr	r1, [pc, #268]	; (80029e4 <HAL_RCC_OscConfig+0x688>)
 80028d6:	400a      	ands	r2, r1
 80028d8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028da:	f7fe f963 	bl	8000ba4 <HAL_GetTick>
 80028de:	0003      	movs	r3, r0
 80028e0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028e4:	f7fe f95e 	bl	8000ba4 <HAL_GetTick>
 80028e8:	0002      	movs	r2, r0
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e0b2      	b.n	8002a5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80028f6:	4b38      	ldr	r3, [pc, #224]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80028f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028fa:	2380      	movs	r3, #128	; 0x80
 80028fc:	029b      	lsls	r3, r3, #10
 80028fe:	4013      	ands	r3, r2
 8002900:	d1f0      	bne.n	80028e4 <HAL_RCC_OscConfig+0x588>
 8002902:	e000      	b.n	8002906 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002904:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290a:	2b00      	cmp	r3, #0
 800290c:	d100      	bne.n	8002910 <HAL_RCC_OscConfig+0x5b4>
 800290e:	e0a4      	b.n	8002a5a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002910:	4b31      	ldr	r3, [pc, #196]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	220c      	movs	r2, #12
 8002916:	4013      	ands	r3, r2
 8002918:	2b08      	cmp	r3, #8
 800291a:	d100      	bne.n	800291e <HAL_RCC_OscConfig+0x5c2>
 800291c:	e078      	b.n	8002a10 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002922:	2b02      	cmp	r3, #2
 8002924:	d14c      	bne.n	80029c0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002926:	4b2c      	ldr	r3, [pc, #176]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	4b2b      	ldr	r3, [pc, #172]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 800292c:	492e      	ldr	r1, [pc, #184]	; (80029e8 <HAL_RCC_OscConfig+0x68c>)
 800292e:	400a      	ands	r2, r1
 8002930:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002932:	f7fe f937 	bl	8000ba4 <HAL_GetTick>
 8002936:	0003      	movs	r3, r0
 8002938:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800293c:	f7fe f932 	bl	8000ba4 <HAL_GetTick>
 8002940:	0002      	movs	r2, r0
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e086      	b.n	8002a5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800294e:	4b22      	ldr	r3, [pc, #136]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	2380      	movs	r3, #128	; 0x80
 8002954:	049b      	lsls	r3, r3, #18
 8002956:	4013      	ands	r3, r2
 8002958:	d1f0      	bne.n	800293c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800295a:	4b1f      	ldr	r3, [pc, #124]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 800295c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295e:	220f      	movs	r2, #15
 8002960:	4393      	bics	r3, r2
 8002962:	0019      	movs	r1, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002968:	4b1b      	ldr	r3, [pc, #108]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 800296a:	430a      	orrs	r2, r1
 800296c:	62da      	str	r2, [r3, #44]	; 0x2c
 800296e:	4b1a      	ldr	r3, [pc, #104]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	4a1e      	ldr	r2, [pc, #120]	; (80029ec <HAL_RCC_OscConfig+0x690>)
 8002974:	4013      	ands	r3, r2
 8002976:	0019      	movs	r1, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002980:	431a      	orrs	r2, r3
 8002982:	4b15      	ldr	r3, [pc, #84]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 8002984:	430a      	orrs	r2, r1
 8002986:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002988:	4b13      	ldr	r3, [pc, #76]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	4b12      	ldr	r3, [pc, #72]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 800298e:	2180      	movs	r1, #128	; 0x80
 8002990:	0449      	lsls	r1, r1, #17
 8002992:	430a      	orrs	r2, r1
 8002994:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002996:	f7fe f905 	bl	8000ba4 <HAL_GetTick>
 800299a:	0003      	movs	r3, r0
 800299c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a0:	f7fe f900 	bl	8000ba4 <HAL_GetTick>
 80029a4:	0002      	movs	r2, r0
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e054      	b.n	8002a5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029b2:	4b09      	ldr	r3, [pc, #36]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	2380      	movs	r3, #128	; 0x80
 80029b8:	049b      	lsls	r3, r3, #18
 80029ba:	4013      	ands	r3, r2
 80029bc:	d0f0      	beq.n	80029a0 <HAL_RCC_OscConfig+0x644>
 80029be:	e04c      	b.n	8002a5a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c0:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	4b04      	ldr	r3, [pc, #16]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80029c6:	4908      	ldr	r1, [pc, #32]	; (80029e8 <HAL_RCC_OscConfig+0x68c>)
 80029c8:	400a      	ands	r2, r1
 80029ca:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029cc:	f7fe f8ea 	bl	8000ba4 <HAL_GetTick>
 80029d0:	0003      	movs	r3, r0
 80029d2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029d4:	e015      	b.n	8002a02 <HAL_RCC_OscConfig+0x6a6>
 80029d6:	46c0      	nop			; (mov r8, r8)
 80029d8:	40021000 	.word	0x40021000
 80029dc:	00001388 	.word	0x00001388
 80029e0:	efffffff 	.word	0xefffffff
 80029e4:	fffeffff 	.word	0xfffeffff
 80029e8:	feffffff 	.word	0xfeffffff
 80029ec:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029f0:	f7fe f8d8 	bl	8000ba4 <HAL_GetTick>
 80029f4:	0002      	movs	r2, r0
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e02c      	b.n	8002a5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a02:	4b18      	ldr	r3, [pc, #96]	; (8002a64 <HAL_RCC_OscConfig+0x708>)
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	2380      	movs	r3, #128	; 0x80
 8002a08:	049b      	lsls	r3, r3, #18
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0x694>
 8002a0e:	e024      	b.n	8002a5a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d101      	bne.n	8002a1c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e01f      	b.n	8002a5c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002a1c:	4b11      	ldr	r3, [pc, #68]	; (8002a64 <HAL_RCC_OscConfig+0x708>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002a22:	4b10      	ldr	r3, [pc, #64]	; (8002a64 <HAL_RCC_OscConfig+0x708>)
 8002a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a26:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	23c0      	movs	r3, #192	; 0xc0
 8002a2c:	025b      	lsls	r3, r3, #9
 8002a2e:	401a      	ands	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d10e      	bne.n	8002a56 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	220f      	movs	r2, #15
 8002a3c:	401a      	ands	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d107      	bne.n	8002a56 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	23f0      	movs	r3, #240	; 0xf0
 8002a4a:	039b      	lsls	r3, r3, #14
 8002a4c:	401a      	ands	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d001      	beq.n	8002a5a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e000      	b.n	8002a5c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	b008      	add	sp, #32
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40021000 	.word	0x40021000

08002a68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e0bf      	b.n	8002bfc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a7c:	4b61      	ldr	r3, [pc, #388]	; (8002c04 <HAL_RCC_ClockConfig+0x19c>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2201      	movs	r2, #1
 8002a82:	4013      	ands	r3, r2
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d911      	bls.n	8002aae <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a8a:	4b5e      	ldr	r3, [pc, #376]	; (8002c04 <HAL_RCC_ClockConfig+0x19c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	4393      	bics	r3, r2
 8002a92:	0019      	movs	r1, r3
 8002a94:	4b5b      	ldr	r3, [pc, #364]	; (8002c04 <HAL_RCC_ClockConfig+0x19c>)
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a9c:	4b59      	ldr	r3, [pc, #356]	; (8002c04 <HAL_RCC_ClockConfig+0x19c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d001      	beq.n	8002aae <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e0a6      	b.n	8002bfc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	d015      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2204      	movs	r2, #4
 8002abe:	4013      	ands	r3, r2
 8002ac0:	d006      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002ac2:	4b51      	ldr	r3, [pc, #324]	; (8002c08 <HAL_RCC_ClockConfig+0x1a0>)
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	4b50      	ldr	r3, [pc, #320]	; (8002c08 <HAL_RCC_ClockConfig+0x1a0>)
 8002ac8:	21e0      	movs	r1, #224	; 0xe0
 8002aca:	00c9      	lsls	r1, r1, #3
 8002acc:	430a      	orrs	r2, r1
 8002ace:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ad0:	4b4d      	ldr	r3, [pc, #308]	; (8002c08 <HAL_RCC_ClockConfig+0x1a0>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	22f0      	movs	r2, #240	; 0xf0
 8002ad6:	4393      	bics	r3, r2
 8002ad8:	0019      	movs	r1, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	4b4a      	ldr	r3, [pc, #296]	; (8002c08 <HAL_RCC_ClockConfig+0x1a0>)
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	4013      	ands	r3, r2
 8002aec:	d04c      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d107      	bne.n	8002b06 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af6:	4b44      	ldr	r3, [pc, #272]	; (8002c08 <HAL_RCC_ClockConfig+0x1a0>)
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	2380      	movs	r3, #128	; 0x80
 8002afc:	029b      	lsls	r3, r3, #10
 8002afe:	4013      	ands	r3, r2
 8002b00:	d120      	bne.n	8002b44 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e07a      	b.n	8002bfc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d107      	bne.n	8002b1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b0e:	4b3e      	ldr	r3, [pc, #248]	; (8002c08 <HAL_RCC_ClockConfig+0x1a0>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	2380      	movs	r3, #128	; 0x80
 8002b14:	049b      	lsls	r3, r3, #18
 8002b16:	4013      	ands	r3, r2
 8002b18:	d114      	bne.n	8002b44 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e06e      	b.n	8002bfc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	2b03      	cmp	r3, #3
 8002b24:	d107      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002b26:	4b38      	ldr	r3, [pc, #224]	; (8002c08 <HAL_RCC_ClockConfig+0x1a0>)
 8002b28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b2a:	2380      	movs	r3, #128	; 0x80
 8002b2c:	029b      	lsls	r3, r3, #10
 8002b2e:	4013      	ands	r3, r2
 8002b30:	d108      	bne.n	8002b44 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e062      	b.n	8002bfc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b36:	4b34      	ldr	r3, [pc, #208]	; (8002c08 <HAL_RCC_ClockConfig+0x1a0>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	d101      	bne.n	8002b44 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e05b      	b.n	8002bfc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b44:	4b30      	ldr	r3, [pc, #192]	; (8002c08 <HAL_RCC_ClockConfig+0x1a0>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2203      	movs	r2, #3
 8002b4a:	4393      	bics	r3, r2
 8002b4c:	0019      	movs	r1, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685a      	ldr	r2, [r3, #4]
 8002b52:	4b2d      	ldr	r3, [pc, #180]	; (8002c08 <HAL_RCC_ClockConfig+0x1a0>)
 8002b54:	430a      	orrs	r2, r1
 8002b56:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b58:	f7fe f824 	bl	8000ba4 <HAL_GetTick>
 8002b5c:	0003      	movs	r3, r0
 8002b5e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b60:	e009      	b.n	8002b76 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b62:	f7fe f81f 	bl	8000ba4 <HAL_GetTick>
 8002b66:	0002      	movs	r2, r0
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	4a27      	ldr	r2, [pc, #156]	; (8002c0c <HAL_RCC_ClockConfig+0x1a4>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e042      	b.n	8002bfc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b76:	4b24      	ldr	r3, [pc, #144]	; (8002c08 <HAL_RCC_ClockConfig+0x1a0>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	220c      	movs	r2, #12
 8002b7c:	401a      	ands	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d1ec      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b88:	4b1e      	ldr	r3, [pc, #120]	; (8002c04 <HAL_RCC_ClockConfig+0x19c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	4013      	ands	r3, r2
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d211      	bcs.n	8002bba <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b96:	4b1b      	ldr	r3, [pc, #108]	; (8002c04 <HAL_RCC_ClockConfig+0x19c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	4393      	bics	r3, r2
 8002b9e:	0019      	movs	r1, r3
 8002ba0:	4b18      	ldr	r3, [pc, #96]	; (8002c04 <HAL_RCC_ClockConfig+0x19c>)
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba8:	4b16      	ldr	r3, [pc, #88]	; (8002c04 <HAL_RCC_ClockConfig+0x19c>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2201      	movs	r2, #1
 8002bae:	4013      	ands	r3, r2
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d001      	beq.n	8002bba <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e020      	b.n	8002bfc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2204      	movs	r2, #4
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	d009      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002bc4:	4b10      	ldr	r3, [pc, #64]	; (8002c08 <HAL_RCC_ClockConfig+0x1a0>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	4a11      	ldr	r2, [pc, #68]	; (8002c10 <HAL_RCC_ClockConfig+0x1a8>)
 8002bca:	4013      	ands	r3, r2
 8002bcc:	0019      	movs	r1, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	4b0d      	ldr	r3, [pc, #52]	; (8002c08 <HAL_RCC_ClockConfig+0x1a0>)
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002bd8:	f000 f820 	bl	8002c1c <HAL_RCC_GetSysClockFreq>
 8002bdc:	0001      	movs	r1, r0
 8002bde:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <HAL_RCC_ClockConfig+0x1a0>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	091b      	lsrs	r3, r3, #4
 8002be4:	220f      	movs	r2, #15
 8002be6:	4013      	ands	r3, r2
 8002be8:	4a0a      	ldr	r2, [pc, #40]	; (8002c14 <HAL_RCC_ClockConfig+0x1ac>)
 8002bea:	5cd3      	ldrb	r3, [r2, r3]
 8002bec:	000a      	movs	r2, r1
 8002bee:	40da      	lsrs	r2, r3
 8002bf0:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <HAL_RCC_ClockConfig+0x1b0>)
 8002bf2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002bf4:	2003      	movs	r0, #3
 8002bf6:	f7fd ff8f 	bl	8000b18 <HAL_InitTick>
  
  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	b004      	add	sp, #16
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40022000 	.word	0x40022000
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	00001388 	.word	0x00001388
 8002c10:	fffff8ff 	.word	0xfffff8ff
 8002c14:	08003224 	.word	0x08003224
 8002c18:	20000000 	.word	0x20000000

08002c1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c22:	2300      	movs	r3, #0
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	2300      	movs	r3, #0
 8002c28:	60bb      	str	r3, [r7, #8]
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	617b      	str	r3, [r7, #20]
 8002c2e:	2300      	movs	r3, #0
 8002c30:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002c36:	4b2d      	ldr	r3, [pc, #180]	; (8002cec <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	220c      	movs	r2, #12
 8002c40:	4013      	ands	r3, r2
 8002c42:	2b0c      	cmp	r3, #12
 8002c44:	d046      	beq.n	8002cd4 <HAL_RCC_GetSysClockFreq+0xb8>
 8002c46:	d848      	bhi.n	8002cda <HAL_RCC_GetSysClockFreq+0xbe>
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	d002      	beq.n	8002c52 <HAL_RCC_GetSysClockFreq+0x36>
 8002c4c:	2b08      	cmp	r3, #8
 8002c4e:	d003      	beq.n	8002c58 <HAL_RCC_GetSysClockFreq+0x3c>
 8002c50:	e043      	b.n	8002cda <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c52:	4b27      	ldr	r3, [pc, #156]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002c54:	613b      	str	r3, [r7, #16]
      break;
 8002c56:	e043      	b.n	8002ce0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	0c9b      	lsrs	r3, r3, #18
 8002c5c:	220f      	movs	r2, #15
 8002c5e:	4013      	ands	r3, r2
 8002c60:	4a24      	ldr	r2, [pc, #144]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002c62:	5cd3      	ldrb	r3, [r2, r3]
 8002c64:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002c66:	4b21      	ldr	r3, [pc, #132]	; (8002cec <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6a:	220f      	movs	r2, #15
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	4a22      	ldr	r2, [pc, #136]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0xdc>)
 8002c70:	5cd3      	ldrb	r3, [r2, r3]
 8002c72:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	23c0      	movs	r3, #192	; 0xc0
 8002c78:	025b      	lsls	r3, r3, #9
 8002c7a:	401a      	ands	r2, r3
 8002c7c:	2380      	movs	r3, #128	; 0x80
 8002c7e:	025b      	lsls	r3, r3, #9
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d109      	bne.n	8002c98 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c84:	68b9      	ldr	r1, [r7, #8]
 8002c86:	481a      	ldr	r0, [pc, #104]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002c88:	f7fd fa3e 	bl	8000108 <__udivsi3>
 8002c8c:	0003      	movs	r3, r0
 8002c8e:	001a      	movs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4353      	muls	r3, r2
 8002c94:	617b      	str	r3, [r7, #20]
 8002c96:	e01a      	b.n	8002cce <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	23c0      	movs	r3, #192	; 0xc0
 8002c9c:	025b      	lsls	r3, r3, #9
 8002c9e:	401a      	ands	r2, r3
 8002ca0:	23c0      	movs	r3, #192	; 0xc0
 8002ca2:	025b      	lsls	r3, r3, #9
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d109      	bne.n	8002cbc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ca8:	68b9      	ldr	r1, [r7, #8]
 8002caa:	4814      	ldr	r0, [pc, #80]	; (8002cfc <HAL_RCC_GetSysClockFreq+0xe0>)
 8002cac:	f7fd fa2c 	bl	8000108 <__udivsi3>
 8002cb0:	0003      	movs	r3, r0
 8002cb2:	001a      	movs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4353      	muls	r3, r2
 8002cb8:	617b      	str	r3, [r7, #20]
 8002cba:	e008      	b.n	8002cce <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002cbc:	68b9      	ldr	r1, [r7, #8]
 8002cbe:	4810      	ldr	r0, [pc, #64]	; (8002d00 <HAL_RCC_GetSysClockFreq+0xe4>)
 8002cc0:	f7fd fa22 	bl	8000108 <__udivsi3>
 8002cc4:	0003      	movs	r3, r0
 8002cc6:	001a      	movs	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4353      	muls	r3, r2
 8002ccc:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	613b      	str	r3, [r7, #16]
      break;
 8002cd2:	e005      	b.n	8002ce0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002cd4:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <HAL_RCC_GetSysClockFreq+0xe0>)
 8002cd6:	613b      	str	r3, [r7, #16]
      break;
 8002cd8:	e002      	b.n	8002ce0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cda:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <HAL_RCC_GetSysClockFreq+0xe4>)
 8002cdc:	613b      	str	r3, [r7, #16]
      break;
 8002cde:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002ce0:	693b      	ldr	r3, [r7, #16]
}
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	b006      	add	sp, #24
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	46c0      	nop			; (mov r8, r8)
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	00f42400 	.word	0x00f42400
 8002cf4:	08003234 	.word	0x08003234
 8002cf8:	08003244 	.word	0x08003244
 8002cfc:	02dc6c00 	.word	0x02dc6c00
 8002d00:	007a1200 	.word	0x007a1200

08002d04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e042      	b.n	8002d9c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	223d      	movs	r2, #61	; 0x3d
 8002d1a:	5c9b      	ldrb	r3, [r3, r2]
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d107      	bne.n	8002d32 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	223c      	movs	r2, #60	; 0x3c
 8002d26:	2100      	movs	r1, #0
 8002d28:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	f7fd fe3f 	bl	80009b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	223d      	movs	r2, #61	; 0x3d
 8002d36:	2102      	movs	r1, #2
 8002d38:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	3304      	adds	r3, #4
 8002d42:	0019      	movs	r1, r3
 8002d44:	0010      	movs	r0, r2
 8002d46:	f000 f9af 	bl	80030a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2246      	movs	r2, #70	; 0x46
 8002d4e:	2101      	movs	r1, #1
 8002d50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	223e      	movs	r2, #62	; 0x3e
 8002d56:	2101      	movs	r1, #1
 8002d58:	5499      	strb	r1, [r3, r2]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	223f      	movs	r2, #63	; 0x3f
 8002d5e:	2101      	movs	r1, #1
 8002d60:	5499      	strb	r1, [r3, r2]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2240      	movs	r2, #64	; 0x40
 8002d66:	2101      	movs	r1, #1
 8002d68:	5499      	strb	r1, [r3, r2]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2241      	movs	r2, #65	; 0x41
 8002d6e:	2101      	movs	r1, #1
 8002d70:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2242      	movs	r2, #66	; 0x42
 8002d76:	2101      	movs	r1, #1
 8002d78:	5499      	strb	r1, [r3, r2]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2243      	movs	r2, #67	; 0x43
 8002d7e:	2101      	movs	r1, #1
 8002d80:	5499      	strb	r1, [r3, r2]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2244      	movs	r2, #68	; 0x44
 8002d86:	2101      	movs	r1, #1
 8002d88:	5499      	strb	r1, [r3, r2]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2245      	movs	r2, #69	; 0x45
 8002d8e:	2101      	movs	r1, #1
 8002d90:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	223d      	movs	r2, #61	; 0x3d
 8002d96:	2101      	movs	r1, #1
 8002d98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	b002      	add	sp, #8
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	223d      	movs	r2, #61	; 0x3d
 8002db0:	5c9b      	ldrb	r3, [r3, r2]
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d001      	beq.n	8002dbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e036      	b.n	8002e2a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	223d      	movs	r2, #61	; 0x3d
 8002dc0:	2102      	movs	r1, #2
 8002dc2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68da      	ldr	r2, [r3, #12]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2101      	movs	r1, #1
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a16      	ldr	r2, [pc, #88]	; (8002e34 <HAL_TIM_Base_Start_IT+0x90>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d00a      	beq.n	8002df4 <HAL_TIM_Base_Start_IT+0x50>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	2380      	movs	r3, #128	; 0x80
 8002de4:	05db      	lsls	r3, r3, #23
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d004      	beq.n	8002df4 <HAL_TIM_Base_Start_IT+0x50>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a12      	ldr	r2, [pc, #72]	; (8002e38 <HAL_TIM_Base_Start_IT+0x94>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d111      	bne.n	8002e18 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	2207      	movs	r2, #7
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2b06      	cmp	r3, #6
 8002e04:	d010      	beq.n	8002e28 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2101      	movs	r1, #1
 8002e12:	430a      	orrs	r2, r1
 8002e14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e16:	e007      	b.n	8002e28 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2101      	movs	r1, #1
 8002e24:	430a      	orrs	r2, r1
 8002e26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	0018      	movs	r0, r3
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	b004      	add	sp, #16
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	46c0      	nop			; (mov r8, r8)
 8002e34:	40012c00 	.word	0x40012c00
 8002e38:	40000400 	.word	0x40000400

08002e3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d124      	bne.n	8002e9c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	2202      	movs	r2, #2
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d11d      	bne.n	8002e9c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2203      	movs	r2, #3
 8002e66:	4252      	negs	r2, r2
 8002e68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	2203      	movs	r2, #3
 8002e78:	4013      	ands	r3, r2
 8002e7a:	d004      	beq.n	8002e86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	0018      	movs	r0, r3
 8002e80:	f000 f8fa 	bl	8003078 <HAL_TIM_IC_CaptureCallback>
 8002e84:	e007      	b.n	8002e96 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	0018      	movs	r0, r3
 8002e8a:	f000 f8ed 	bl	8003068 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	0018      	movs	r0, r3
 8002e92:	f000 f8f9 	bl	8003088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	2204      	movs	r2, #4
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d125      	bne.n	8002ef6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	2204      	movs	r2, #4
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	2b04      	cmp	r3, #4
 8002eb6:	d11e      	bne.n	8002ef6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2205      	movs	r2, #5
 8002ebe:	4252      	negs	r2, r2
 8002ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	699a      	ldr	r2, [r3, #24]
 8002ece:	23c0      	movs	r3, #192	; 0xc0
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	d004      	beq.n	8002ee0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	0018      	movs	r0, r3
 8002eda:	f000 f8cd 	bl	8003078 <HAL_TIM_IC_CaptureCallback>
 8002ede:	e007      	b.n	8002ef0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	0018      	movs	r0, r3
 8002ee4:	f000 f8c0 	bl	8003068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	0018      	movs	r0, r3
 8002eec:	f000 f8cc 	bl	8003088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	2208      	movs	r2, #8
 8002efe:	4013      	ands	r3, r2
 8002f00:	2b08      	cmp	r3, #8
 8002f02:	d124      	bne.n	8002f4e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	2208      	movs	r2, #8
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	d11d      	bne.n	8002f4e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2209      	movs	r2, #9
 8002f18:	4252      	negs	r2, r2
 8002f1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2204      	movs	r2, #4
 8002f20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	2203      	movs	r2, #3
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	d004      	beq.n	8002f38 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	0018      	movs	r0, r3
 8002f32:	f000 f8a1 	bl	8003078 <HAL_TIM_IC_CaptureCallback>
 8002f36:	e007      	b.n	8002f48 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	0018      	movs	r0, r3
 8002f3c:	f000 f894 	bl	8003068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	0018      	movs	r0, r3
 8002f44:	f000 f8a0 	bl	8003088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	2210      	movs	r2, #16
 8002f56:	4013      	ands	r3, r2
 8002f58:	2b10      	cmp	r3, #16
 8002f5a:	d125      	bne.n	8002fa8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	2210      	movs	r2, #16
 8002f64:	4013      	ands	r3, r2
 8002f66:	2b10      	cmp	r3, #16
 8002f68:	d11e      	bne.n	8002fa8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2211      	movs	r2, #17
 8002f70:	4252      	negs	r2, r2
 8002f72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2208      	movs	r2, #8
 8002f78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	69da      	ldr	r2, [r3, #28]
 8002f80:	23c0      	movs	r3, #192	; 0xc0
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4013      	ands	r3, r2
 8002f86:	d004      	beq.n	8002f92 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	f000 f874 	bl	8003078 <HAL_TIM_IC_CaptureCallback>
 8002f90:	e007      	b.n	8002fa2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	0018      	movs	r0, r3
 8002f96:	f000 f867 	bl	8003068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	f000 f873 	bl	8003088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d10f      	bne.n	8002fd6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d108      	bne.n	8002fd6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2202      	movs	r2, #2
 8002fca:	4252      	negs	r2, r2
 8002fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	f7fd f9a5 	bl	8000320 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	2280      	movs	r2, #128	; 0x80
 8002fde:	4013      	ands	r3, r2
 8002fe0:	2b80      	cmp	r3, #128	; 0x80
 8002fe2:	d10f      	bne.n	8003004 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	2280      	movs	r2, #128	; 0x80
 8002fec:	4013      	ands	r3, r2
 8002fee:	2b80      	cmp	r3, #128	; 0x80
 8002ff0:	d108      	bne.n	8003004 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2281      	movs	r2, #129	; 0x81
 8002ff8:	4252      	negs	r2, r2
 8002ffa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	0018      	movs	r0, r3
 8003000:	f000 f8d0 	bl	80031a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	2240      	movs	r2, #64	; 0x40
 800300c:	4013      	ands	r3, r2
 800300e:	2b40      	cmp	r3, #64	; 0x40
 8003010:	d10f      	bne.n	8003032 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	2240      	movs	r2, #64	; 0x40
 800301a:	4013      	ands	r3, r2
 800301c:	2b40      	cmp	r3, #64	; 0x40
 800301e:	d108      	bne.n	8003032 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2241      	movs	r2, #65	; 0x41
 8003026:	4252      	negs	r2, r2
 8003028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	0018      	movs	r0, r3
 800302e:	f000 f833 	bl	8003098 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	2220      	movs	r2, #32
 800303a:	4013      	ands	r3, r2
 800303c:	2b20      	cmp	r3, #32
 800303e:	d10f      	bne.n	8003060 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	2220      	movs	r2, #32
 8003048:	4013      	ands	r3, r2
 800304a:	2b20      	cmp	r3, #32
 800304c:	d108      	bne.n	8003060 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2221      	movs	r2, #33	; 0x21
 8003054:	4252      	negs	r2, r2
 8003056:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	0018      	movs	r0, r3
 800305c:	f000 f89a 	bl	8003194 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003060:	46c0      	nop			; (mov r8, r8)
 8003062:	46bd      	mov	sp, r7
 8003064:	b002      	add	sp, #8
 8003066:	bd80      	pop	{r7, pc}

08003068 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003070:	46c0      	nop			; (mov r8, r8)
 8003072:	46bd      	mov	sp, r7
 8003074:	b002      	add	sp, #8
 8003076:	bd80      	pop	{r7, pc}

08003078 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003080:	46c0      	nop			; (mov r8, r8)
 8003082:	46bd      	mov	sp, r7
 8003084:	b002      	add	sp, #8
 8003086:	bd80      	pop	{r7, pc}

08003088 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003090:	46c0      	nop			; (mov r8, r8)
 8003092:	46bd      	mov	sp, r7
 8003094:	b002      	add	sp, #8
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030a0:	46c0      	nop			; (mov r8, r8)
 80030a2:	46bd      	mov	sp, r7
 80030a4:	b002      	add	sp, #8
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a30      	ldr	r2, [pc, #192]	; (800317c <TIM_Base_SetConfig+0xd4>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d008      	beq.n	80030d2 <TIM_Base_SetConfig+0x2a>
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	2380      	movs	r3, #128	; 0x80
 80030c4:	05db      	lsls	r3, r3, #23
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d003      	beq.n	80030d2 <TIM_Base_SetConfig+0x2a>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a2c      	ldr	r2, [pc, #176]	; (8003180 <TIM_Base_SetConfig+0xd8>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d108      	bne.n	80030e4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2270      	movs	r2, #112	; 0x70
 80030d6:	4393      	bics	r3, r2
 80030d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a25      	ldr	r2, [pc, #148]	; (800317c <TIM_Base_SetConfig+0xd4>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d014      	beq.n	8003116 <TIM_Base_SetConfig+0x6e>
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	2380      	movs	r3, #128	; 0x80
 80030f0:	05db      	lsls	r3, r3, #23
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d00f      	beq.n	8003116 <TIM_Base_SetConfig+0x6e>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a21      	ldr	r2, [pc, #132]	; (8003180 <TIM_Base_SetConfig+0xd8>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d00b      	beq.n	8003116 <TIM_Base_SetConfig+0x6e>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a20      	ldr	r2, [pc, #128]	; (8003184 <TIM_Base_SetConfig+0xdc>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d007      	beq.n	8003116 <TIM_Base_SetConfig+0x6e>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a1f      	ldr	r2, [pc, #124]	; (8003188 <TIM_Base_SetConfig+0xe0>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d003      	beq.n	8003116 <TIM_Base_SetConfig+0x6e>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a1e      	ldr	r2, [pc, #120]	; (800318c <TIM_Base_SetConfig+0xe4>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d108      	bne.n	8003128 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	4a1d      	ldr	r2, [pc, #116]	; (8003190 <TIM_Base_SetConfig+0xe8>)
 800311a:	4013      	ands	r3, r2
 800311c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	4313      	orrs	r3, r2
 8003126:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2280      	movs	r2, #128	; 0x80
 800312c:	4393      	bics	r3, r2
 800312e:	001a      	movs	r2, r3
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	4313      	orrs	r3, r2
 8003136:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	689a      	ldr	r2, [r3, #8]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a0a      	ldr	r2, [pc, #40]	; (800317c <TIM_Base_SetConfig+0xd4>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d007      	beq.n	8003166 <TIM_Base_SetConfig+0xbe>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a0b      	ldr	r2, [pc, #44]	; (8003188 <TIM_Base_SetConfig+0xe0>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d003      	beq.n	8003166 <TIM_Base_SetConfig+0xbe>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a0a      	ldr	r2, [pc, #40]	; (800318c <TIM_Base_SetConfig+0xe4>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d103      	bne.n	800316e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	691a      	ldr	r2, [r3, #16]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	615a      	str	r2, [r3, #20]
}
 8003174:	46c0      	nop			; (mov r8, r8)
 8003176:	46bd      	mov	sp, r7
 8003178:	b004      	add	sp, #16
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40012c00 	.word	0x40012c00
 8003180:	40000400 	.word	0x40000400
 8003184:	40002000 	.word	0x40002000
 8003188:	40014400 	.word	0x40014400
 800318c:	40014800 	.word	0x40014800
 8003190:	fffffcff 	.word	0xfffffcff

08003194 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800319c:	46c0      	nop			; (mov r8, r8)
 800319e:	46bd      	mov	sp, r7
 80031a0:	b002      	add	sp, #8
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031ac:	46c0      	nop			; (mov r8, r8)
 80031ae:	46bd      	mov	sp, r7
 80031b0:	b002      	add	sp, #8
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <memset>:
 80031b4:	0003      	movs	r3, r0
 80031b6:	1882      	adds	r2, r0, r2
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d100      	bne.n	80031be <memset+0xa>
 80031bc:	4770      	bx	lr
 80031be:	7019      	strb	r1, [r3, #0]
 80031c0:	3301      	adds	r3, #1
 80031c2:	e7f9      	b.n	80031b8 <memset+0x4>

080031c4 <__libc_init_array>:
 80031c4:	b570      	push	{r4, r5, r6, lr}
 80031c6:	2600      	movs	r6, #0
 80031c8:	4c0c      	ldr	r4, [pc, #48]	; (80031fc <__libc_init_array+0x38>)
 80031ca:	4d0d      	ldr	r5, [pc, #52]	; (8003200 <__libc_init_array+0x3c>)
 80031cc:	1b64      	subs	r4, r4, r5
 80031ce:	10a4      	asrs	r4, r4, #2
 80031d0:	42a6      	cmp	r6, r4
 80031d2:	d109      	bne.n	80031e8 <__libc_init_array+0x24>
 80031d4:	2600      	movs	r6, #0
 80031d6:	f000 f819 	bl	800320c <_init>
 80031da:	4c0a      	ldr	r4, [pc, #40]	; (8003204 <__libc_init_array+0x40>)
 80031dc:	4d0a      	ldr	r5, [pc, #40]	; (8003208 <__libc_init_array+0x44>)
 80031de:	1b64      	subs	r4, r4, r5
 80031e0:	10a4      	asrs	r4, r4, #2
 80031e2:	42a6      	cmp	r6, r4
 80031e4:	d105      	bne.n	80031f2 <__libc_init_array+0x2e>
 80031e6:	bd70      	pop	{r4, r5, r6, pc}
 80031e8:	00b3      	lsls	r3, r6, #2
 80031ea:	58eb      	ldr	r3, [r5, r3]
 80031ec:	4798      	blx	r3
 80031ee:	3601      	adds	r6, #1
 80031f0:	e7ee      	b.n	80031d0 <__libc_init_array+0xc>
 80031f2:	00b3      	lsls	r3, r6, #2
 80031f4:	58eb      	ldr	r3, [r5, r3]
 80031f6:	4798      	blx	r3
 80031f8:	3601      	adds	r6, #1
 80031fa:	e7f2      	b.n	80031e2 <__libc_init_array+0x1e>
 80031fc:	08003254 	.word	0x08003254
 8003200:	08003254 	.word	0x08003254
 8003204:	08003258 	.word	0x08003258
 8003208:	08003254 	.word	0x08003254

0800320c <_init>:
 800320c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800320e:	46c0      	nop			; (mov r8, r8)
 8003210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003212:	bc08      	pop	{r3}
 8003214:	469e      	mov	lr, r3
 8003216:	4770      	bx	lr

08003218 <_fini>:
 8003218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800321a:	46c0      	nop			; (mov r8, r8)
 800321c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800321e:	bc08      	pop	{r3}
 8003220:	469e      	mov	lr, r3
 8003222:	4770      	bx	lr

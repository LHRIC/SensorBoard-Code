
SensorBoard-Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a78  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08004b38  08004b38  00005b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c88  08004c88  00006068  2**0
                  CONTENTS
  4 .ARM          00000000  08004c88  08004c88  00006068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c88  08004c88  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c88  08004c88  00005c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c8c  08004c8c  00005c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004c90  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  20000068  08004cf8  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003c4  08004cf8  000063c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e0e3  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002482  00000000  00000000  00014173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  000165f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b82  00000000  00000000  000174d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5ec  00000000  00000000  00018052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001149d  00000000  00000000  0003263e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095ae0  00000000  00000000  00043adb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d95bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c9c  00000000  00000000  000d9600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000dd29c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004b20 	.word	0x08004b20

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08004b20 	.word	0x08004b20

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <BNO085_DecodeSensorEvent>:
 * @return sensor report_id from enum SH2_SensorReportID
 * @param uint8_t *data, of length 8
 * @param SH2_SensorEvent *event
 */
enum SH2_SensorReportID BNO085_DecodeSensorEvent(uint8_t *data, SH2_SensorEvent *event)
{
 8000234:	b5b0      	push	{r4, r5, r7, lr}
 8000236:	b086      	sub	sp, #24
 8000238:	af02      	add	r7, sp, #8
 800023a:	6078      	str	r0, [r7, #4]
 800023c:	6039      	str	r1, [r7, #0]
  uint8_t reportID = event->report_id;
 800023e:	210f      	movs	r1, #15
 8000240:	187b      	adds	r3, r7, r1
 8000242:	683a      	ldr	r2, [r7, #0]
 8000244:	7a52      	ldrb	r2, [r2, #9]
 8000246:	701a      	strb	r2, [r3, #0]

  switch (reportID)
 8000248:	187b      	adds	r3, r7, r1
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	2b05      	cmp	r3, #5
 800024e:	d100      	bne.n	8000252 <BNO085_DecodeSensorEvent+0x1e>
 8000250:	e14f      	b.n	80004f2 <BNO085_DecodeSensorEvent+0x2be>
 8000252:	dd00      	ble.n	8000256 <BNO085_DecodeSensorEvent+0x22>
 8000254:	e1de      	b.n	8000614 <BNO085_DecodeSensorEvent+0x3e0>
 8000256:	2b03      	cmp	r3, #3
 8000258:	d100      	bne.n	800025c <BNO085_DecodeSensorEvent+0x28>
 800025a:	e0de      	b.n	800041a <BNO085_DecodeSensorEvent+0x1e6>
 800025c:	dd00      	ble.n	8000260 <BNO085_DecodeSensorEvent+0x2c>
 800025e:	e1d9      	b.n	8000614 <BNO085_DecodeSensorEvent+0x3e0>
 8000260:	2b01      	cmp	r3, #1
 8000262:	d002      	beq.n	800026a <BNO085_DecodeSensorEvent+0x36>
 8000264:	2b02      	cmp	r3, #2
 8000266:	d06c      	beq.n	8000342 <BNO085_DecodeSensorEvent+0x10e>
#ifdef DEBUG
    printf("Rotation Vector: i = %d, j = %d, k = %d, real = %d\n", event->data.rotation_vector.i, event->data.rotation_vector.j, event->data.rotation_vector.k, event->data.rotation_vector.real);
#endif
    break;
  default:
    break;
 8000268:	e1d4      	b.n	8000614 <BNO085_DecodeSensorEvent+0x3e0>
    data[0] = event->data.accelerometer.x & 0xFF;
 800026a:	683b      	ldr	r3, [r7, #0]
 800026c:	7b5a      	ldrb	r2, [r3, #13]
 800026e:	7b9b      	ldrb	r3, [r3, #14]
 8000270:	021b      	lsls	r3, r3, #8
 8000272:	4313      	orrs	r3, r2
 8000274:	041b      	lsls	r3, r3, #16
 8000276:	141b      	asrs	r3, r3, #16
 8000278:	b21b      	sxth	r3, r3
 800027a:	b2da      	uxtb	r2, r3
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	701a      	strb	r2, [r3, #0]
    data[1] = (event->data.accelerometer.x >> 8) & 0xFF;
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	7b5a      	ldrb	r2, [r3, #13]
 8000284:	7b9b      	ldrb	r3, [r3, #14]
 8000286:	021b      	lsls	r3, r3, #8
 8000288:	4313      	orrs	r3, r2
 800028a:	041b      	lsls	r3, r3, #16
 800028c:	141b      	asrs	r3, r3, #16
 800028e:	b21b      	sxth	r3, r3
 8000290:	121b      	asrs	r3, r3, #8
 8000292:	b21a      	sxth	r2, r3
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	3301      	adds	r3, #1
 8000298:	b2d2      	uxtb	r2, r2
 800029a:	701a      	strb	r2, [r3, #0]
    data[2] = event->data.accelerometer.y & 0xFF;
 800029c:	683b      	ldr	r3, [r7, #0]
 800029e:	7bda      	ldrb	r2, [r3, #15]
 80002a0:	7c1b      	ldrb	r3, [r3, #16]
 80002a2:	021b      	lsls	r3, r3, #8
 80002a4:	4313      	orrs	r3, r2
 80002a6:	041b      	lsls	r3, r3, #16
 80002a8:	141b      	asrs	r3, r3, #16
 80002aa:	b21a      	sxth	r2, r3
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	3302      	adds	r3, #2
 80002b0:	b2d2      	uxtb	r2, r2
 80002b2:	701a      	strb	r2, [r3, #0]
    data[3] = (event->data.accelerometer.y >> 8) & 0xFF;
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	7bda      	ldrb	r2, [r3, #15]
 80002b8:	7c1b      	ldrb	r3, [r3, #16]
 80002ba:	021b      	lsls	r3, r3, #8
 80002bc:	4313      	orrs	r3, r2
 80002be:	041b      	lsls	r3, r3, #16
 80002c0:	141b      	asrs	r3, r3, #16
 80002c2:	b21b      	sxth	r3, r3
 80002c4:	121b      	asrs	r3, r3, #8
 80002c6:	b21a      	sxth	r2, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	3303      	adds	r3, #3
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	701a      	strb	r2, [r3, #0]
    data[4] = event->data.accelerometer.z & 0xFF;
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	7c5a      	ldrb	r2, [r3, #17]
 80002d4:	7c9b      	ldrb	r3, [r3, #18]
 80002d6:	021b      	lsls	r3, r3, #8
 80002d8:	4313      	orrs	r3, r2
 80002da:	041b      	lsls	r3, r3, #16
 80002dc:	141b      	asrs	r3, r3, #16
 80002de:	b21a      	sxth	r2, r3
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	3304      	adds	r3, #4
 80002e4:	b2d2      	uxtb	r2, r2
 80002e6:	701a      	strb	r2, [r3, #0]
    data[5] = (event->data.accelerometer.z >> 8) & 0xFF;
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	7c5a      	ldrb	r2, [r3, #17]
 80002ec:	7c9b      	ldrb	r3, [r3, #18]
 80002ee:	021b      	lsls	r3, r3, #8
 80002f0:	4313      	orrs	r3, r2
 80002f2:	041b      	lsls	r3, r3, #16
 80002f4:	141b      	asrs	r3, r3, #16
 80002f6:	b21b      	sxth	r3, r3
 80002f8:	121b      	asrs	r3, r3, #8
 80002fa:	b21a      	sxth	r2, r3
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	3305      	adds	r3, #5
 8000300:	b2d2      	uxtb	r2, r2
 8000302:	701a      	strb	r2, [r3, #0]
    printf("Accelerometer: x = %d, y = %d, z = %d\n", event->data.accelerometer.x, event->data.accelerometer.y, event->data.accelerometer.z);
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	7b5a      	ldrb	r2, [r3, #13]
 8000308:	7b9b      	ldrb	r3, [r3, #14]
 800030a:	021b      	lsls	r3, r3, #8
 800030c:	4313      	orrs	r3, r2
 800030e:	041b      	lsls	r3, r3, #16
 8000310:	141b      	asrs	r3, r3, #16
 8000312:	b21b      	sxth	r3, r3
 8000314:	0019      	movs	r1, r3
 8000316:	683b      	ldr	r3, [r7, #0]
 8000318:	7bda      	ldrb	r2, [r3, #15]
 800031a:	7c1b      	ldrb	r3, [r3, #16]
 800031c:	021b      	lsls	r3, r3, #8
 800031e:	4313      	orrs	r3, r2
 8000320:	041b      	lsls	r3, r3, #16
 8000322:	141b      	asrs	r3, r3, #16
 8000324:	b21b      	sxth	r3, r3
 8000326:	001c      	movs	r4, r3
 8000328:	683b      	ldr	r3, [r7, #0]
 800032a:	7c5a      	ldrb	r2, [r3, #17]
 800032c:	7c9b      	ldrb	r3, [r3, #18]
 800032e:	021b      	lsls	r3, r3, #8
 8000330:	4313      	orrs	r3, r2
 8000332:	041b      	lsls	r3, r3, #16
 8000334:	141b      	asrs	r3, r3, #16
 8000336:	b21b      	sxth	r3, r3
 8000338:	48ba      	ldr	r0, [pc, #744]	@ (8000624 <BNO085_DecodeSensorEvent+0x3f0>)
 800033a:	0022      	movs	r2, r4
 800033c:	f003 fd52 	bl	8003de4 <iprintf>
    break;
 8000340:	e169      	b.n	8000616 <BNO085_DecodeSensorEvent+0x3e2>
    data[0] = event->data.gyroscope_calibrated.x & 0xFF;
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	7b5a      	ldrb	r2, [r3, #13]
 8000346:	7b9b      	ldrb	r3, [r3, #14]
 8000348:	021b      	lsls	r3, r3, #8
 800034a:	4313      	orrs	r3, r2
 800034c:	041b      	lsls	r3, r3, #16
 800034e:	141b      	asrs	r3, r3, #16
 8000350:	b21b      	sxth	r3, r3
 8000352:	b2da      	uxtb	r2, r3
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	701a      	strb	r2, [r3, #0]
    data[1] = (event->data.gyroscope_calibrated.x >> 8) & 0xFF;
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	7b5a      	ldrb	r2, [r3, #13]
 800035c:	7b9b      	ldrb	r3, [r3, #14]
 800035e:	021b      	lsls	r3, r3, #8
 8000360:	4313      	orrs	r3, r2
 8000362:	041b      	lsls	r3, r3, #16
 8000364:	141b      	asrs	r3, r3, #16
 8000366:	b21b      	sxth	r3, r3
 8000368:	121b      	asrs	r3, r3, #8
 800036a:	b21a      	sxth	r2, r3
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	3301      	adds	r3, #1
 8000370:	b2d2      	uxtb	r2, r2
 8000372:	701a      	strb	r2, [r3, #0]
    data[2] = event->data.gyroscope_calibrated.y & 0xFF;
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	7bda      	ldrb	r2, [r3, #15]
 8000378:	7c1b      	ldrb	r3, [r3, #16]
 800037a:	021b      	lsls	r3, r3, #8
 800037c:	4313      	orrs	r3, r2
 800037e:	041b      	lsls	r3, r3, #16
 8000380:	141b      	asrs	r3, r3, #16
 8000382:	b21a      	sxth	r2, r3
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	3302      	adds	r3, #2
 8000388:	b2d2      	uxtb	r2, r2
 800038a:	701a      	strb	r2, [r3, #0]
    data[3] = (event->data.gyroscope_calibrated.y >> 8) & 0xFF;
 800038c:	683b      	ldr	r3, [r7, #0]
 800038e:	7bda      	ldrb	r2, [r3, #15]
 8000390:	7c1b      	ldrb	r3, [r3, #16]
 8000392:	021b      	lsls	r3, r3, #8
 8000394:	4313      	orrs	r3, r2
 8000396:	041b      	lsls	r3, r3, #16
 8000398:	141b      	asrs	r3, r3, #16
 800039a:	b21b      	sxth	r3, r3
 800039c:	121b      	asrs	r3, r3, #8
 800039e:	b21a      	sxth	r2, r3
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	3303      	adds	r3, #3
 80003a4:	b2d2      	uxtb	r2, r2
 80003a6:	701a      	strb	r2, [r3, #0]
    data[4] = event->data.gyroscope_calibrated.z & 0xFF;
 80003a8:	683b      	ldr	r3, [r7, #0]
 80003aa:	7c5a      	ldrb	r2, [r3, #17]
 80003ac:	7c9b      	ldrb	r3, [r3, #18]
 80003ae:	021b      	lsls	r3, r3, #8
 80003b0:	4313      	orrs	r3, r2
 80003b2:	041b      	lsls	r3, r3, #16
 80003b4:	141b      	asrs	r3, r3, #16
 80003b6:	b21a      	sxth	r2, r3
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	3304      	adds	r3, #4
 80003bc:	b2d2      	uxtb	r2, r2
 80003be:	701a      	strb	r2, [r3, #0]
    data[5] = (event->data.gyroscope_calibrated.z >> 8) & 0xFF;
 80003c0:	683b      	ldr	r3, [r7, #0]
 80003c2:	7c5a      	ldrb	r2, [r3, #17]
 80003c4:	7c9b      	ldrb	r3, [r3, #18]
 80003c6:	021b      	lsls	r3, r3, #8
 80003c8:	4313      	orrs	r3, r2
 80003ca:	041b      	lsls	r3, r3, #16
 80003cc:	141b      	asrs	r3, r3, #16
 80003ce:	b21b      	sxth	r3, r3
 80003d0:	121b      	asrs	r3, r3, #8
 80003d2:	b21a      	sxth	r2, r3
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	3305      	adds	r3, #5
 80003d8:	b2d2      	uxtb	r2, r2
 80003da:	701a      	strb	r2, [r3, #0]
    printf("Gyroscope Calibrated: x = %d, y = %d, z = %d\n", event->data.gyroscope_calibrated.x, event->data.gyroscope_calibrated.y, event->data.gyroscope_calibrated.z);
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	7b5a      	ldrb	r2, [r3, #13]
 80003e0:	7b9b      	ldrb	r3, [r3, #14]
 80003e2:	021b      	lsls	r3, r3, #8
 80003e4:	4313      	orrs	r3, r2
 80003e6:	041b      	lsls	r3, r3, #16
 80003e8:	141b      	asrs	r3, r3, #16
 80003ea:	b21b      	sxth	r3, r3
 80003ec:	0019      	movs	r1, r3
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	7bda      	ldrb	r2, [r3, #15]
 80003f2:	7c1b      	ldrb	r3, [r3, #16]
 80003f4:	021b      	lsls	r3, r3, #8
 80003f6:	4313      	orrs	r3, r2
 80003f8:	041b      	lsls	r3, r3, #16
 80003fa:	141b      	asrs	r3, r3, #16
 80003fc:	b21b      	sxth	r3, r3
 80003fe:	001c      	movs	r4, r3
 8000400:	683b      	ldr	r3, [r7, #0]
 8000402:	7c5a      	ldrb	r2, [r3, #17]
 8000404:	7c9b      	ldrb	r3, [r3, #18]
 8000406:	021b      	lsls	r3, r3, #8
 8000408:	4313      	orrs	r3, r2
 800040a:	041b      	lsls	r3, r3, #16
 800040c:	141b      	asrs	r3, r3, #16
 800040e:	b21b      	sxth	r3, r3
 8000410:	4885      	ldr	r0, [pc, #532]	@ (8000628 <BNO085_DecodeSensorEvent+0x3f4>)
 8000412:	0022      	movs	r2, r4
 8000414:	f003 fce6 	bl	8003de4 <iprintf>
    break;
 8000418:	e0fd      	b.n	8000616 <BNO085_DecodeSensorEvent+0x3e2>
    data[0] = event->data.magnetometer_calibrated.x & 0xFF;
 800041a:	683b      	ldr	r3, [r7, #0]
 800041c:	7b5a      	ldrb	r2, [r3, #13]
 800041e:	7b9b      	ldrb	r3, [r3, #14]
 8000420:	021b      	lsls	r3, r3, #8
 8000422:	4313      	orrs	r3, r2
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	141b      	asrs	r3, r3, #16
 8000428:	b21b      	sxth	r3, r3
 800042a:	b2da      	uxtb	r2, r3
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	701a      	strb	r2, [r3, #0]
    data[1] = (event->data.magnetometer_calibrated.x >> 8) & 0xFF;
 8000430:	683b      	ldr	r3, [r7, #0]
 8000432:	7b5a      	ldrb	r2, [r3, #13]
 8000434:	7b9b      	ldrb	r3, [r3, #14]
 8000436:	021b      	lsls	r3, r3, #8
 8000438:	4313      	orrs	r3, r2
 800043a:	041b      	lsls	r3, r3, #16
 800043c:	141b      	asrs	r3, r3, #16
 800043e:	b21b      	sxth	r3, r3
 8000440:	121b      	asrs	r3, r3, #8
 8000442:	b21a      	sxth	r2, r3
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	3301      	adds	r3, #1
 8000448:	b2d2      	uxtb	r2, r2
 800044a:	701a      	strb	r2, [r3, #0]
    data[2] = event->data.magnetometer_calibrated.y & 0xFF;
 800044c:	683b      	ldr	r3, [r7, #0]
 800044e:	7bda      	ldrb	r2, [r3, #15]
 8000450:	7c1b      	ldrb	r3, [r3, #16]
 8000452:	021b      	lsls	r3, r3, #8
 8000454:	4313      	orrs	r3, r2
 8000456:	041b      	lsls	r3, r3, #16
 8000458:	141b      	asrs	r3, r3, #16
 800045a:	b21a      	sxth	r2, r3
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	3302      	adds	r3, #2
 8000460:	b2d2      	uxtb	r2, r2
 8000462:	701a      	strb	r2, [r3, #0]
    data[3] = (event->data.magnetometer_calibrated.y >> 8) & 0xFF;
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	7bda      	ldrb	r2, [r3, #15]
 8000468:	7c1b      	ldrb	r3, [r3, #16]
 800046a:	021b      	lsls	r3, r3, #8
 800046c:	4313      	orrs	r3, r2
 800046e:	041b      	lsls	r3, r3, #16
 8000470:	141b      	asrs	r3, r3, #16
 8000472:	b21b      	sxth	r3, r3
 8000474:	121b      	asrs	r3, r3, #8
 8000476:	b21a      	sxth	r2, r3
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	3303      	adds	r3, #3
 800047c:	b2d2      	uxtb	r2, r2
 800047e:	701a      	strb	r2, [r3, #0]
    data[4] = event->data.magnetometer_calibrated.z & 0xFF;
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	7c5a      	ldrb	r2, [r3, #17]
 8000484:	7c9b      	ldrb	r3, [r3, #18]
 8000486:	021b      	lsls	r3, r3, #8
 8000488:	4313      	orrs	r3, r2
 800048a:	041b      	lsls	r3, r3, #16
 800048c:	141b      	asrs	r3, r3, #16
 800048e:	b21a      	sxth	r2, r3
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	3304      	adds	r3, #4
 8000494:	b2d2      	uxtb	r2, r2
 8000496:	701a      	strb	r2, [r3, #0]
    data[5] = (event->data.magnetometer_calibrated.z >> 8) & 0xFF;
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	7c5a      	ldrb	r2, [r3, #17]
 800049c:	7c9b      	ldrb	r3, [r3, #18]
 800049e:	021b      	lsls	r3, r3, #8
 80004a0:	4313      	orrs	r3, r2
 80004a2:	041b      	lsls	r3, r3, #16
 80004a4:	141b      	asrs	r3, r3, #16
 80004a6:	b21b      	sxth	r3, r3
 80004a8:	121b      	asrs	r3, r3, #8
 80004aa:	b21a      	sxth	r2, r3
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	3305      	adds	r3, #5
 80004b0:	b2d2      	uxtb	r2, r2
 80004b2:	701a      	strb	r2, [r3, #0]
    printf("Magnetometer Calibrated: x = %d, y = %d, z = %d\n", event->data.magnetometer_calibrated.x, event->data.magnetometer_calibrated.y, event->data.magnetometer_calibrated.z);
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	7b5a      	ldrb	r2, [r3, #13]
 80004b8:	7b9b      	ldrb	r3, [r3, #14]
 80004ba:	021b      	lsls	r3, r3, #8
 80004bc:	4313      	orrs	r3, r2
 80004be:	041b      	lsls	r3, r3, #16
 80004c0:	141b      	asrs	r3, r3, #16
 80004c2:	b21b      	sxth	r3, r3
 80004c4:	0019      	movs	r1, r3
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	7bda      	ldrb	r2, [r3, #15]
 80004ca:	7c1b      	ldrb	r3, [r3, #16]
 80004cc:	021b      	lsls	r3, r3, #8
 80004ce:	4313      	orrs	r3, r2
 80004d0:	041b      	lsls	r3, r3, #16
 80004d2:	141b      	asrs	r3, r3, #16
 80004d4:	b21b      	sxth	r3, r3
 80004d6:	001c      	movs	r4, r3
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	7c5a      	ldrb	r2, [r3, #17]
 80004dc:	7c9b      	ldrb	r3, [r3, #18]
 80004de:	021b      	lsls	r3, r3, #8
 80004e0:	4313      	orrs	r3, r2
 80004e2:	041b      	lsls	r3, r3, #16
 80004e4:	141b      	asrs	r3, r3, #16
 80004e6:	b21b      	sxth	r3, r3
 80004e8:	4850      	ldr	r0, [pc, #320]	@ (800062c <BNO085_DecodeSensorEvent+0x3f8>)
 80004ea:	0022      	movs	r2, r4
 80004ec:	f003 fc7a 	bl	8003de4 <iprintf>
    break;
 80004f0:	e091      	b.n	8000616 <BNO085_DecodeSensorEvent+0x3e2>
    data[0] = event->data.rotation_vector.i & 0xFF;
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	7b5a      	ldrb	r2, [r3, #13]
 80004f6:	7b9b      	ldrb	r3, [r3, #14]
 80004f8:	021b      	lsls	r3, r3, #8
 80004fa:	4313      	orrs	r3, r2
 80004fc:	041b      	lsls	r3, r3, #16
 80004fe:	141b      	asrs	r3, r3, #16
 8000500:	b21b      	sxth	r3, r3
 8000502:	b2da      	uxtb	r2, r3
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	701a      	strb	r2, [r3, #0]
    data[1] = (event->data.rotation_vector.i >> 8) & 0xFF;
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	7b5a      	ldrb	r2, [r3, #13]
 800050c:	7b9b      	ldrb	r3, [r3, #14]
 800050e:	021b      	lsls	r3, r3, #8
 8000510:	4313      	orrs	r3, r2
 8000512:	041b      	lsls	r3, r3, #16
 8000514:	141b      	asrs	r3, r3, #16
 8000516:	b21b      	sxth	r3, r3
 8000518:	121b      	asrs	r3, r3, #8
 800051a:	b21a      	sxth	r2, r3
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	3301      	adds	r3, #1
 8000520:	b2d2      	uxtb	r2, r2
 8000522:	701a      	strb	r2, [r3, #0]
    data[2] = event->data.rotation_vector.j & 0xFF;
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	7bda      	ldrb	r2, [r3, #15]
 8000528:	7c1b      	ldrb	r3, [r3, #16]
 800052a:	021b      	lsls	r3, r3, #8
 800052c:	4313      	orrs	r3, r2
 800052e:	041b      	lsls	r3, r3, #16
 8000530:	141b      	asrs	r3, r3, #16
 8000532:	b21a      	sxth	r2, r3
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	3302      	adds	r3, #2
 8000538:	b2d2      	uxtb	r2, r2
 800053a:	701a      	strb	r2, [r3, #0]
    data[3] = (event->data.rotation_vector.j >> 8) & 0xFF;
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	7bda      	ldrb	r2, [r3, #15]
 8000540:	7c1b      	ldrb	r3, [r3, #16]
 8000542:	021b      	lsls	r3, r3, #8
 8000544:	4313      	orrs	r3, r2
 8000546:	041b      	lsls	r3, r3, #16
 8000548:	141b      	asrs	r3, r3, #16
 800054a:	b21b      	sxth	r3, r3
 800054c:	121b      	asrs	r3, r3, #8
 800054e:	b21a      	sxth	r2, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	3303      	adds	r3, #3
 8000554:	b2d2      	uxtb	r2, r2
 8000556:	701a      	strb	r2, [r3, #0]
    data[4] = event->data.rotation_vector.k & 0xFF;
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	7c5a      	ldrb	r2, [r3, #17]
 800055c:	7c9b      	ldrb	r3, [r3, #18]
 800055e:	021b      	lsls	r3, r3, #8
 8000560:	4313      	orrs	r3, r2
 8000562:	041b      	lsls	r3, r3, #16
 8000564:	141b      	asrs	r3, r3, #16
 8000566:	b21a      	sxth	r2, r3
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	3304      	adds	r3, #4
 800056c:	b2d2      	uxtb	r2, r2
 800056e:	701a      	strb	r2, [r3, #0]
    data[5] = (event->data.rotation_vector.k >> 8) & 0xFF;
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	7c5a      	ldrb	r2, [r3, #17]
 8000574:	7c9b      	ldrb	r3, [r3, #18]
 8000576:	021b      	lsls	r3, r3, #8
 8000578:	4313      	orrs	r3, r2
 800057a:	041b      	lsls	r3, r3, #16
 800057c:	141b      	asrs	r3, r3, #16
 800057e:	b21b      	sxth	r3, r3
 8000580:	121b      	asrs	r3, r3, #8
 8000582:	b21a      	sxth	r2, r3
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	3305      	adds	r3, #5
 8000588:	b2d2      	uxtb	r2, r2
 800058a:	701a      	strb	r2, [r3, #0]
    data[6] = event->data.rotation_vector.real & 0xFF;
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	7cda      	ldrb	r2, [r3, #19]
 8000590:	7d1b      	ldrb	r3, [r3, #20]
 8000592:	021b      	lsls	r3, r3, #8
 8000594:	4313      	orrs	r3, r2
 8000596:	041b      	lsls	r3, r3, #16
 8000598:	141b      	asrs	r3, r3, #16
 800059a:	b21a      	sxth	r2, r3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	3306      	adds	r3, #6
 80005a0:	b2d2      	uxtb	r2, r2
 80005a2:	701a      	strb	r2, [r3, #0]
    data[7] = (event->data.rotation_vector.real >> 8) & 0xFF;
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	7cda      	ldrb	r2, [r3, #19]
 80005a8:	7d1b      	ldrb	r3, [r3, #20]
 80005aa:	021b      	lsls	r3, r3, #8
 80005ac:	4313      	orrs	r3, r2
 80005ae:	041b      	lsls	r3, r3, #16
 80005b0:	141b      	asrs	r3, r3, #16
 80005b2:	b21b      	sxth	r3, r3
 80005b4:	121b      	asrs	r3, r3, #8
 80005b6:	b21a      	sxth	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	3307      	adds	r3, #7
 80005bc:	b2d2      	uxtb	r2, r2
 80005be:	701a      	strb	r2, [r3, #0]
    printf("Rotation Vector: i = %d, j = %d, k = %d, real = %d\n", event->data.rotation_vector.i, event->data.rotation_vector.j, event->data.rotation_vector.k, event->data.rotation_vector.real);
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	7b5a      	ldrb	r2, [r3, #13]
 80005c4:	7b9b      	ldrb	r3, [r3, #14]
 80005c6:	021b      	lsls	r3, r3, #8
 80005c8:	4313      	orrs	r3, r2
 80005ca:	041b      	lsls	r3, r3, #16
 80005cc:	141b      	asrs	r3, r3, #16
 80005ce:	b21b      	sxth	r3, r3
 80005d0:	0019      	movs	r1, r3
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	7bda      	ldrb	r2, [r3, #15]
 80005d6:	7c1b      	ldrb	r3, [r3, #16]
 80005d8:	021b      	lsls	r3, r3, #8
 80005da:	4313      	orrs	r3, r2
 80005dc:	041b      	lsls	r3, r3, #16
 80005de:	141b      	asrs	r3, r3, #16
 80005e0:	b21b      	sxth	r3, r3
 80005e2:	001c      	movs	r4, r3
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	7c5a      	ldrb	r2, [r3, #17]
 80005e8:	7c9b      	ldrb	r3, [r3, #18]
 80005ea:	021b      	lsls	r3, r3, #8
 80005ec:	4313      	orrs	r3, r2
 80005ee:	041b      	lsls	r3, r3, #16
 80005f0:	141b      	asrs	r3, r3, #16
 80005f2:	b21b      	sxth	r3, r3
 80005f4:	001d      	movs	r5, r3
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	7cda      	ldrb	r2, [r3, #19]
 80005fa:	7d1b      	ldrb	r3, [r3, #20]
 80005fc:	021b      	lsls	r3, r3, #8
 80005fe:	4313      	orrs	r3, r2
 8000600:	041b      	lsls	r3, r3, #16
 8000602:	141b      	asrs	r3, r3, #16
 8000604:	b21b      	sxth	r3, r3
 8000606:	480a      	ldr	r0, [pc, #40]	@ (8000630 <BNO085_DecodeSensorEvent+0x3fc>)
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	002b      	movs	r3, r5
 800060c:	0022      	movs	r2, r4
 800060e:	f003 fbe9 	bl	8003de4 <iprintf>
    break;
 8000612:	e000      	b.n	8000616 <BNO085_DecodeSensorEvent+0x3e2>
    break;
 8000614:	46c0      	nop			@ (mov r8, r8)
  }

  return reportID;
 8000616:	230f      	movs	r3, #15
 8000618:	18fb      	adds	r3, r7, r3
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	0018      	movs	r0, r3
 800061e:	46bd      	mov	sp, r7
 8000620:	b004      	add	sp, #16
 8000622:	bdb0      	pop	{r4, r5, r7, pc}
 8000624:	08004b38 	.word	0x08004b38
 8000628:	08004b60 	.word	0x08004b60
 800062c:	08004b90 	.word	0x08004b90
 8000630:	08004bc4 	.word	0x08004bc4

08000634 <I2C_Receive_Callback>:
 * @brief callback function for I2C receive
 * @param hi2c1: I2C handle
 * @retval None
 */
void I2C_Receive_Callback(I2C_HandleTypeDef *hi2c1)
{
 8000634:	b5b0      	push	{r4, r5, r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  CAN_TxHeaderTypeDef *TxHeaderToUse = &TxHeader;
 800063c:	4b1f      	ldr	r3, [pc, #124]	@ (80006bc <I2C_Receive_Callback+0x88>)
 800063e:	60fb      	str	r3, [r7, #12]
  if (can_interval % 100 == 0)
 8000640:	4b1f      	ldr	r3, [pc, #124]	@ (80006c0 <I2C_Receive_Callback+0x8c>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	2164      	movs	r1, #100	@ 0x64
 8000646:	0018      	movs	r0, r3
 8000648:	f7ff fdee 	bl	8000228 <__aeabi_uidivmod>
 800064c:	000b      	movs	r3, r1
 800064e:	b2db      	uxtb	r3, r3
 8000650:	2b00      	cmp	r3, #0
 8000652:	d129      	bne.n	80006a8 <I2C_Receive_Callback+0x74>
  {
    uint8_t sensor = BNO085_DecodeSensorEvent(TxData, &sensor_event);
 8000654:	250b      	movs	r5, #11
 8000656:	197c      	adds	r4, r7, r5
 8000658:	4a1a      	ldr	r2, [pc, #104]	@ (80006c4 <I2C_Receive_Callback+0x90>)
 800065a:	4b1b      	ldr	r3, [pc, #108]	@ (80006c8 <I2C_Receive_Callback+0x94>)
 800065c:	0011      	movs	r1, r2
 800065e:	0018      	movs	r0, r3
 8000660:	f7ff fde8 	bl	8000234 <BNO085_DecodeSensorEvent>
 8000664:	0003      	movs	r3, r0
 8000666:	7023      	strb	r3, [r4, #0]
    switch (sensor)
 8000668:	197b      	adds	r3, r7, r5
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b05      	cmp	r3, #5
 800066e:	d011      	beq.n	8000694 <I2C_Receive_Callback+0x60>
 8000670:	dc13      	bgt.n	800069a <I2C_Receive_Callback+0x66>
 8000672:	2b03      	cmp	r3, #3
 8000674:	d00b      	beq.n	800068e <I2C_Receive_Callback+0x5a>
 8000676:	dc10      	bgt.n	800069a <I2C_Receive_Callback+0x66>
 8000678:	2b01      	cmp	r3, #1
 800067a:	d002      	beq.n	8000682 <I2C_Receive_Callback+0x4e>
 800067c:	2b02      	cmp	r3, #2
 800067e:	d003      	beq.n	8000688 <I2C_Receive_Callback+0x54>
      break;
    case SH2_ROTATION_VECTOR:
      TxHeaderToUse = &TxHeaderRotation;
      break;
    default:
      break;
 8000680:	e00b      	b.n	800069a <I2C_Receive_Callback+0x66>
      TxHeaderToUse = &TxHeader;
 8000682:	4b0e      	ldr	r3, [pc, #56]	@ (80006bc <I2C_Receive_Callback+0x88>)
 8000684:	60fb      	str	r3, [r7, #12]
      break;
 8000686:	e009      	b.n	800069c <I2C_Receive_Callback+0x68>
      TxHeaderToUse = &TxHeader;
 8000688:	4b0c      	ldr	r3, [pc, #48]	@ (80006bc <I2C_Receive_Callback+0x88>)
 800068a:	60fb      	str	r3, [r7, #12]
      break;
 800068c:	e006      	b.n	800069c <I2C_Receive_Callback+0x68>
      TxHeaderToUse = &TxHeader;
 800068e:	4b0b      	ldr	r3, [pc, #44]	@ (80006bc <I2C_Receive_Callback+0x88>)
 8000690:	60fb      	str	r3, [r7, #12]
      break;
 8000692:	e003      	b.n	800069c <I2C_Receive_Callback+0x68>
      TxHeaderToUse = &TxHeaderRotation;
 8000694:	4b0d      	ldr	r3, [pc, #52]	@ (80006cc <I2C_Receive_Callback+0x98>)
 8000696:	60fb      	str	r3, [r7, #12]
      break;
 8000698:	e000      	b.n	800069c <I2C_Receive_Callback+0x68>
      break;
 800069a:	46c0      	nop			@ (mov r8, r8)
    }

    HAL_CAN_AddTxMessage(&hcan, TxHeaderToUse, TxData, &TxMailbox);
 800069c:	4b0c      	ldr	r3, [pc, #48]	@ (80006d0 <I2C_Receive_Callback+0x9c>)
 800069e:	4a0a      	ldr	r2, [pc, #40]	@ (80006c8 <I2C_Receive_Callback+0x94>)
 80006a0:	68f9      	ldr	r1, [r7, #12]
 80006a2:	480c      	ldr	r0, [pc, #48]	@ (80006d4 <I2C_Receive_Callback+0xa0>)
 80006a4:	f001 f806 	bl	80016b4 <HAL_CAN_AddTxMessage>
//        for (int i = 0; i < sizeof(sensor_event); i++)
//        {
//          printf("%d: 0x%x\n", i, ((uint8_t *)&sensor_event)[i]);
//        }
  }
  can_interval++;
 80006a8:	4b05      	ldr	r3, [pc, #20]	@ (80006c0 <I2C_Receive_Callback+0x8c>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	3301      	adds	r3, #1
 80006ae:	b2da      	uxtb	r2, r3
 80006b0:	4b03      	ldr	r3, [pc, #12]	@ (80006c0 <I2C_Receive_Callback+0x8c>)
 80006b2:	701a      	strb	r2, [r3, #0]
}
 80006b4:	46c0      	nop			@ (mov r8, r8)
 80006b6:	46bd      	mov	sp, r7
 80006b8:	b004      	add	sp, #16
 80006ba:	bdb0      	pop	{r4, r5, r7, pc}
 80006bc:	200001fc 	.word	0x200001fc
 80006c0:	2000026f 	.word	0x2000026f
 80006c4:	20000258 	.word	0x20000258
 80006c8:	2000022c 	.word	0x2000022c
 80006cc:	20000214 	.word	0x20000214
 80006d0:	20000234 	.word	0x20000234
 80006d4:	20000108 	.word	0x20000108

080006d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d8:	b590      	push	{r4, r7, lr}
 80006da:	b089      	sub	sp, #36	@ 0x24
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  TxHeader.IDE = CAN_ID_STD;
 80006de:	4b3c      	ldr	r3, [pc, #240]	@ (80007d0 <main+0xf8>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  TxHeader.StdId = 0x111;
 80006e4:	4b3a      	ldr	r3, [pc, #232]	@ (80007d0 <main+0xf8>)
 80006e6:	2212      	movs	r2, #18
 80006e8:	32ff      	adds	r2, #255	@ 0xff
 80006ea:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;
 80006ec:	4b38      	ldr	r3, [pc, #224]	@ (80007d0 <main+0xf8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  TxHeader.DLC = 6;
 80006f2:	4b37      	ldr	r3, [pc, #220]	@ (80007d0 <main+0xf8>)
 80006f4:	2206      	movs	r2, #6
 80006f6:	611a      	str	r2, [r3, #16]

  TxHeaderRotation.IDE = CAN_ID_STD;
 80006f8:	4b36      	ldr	r3, [pc, #216]	@ (80007d4 <main+0xfc>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  TxHeaderRotation.StdId = 0x112;
 80006fe:	4b35      	ldr	r3, [pc, #212]	@ (80007d4 <main+0xfc>)
 8000700:	2289      	movs	r2, #137	@ 0x89
 8000702:	0052      	lsls	r2, r2, #1
 8000704:	601a      	str	r2, [r3, #0]
  TxHeaderRotation.RTR = CAN_RTR_DATA;
 8000706:	4b33      	ldr	r3, [pc, #204]	@ (80007d4 <main+0xfc>)
 8000708:	2200      	movs	r2, #0
 800070a:	60da      	str	r2, [r3, #12]
  TxHeaderRotation.DLC = 8;
 800070c:	4b31      	ldr	r3, [pc, #196]	@ (80007d4 <main+0xfc>)
 800070e:	2208      	movs	r2, #8
 8000710:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000712:	f000 fb93 	bl	8000e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000716:	f000 f869 	bl	80007ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071a:	f000 f96b 	bl	80009f4 <MX_GPIO_Init>
  // MX_DMA_Init();
  // MX_ADC_Init();
  MX_CAN_Init();
 800071e:	f000 f8c5 	bl	80008ac <MX_CAN_Init>
  MX_I2C1_Init();
 8000722:	f000 f925 	bl	8000970 <MX_I2C1_Init>
  // MX_TIM16_Init();
  /* USER CODE BEGIN 2 */
  if (HAL_ADC_Start_DMA(&hadc, (uint32_t *)ADC_DMA_BUFF, NUM_ADC_CHANNELS * AVG_PER_CHANNEL) != HAL_OK)
 8000726:	492c      	ldr	r1, [pc, #176]	@ (80007d8 <main+0x100>)
 8000728:	4b2c      	ldr	r3, [pc, #176]	@ (80007dc <main+0x104>)
 800072a:	2210      	movs	r2, #16
 800072c:	0018      	movs	r0, r3
 800072e:	f000 fbe9 	bl	8000f04 <HAL_ADC_Start_DMA>
 8000732:	1e03      	subs	r3, r0, #0
 8000734:	d001      	beq.n	800073a <main+0x62>
  {
    Error_Handler();
 8000736:	f000 f991 	bl	8000a5c <Error_Handler>
  }

  if (HAL_TIM_Base_Start_IT(&htim16) != HAL_OK)
 800073a:	4b29      	ldr	r3, [pc, #164]	@ (80007e0 <main+0x108>)
 800073c:	0018      	movs	r0, r3
 800073e:	f003 fa41 	bl	8003bc4 <HAL_TIM_Base_Start_IT>
 8000742:	1e03      	subs	r3, r0, #0
 8000744:	d001      	beq.n	800074a <main+0x72>
  {
    Error_Handler();
 8000746:	f000 f989 	bl	8000a5c <Error_Handler>
  }

  HAL_I2C_RegisterCallback(&hi2c1, HAL_I2C_MASTER_RX_COMPLETE_CB_ID, I2C_Receive_Callback);
 800074a:	4a26      	ldr	r2, [pc, #152]	@ (80007e4 <main+0x10c>)
 800074c:	4b26      	ldr	r3, [pc, #152]	@ (80007e8 <main+0x110>)
 800074e:	2101      	movs	r1, #1
 8000750:	0018      	movs	r0, r3
 8000752:	f001 fd1f 	bl	8002194 <HAL_I2C_RegisterCallback>

  // Create SHTP header
  SHTP_Header header = {0};
 8000756:	241c      	movs	r4, #28
 8000758:	193b      	adds	r3, r7, r4
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
  header.length = 0x15;
 800075e:	193b      	adds	r3, r7, r4
 8000760:	2215      	movs	r2, #21
 8000762:	801a      	strh	r2, [r3, #0]
  header.channel = SHTP_SENSOR_HUB_CHANNEL;
 8000764:	193b      	adds	r3, r7, r4
 8000766:	2202      	movs	r2, #2
 8000768:	709a      	strb	r2, [r3, #2]
  header.sequence_number = 0x00;
 800076a:	193b      	adds	r3, r7, r4
 800076c:	2200      	movs	r2, #0
 800076e:	70da      	strb	r2, [r3, #3]

  // Create SH2 Set Feature Command
  SHTP_Command start_accel = {0};
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	0018      	movs	r0, r3
 8000774:	2315      	movs	r3, #21
 8000776:	001a      	movs	r2, r3
 8000778:	2100      	movs	r1, #0
 800077a:	f003 fb8f 	bl	8003e9c <memset>
  start_accel.header = header;
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	193a      	adds	r2, r7, r4
 8000782:	6812      	ldr	r2, [r2, #0]
 8000784:	601a      	str	r2, [r3, #0]
  start_accel.header.sequence_number = 0x01;
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	2201      	movs	r2, #1
 800078a:	70da      	strb	r2, [r3, #3]
  start_accel.report_id = BNO_COMMAND_SET_FEATURE_COMMAND;
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	22fd      	movs	r2, #253	@ 0xfd
 8000790:	711a      	strb	r2, [r3, #4]
  start_accel.feature_report_id = SH2_ACCELEROMETER;
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	2201      	movs	r2, #1
 8000796:	715a      	strb	r2, [r3, #5]
  start_accel.report_interval = 0xEA60; // 60Hz
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	3309      	adds	r3, #9
 800079c:	781a      	ldrb	r2, [r3, #0]
 800079e:	2100      	movs	r1, #0
 80007a0:	400a      	ands	r2, r1
 80007a2:	1c11      	adds	r1, r2, #0
 80007a4:	2260      	movs	r2, #96	@ 0x60
 80007a6:	430a      	orrs	r2, r1
 80007a8:	701a      	strb	r2, [r3, #0]
 80007aa:	785a      	ldrb	r2, [r3, #1]
 80007ac:	2100      	movs	r1, #0
 80007ae:	400a      	ands	r2, r1
 80007b0:	1c11      	adds	r1, r2, #0
 80007b2:	2216      	movs	r2, #22
 80007b4:	4252      	negs	r2, r2
 80007b6:	430a      	orrs	r2, r1
 80007b8:	705a      	strb	r2, [r3, #1]
 80007ba:	789a      	ldrb	r2, [r3, #2]
 80007bc:	2100      	movs	r1, #0
 80007be:	400a      	ands	r2, r1
 80007c0:	709a      	strb	r2, [r3, #2]
 80007c2:	78da      	ldrb	r2, [r3, #3]
 80007c4:	2100      	movs	r1, #0
 80007c6:	400a      	ands	r2, r1
 80007c8:	70da      	strb	r2, [r3, #3]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007ca:	46c0      	nop			@ (mov r8, r8)
 80007cc:	e7fd      	b.n	80007ca <main+0xf2>
 80007ce:	46c0      	nop			@ (mov r8, r8)
 80007d0:	200001fc 	.word	0x200001fc
 80007d4:	20000214 	.word	0x20000214
 80007d8:	20000238 	.word	0x20000238
 80007dc:	20000084 	.word	0x20000084
 80007e0:	200001b4 	.word	0x200001b4
 80007e4:	08000635 	.word	0x08000635
 80007e8:	20000130 	.word	0x20000130

080007ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ec:	b590      	push	{r4, r7, lr}
 80007ee:	b099      	sub	sp, #100	@ 0x64
 80007f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f2:	242c      	movs	r4, #44	@ 0x2c
 80007f4:	193b      	adds	r3, r7, r4
 80007f6:	0018      	movs	r0, r3
 80007f8:	2334      	movs	r3, #52	@ 0x34
 80007fa:	001a      	movs	r2, r3
 80007fc:	2100      	movs	r1, #0
 80007fe:	f003 fb4d 	bl	8003e9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000802:	231c      	movs	r3, #28
 8000804:	18fb      	adds	r3, r7, r3
 8000806:	0018      	movs	r0, r3
 8000808:	2310      	movs	r3, #16
 800080a:	001a      	movs	r2, r3
 800080c:	2100      	movs	r1, #0
 800080e:	f003 fb45 	bl	8003e9c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	0018      	movs	r0, r3
 8000816:	2318      	movs	r3, #24
 8000818:	001a      	movs	r2, r3
 800081a:	2100      	movs	r1, #0
 800081c:	f003 fb3e 	bl	8003e9c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8000820:	0021      	movs	r1, r4
 8000822:	187b      	adds	r3, r7, r1
 8000824:	2232      	movs	r2, #50	@ 0x32
 8000826:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000828:	187b      	adds	r3, r7, r1
 800082a:	2201      	movs	r2, #1
 800082c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800082e:	187b      	adds	r3, r7, r1
 8000830:	2201      	movs	r2, #1
 8000832:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000834:	187b      	adds	r3, r7, r1
 8000836:	2201      	movs	r2, #1
 8000838:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800083a:	187b      	adds	r3, r7, r1
 800083c:	2210      	movs	r2, #16
 800083e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000840:	187b      	adds	r3, r7, r1
 8000842:	2210      	movs	r2, #16
 8000844:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000846:	187b      	adds	r3, r7, r1
 8000848:	2200      	movs	r2, #0
 800084a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084c:	187b      	adds	r3, r7, r1
 800084e:	0018      	movs	r0, r3
 8000850:	f002 fbf8 	bl	8003044 <HAL_RCC_OscConfig>
 8000854:	1e03      	subs	r3, r0, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000858:	f000 f900 	bl	8000a5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085c:	211c      	movs	r1, #28
 800085e:	187b      	adds	r3, r7, r1
 8000860:	2207      	movs	r2, #7
 8000862:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000864:	187b      	adds	r3, r7, r1
 8000866:	2203      	movs	r2, #3
 8000868:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800086a:	187b      	adds	r3, r7, r1
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000870:	187b      	adds	r3, r7, r1
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000876:	187b      	adds	r3, r7, r1
 8000878:	2101      	movs	r1, #1
 800087a:	0018      	movs	r0, r3
 800087c:	f002 ff68 	bl	8003750 <HAL_RCC_ClockConfig>
 8000880:	1e03      	subs	r3, r0, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000884:	f000 f8ea 	bl	8000a5c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2220      	movs	r2, #32
 800088c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	2200      	movs	r2, #0
 8000892:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	0018      	movs	r0, r3
 8000898:	f003 f8a6 	bl	80039e8 <HAL_RCCEx_PeriphCLKConfig>
 800089c:	1e03      	subs	r3, r0, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80008a0:	f000 f8dc 	bl	8000a5c <Error_Handler>
  }
}
 80008a4:	46c0      	nop			@ (mov r8, r8)
 80008a6:	46bd      	mov	sp, r7
 80008a8:	b019      	add	sp, #100	@ 0x64
 80008aa:	bd90      	pop	{r4, r7, pc}

080008ac <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08a      	sub	sp, #40	@ 0x28
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80008b2:	4b2d      	ldr	r3, [pc, #180]	@ (8000968 <MX_CAN_Init+0xbc>)
 80008b4:	4a2d      	ldr	r2, [pc, #180]	@ (800096c <MX_CAN_Init+0xc0>)
 80008b6:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 80008b8:	4b2b      	ldr	r3, [pc, #172]	@ (8000968 <MX_CAN_Init+0xbc>)
 80008ba:	2203      	movs	r2, #3
 80008bc:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80008be:	4b2a      	ldr	r3, [pc, #168]	@ (8000968 <MX_CAN_Init+0xbc>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008c4:	4b28      	ldr	r3, [pc, #160]	@ (8000968 <MX_CAN_Init+0xbc>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80008ca:	4b27      	ldr	r3, [pc, #156]	@ (8000968 <MX_CAN_Init+0xbc>)
 80008cc:	22c0      	movs	r2, #192	@ 0xc0
 80008ce:	0312      	lsls	r2, r2, #12
 80008d0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80008d2:	4b25      	ldr	r3, [pc, #148]	@ (8000968 <MX_CAN_Init+0xbc>)
 80008d4:	2280      	movs	r2, #128	@ 0x80
 80008d6:	0352      	lsls	r2, r2, #13
 80008d8:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80008da:	4b23      	ldr	r3, [pc, #140]	@ (8000968 <MX_CAN_Init+0xbc>)
 80008dc:	2200      	movs	r2, #0
 80008de:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 80008e0:	4b21      	ldr	r3, [pc, #132]	@ (8000968 <MX_CAN_Init+0xbc>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80008e6:	4b20      	ldr	r3, [pc, #128]	@ (8000968 <MX_CAN_Init+0xbc>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 80008ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000968 <MX_CAN_Init+0xbc>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80008f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000968 <MX_CAN_Init+0xbc>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80008f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000968 <MX_CAN_Init+0xbc>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80008fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000968 <MX_CAN_Init+0xbc>)
 8000900:	0018      	movs	r0, r3
 8000902:	f000 fca1 	bl	8001248 <HAL_CAN_Init>
 8000906:	1e03      	subs	r3, r0, #0
 8000908:	d001      	beq.n	800090e <MX_CAN_Init+0x62>
  {
    Error_Handler();
 800090a:	f000 f8a7 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  CAN_FilterTypeDef sFilterConfig;

  sFilterConfig.FilterActivation = ENABLE;
 800090e:	003b      	movs	r3, r7
 8000910:	2201      	movs	r2, #1
 8000912:	621a      	str	r2, [r3, #32]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0; // set fifo assignment
 8000914:	003b      	movs	r3, r7
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterIdHigh = 0;
 800091a:	003b      	movs	r3, r7
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0;
 8000920:	003b      	movs	r3, r7
 8000922:	2200      	movs	r2, #0
 8000924:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0;
 8000926:	003b      	movs	r3, r7
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0;
 800092c:	003b      	movs	r3, r7
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; // set filter scale
 8000932:	003b      	movs	r3, r7
 8000934:	2201      	movs	r2, #1
 8000936:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterBank = 0;
 8000938:	003b      	movs	r3, r7
 800093a:	2200      	movs	r2, #0
 800093c:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800093e:	003b      	movs	r3, r7
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 8000944:	003a      	movs	r2, r7
 8000946:	4b08      	ldr	r3, [pc, #32]	@ (8000968 <MX_CAN_Init+0xbc>)
 8000948:	0011      	movs	r1, r2
 800094a:	0018      	movs	r0, r3
 800094c:	f000 fd7a 	bl	8001444 <HAL_CAN_ConfigFilter>

  if (HAL_CAN_Start(&hcan) != HAL_OK)
 8000950:	4b05      	ldr	r3, [pc, #20]	@ (8000968 <MX_CAN_Init+0xbc>)
 8000952:	0018      	movs	r0, r3
 8000954:	f000 fe68 	bl	8001628 <HAL_CAN_Start>
 8000958:	1e03      	subs	r3, r0, #0
 800095a:	d001      	beq.n	8000960 <MX_CAN_Init+0xb4>
  {
    Error_Handler();
 800095c:	f000 f87e 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE END CAN_Init 2 */

}
 8000960:	46c0      	nop			@ (mov r8, r8)
 8000962:	46bd      	mov	sp, r7
 8000964:	b00a      	add	sp, #40	@ 0x28
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000108 	.word	0x20000108
 800096c:	40006400 	.word	0x40006400

08000970 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000974:	4b1c      	ldr	r3, [pc, #112]	@ (80009e8 <MX_I2C1_Init+0x78>)
 8000976:	4a1d      	ldr	r2, [pc, #116]	@ (80009ec <MX_I2C1_Init+0x7c>)
 8000978:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00101D2D;
 800097a:	4b1b      	ldr	r3, [pc, #108]	@ (80009e8 <MX_I2C1_Init+0x78>)
 800097c:	4a1c      	ldr	r2, [pc, #112]	@ (80009f0 <MX_I2C1_Init+0x80>)
 800097e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000980:	4b19      	ldr	r3, [pc, #100]	@ (80009e8 <MX_I2C1_Init+0x78>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000986:	4b18      	ldr	r3, [pc, #96]	@ (80009e8 <MX_I2C1_Init+0x78>)
 8000988:	2201      	movs	r2, #1
 800098a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800098c:	4b16      	ldr	r3, [pc, #88]	@ (80009e8 <MX_I2C1_Init+0x78>)
 800098e:	2200      	movs	r2, #0
 8000990:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000992:	4b15      	ldr	r3, [pc, #84]	@ (80009e8 <MX_I2C1_Init+0x78>)
 8000994:	2200      	movs	r2, #0
 8000996:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000998:	4b13      	ldr	r3, [pc, #76]	@ (80009e8 <MX_I2C1_Init+0x78>)
 800099a:	2200      	movs	r2, #0
 800099c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800099e:	4b12      	ldr	r3, [pc, #72]	@ (80009e8 <MX_I2C1_Init+0x78>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009a4:	4b10      	ldr	r3, [pc, #64]	@ (80009e8 <MX_I2C1_Init+0x78>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009aa:	4b0f      	ldr	r3, [pc, #60]	@ (80009e8 <MX_I2C1_Init+0x78>)
 80009ac:	0018      	movs	r0, r3
 80009ae:	f001 fb1f 	bl	8001ff0 <HAL_I2C_Init>
 80009b2:	1e03      	subs	r3, r0, #0
 80009b4:	d001      	beq.n	80009ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009b6:	f000 f851 	bl	8000a5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 80009ba:	2380      	movs	r3, #128	@ 0x80
 80009bc:	015a      	lsls	r2, r3, #5
 80009be:	4b0a      	ldr	r3, [pc, #40]	@ (80009e8 <MX_I2C1_Init+0x78>)
 80009c0:	0011      	movs	r1, r2
 80009c2:	0018      	movs	r0, r3
 80009c4:	f002 faa6 	bl	8002f14 <HAL_I2CEx_ConfigAnalogFilter>
 80009c8:	1e03      	subs	r3, r0, #0
 80009ca:	d001      	beq.n	80009d0 <MX_I2C1_Init+0x60>
  {
    Error_Handler();
 80009cc:	f000 f846 	bl	8000a5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009d0:	4b05      	ldr	r3, [pc, #20]	@ (80009e8 <MX_I2C1_Init+0x78>)
 80009d2:	2100      	movs	r1, #0
 80009d4:	0018      	movs	r0, r3
 80009d6:	f002 fae9 	bl	8002fac <HAL_I2CEx_ConfigDigitalFilter>
 80009da:	1e03      	subs	r3, r0, #0
 80009dc:	d001      	beq.n	80009e2 <MX_I2C1_Init+0x72>
  {
    Error_Handler();
 80009de:	f000 f83d 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009e2:	46c0      	nop			@ (mov r8, r8)
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000130 	.word	0x20000130
 80009ec:	40005400 	.word	0x40005400
 80009f0:	00101d2d 	.word	0x00101d2d

080009f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009fa:	4b17      	ldr	r3, [pc, #92]	@ (8000a58 <MX_GPIO_Init+0x64>)
 80009fc:	695a      	ldr	r2, [r3, #20]
 80009fe:	4b16      	ldr	r3, [pc, #88]	@ (8000a58 <MX_GPIO_Init+0x64>)
 8000a00:	2180      	movs	r1, #128	@ 0x80
 8000a02:	03c9      	lsls	r1, r1, #15
 8000a04:	430a      	orrs	r2, r1
 8000a06:	615a      	str	r2, [r3, #20]
 8000a08:	4b13      	ldr	r3, [pc, #76]	@ (8000a58 <MX_GPIO_Init+0x64>)
 8000a0a:	695a      	ldr	r2, [r3, #20]
 8000a0c:	2380      	movs	r3, #128	@ 0x80
 8000a0e:	03db      	lsls	r3, r3, #15
 8000a10:	4013      	ands	r3, r2
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	4b10      	ldr	r3, [pc, #64]	@ (8000a58 <MX_GPIO_Init+0x64>)
 8000a18:	695a      	ldr	r2, [r3, #20]
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a58 <MX_GPIO_Init+0x64>)
 8000a1c:	2180      	movs	r1, #128	@ 0x80
 8000a1e:	0289      	lsls	r1, r1, #10
 8000a20:	430a      	orrs	r2, r1
 8000a22:	615a      	str	r2, [r3, #20]
 8000a24:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <MX_GPIO_Init+0x64>)
 8000a26:	695a      	ldr	r2, [r3, #20]
 8000a28:	2380      	movs	r3, #128	@ 0x80
 8000a2a:	029b      	lsls	r3, r3, #10
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a32:	4b09      	ldr	r3, [pc, #36]	@ (8000a58 <MX_GPIO_Init+0x64>)
 8000a34:	695a      	ldr	r2, [r3, #20]
 8000a36:	4b08      	ldr	r3, [pc, #32]	@ (8000a58 <MX_GPIO_Init+0x64>)
 8000a38:	2180      	movs	r1, #128	@ 0x80
 8000a3a:	02c9      	lsls	r1, r1, #11
 8000a3c:	430a      	orrs	r2, r1
 8000a3e:	615a      	str	r2, [r3, #20]
 8000a40:	4b05      	ldr	r3, [pc, #20]	@ (8000a58 <MX_GPIO_Init+0x64>)
 8000a42:	695a      	ldr	r2, [r3, #20]
 8000a44:	2380      	movs	r3, #128	@ 0x80
 8000a46:	02db      	lsls	r3, r3, #11
 8000a48:	4013      	ands	r3, r2
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a4e:	46c0      	nop			@ (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	b004      	add	sp, #16
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	46c0      	nop			@ (mov r8, r8)
 8000a58:	40021000 	.word	0x40021000

08000a5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a60:	b672      	cpsid	i
}
 8000a62:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a64:	46c0      	nop			@ (mov r8, r8)
 8000a66:	e7fd      	b.n	8000a64 <Error_Handler+0x8>

08000a68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000aac <HAL_MspInit+0x44>)
 8000a70:	699a      	ldr	r2, [r3, #24]
 8000a72:	4b0e      	ldr	r3, [pc, #56]	@ (8000aac <HAL_MspInit+0x44>)
 8000a74:	2101      	movs	r1, #1
 8000a76:	430a      	orrs	r2, r1
 8000a78:	619a      	str	r2, [r3, #24]
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000aac <HAL_MspInit+0x44>)
 8000a7c:	699b      	ldr	r3, [r3, #24]
 8000a7e:	2201      	movs	r2, #1
 8000a80:	4013      	ands	r3, r2
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a86:	4b09      	ldr	r3, [pc, #36]	@ (8000aac <HAL_MspInit+0x44>)
 8000a88:	69da      	ldr	r2, [r3, #28]
 8000a8a:	4b08      	ldr	r3, [pc, #32]	@ (8000aac <HAL_MspInit+0x44>)
 8000a8c:	2180      	movs	r1, #128	@ 0x80
 8000a8e:	0549      	lsls	r1, r1, #21
 8000a90:	430a      	orrs	r2, r1
 8000a92:	61da      	str	r2, [r3, #28]
 8000a94:	4b05      	ldr	r3, [pc, #20]	@ (8000aac <HAL_MspInit+0x44>)
 8000a96:	69da      	ldr	r2, [r3, #28]
 8000a98:	2380      	movs	r3, #128	@ 0x80
 8000a9a:	055b      	lsls	r3, r3, #21
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa2:	46c0      	nop			@ (mov r8, r8)
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	b002      	add	sp, #8
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	46c0      	nop			@ (mov r8, r8)
 8000aac:	40021000 	.word	0x40021000

08000ab0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ab0:	b590      	push	{r4, r7, lr}
 8000ab2:	b08b      	sub	sp, #44	@ 0x2c
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	2414      	movs	r4, #20
 8000aba:	193b      	adds	r3, r7, r4
 8000abc:	0018      	movs	r0, r3
 8000abe:	2314      	movs	r3, #20
 8000ac0:	001a      	movs	r2, r3
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	f003 f9ea 	bl	8003e9c <memset>
  if(hcan->Instance==CAN)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a1d      	ldr	r2, [pc, #116]	@ (8000b44 <HAL_CAN_MspInit+0x94>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d133      	bne.n	8000b3a <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ad2:	4b1d      	ldr	r3, [pc, #116]	@ (8000b48 <HAL_CAN_MspInit+0x98>)
 8000ad4:	69da      	ldr	r2, [r3, #28]
 8000ad6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b48 <HAL_CAN_MspInit+0x98>)
 8000ad8:	2180      	movs	r1, #128	@ 0x80
 8000ada:	0489      	lsls	r1, r1, #18
 8000adc:	430a      	orrs	r2, r1
 8000ade:	61da      	str	r2, [r3, #28]
 8000ae0:	4b19      	ldr	r3, [pc, #100]	@ (8000b48 <HAL_CAN_MspInit+0x98>)
 8000ae2:	69da      	ldr	r2, [r3, #28]
 8000ae4:	2380      	movs	r3, #128	@ 0x80
 8000ae6:	049b      	lsls	r3, r3, #18
 8000ae8:	4013      	ands	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	4b16      	ldr	r3, [pc, #88]	@ (8000b48 <HAL_CAN_MspInit+0x98>)
 8000af0:	695a      	ldr	r2, [r3, #20]
 8000af2:	4b15      	ldr	r3, [pc, #84]	@ (8000b48 <HAL_CAN_MspInit+0x98>)
 8000af4:	2180      	movs	r1, #128	@ 0x80
 8000af6:	0289      	lsls	r1, r1, #10
 8000af8:	430a      	orrs	r2, r1
 8000afa:	615a      	str	r2, [r3, #20]
 8000afc:	4b12      	ldr	r3, [pc, #72]	@ (8000b48 <HAL_CAN_MspInit+0x98>)
 8000afe:	695a      	ldr	r2, [r3, #20]
 8000b00:	2380      	movs	r3, #128	@ 0x80
 8000b02:	029b      	lsls	r3, r3, #10
 8000b04:	4013      	ands	r3, r2
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b0a:	193b      	adds	r3, r7, r4
 8000b0c:	22c0      	movs	r2, #192	@ 0xc0
 8000b0e:	0152      	lsls	r2, r2, #5
 8000b10:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b12:	0021      	movs	r1, r4
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	2202      	movs	r2, #2
 8000b18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	187b      	adds	r3, r7, r1
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b20:	187b      	adds	r3, r7, r1
 8000b22:	2203      	movs	r2, #3
 8000b24:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000b26:	187b      	adds	r3, r7, r1
 8000b28:	2204      	movs	r2, #4
 8000b2a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2c:	187a      	adds	r2, r7, r1
 8000b2e:	2390      	movs	r3, #144	@ 0x90
 8000b30:	05db      	lsls	r3, r3, #23
 8000b32:	0011      	movs	r1, r2
 8000b34:	0018      	movs	r0, r3
 8000b36:	f001 f8f3 	bl	8001d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000b3a:	46c0      	nop			@ (mov r8, r8)
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	b00b      	add	sp, #44	@ 0x2c
 8000b40:	bd90      	pop	{r4, r7, pc}
 8000b42:	46c0      	nop			@ (mov r8, r8)
 8000b44:	40006400 	.word	0x40006400
 8000b48:	40021000 	.word	0x40021000

08000b4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b4c:	b590      	push	{r4, r7, lr}
 8000b4e:	b08b      	sub	sp, #44	@ 0x2c
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	2414      	movs	r4, #20
 8000b56:	193b      	adds	r3, r7, r4
 8000b58:	0018      	movs	r0, r3
 8000b5a:	2314      	movs	r3, #20
 8000b5c:	001a      	movs	r2, r3
 8000b5e:	2100      	movs	r1, #0
 8000b60:	f003 f99c 	bl	8003e9c <memset>
  if(hi2c->Instance==I2C1)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a21      	ldr	r2, [pc, #132]	@ (8000bf0 <HAL_I2C_MspInit+0xa4>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d13b      	bne.n	8000be6 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6e:	4b21      	ldr	r3, [pc, #132]	@ (8000bf4 <HAL_I2C_MspInit+0xa8>)
 8000b70:	695a      	ldr	r2, [r3, #20]
 8000b72:	4b20      	ldr	r3, [pc, #128]	@ (8000bf4 <HAL_I2C_MspInit+0xa8>)
 8000b74:	2180      	movs	r1, #128	@ 0x80
 8000b76:	0289      	lsls	r1, r1, #10
 8000b78:	430a      	orrs	r2, r1
 8000b7a:	615a      	str	r2, [r3, #20]
 8000b7c:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf4 <HAL_I2C_MspInit+0xa8>)
 8000b7e:	695a      	ldr	r2, [r3, #20]
 8000b80:	2380      	movs	r3, #128	@ 0x80
 8000b82:	029b      	lsls	r3, r3, #10
 8000b84:	4013      	ands	r3, r2
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b8a:	193b      	adds	r3, r7, r4
 8000b8c:	22c0      	movs	r2, #192	@ 0xc0
 8000b8e:	00d2      	lsls	r2, r2, #3
 8000b90:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b92:	0021      	movs	r1, r4
 8000b94:	187b      	adds	r3, r7, r1
 8000b96:	2212      	movs	r2, #18
 8000b98:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ba0:	187b      	adds	r3, r7, r1
 8000ba2:	2203      	movs	r2, #3
 8000ba4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ba6:	187b      	adds	r3, r7, r1
 8000ba8:	2204      	movs	r2, #4
 8000baa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bac:	187a      	adds	r2, r7, r1
 8000bae:	2390      	movs	r3, #144	@ 0x90
 8000bb0:	05db      	lsls	r3, r3, #23
 8000bb2:	0011      	movs	r1, r2
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f001 f8b3 	bl	8001d20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bba:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf4 <HAL_I2C_MspInit+0xa8>)
 8000bbc:	69da      	ldr	r2, [r3, #28]
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf4 <HAL_I2C_MspInit+0xa8>)
 8000bc0:	2180      	movs	r1, #128	@ 0x80
 8000bc2:	0389      	lsls	r1, r1, #14
 8000bc4:	430a      	orrs	r2, r1
 8000bc6:	61da      	str	r2, [r3, #28]
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf4 <HAL_I2C_MspInit+0xa8>)
 8000bca:	69da      	ldr	r2, [r3, #28]
 8000bcc:	2380      	movs	r3, #128	@ 0x80
 8000bce:	039b      	lsls	r3, r3, #14
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2100      	movs	r1, #0
 8000bda:	2017      	movs	r0, #23
 8000bdc:	f000 fee8 	bl	80019b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8000be0:	2017      	movs	r0, #23
 8000be2:	f000 fefa 	bl	80019da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000be6:	46c0      	nop			@ (mov r8, r8)
 8000be8:	46bd      	mov	sp, r7
 8000bea:	b00b      	add	sp, #44	@ 0x2c
 8000bec:	bd90      	pop	{r4, r7, pc}
 8000bee:	46c0      	nop			@ (mov r8, r8)
 8000bf0:	40005400 	.word	0x40005400
 8000bf4:	40021000 	.word	0x40021000

08000bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bfc:	46c0      	nop			@ (mov r8, r8)
 8000bfe:	e7fd      	b.n	8000bfc <NMI_Handler+0x4>

08000c00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c04:	46c0      	nop			@ (mov r8, r8)
 8000c06:	e7fd      	b.n	8000c04 <HardFault_Handler+0x4>

08000c08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c0c:	46c0      	nop			@ (mov r8, r8)
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c16:	46c0      	nop			@ (mov r8, r8)
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c20:	f000 f954 	bl	8000ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c24:	46c0      	nop			@ (mov r8, r8)
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000c30:	4b03      	ldr	r3, [pc, #12]	@ (8000c40 <DMA1_Channel1_IRQHandler+0x14>)
 8000c32:	0018      	movs	r0, r3
 8000c34:	f000 ff99 	bl	8001b6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c38:	46c0      	nop			@ (mov r8, r8)
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	46c0      	nop			@ (mov r8, r8)
 8000c40:	200000c4 	.word	0x200000c4

08000c44 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8000c48:	4b09      	ldr	r3, [pc, #36]	@ (8000c70 <I2C1_IRQHandler+0x2c>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	699a      	ldr	r2, [r3, #24]
 8000c4e:	23e0      	movs	r3, #224	@ 0xe0
 8000c50:	00db      	lsls	r3, r3, #3
 8000c52:	4013      	ands	r3, r2
 8000c54:	d004      	beq.n	8000c60 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8000c56:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <I2C1_IRQHandler+0x2c>)
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f001 fb4f 	bl	80022fc <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8000c5e:	e003      	b.n	8000c68 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8000c60:	4b03      	ldr	r3, [pc, #12]	@ (8000c70 <I2C1_IRQHandler+0x2c>)
 8000c62:	0018      	movs	r0, r3
 8000c64:	f001 fb30 	bl	80022c8 <HAL_I2C_EV_IRQHandler>
}
 8000c68:	46c0      	nop			@ (mov r8, r8)
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	46c0      	nop			@ (mov r8, r8)
 8000c70:	20000130 	.word	0x20000130

08000c74 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]
 8000c84:	e00a      	b.n	8000c9c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c86:	e000      	b.n	8000c8a <_read+0x16>
 8000c88:	bf00      	nop
 8000c8a:	0001      	movs	r1, r0
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	1c5a      	adds	r2, r3, #1
 8000c90:	60ba      	str	r2, [r7, #8]
 8000c92:	b2ca      	uxtb	r2, r1
 8000c94:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	697a      	ldr	r2, [r7, #20]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	dbf0      	blt.n	8000c86 <_read+0x12>
  }

  return len;
 8000ca4:	687b      	ldr	r3, [r7, #4]
}
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	b006      	add	sp, #24
 8000cac:	bd80      	pop	{r7, pc}

08000cae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b086      	sub	sp, #24
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	60f8      	str	r0, [r7, #12]
 8000cb6:	60b9      	str	r1, [r7, #8]
 8000cb8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cba:	2300      	movs	r3, #0
 8000cbc:	617b      	str	r3, [r7, #20]
 8000cbe:	e009      	b.n	8000cd4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	1c5a      	adds	r2, r3, #1
 8000cc4:	60ba      	str	r2, [r7, #8]
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	0018      	movs	r0, r3
 8000cca:	e000      	b.n	8000cce <_write+0x20>
 8000ccc:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	697a      	ldr	r2, [r7, #20]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	dbf1      	blt.n	8000cc0 <_write+0x12>
  }
  return len;
 8000cdc:	687b      	ldr	r3, [r7, #4]
}
 8000cde:	0018      	movs	r0, r3
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	b006      	add	sp, #24
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <_close>:

int _close(int file)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	425b      	negs	r3, r3
}
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	b002      	add	sp, #8
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b082      	sub	sp, #8
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
 8000d02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	2280      	movs	r2, #128	@ 0x80
 8000d08:	0192      	lsls	r2, r2, #6
 8000d0a:	605a      	str	r2, [r3, #4]
  return 0;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	0018      	movs	r0, r3
 8000d10:	46bd      	mov	sp, r7
 8000d12:	b002      	add	sp, #8
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <_isatty>:

int _isatty(int file)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b082      	sub	sp, #8
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d1e:	2301      	movs	r3, #1
}
 8000d20:	0018      	movs	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	b002      	add	sp, #8
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	0018      	movs	r0, r3
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	b004      	add	sp, #16
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d48:	4a14      	ldr	r2, [pc, #80]	@ (8000d9c <_sbrk+0x5c>)
 8000d4a:	4b15      	ldr	r3, [pc, #84]	@ (8000da0 <_sbrk+0x60>)
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d54:	4b13      	ldr	r3, [pc, #76]	@ (8000da4 <_sbrk+0x64>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d102      	bne.n	8000d62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d5c:	4b11      	ldr	r3, [pc, #68]	@ (8000da4 <_sbrk+0x64>)
 8000d5e:	4a12      	ldr	r2, [pc, #72]	@ (8000da8 <_sbrk+0x68>)
 8000d60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d62:	4b10      	ldr	r3, [pc, #64]	@ (8000da4 <_sbrk+0x64>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	18d3      	adds	r3, r2, r3
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d207      	bcs.n	8000d80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d70:	f003 f8ea 	bl	8003f48 <__errno>
 8000d74:	0003      	movs	r3, r0
 8000d76:	220c      	movs	r2, #12
 8000d78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	425b      	negs	r3, r3
 8000d7e:	e009      	b.n	8000d94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d80:	4b08      	ldr	r3, [pc, #32]	@ (8000da4 <_sbrk+0x64>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d86:	4b07      	ldr	r3, [pc, #28]	@ (8000da4 <_sbrk+0x64>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	18d2      	adds	r2, r2, r3
 8000d8e:	4b05      	ldr	r3, [pc, #20]	@ (8000da4 <_sbrk+0x64>)
 8000d90:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000d92:	68fb      	ldr	r3, [r7, #12]
}
 8000d94:	0018      	movs	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	b006      	add	sp, #24
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20001800 	.word	0x20001800
 8000da0:	00000400 	.word	0x00000400
 8000da4:	20000270 	.word	0x20000270
 8000da8:	200003c8 	.word	0x200003c8

08000dac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000db0:	46c0      	nop			@ (mov r8, r8)
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000db8:	4813      	ldr	r0, [pc, #76]	@ (8000e08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dba:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dbc:	f7ff fff6 	bl	8000dac <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000dc0:	4812      	ldr	r0, [pc, #72]	@ (8000e0c <LoopForever+0x6>)
    LDR R1, [R0]
 8000dc2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000dc4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000dc6:	4a12      	ldr	r2, [pc, #72]	@ (8000e10 <LoopForever+0xa>)
    CMP R1, R2
 8000dc8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000dca:	d105      	bne.n	8000dd8 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000dcc:	4811      	ldr	r0, [pc, #68]	@ (8000e14 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000dce:	4912      	ldr	r1, [pc, #72]	@ (8000e18 <LoopForever+0x12>)
    STR R1, [R0]
 8000dd0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000dd2:	4812      	ldr	r0, [pc, #72]	@ (8000e1c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000dd4:	4912      	ldr	r1, [pc, #72]	@ (8000e20 <LoopForever+0x1a>)
    STR R1, [R0]
 8000dd6:	6001      	str	r1, [r0, #0]

08000dd8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dd8:	4812      	ldr	r0, [pc, #72]	@ (8000e24 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000dda:	4913      	ldr	r1, [pc, #76]	@ (8000e28 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000ddc:	4a13      	ldr	r2, [pc, #76]	@ (8000e2c <LoopForever+0x26>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de0:	e002      	b.n	8000de8 <LoopCopyDataInit>

08000de2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000de6:	3304      	adds	r3, #4

08000de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dec:	d3f9      	bcc.n	8000de2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dee:	4a10      	ldr	r2, [pc, #64]	@ (8000e30 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000df0:	4c10      	ldr	r4, [pc, #64]	@ (8000e34 <LoopForever+0x2e>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df4:	e001      	b.n	8000dfa <LoopFillZerobss>

08000df6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000df6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df8:	3204      	adds	r2, #4

08000dfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dfc:	d3fb      	bcc.n	8000df6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000dfe:	f003 f8a9 	bl	8003f54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e02:	f7ff fc69 	bl	80006d8 <main>

08000e06 <LoopForever>:

LoopForever:
    b LoopForever
 8000e06:	e7fe      	b.n	8000e06 <LoopForever>
  ldr   r0, =_estack
 8000e08:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000e0c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000e10:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000e14:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000e18:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000e1c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000e20:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e28:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e2c:	08004c90 	.word	0x08004c90
  ldr r2, =_sbss
 8000e30:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e34:	200003c4 	.word	0x200003c4

08000e38 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e38:	e7fe      	b.n	8000e38 <ADC1_IRQHandler>
	...

08000e3c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e40:	4b07      	ldr	r3, [pc, #28]	@ (8000e60 <HAL_Init+0x24>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <HAL_Init+0x24>)
 8000e46:	2110      	movs	r1, #16
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000e4c:	2003      	movs	r0, #3
 8000e4e:	f000 f809 	bl	8000e64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e52:	f7ff fe09 	bl	8000a68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e56:	2300      	movs	r3, #0
}
 8000e58:	0018      	movs	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	46c0      	nop			@ (mov r8, r8)
 8000e60:	40022000 	.word	0x40022000

08000e64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e64:	b590      	push	{r4, r7, lr}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e6c:	4b14      	ldr	r3, [pc, #80]	@ (8000ec0 <HAL_InitTick+0x5c>)
 8000e6e:	681c      	ldr	r4, [r3, #0]
 8000e70:	4b14      	ldr	r3, [pc, #80]	@ (8000ec4 <HAL_InitTick+0x60>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	0019      	movs	r1, r3
 8000e76:	23fa      	movs	r3, #250	@ 0xfa
 8000e78:	0098      	lsls	r0, r3, #2
 8000e7a:	f7ff f94f 	bl	800011c <__udivsi3>
 8000e7e:	0003      	movs	r3, r0
 8000e80:	0019      	movs	r1, r3
 8000e82:	0020      	movs	r0, r4
 8000e84:	f7ff f94a 	bl	800011c <__udivsi3>
 8000e88:	0003      	movs	r3, r0
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f000 fdb5 	bl	80019fa <HAL_SYSTICK_Config>
 8000e90:	1e03      	subs	r3, r0, #0
 8000e92:	d001      	beq.n	8000e98 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	e00f      	b.n	8000eb8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2b03      	cmp	r3, #3
 8000e9c:	d80b      	bhi.n	8000eb6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e9e:	6879      	ldr	r1, [r7, #4]
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	425b      	negs	r3, r3
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f000 fd82 	bl	80019b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eac:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <HAL_InitTick+0x64>)
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	e000      	b.n	8000eb8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
}
 8000eb8:	0018      	movs	r0, r3
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	b003      	add	sp, #12
 8000ebe:	bd90      	pop	{r4, r7, pc}
 8000ec0:	20000000 	.word	0x20000000
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	20000004 	.word	0x20000004

08000ecc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed0:	4b05      	ldr	r3, [pc, #20]	@ (8000ee8 <HAL_IncTick+0x1c>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	001a      	movs	r2, r3
 8000ed6:	4b05      	ldr	r3, [pc, #20]	@ (8000eec <HAL_IncTick+0x20>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	18d2      	adds	r2, r2, r3
 8000edc:	4b03      	ldr	r3, [pc, #12]	@ (8000eec <HAL_IncTick+0x20>)
 8000ede:	601a      	str	r2, [r3, #0]
}
 8000ee0:	46c0      	nop			@ (mov r8, r8)
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	46c0      	nop			@ (mov r8, r8)
 8000ee8:	20000008 	.word	0x20000008
 8000eec:	20000274 	.word	0x20000274

08000ef0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef4:	4b02      	ldr	r3, [pc, #8]	@ (8000f00 <HAL_GetTick+0x10>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
}
 8000ef8:	0018      	movs	r0, r3
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	46c0      	nop			@ (mov r8, r8)
 8000f00:	20000274 	.word	0x20000274

08000f04 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000f04:	b590      	push	{r4, r7, lr}
 8000f06:	b087      	sub	sp, #28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f10:	2317      	movs	r3, #23
 8000f12:	18fb      	adds	r3, r7, r3
 8000f14:	2200      	movs	r2, #0
 8000f16:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	2204      	movs	r2, #4
 8000f20:	4013      	ands	r3, r2
 8000f22:	d15e      	bne.n	8000fe2 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	2234      	movs	r2, #52	@ 0x34
 8000f28:	5c9b      	ldrb	r3, [r3, r2]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d101      	bne.n	8000f32 <HAL_ADC_Start_DMA+0x2e>
 8000f2e:	2302      	movs	r3, #2
 8000f30:	e05e      	b.n	8000ff0 <HAL_ADC_Start_DMA+0xec>
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2234      	movs	r2, #52	@ 0x34
 8000f36:	2101      	movs	r1, #1
 8000f38:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	7e5b      	ldrb	r3, [r3, #25]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d007      	beq.n	8000f52 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000f42:	2317      	movs	r3, #23
 8000f44:	18fc      	adds	r4, r7, r3
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	0018      	movs	r0, r3
 8000f4a:	f000 f875 	bl	8001038 <ADC_Enable>
 8000f4e:	0003      	movs	r3, r0
 8000f50:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000f52:	2317      	movs	r3, #23
 8000f54:	18fb      	adds	r3, r7, r3
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d146      	bne.n	8000fea <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f60:	4a25      	ldr	r2, [pc, #148]	@ (8000ff8 <HAL_ADC_Start_DMA+0xf4>)
 8000f62:	4013      	ands	r3, r2
 8000f64:	2280      	movs	r2, #128	@ 0x80
 8000f66:	0052      	lsls	r2, r2, #1
 8000f68:	431a      	orrs	r2, r3
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	2200      	movs	r2, #0
 8000f72:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2234      	movs	r2, #52	@ 0x34
 8000f78:	2100      	movs	r1, #0
 8000f7a:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f80:	4a1e      	ldr	r2, [pc, #120]	@ (8000ffc <HAL_ADC_Start_DMA+0xf8>)
 8000f82:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f88:	4a1d      	ldr	r2, [pc, #116]	@ (8001000 <HAL_ADC_Start_DMA+0xfc>)
 8000f8a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f90:	4a1c      	ldr	r2, [pc, #112]	@ (8001004 <HAL_ADC_Start_DMA+0x100>)
 8000f92:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	221c      	movs	r2, #28
 8000f9a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	685a      	ldr	r2, [r3, #4]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2110      	movs	r1, #16
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	68da      	ldr	r2, [r3, #12]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	3340      	adds	r3, #64	@ 0x40
 8000fc6:	0019      	movs	r1, r3
 8000fc8:	68ba      	ldr	r2, [r7, #8]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f000 fd22 	bl	8001a14 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	689a      	ldr	r2, [r3, #8]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2104      	movs	r1, #4
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	e003      	b.n	8000fea <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000fe2:	2317      	movs	r3, #23
 8000fe4:	18fb      	adds	r3, r7, r3
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000fea:	2317      	movs	r3, #23
 8000fec:	18fb      	adds	r3, r7, r3
 8000fee:	781b      	ldrb	r3, [r3, #0]
}
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	b007      	add	sp, #28
 8000ff6:	bd90      	pop	{r4, r7, pc}
 8000ff8:	fffff0fe 	.word	0xfffff0fe
 8000ffc:	08001141 	.word	0x08001141
 8001000:	080011f5 	.word	0x080011f5
 8001004:	08001213 	.word	0x08001213

08001008 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001010:	46c0      	nop			@ (mov r8, r8)
 8001012:	46bd      	mov	sp, r7
 8001014:	b002      	add	sp, #8
 8001016:	bd80      	pop	{r7, pc}

08001018 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001020:	46c0      	nop			@ (mov r8, r8)
 8001022:	46bd      	mov	sp, r7
 8001024:	b002      	add	sp, #8
 8001026:	bd80      	pop	{r7, pc}

08001028 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001030:	46c0      	nop			@ (mov r8, r8)
 8001032:	46bd      	mov	sp, r7
 8001034:	b002      	add	sp, #8
 8001036:	bd80      	pop	{r7, pc}

08001038 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001040:	2300      	movs	r3, #0
 8001042:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001044:	2300      	movs	r3, #0
 8001046:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	2203      	movs	r2, #3
 8001050:	4013      	ands	r3, r2
 8001052:	2b01      	cmp	r3, #1
 8001054:	d112      	bne.n	800107c <ADC_Enable+0x44>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2201      	movs	r2, #1
 800105e:	4013      	ands	r3, r2
 8001060:	2b01      	cmp	r3, #1
 8001062:	d009      	beq.n	8001078 <ADC_Enable+0x40>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	68da      	ldr	r2, [r3, #12]
 800106a:	2380      	movs	r3, #128	@ 0x80
 800106c:	021b      	lsls	r3, r3, #8
 800106e:	401a      	ands	r2, r3
 8001070:	2380      	movs	r3, #128	@ 0x80
 8001072:	021b      	lsls	r3, r3, #8
 8001074:	429a      	cmp	r2, r3
 8001076:	d101      	bne.n	800107c <ADC_Enable+0x44>
 8001078:	2301      	movs	r3, #1
 800107a:	e000      	b.n	800107e <ADC_Enable+0x46>
 800107c:	2300      	movs	r3, #0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d152      	bne.n	8001128 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	4a2a      	ldr	r2, [pc, #168]	@ (8001134 <ADC_Enable+0xfc>)
 800108a:	4013      	ands	r3, r2
 800108c:	d00d      	beq.n	80010aa <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001092:	2210      	movs	r2, #16
 8001094:	431a      	orrs	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800109e:	2201      	movs	r2, #1
 80010a0:	431a      	orrs	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e03f      	b.n	800112a <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	689a      	ldr	r2, [r3, #8]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2101      	movs	r1, #1
 80010b6:	430a      	orrs	r2, r1
 80010b8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001138 <ADC_Enable+0x100>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	491f      	ldr	r1, [pc, #124]	@ (800113c <ADC_Enable+0x104>)
 80010c0:	0018      	movs	r0, r3
 80010c2:	f7ff f82b 	bl	800011c <__udivsi3>
 80010c6:	0003      	movs	r3, r0
 80010c8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80010ca:	e002      	b.n	80010d2 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1f9      	bne.n	80010cc <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80010d8:	f7ff ff0a 	bl	8000ef0 <HAL_GetTick>
 80010dc:	0003      	movs	r3, r0
 80010de:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80010e0:	e01b      	b.n	800111a <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80010e2:	f7ff ff05 	bl	8000ef0 <HAL_GetTick>
 80010e6:	0002      	movs	r2, r0
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d914      	bls.n	800111a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2201      	movs	r2, #1
 80010f8:	4013      	ands	r3, r2
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d00d      	beq.n	800111a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001102:	2210      	movs	r2, #16
 8001104:	431a      	orrs	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800110e:	2201      	movs	r2, #1
 8001110:	431a      	orrs	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e007      	b.n	800112a <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2201      	movs	r2, #1
 8001122:	4013      	ands	r3, r2
 8001124:	2b01      	cmp	r3, #1
 8001126:	d1dc      	bne.n	80010e2 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001128:	2300      	movs	r3, #0
}
 800112a:	0018      	movs	r0, r3
 800112c:	46bd      	mov	sp, r7
 800112e:	b004      	add	sp, #16
 8001130:	bd80      	pop	{r7, pc}
 8001132:	46c0      	nop			@ (mov r8, r8)
 8001134:	80000017 	.word	0x80000017
 8001138:	20000000 	.word	0x20000000
 800113c:	000f4240 	.word	0x000f4240

08001140 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800114c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001152:	2250      	movs	r2, #80	@ 0x50
 8001154:	4013      	ands	r3, r2
 8001156:	d140      	bne.n	80011da <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800115c:	2280      	movs	r2, #128	@ 0x80
 800115e:	0092      	lsls	r2, r2, #2
 8001160:	431a      	orrs	r2, r3
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	68da      	ldr	r2, [r3, #12]
 800116c:	23c0      	movs	r3, #192	@ 0xc0
 800116e:	011b      	lsls	r3, r3, #4
 8001170:	4013      	ands	r3, r2
 8001172:	d12d      	bne.n	80011d0 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001178:	2b00      	cmp	r3, #0
 800117a:	d129      	bne.n	80011d0 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2208      	movs	r2, #8
 8001184:	4013      	ands	r3, r2
 8001186:	2b08      	cmp	r3, #8
 8001188:	d122      	bne.n	80011d0 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	2204      	movs	r2, #4
 8001192:	4013      	ands	r3, r2
 8001194:	d110      	bne.n	80011b8 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	210c      	movs	r1, #12
 80011a2:	438a      	bics	r2, r1
 80011a4:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011aa:	4a11      	ldr	r2, [pc, #68]	@ (80011f0 <ADC_DMAConvCplt+0xb0>)
 80011ac:	4013      	ands	r3, r2
 80011ae:	2201      	movs	r2, #1
 80011b0:	431a      	orrs	r2, r3
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	639a      	str	r2, [r3, #56]	@ 0x38
 80011b6:	e00b      	b.n	80011d0 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011bc:	2220      	movs	r2, #32
 80011be:	431a      	orrs	r2, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	639a      	str	r2, [r3, #56]	@ 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011c8:	2201      	movs	r2, #1
 80011ca:	431a      	orrs	r2, r3
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	0018      	movs	r0, r3
 80011d4:	f7ff ff18 	bl	8001008 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80011d8:	e005      	b.n	80011e6 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	0010      	movs	r0, r2
 80011e4:	4798      	blx	r3
}
 80011e6:	46c0      	nop			@ (mov r8, r8)
 80011e8:	46bd      	mov	sp, r7
 80011ea:	b004      	add	sp, #16
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	46c0      	nop			@ (mov r8, r8)
 80011f0:	fffffefe 	.word	0xfffffefe

080011f4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001200:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	0018      	movs	r0, r3
 8001206:	f7ff ff07 	bl	8001018 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800120a:	46c0      	nop			@ (mov r8, r8)
 800120c:	46bd      	mov	sp, r7
 800120e:	b004      	add	sp, #16
 8001210:	bd80      	pop	{r7, pc}

08001212 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b084      	sub	sp, #16
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800121e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001224:	2240      	movs	r2, #64	@ 0x40
 8001226:	431a      	orrs	r2, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001230:	2204      	movs	r2, #4
 8001232:	431a      	orrs	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	0018      	movs	r0, r3
 800123c:	f7ff fef4 	bl	8001028 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001240:	46c0      	nop			@ (mov r8, r8)
 8001242:	46bd      	mov	sp, r7
 8001244:	b004      	add	sp, #16
 8001246:	bd80      	pop	{r7, pc}

08001248 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d101      	bne.n	800125a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e0f0      	b.n	800143c <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2220      	movs	r2, #32
 800125e:	5c9b      	ldrb	r3, [r3, r2]
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2b00      	cmp	r3, #0
 8001264:	d103      	bne.n	800126e <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	0018      	movs	r0, r3
 800126a:	f7ff fc21 	bl	8000ab0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2101      	movs	r1, #1
 800127a:	430a      	orrs	r2, r1
 800127c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800127e:	f7ff fe37 	bl	8000ef0 <HAL_GetTick>
 8001282:	0003      	movs	r3, r0
 8001284:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001286:	e013      	b.n	80012b0 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001288:	f7ff fe32 	bl	8000ef0 <HAL_GetTick>
 800128c:	0002      	movs	r2, r0
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b0a      	cmp	r3, #10
 8001294:	d90c      	bls.n	80012b0 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800129a:	2280      	movs	r2, #128	@ 0x80
 800129c:	0292      	lsls	r2, r2, #10
 800129e:	431a      	orrs	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2220      	movs	r2, #32
 80012a8:	2105      	movs	r1, #5
 80012aa:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e0c5      	b.n	800143c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2201      	movs	r2, #1
 80012b8:	4013      	ands	r3, r2
 80012ba:	d0e5      	beq.n	8001288 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2102      	movs	r1, #2
 80012c8:	438a      	bics	r2, r1
 80012ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012cc:	f7ff fe10 	bl	8000ef0 <HAL_GetTick>
 80012d0:	0003      	movs	r3, r0
 80012d2:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012d4:	e013      	b.n	80012fe <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012d6:	f7ff fe0b 	bl	8000ef0 <HAL_GetTick>
 80012da:	0002      	movs	r2, r0
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	2b0a      	cmp	r3, #10
 80012e2:	d90c      	bls.n	80012fe <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e8:	2280      	movs	r2, #128	@ 0x80
 80012ea:	0292      	lsls	r2, r2, #10
 80012ec:	431a      	orrs	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2220      	movs	r2, #32
 80012f6:	2105      	movs	r1, #5
 80012f8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e09e      	b.n	800143c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	2202      	movs	r2, #2
 8001306:	4013      	ands	r3, r2
 8001308:	d1e5      	bne.n	80012d6 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	7e1b      	ldrb	r3, [r3, #24]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d108      	bne.n	8001324 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2180      	movs	r1, #128	@ 0x80
 800131e:	430a      	orrs	r2, r1
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	e007      	b.n	8001334 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2180      	movs	r1, #128	@ 0x80
 8001330:	438a      	bics	r2, r1
 8001332:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	7e5b      	ldrb	r3, [r3, #25]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d108      	bne.n	800134e <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2140      	movs	r1, #64	@ 0x40
 8001348:	430a      	orrs	r2, r1
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	e007      	b.n	800135e <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2140      	movs	r1, #64	@ 0x40
 800135a:	438a      	bics	r2, r1
 800135c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	7e9b      	ldrb	r3, [r3, #26]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d108      	bne.n	8001378 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2120      	movs	r1, #32
 8001372:	430a      	orrs	r2, r1
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	e007      	b.n	8001388 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2120      	movs	r1, #32
 8001384:	438a      	bics	r2, r1
 8001386:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	7edb      	ldrb	r3, [r3, #27]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d108      	bne.n	80013a2 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2110      	movs	r1, #16
 800139c:	438a      	bics	r2, r1
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	e007      	b.n	80013b2 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2110      	movs	r1, #16
 80013ae:	430a      	orrs	r2, r1
 80013b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	7f1b      	ldrb	r3, [r3, #28]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d108      	bne.n	80013cc <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2108      	movs	r1, #8
 80013c6:	430a      	orrs	r2, r1
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	e007      	b.n	80013dc <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2108      	movs	r1, #8
 80013d8:	438a      	bics	r2, r1
 80013da:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	7f5b      	ldrb	r3, [r3, #29]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d108      	bne.n	80013f6 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2104      	movs	r1, #4
 80013f0:	430a      	orrs	r2, r1
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	e007      	b.n	8001406 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2104      	movs	r1, #4
 8001402:	438a      	bics	r2, r1
 8001404:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689a      	ldr	r2, [r3, #8]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	431a      	orrs	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	431a      	orrs	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	695b      	ldr	r3, [r3, #20]
 800141a:	431a      	orrs	r2, r3
 800141c:	0011      	movs	r1, r2
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	1e5a      	subs	r2, r3, #1
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	430a      	orrs	r2, r1
 800142a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2220      	movs	r2, #32
 8001436:	2101      	movs	r1, #1
 8001438:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800143a:	2300      	movs	r3, #0
}
 800143c:	0018      	movs	r0, r3
 800143e:	46bd      	mov	sp, r7
 8001440:	b004      	add	sp, #16
 8001442:	bd80      	pop	{r7, pc}

08001444 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001454:	2013      	movs	r0, #19
 8001456:	183b      	adds	r3, r7, r0
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	2120      	movs	r1, #32
 800145c:	5c52      	ldrb	r2, [r2, r1]
 800145e:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8001460:	0002      	movs	r2, r0
 8001462:	18bb      	adds	r3, r7, r2
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d004      	beq.n	8001474 <HAL_CAN_ConfigFilter+0x30>
 800146a:	18bb      	adds	r3, r7, r2
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b02      	cmp	r3, #2
 8001470:	d000      	beq.n	8001474 <HAL_CAN_ConfigFilter+0x30>
 8001472:	e0cd      	b.n	8001610 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001474:	697a      	ldr	r2, [r7, #20]
 8001476:	2380      	movs	r3, #128	@ 0x80
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	58d3      	ldr	r3, [r2, r3]
 800147c:	2201      	movs	r2, #1
 800147e:	431a      	orrs	r2, r3
 8001480:	0011      	movs	r1, r2
 8001482:	697a      	ldr	r2, [r7, #20]
 8001484:	2380      	movs	r3, #128	@ 0x80
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	221f      	movs	r2, #31
 8001490:	4013      	ands	r3, r2
 8001492:	2201      	movs	r2, #1
 8001494:	409a      	lsls	r2, r3
 8001496:	0013      	movs	r3, r2
 8001498:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800149a:	697a      	ldr	r2, [r7, #20]
 800149c:	2387      	movs	r3, #135	@ 0x87
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	58d3      	ldr	r3, [r2, r3]
 80014a2:	68fa      	ldr	r2, [r7, #12]
 80014a4:	43d2      	mvns	r2, r2
 80014a6:	401a      	ands	r2, r3
 80014a8:	0011      	movs	r1, r2
 80014aa:	697a      	ldr	r2, [r7, #20]
 80014ac:	2387      	movs	r3, #135	@ 0x87
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d129      	bne.n	800150e <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80014ba:	697a      	ldr	r2, [r7, #20]
 80014bc:	2383      	movs	r3, #131	@ 0x83
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	58d3      	ldr	r3, [r2, r3]
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	43d2      	mvns	r2, r2
 80014c6:	401a      	ands	r2, r3
 80014c8:	0011      	movs	r1, r2
 80014ca:	697a      	ldr	r2, [r7, #20]
 80014cc:	2383      	movs	r3, #131	@ 0x83
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	041b      	lsls	r3, r3, #16
 80014de:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80014e4:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	3248      	adds	r2, #72	@ 0x48
 80014ea:	00d2      	lsls	r2, r2, #3
 80014ec:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	041b      	lsls	r3, r3, #16
 80014fa:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001500:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001502:	6979      	ldr	r1, [r7, #20]
 8001504:	3348      	adds	r3, #72	@ 0x48
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	18cb      	adds	r3, r1, r3
 800150a:	3304      	adds	r3, #4
 800150c:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d128      	bne.n	8001568 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001516:	697a      	ldr	r2, [r7, #20]
 8001518:	2383      	movs	r3, #131	@ 0x83
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	58d2      	ldr	r2, [r2, r3]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	431a      	orrs	r2, r3
 8001522:	0011      	movs	r1, r2
 8001524:	697a      	ldr	r2, [r7, #20]
 8001526:	2383      	movs	r3, #131	@ 0x83
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	041b      	lsls	r3, r3, #16
 8001538:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800153e:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	3248      	adds	r2, #72	@ 0x48
 8001544:	00d2      	lsls	r2, r2, #3
 8001546:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	041b      	lsls	r3, r3, #16
 8001554:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800155a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800155c:	6979      	ldr	r1, [r7, #20]
 800155e:	3348      	adds	r3, #72	@ 0x48
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	18cb      	adds	r3, r1, r3
 8001564:	3304      	adds	r3, #4
 8001566:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d10c      	bne.n	800158a <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	2381      	movs	r3, #129	@ 0x81
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	58d3      	ldr	r3, [r2, r3]
 8001578:	68fa      	ldr	r2, [r7, #12]
 800157a:	43d2      	mvns	r2, r2
 800157c:	401a      	ands	r2, r3
 800157e:	0011      	movs	r1, r2
 8001580:	697a      	ldr	r2, [r7, #20]
 8001582:	2381      	movs	r3, #129	@ 0x81
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	50d1      	str	r1, [r2, r3]
 8001588:	e00a      	b.n	80015a0 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800158a:	697a      	ldr	r2, [r7, #20]
 800158c:	2381      	movs	r3, #129	@ 0x81
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	58d2      	ldr	r2, [r2, r3]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	431a      	orrs	r2, r3
 8001596:	0011      	movs	r1, r2
 8001598:	697a      	ldr	r2, [r7, #20]
 800159a:	2381      	movs	r3, #129	@ 0x81
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d10c      	bne.n	80015c2 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80015a8:	697a      	ldr	r2, [r7, #20]
 80015aa:	2385      	movs	r3, #133	@ 0x85
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	58d3      	ldr	r3, [r2, r3]
 80015b0:	68fa      	ldr	r2, [r7, #12]
 80015b2:	43d2      	mvns	r2, r2
 80015b4:	401a      	ands	r2, r3
 80015b6:	0011      	movs	r1, r2
 80015b8:	697a      	ldr	r2, [r7, #20]
 80015ba:	2385      	movs	r3, #133	@ 0x85
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	50d1      	str	r1, [r2, r3]
 80015c0:	e00a      	b.n	80015d8 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80015c2:	697a      	ldr	r2, [r7, #20]
 80015c4:	2385      	movs	r3, #133	@ 0x85
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	58d2      	ldr	r2, [r2, r3]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	431a      	orrs	r2, r3
 80015ce:	0011      	movs	r1, r2
 80015d0:	697a      	ldr	r2, [r7, #20]
 80015d2:	2385      	movs	r3, #133	@ 0x85
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	6a1b      	ldr	r3, [r3, #32]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d10a      	bne.n	80015f6 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80015e0:	697a      	ldr	r2, [r7, #20]
 80015e2:	2387      	movs	r3, #135	@ 0x87
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	58d2      	ldr	r2, [r2, r3]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	431a      	orrs	r2, r3
 80015ec:	0011      	movs	r1, r2
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	2387      	movs	r3, #135	@ 0x87
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80015f6:	697a      	ldr	r2, [r7, #20]
 80015f8:	2380      	movs	r3, #128	@ 0x80
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	58d3      	ldr	r3, [r2, r3]
 80015fe:	2201      	movs	r2, #1
 8001600:	4393      	bics	r3, r2
 8001602:	0019      	movs	r1, r3
 8001604:	697a      	ldr	r2, [r7, #20]
 8001606:	2380      	movs	r3, #128	@ 0x80
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 800160c:	2300      	movs	r3, #0
 800160e:	e007      	b.n	8001620 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001614:	2280      	movs	r2, #128	@ 0x80
 8001616:	02d2      	lsls	r2, r2, #11
 8001618:	431a      	orrs	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
  }
}
 8001620:	0018      	movs	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	b006      	add	sp, #24
 8001626:	bd80      	pop	{r7, pc}

08001628 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2220      	movs	r2, #32
 8001634:	5c9b      	ldrb	r3, [r3, r2]
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2b01      	cmp	r3, #1
 800163a:	d12f      	bne.n	800169c <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2220      	movs	r2, #32
 8001640:	2102      	movs	r1, #2
 8001642:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2101      	movs	r1, #1
 8001650:	438a      	bics	r2, r1
 8001652:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001654:	f7ff fc4c 	bl	8000ef0 <HAL_GetTick>
 8001658:	0003      	movs	r3, r0
 800165a:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800165c:	e013      	b.n	8001686 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800165e:	f7ff fc47 	bl	8000ef0 <HAL_GetTick>
 8001662:	0002      	movs	r2, r0
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b0a      	cmp	r3, #10
 800166a:	d90c      	bls.n	8001686 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001670:	2280      	movs	r2, #128	@ 0x80
 8001672:	0292      	lsls	r2, r2, #10
 8001674:	431a      	orrs	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2220      	movs	r2, #32
 800167e:	2105      	movs	r1, #5
 8001680:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e012      	b.n	80016ac <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	2201      	movs	r2, #1
 800168e:	4013      	ands	r3, r2
 8001690:	d1e5      	bne.n	800165e <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001698:	2300      	movs	r3, #0
 800169a:	e007      	b.n	80016ac <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a0:	2280      	movs	r2, #128	@ 0x80
 80016a2:	0312      	lsls	r2, r2, #12
 80016a4:	431a      	orrs	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
  }
}
 80016ac:	0018      	movs	r0, r3
 80016ae:	46bd      	mov	sp, r7
 80016b0:	b004      	add	sp, #16
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b088      	sub	sp, #32
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
 80016c0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80016c2:	201f      	movs	r0, #31
 80016c4:	183b      	adds	r3, r7, r0
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	2120      	movs	r1, #32
 80016ca:	5c52      	ldrb	r2, [r2, r1]
 80016cc:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80016d6:	183b      	adds	r3, r7, r0
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d004      	beq.n	80016e8 <HAL_CAN_AddTxMessage+0x34>
 80016de:	183b      	adds	r3, r7, r0
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d000      	beq.n	80016e8 <HAL_CAN_AddTxMessage+0x34>
 80016e6:	e0ab      	b.n	8001840 <HAL_CAN_AddTxMessage+0x18c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	2380      	movs	r3, #128	@ 0x80
 80016ec:	04db      	lsls	r3, r3, #19
 80016ee:	4013      	ands	r3, r2
 80016f0:	d10a      	bne.n	8001708 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	2380      	movs	r3, #128	@ 0x80
 80016f6:	051b      	lsls	r3, r3, #20
 80016f8:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80016fa:	d105      	bne.n	8001708 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	2380      	movs	r3, #128	@ 0x80
 8001700:	055b      	lsls	r3, r3, #21
 8001702:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001704:	d100      	bne.n	8001708 <HAL_CAN_AddTxMessage+0x54>
 8001706:	e092      	b.n	800182e <HAL_CAN_AddTxMessage+0x17a>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	0e1b      	lsrs	r3, r3, #24
 800170c:	2203      	movs	r2, #3
 800170e:	4013      	ands	r3, r2
 8001710:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001712:	2201      	movs	r2, #1
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	409a      	lsls	r2, r3
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d10c      	bne.n	800173e <HAL_CAN_AddTxMessage+0x8a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4311      	orrs	r1, r2
 8001734:	697a      	ldr	r2, [r7, #20]
 8001736:	3218      	adds	r2, #24
 8001738:	0112      	lsls	r2, r2, #4
 800173a:	50d1      	str	r1, [r2, r3]
 800173c:	e00f      	b.n	800175e <HAL_CAN_AddTxMessage+0xaa>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001748:	431a      	orrs	r2, r3
 800174a:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8001754:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001756:	697a      	ldr	r2, [r7, #20]
 8001758:	3218      	adds	r2, #24
 800175a:	0112      	lsls	r2, r2, #4
 800175c:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6819      	ldr	r1, [r3, #0]
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	691a      	ldr	r2, [r3, #16]
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	3318      	adds	r3, #24
 800176a:	011b      	lsls	r3, r3, #4
 800176c:	18cb      	adds	r3, r1, r3
 800176e:	3304      	adds	r3, #4
 8001770:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	7d1b      	ldrb	r3, [r3, #20]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d112      	bne.n	80017a0 <HAL_CAN_AddTxMessage+0xec>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	3318      	adds	r3, #24
 8001782:	011b      	lsls	r3, r3, #4
 8001784:	18d3      	adds	r3, r2, r3
 8001786:	3304      	adds	r3, #4
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6819      	ldr	r1, [r3, #0]
 800178e:	2380      	movs	r3, #128	@ 0x80
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	431a      	orrs	r2, r3
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	3318      	adds	r3, #24
 8001798:	011b      	lsls	r3, r3, #4
 800179a:	18cb      	adds	r3, r1, r3
 800179c:	3304      	adds	r3, #4
 800179e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3307      	adds	r3, #7
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	061a      	lsls	r2, r3, #24
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3306      	adds	r3, #6
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	041b      	lsls	r3, r3, #16
 80017b0:	431a      	orrs	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3305      	adds	r3, #5
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	021b      	lsls	r3, r3, #8
 80017ba:	431a      	orrs	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3304      	adds	r3, #4
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	0019      	movs	r1, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	6818      	ldr	r0, [r3, #0]
 80017c8:	430a      	orrs	r2, r1
 80017ca:	6979      	ldr	r1, [r7, #20]
 80017cc:	23c6      	movs	r3, #198	@ 0xc6
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	0109      	lsls	r1, r1, #4
 80017d2:	1841      	adds	r1, r0, r1
 80017d4:	18cb      	adds	r3, r1, r3
 80017d6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3303      	adds	r3, #3
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	061a      	lsls	r2, r3, #24
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3302      	adds	r3, #2
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	041b      	lsls	r3, r3, #16
 80017e8:	431a      	orrs	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	3301      	adds	r3, #1
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	021b      	lsls	r3, r3, #8
 80017f2:	431a      	orrs	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	0019      	movs	r1, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	6818      	ldr	r0, [r3, #0]
 80017fe:	430a      	orrs	r2, r1
 8001800:	6979      	ldr	r1, [r7, #20]
 8001802:	23c4      	movs	r3, #196	@ 0xc4
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	0109      	lsls	r1, r1, #4
 8001808:	1841      	adds	r1, r0, r1
 800180a:	18cb      	adds	r3, r1, r3
 800180c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	3218      	adds	r2, #24
 8001816:	0112      	lsls	r2, r2, #4
 8001818:	58d2      	ldr	r2, [r2, r3]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2101      	movs	r1, #1
 8001820:	4311      	orrs	r1, r2
 8001822:	697a      	ldr	r2, [r7, #20]
 8001824:	3218      	adds	r2, #24
 8001826:	0112      	lsls	r2, r2, #4
 8001828:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 800182a:	2300      	movs	r3, #0
 800182c:	e010      	b.n	8001850 <HAL_CAN_AddTxMessage+0x19c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001832:	2280      	movs	r2, #128	@ 0x80
 8001834:	0392      	lsls	r2, r2, #14
 8001836:	431a      	orrs	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e007      	b.n	8001850 <HAL_CAN_AddTxMessage+0x19c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001844:	2280      	movs	r2, #128	@ 0x80
 8001846:	02d2      	lsls	r2, r2, #11
 8001848:	431a      	orrs	r2, r3
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
  }
}
 8001850:	0018      	movs	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	b008      	add	sp, #32
 8001856:	bd80      	pop	{r7, pc}

08001858 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	0002      	movs	r2, r0
 8001860:	1dfb      	adds	r3, r7, #7
 8001862:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001864:	1dfb      	adds	r3, r7, #7
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b7f      	cmp	r3, #127	@ 0x7f
 800186a:	d809      	bhi.n	8001880 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800186c:	1dfb      	adds	r3, r7, #7
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	001a      	movs	r2, r3
 8001872:	231f      	movs	r3, #31
 8001874:	401a      	ands	r2, r3
 8001876:	4b04      	ldr	r3, [pc, #16]	@ (8001888 <__NVIC_EnableIRQ+0x30>)
 8001878:	2101      	movs	r1, #1
 800187a:	4091      	lsls	r1, r2
 800187c:	000a      	movs	r2, r1
 800187e:	601a      	str	r2, [r3, #0]
  }
}
 8001880:	46c0      	nop			@ (mov r8, r8)
 8001882:	46bd      	mov	sp, r7
 8001884:	b002      	add	sp, #8
 8001886:	bd80      	pop	{r7, pc}
 8001888:	e000e100 	.word	0xe000e100

0800188c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800188c:	b590      	push	{r4, r7, lr}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	0002      	movs	r2, r0
 8001894:	6039      	str	r1, [r7, #0]
 8001896:	1dfb      	adds	r3, r7, #7
 8001898:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800189a:	1dfb      	adds	r3, r7, #7
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b7f      	cmp	r3, #127	@ 0x7f
 80018a0:	d828      	bhi.n	80018f4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018a2:	4a2f      	ldr	r2, [pc, #188]	@ (8001960 <__NVIC_SetPriority+0xd4>)
 80018a4:	1dfb      	adds	r3, r7, #7
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	b25b      	sxtb	r3, r3
 80018aa:	089b      	lsrs	r3, r3, #2
 80018ac:	33c0      	adds	r3, #192	@ 0xc0
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	589b      	ldr	r3, [r3, r2]
 80018b2:	1dfa      	adds	r2, r7, #7
 80018b4:	7812      	ldrb	r2, [r2, #0]
 80018b6:	0011      	movs	r1, r2
 80018b8:	2203      	movs	r2, #3
 80018ba:	400a      	ands	r2, r1
 80018bc:	00d2      	lsls	r2, r2, #3
 80018be:	21ff      	movs	r1, #255	@ 0xff
 80018c0:	4091      	lsls	r1, r2
 80018c2:	000a      	movs	r2, r1
 80018c4:	43d2      	mvns	r2, r2
 80018c6:	401a      	ands	r2, r3
 80018c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	019b      	lsls	r3, r3, #6
 80018ce:	22ff      	movs	r2, #255	@ 0xff
 80018d0:	401a      	ands	r2, r3
 80018d2:	1dfb      	adds	r3, r7, #7
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	0018      	movs	r0, r3
 80018d8:	2303      	movs	r3, #3
 80018da:	4003      	ands	r3, r0
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018e0:	481f      	ldr	r0, [pc, #124]	@ (8001960 <__NVIC_SetPriority+0xd4>)
 80018e2:	1dfb      	adds	r3, r7, #7
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	b25b      	sxtb	r3, r3
 80018e8:	089b      	lsrs	r3, r3, #2
 80018ea:	430a      	orrs	r2, r1
 80018ec:	33c0      	adds	r3, #192	@ 0xc0
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80018f2:	e031      	b.n	8001958 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001964 <__NVIC_SetPriority+0xd8>)
 80018f6:	1dfb      	adds	r3, r7, #7
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	0019      	movs	r1, r3
 80018fc:	230f      	movs	r3, #15
 80018fe:	400b      	ands	r3, r1
 8001900:	3b08      	subs	r3, #8
 8001902:	089b      	lsrs	r3, r3, #2
 8001904:	3306      	adds	r3, #6
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	18d3      	adds	r3, r2, r3
 800190a:	3304      	adds	r3, #4
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	1dfa      	adds	r2, r7, #7
 8001910:	7812      	ldrb	r2, [r2, #0]
 8001912:	0011      	movs	r1, r2
 8001914:	2203      	movs	r2, #3
 8001916:	400a      	ands	r2, r1
 8001918:	00d2      	lsls	r2, r2, #3
 800191a:	21ff      	movs	r1, #255	@ 0xff
 800191c:	4091      	lsls	r1, r2
 800191e:	000a      	movs	r2, r1
 8001920:	43d2      	mvns	r2, r2
 8001922:	401a      	ands	r2, r3
 8001924:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	019b      	lsls	r3, r3, #6
 800192a:	22ff      	movs	r2, #255	@ 0xff
 800192c:	401a      	ands	r2, r3
 800192e:	1dfb      	adds	r3, r7, #7
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	0018      	movs	r0, r3
 8001934:	2303      	movs	r3, #3
 8001936:	4003      	ands	r3, r0
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800193c:	4809      	ldr	r0, [pc, #36]	@ (8001964 <__NVIC_SetPriority+0xd8>)
 800193e:	1dfb      	adds	r3, r7, #7
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	001c      	movs	r4, r3
 8001944:	230f      	movs	r3, #15
 8001946:	4023      	ands	r3, r4
 8001948:	3b08      	subs	r3, #8
 800194a:	089b      	lsrs	r3, r3, #2
 800194c:	430a      	orrs	r2, r1
 800194e:	3306      	adds	r3, #6
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	18c3      	adds	r3, r0, r3
 8001954:	3304      	adds	r3, #4
 8001956:	601a      	str	r2, [r3, #0]
}
 8001958:	46c0      	nop			@ (mov r8, r8)
 800195a:	46bd      	mov	sp, r7
 800195c:	b003      	add	sp, #12
 800195e:	bd90      	pop	{r4, r7, pc}
 8001960:	e000e100 	.word	0xe000e100
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	1e5a      	subs	r2, r3, #1
 8001974:	2380      	movs	r3, #128	@ 0x80
 8001976:	045b      	lsls	r3, r3, #17
 8001978:	429a      	cmp	r2, r3
 800197a:	d301      	bcc.n	8001980 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800197c:	2301      	movs	r3, #1
 800197e:	e010      	b.n	80019a2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001980:	4b0a      	ldr	r3, [pc, #40]	@ (80019ac <SysTick_Config+0x44>)
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	3a01      	subs	r2, #1
 8001986:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001988:	2301      	movs	r3, #1
 800198a:	425b      	negs	r3, r3
 800198c:	2103      	movs	r1, #3
 800198e:	0018      	movs	r0, r3
 8001990:	f7ff ff7c 	bl	800188c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001994:	4b05      	ldr	r3, [pc, #20]	@ (80019ac <SysTick_Config+0x44>)
 8001996:	2200      	movs	r2, #0
 8001998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800199a:	4b04      	ldr	r3, [pc, #16]	@ (80019ac <SysTick_Config+0x44>)
 800199c:	2207      	movs	r2, #7
 800199e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	0018      	movs	r0, r3
 80019a4:	46bd      	mov	sp, r7
 80019a6:	b002      	add	sp, #8
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	46c0      	nop			@ (mov r8, r8)
 80019ac:	e000e010 	.word	0xe000e010

080019b0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60b9      	str	r1, [r7, #8]
 80019b8:	607a      	str	r2, [r7, #4]
 80019ba:	210f      	movs	r1, #15
 80019bc:	187b      	adds	r3, r7, r1
 80019be:	1c02      	adds	r2, r0, #0
 80019c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80019c2:	68ba      	ldr	r2, [r7, #8]
 80019c4:	187b      	adds	r3, r7, r1
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	b25b      	sxtb	r3, r3
 80019ca:	0011      	movs	r1, r2
 80019cc:	0018      	movs	r0, r3
 80019ce:	f7ff ff5d 	bl	800188c <__NVIC_SetPriority>
}
 80019d2:	46c0      	nop			@ (mov r8, r8)
 80019d4:	46bd      	mov	sp, r7
 80019d6:	b004      	add	sp, #16
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	0002      	movs	r2, r0
 80019e2:	1dfb      	adds	r3, r7, #7
 80019e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019e6:	1dfb      	adds	r3, r7, #7
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	b25b      	sxtb	r3, r3
 80019ec:	0018      	movs	r0, r3
 80019ee:	f7ff ff33 	bl	8001858 <__NVIC_EnableIRQ>
}
 80019f2:	46c0      	nop			@ (mov r8, r8)
 80019f4:	46bd      	mov	sp, r7
 80019f6:	b002      	add	sp, #8
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	0018      	movs	r0, r3
 8001a06:	f7ff ffaf 	bl	8001968 <SysTick_Config>
 8001a0a:	0003      	movs	r3, r0
}
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	b002      	add	sp, #8
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
 8001a20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a22:	2317      	movs	r3, #23
 8001a24:	18fb      	adds	r3, r7, r3
 8001a26:	2200      	movs	r2, #0
 8001a28:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2220      	movs	r2, #32
 8001a2e:	5c9b      	ldrb	r3, [r3, r2]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d101      	bne.n	8001a38 <HAL_DMA_Start_IT+0x24>
 8001a34:	2302      	movs	r3, #2
 8001a36:	e04f      	b.n	8001ad8 <HAL_DMA_Start_IT+0xc4>
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2220      	movs	r2, #32
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2221      	movs	r2, #33	@ 0x21
 8001a44:	5c9b      	ldrb	r3, [r3, r2]
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d13a      	bne.n	8001ac2 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2221      	movs	r2, #33	@ 0x21
 8001a50:	2102      	movs	r1, #2
 8001a52:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2200      	movs	r2, #0
 8001a58:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2101      	movs	r1, #1
 8001a66:	438a      	bics	r2, r1
 8001a68:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	68b9      	ldr	r1, [r7, #8]
 8001a70:	68f8      	ldr	r0, [r7, #12]
 8001a72:	f000 f928 	bl	8001cc6 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d008      	beq.n	8001a90 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	210e      	movs	r1, #14
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	e00f      	b.n	8001ab0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	210a      	movs	r1, #10
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2104      	movs	r1, #4
 8001aac:	438a      	bics	r2, r1
 8001aae:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2101      	movs	r1, #1
 8001abc:	430a      	orrs	r2, r1
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	e007      	b.n	8001ad2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2220      	movs	r2, #32
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001aca:	2317      	movs	r3, #23
 8001acc:	18fb      	adds	r3, r7, r3
 8001ace:	2202      	movs	r2, #2
 8001ad0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001ad2:	2317      	movs	r3, #23
 8001ad4:	18fb      	adds	r3, r7, r3
 8001ad6:	781b      	ldrb	r3, [r3, #0]
}
 8001ad8:	0018      	movs	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	b006      	add	sp, #24
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ae8:	210f      	movs	r1, #15
 8001aea:	187b      	adds	r3, r7, r1
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2221      	movs	r2, #33	@ 0x21
 8001af4:	5c9b      	ldrb	r3, [r3, r2]
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d006      	beq.n	8001b0a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2204      	movs	r2, #4
 8001b00:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001b02:	187b      	adds	r3, r7, r1
 8001b04:	2201      	movs	r2, #1
 8001b06:	701a      	strb	r2, [r3, #0]
 8001b08:	e028      	b.n	8001b5c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	210e      	movs	r1, #14
 8001b16:	438a      	bics	r2, r1
 8001b18:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2101      	movs	r1, #1
 8001b26:	438a      	bics	r2, r1
 8001b28:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b32:	2101      	movs	r1, #1
 8001b34:	4091      	lsls	r1, r2
 8001b36:	000a      	movs	r2, r1
 8001b38:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2221      	movs	r2, #33	@ 0x21
 8001b3e:	2101      	movs	r1, #1
 8001b40:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2220      	movs	r2, #32
 8001b46:	2100      	movs	r1, #0
 8001b48:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d004      	beq.n	8001b5c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	0010      	movs	r0, r2
 8001b5a:	4798      	blx	r3
    }
  }
  return status;
 8001b5c:	230f      	movs	r3, #15
 8001b5e:	18fb      	adds	r3, r7, r3
 8001b60:	781b      	ldrb	r3, [r3, #0]
}
 8001b62:	0018      	movs	r0, r3
 8001b64:	46bd      	mov	sp, r7
 8001b66:	b004      	add	sp, #16
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b084      	sub	sp, #16
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b86:	2204      	movs	r2, #4
 8001b88:	409a      	lsls	r2, r3
 8001b8a:	0013      	movs	r3, r2
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	d024      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x72>
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	2204      	movs	r2, #4
 8001b96:	4013      	ands	r3, r2
 8001b98:	d020      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2220      	movs	r2, #32
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	d107      	bne.n	8001bb6 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2104      	movs	r1, #4
 8001bb2:	438a      	bics	r2, r1
 8001bb4:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bbe:	2104      	movs	r1, #4
 8001bc0:	4091      	lsls	r1, r2
 8001bc2:	000a      	movs	r2, r1
 8001bc4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d100      	bne.n	8001bd0 <HAL_DMA_IRQHandler+0x66>
 8001bce:	e06a      	b.n	8001ca6 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	0010      	movs	r0, r2
 8001bd8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001bda:	e064      	b.n	8001ca6 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be0:	2202      	movs	r2, #2
 8001be2:	409a      	lsls	r2, r3
 8001be4:	0013      	movs	r3, r2
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	4013      	ands	r3, r2
 8001bea:	d02b      	beq.n	8001c44 <HAL_DMA_IRQHandler+0xda>
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	2202      	movs	r2, #2
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	d027      	beq.n	8001c44 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2220      	movs	r2, #32
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d10b      	bne.n	8001c18 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	210a      	movs	r1, #10
 8001c0c:	438a      	bics	r2, r1
 8001c0e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2221      	movs	r2, #33	@ 0x21
 8001c14:	2101      	movs	r1, #1
 8001c16:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c20:	2102      	movs	r1, #2
 8001c22:	4091      	lsls	r1, r2
 8001c24:	000a      	movs	r2, r1
 8001c26:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2220      	movs	r2, #32
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d036      	beq.n	8001ca6 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	0010      	movs	r0, r2
 8001c40:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001c42:	e030      	b.n	8001ca6 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c48:	2208      	movs	r2, #8
 8001c4a:	409a      	lsls	r2, r3
 8001c4c:	0013      	movs	r3, r2
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	4013      	ands	r3, r2
 8001c52:	d028      	beq.n	8001ca6 <HAL_DMA_IRQHandler+0x13c>
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	2208      	movs	r2, #8
 8001c58:	4013      	ands	r3, r2
 8001c5a:	d024      	beq.n	8001ca6 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	210e      	movs	r1, #14
 8001c68:	438a      	bics	r2, r1
 8001c6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c74:	2101      	movs	r1, #1
 8001c76:	4091      	lsls	r1, r2
 8001c78:	000a      	movs	r2, r1
 8001c7a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2221      	movs	r2, #33	@ 0x21
 8001c86:	2101      	movs	r1, #1
 8001c88:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2220      	movs	r2, #32
 8001c8e:	2100      	movs	r1, #0
 8001c90:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d005      	beq.n	8001ca6 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	0010      	movs	r0, r2
 8001ca2:	4798      	blx	r3
    }
  }
}
 8001ca4:	e7ff      	b.n	8001ca6 <HAL_DMA_IRQHandler+0x13c>
 8001ca6:	46c0      	nop			@ (mov r8, r8)
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	b004      	add	sp, #16
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b082      	sub	sp, #8
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2221      	movs	r2, #33	@ 0x21
 8001cba:	5c9b      	ldrb	r3, [r3, r2]
 8001cbc:	b2db      	uxtb	r3, r3
}
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	b002      	add	sp, #8
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b084      	sub	sp, #16
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	60f8      	str	r0, [r7, #12]
 8001cce:	60b9      	str	r1, [r7, #8]
 8001cd0:	607a      	str	r2, [r7, #4]
 8001cd2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cdc:	2101      	movs	r1, #1
 8001cde:	4091      	lsls	r1, r2
 8001ce0:	000a      	movs	r2, r1
 8001ce2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b10      	cmp	r3, #16
 8001cf2:	d108      	bne.n	8001d06 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68ba      	ldr	r2, [r7, #8]
 8001d02:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d04:	e007      	b.n	8001d16 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	60da      	str	r2, [r3, #12]
}
 8001d16:	46c0      	nop			@ (mov r8, r8)
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	b004      	add	sp, #16
 8001d1c:	bd80      	pop	{r7, pc}
	...

08001d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d2e:	e149      	b.n	8001fc4 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2101      	movs	r1, #1
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	4091      	lsls	r1, r2
 8001d3a:	000a      	movs	r2, r1
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d100      	bne.n	8001d48 <HAL_GPIO_Init+0x28>
 8001d46:	e13a      	b.n	8001fbe <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2203      	movs	r2, #3
 8001d4e:	4013      	ands	r3, r2
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d005      	beq.n	8001d60 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2203      	movs	r2, #3
 8001d5a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d130      	bne.n	8001dc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	409a      	lsls	r2, r3
 8001d6e:	0013      	movs	r3, r2
 8001d70:	43da      	mvns	r2, r3
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	4013      	ands	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	68da      	ldr	r2, [r3, #12]
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	409a      	lsls	r2, r3
 8001d82:	0013      	movs	r3, r2
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d96:	2201      	movs	r2, #1
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	409a      	lsls	r2, r3
 8001d9c:	0013      	movs	r3, r2
 8001d9e:	43da      	mvns	r2, r3
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	4013      	ands	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	091b      	lsrs	r3, r3, #4
 8001dac:	2201      	movs	r2, #1
 8001dae:	401a      	ands	r2, r3
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	409a      	lsls	r2, r3
 8001db4:	0013      	movs	r3, r2
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	2203      	movs	r2, #3
 8001dc8:	4013      	ands	r3, r2
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	d017      	beq.n	8001dfe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	2203      	movs	r2, #3
 8001dda:	409a      	lsls	r2, r3
 8001ddc:	0013      	movs	r3, r2
 8001dde:	43da      	mvns	r2, r3
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	4013      	ands	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	409a      	lsls	r2, r3
 8001df0:	0013      	movs	r3, r2
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2203      	movs	r2, #3
 8001e04:	4013      	ands	r3, r2
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d123      	bne.n	8001e52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	08da      	lsrs	r2, r3, #3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3208      	adds	r2, #8
 8001e12:	0092      	lsls	r2, r2, #2
 8001e14:	58d3      	ldr	r3, [r2, r3]
 8001e16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	2207      	movs	r2, #7
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	220f      	movs	r2, #15
 8001e22:	409a      	lsls	r2, r3
 8001e24:	0013      	movs	r3, r2
 8001e26:	43da      	mvns	r2, r3
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	691a      	ldr	r2, [r3, #16]
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	2107      	movs	r1, #7
 8001e36:	400b      	ands	r3, r1
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	409a      	lsls	r2, r3
 8001e3c:	0013      	movs	r3, r2
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	08da      	lsrs	r2, r3, #3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3208      	adds	r2, #8
 8001e4c:	0092      	lsls	r2, r2, #2
 8001e4e:	6939      	ldr	r1, [r7, #16]
 8001e50:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	409a      	lsls	r2, r3
 8001e60:	0013      	movs	r3, r2
 8001e62:	43da      	mvns	r2, r3
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	4013      	ands	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2203      	movs	r2, #3
 8001e70:	401a      	ands	r2, r3
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	409a      	lsls	r2, r3
 8001e78:	0013      	movs	r3, r2
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685a      	ldr	r2, [r3, #4]
 8001e8a:	23c0      	movs	r3, #192	@ 0xc0
 8001e8c:	029b      	lsls	r3, r3, #10
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d100      	bne.n	8001e94 <HAL_GPIO_Init+0x174>
 8001e92:	e094      	b.n	8001fbe <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e94:	4b51      	ldr	r3, [pc, #324]	@ (8001fdc <HAL_GPIO_Init+0x2bc>)
 8001e96:	699a      	ldr	r2, [r3, #24]
 8001e98:	4b50      	ldr	r3, [pc, #320]	@ (8001fdc <HAL_GPIO_Init+0x2bc>)
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	619a      	str	r2, [r3, #24]
 8001ea0:	4b4e      	ldr	r3, [pc, #312]	@ (8001fdc <HAL_GPIO_Init+0x2bc>)
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001eac:	4a4c      	ldr	r2, [pc, #304]	@ (8001fe0 <HAL_GPIO_Init+0x2c0>)
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	089b      	lsrs	r3, r3, #2
 8001eb2:	3302      	adds	r3, #2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	589b      	ldr	r3, [r3, r2]
 8001eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	2203      	movs	r2, #3
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	220f      	movs	r2, #15
 8001ec4:	409a      	lsls	r2, r3
 8001ec6:	0013      	movs	r3, r2
 8001ec8:	43da      	mvns	r2, r3
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	2390      	movs	r3, #144	@ 0x90
 8001ed4:	05db      	lsls	r3, r3, #23
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d00d      	beq.n	8001ef6 <HAL_GPIO_Init+0x1d6>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a41      	ldr	r2, [pc, #260]	@ (8001fe4 <HAL_GPIO_Init+0x2c4>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d007      	beq.n	8001ef2 <HAL_GPIO_Init+0x1d2>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a40      	ldr	r2, [pc, #256]	@ (8001fe8 <HAL_GPIO_Init+0x2c8>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d101      	bne.n	8001eee <HAL_GPIO_Init+0x1ce>
 8001eea:	2302      	movs	r3, #2
 8001eec:	e004      	b.n	8001ef8 <HAL_GPIO_Init+0x1d8>
 8001eee:	2305      	movs	r3, #5
 8001ef0:	e002      	b.n	8001ef8 <HAL_GPIO_Init+0x1d8>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <HAL_GPIO_Init+0x1d8>
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	2103      	movs	r1, #3
 8001efc:	400a      	ands	r2, r1
 8001efe:	0092      	lsls	r2, r2, #2
 8001f00:	4093      	lsls	r3, r2
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f08:	4935      	ldr	r1, [pc, #212]	@ (8001fe0 <HAL_GPIO_Init+0x2c0>)
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	089b      	lsrs	r3, r3, #2
 8001f0e:	3302      	adds	r3, #2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f16:	4b35      	ldr	r3, [pc, #212]	@ (8001fec <HAL_GPIO_Init+0x2cc>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	43da      	mvns	r2, r3
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	4013      	ands	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	2380      	movs	r3, #128	@ 0x80
 8001f2c:	035b      	lsls	r3, r3, #13
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d003      	beq.n	8001f3a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f3a:	4b2c      	ldr	r3, [pc, #176]	@ (8001fec <HAL_GPIO_Init+0x2cc>)
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001f40:	4b2a      	ldr	r3, [pc, #168]	@ (8001fec <HAL_GPIO_Init+0x2cc>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	43da      	mvns	r2, r3
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	2380      	movs	r3, #128	@ 0x80
 8001f56:	039b      	lsls	r3, r3, #14
 8001f58:	4013      	ands	r3, r2
 8001f5a:	d003      	beq.n	8001f64 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f64:	4b21      	ldr	r3, [pc, #132]	@ (8001fec <HAL_GPIO_Init+0x2cc>)
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001f6a:	4b20      	ldr	r3, [pc, #128]	@ (8001fec <HAL_GPIO_Init+0x2cc>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	43da      	mvns	r2, r3
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	4013      	ands	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	2380      	movs	r3, #128	@ 0x80
 8001f80:	029b      	lsls	r3, r3, #10
 8001f82:	4013      	ands	r3, r2
 8001f84:	d003      	beq.n	8001f8e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f8e:	4b17      	ldr	r3, [pc, #92]	@ (8001fec <HAL_GPIO_Init+0x2cc>)
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001f94:	4b15      	ldr	r3, [pc, #84]	@ (8001fec <HAL_GPIO_Init+0x2cc>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	43da      	mvns	r2, r3
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	2380      	movs	r3, #128	@ 0x80
 8001faa:	025b      	lsls	r3, r3, #9
 8001fac:	4013      	ands	r3, r2
 8001fae:	d003      	beq.n	8001fb8 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001fec <HAL_GPIO_Init+0x2cc>)
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	40da      	lsrs	r2, r3
 8001fcc:	1e13      	subs	r3, r2, #0
 8001fce:	d000      	beq.n	8001fd2 <HAL_GPIO_Init+0x2b2>
 8001fd0:	e6ae      	b.n	8001d30 <HAL_GPIO_Init+0x10>
  } 
}
 8001fd2:	46c0      	nop			@ (mov r8, r8)
 8001fd4:	46c0      	nop			@ (mov r8, r8)
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	b006      	add	sp, #24
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	40010000 	.word	0x40010000
 8001fe4:	48000400 	.word	0x48000400
 8001fe8:	48000800 	.word	0x48000800
 8001fec:	40010400 	.word	0x40010400

08001ff0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e0a8      	b.n	8002154 <HAL_I2C_Init+0x164>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2241      	movs	r2, #65	@ 0x41
 8002006:	5c9b      	ldrb	r3, [r3, r2]
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d12d      	bne.n	800206a <HAL_I2C_Init+0x7a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2240      	movs	r2, #64	@ 0x40
 8002012:	2100      	movs	r1, #0
 8002014:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a50      	ldr	r2, [pc, #320]	@ (800215c <HAL_I2C_Init+0x16c>)
 800201a:	655a      	str	r2, [r3, #84]	@ 0x54
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a50      	ldr	r2, [pc, #320]	@ (8002160 <HAL_I2C_Init+0x170>)
 8002020:	659a      	str	r2, [r3, #88]	@ 0x58
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a4f      	ldr	r2, [pc, #316]	@ (8002164 <HAL_I2C_Init+0x174>)
 8002026:	65da      	str	r2, [r3, #92]	@ 0x5c
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a4f      	ldr	r2, [pc, #316]	@ (8002168 <HAL_I2C_Init+0x178>)
 800202c:	661a      	str	r2, [r3, #96]	@ 0x60
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a4e      	ldr	r2, [pc, #312]	@ (800216c <HAL_I2C_Init+0x17c>)
 8002032:	665a      	str	r2, [r3, #100]	@ 0x64
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a4e      	ldr	r2, [pc, #312]	@ (8002170 <HAL_I2C_Init+0x180>)
 8002038:	669a      	str	r2, [r3, #104]	@ 0x68
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a4d      	ldr	r2, [pc, #308]	@ (8002174 <HAL_I2C_Init+0x184>)
 800203e:	66da      	str	r2, [r3, #108]	@ 0x6c
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a4d      	ldr	r2, [pc, #308]	@ (8002178 <HAL_I2C_Init+0x188>)
 8002044:	671a      	str	r2, [r3, #112]	@ 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a4c      	ldr	r2, [pc, #304]	@ (800217c <HAL_I2C_Init+0x18c>)
 800204a:	675a      	str	r2, [r3, #116]	@ 0x74
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a4c      	ldr	r2, [pc, #304]	@ (8002180 <HAL_I2C_Init+0x190>)
 8002050:	679a      	str	r2, [r3, #120]	@ 0x78

    if (hi2c->MspInitCallback == NULL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002056:	2b00      	cmp	r3, #0
 8002058:	d102      	bne.n	8002060 <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a49      	ldr	r2, [pc, #292]	@ (8002184 <HAL_I2C_Init+0x194>)
 800205e:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	0010      	movs	r0, r2
 8002068:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2241      	movs	r2, #65	@ 0x41
 800206e:	2124      	movs	r1, #36	@ 0x24
 8002070:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2101      	movs	r1, #1
 800207e:	438a      	bics	r2, r1
 8002080:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	493f      	ldr	r1, [pc, #252]	@ (8002188 <HAL_I2C_Init+0x198>)
 800208c:	400a      	ands	r2, r1
 800208e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689a      	ldr	r2, [r3, #8]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	493c      	ldr	r1, [pc, #240]	@ (800218c <HAL_I2C_Init+0x19c>)
 800209c:	400a      	ands	r2, r1
 800209e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d108      	bne.n	80020ba <HAL_I2C_Init+0xca>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2180      	movs	r1, #128	@ 0x80
 80020b2:	0209      	lsls	r1, r1, #8
 80020b4:	430a      	orrs	r2, r1
 80020b6:	609a      	str	r2, [r3, #8]
 80020b8:	e007      	b.n	80020ca <HAL_I2C_Init+0xda>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689a      	ldr	r2, [r3, #8]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2184      	movs	r1, #132	@ 0x84
 80020c4:	0209      	lsls	r1, r1, #8
 80020c6:	430a      	orrs	r2, r1
 80020c8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d104      	bne.n	80020dc <HAL_I2C_Init+0xec>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2280      	movs	r2, #128	@ 0x80
 80020d8:	0112      	lsls	r2, r2, #4
 80020da:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	685a      	ldr	r2, [r3, #4]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	492a      	ldr	r1, [pc, #168]	@ (8002190 <HAL_I2C_Init+0x1a0>)
 80020e8:	430a      	orrs	r2, r1
 80020ea:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68da      	ldr	r2, [r3, #12]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4925      	ldr	r1, [pc, #148]	@ (800218c <HAL_I2C_Init+0x19c>)
 80020f8:	400a      	ands	r2, r1
 80020fa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	691a      	ldr	r2, [r3, #16]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	695b      	ldr	r3, [r3, #20]
 8002104:	431a      	orrs	r2, r3
 8002106:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	430a      	orrs	r2, r1
 8002114:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69d9      	ldr	r1, [r3, #28]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a1a      	ldr	r2, [r3, #32]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2101      	movs	r1, #1
 8002132:	430a      	orrs	r2, r1
 8002134:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2241      	movs	r2, #65	@ 0x41
 8002140:	2120      	movs	r1, #32
 8002142:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2242      	movs	r2, #66	@ 0x42
 800214e:	2100      	movs	r1, #0
 8002150:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002152:	2300      	movs	r3, #0
}
 8002154:	0018      	movs	r0, r3
 8002156:	46bd      	mov	sp, r7
 8002158:	b002      	add	sp, #8
 800215a:	bd80      	pop	{r7, pc}
 800215c:	080023af 	.word	0x080023af
 8002160:	080023bf 	.word	0x080023bf
 8002164:	080023cf 	.word	0x080023cf
 8002168:	080023df 	.word	0x080023df
 800216c:	0800240f 	.word	0x0800240f
 8002170:	0800241f 	.word	0x0800241f
 8002174:	0800242f 	.word	0x0800242f
 8002178:	0800243f 	.word	0x0800243f
 800217c:	0800244f 	.word	0x0800244f
 8002180:	080023ef 	.word	0x080023ef
 8002184:	08000b4d 	.word	0x08000b4d
 8002188:	f0ffffff 	.word	0xf0ffffff
 800218c:	ffff7fff 	.word	0xffff7fff
 8002190:	02008000 	.word	0x02008000

08002194 <HAL_I2C_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_RegisterCallback(I2C_HandleTypeDef *hi2c, HAL_I2C_CallbackIDTypeDef CallbackID,
                                           pI2C_CallbackTypeDef pCallback)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	607a      	str	r2, [r7, #4]
 800219e:	230b      	movs	r3, #11
 80021a0:	18fb      	adds	r3, r7, r3
 80021a2:	1c0a      	adds	r2, r1, #0
 80021a4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021a6:	2317      	movs	r3, #23
 80021a8:	18fb      	adds	r3, r7, r3
 80021aa:	2200      	movs	r2, #0
 80021ac:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d108      	bne.n	80021c6 <HAL_I2C_RegisterCallback+0x32>
  {
    /* Update the error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b8:	2280      	movs	r2, #128	@ 0x80
 80021ba:	0052      	lsls	r2, r2, #1
 80021bc:	431a      	orrs	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	645a      	str	r2, [r3, #68]	@ 0x44

    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e079      	b.n	80022ba <HAL_I2C_RegisterCallback+0x126>
  }

  if (HAL_I2C_STATE_READY == hi2c->State)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2241      	movs	r2, #65	@ 0x41
 80021ca:	5c9b      	ldrb	r3, [r3, r2]
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b20      	cmp	r3, #32
 80021d0:	d142      	bne.n	8002258 <HAL_I2C_RegisterCallback+0xc4>
  {
    switch (CallbackID)
 80021d2:	230b      	movs	r3, #11
 80021d4:	18fb      	adds	r3, r7, r3
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b0a      	cmp	r3, #10
 80021da:	d831      	bhi.n	8002240 <HAL_I2C_RegisterCallback+0xac>
 80021dc:	009a      	lsls	r2, r3, #2
 80021de:	4b39      	ldr	r3, [pc, #228]	@ (80022c4 <HAL_I2C_RegisterCallback+0x130>)
 80021e0:	18d3      	adds	r3, r2, r3
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	469f      	mov	pc, r3
    {
      case HAL_I2C_MASTER_TX_COMPLETE_CB_ID :
        hi2c->MasterTxCpltCallback = pCallback;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80021ec:	e062      	b.n	80022b4 <HAL_I2C_RegisterCallback+0x120>

      case HAL_I2C_MASTER_RX_COMPLETE_CB_ID :
        hi2c->MasterRxCpltCallback = pCallback;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80021f4:	e05e      	b.n	80022b4 <HAL_I2C_RegisterCallback+0x120>

      case HAL_I2C_SLAVE_TX_COMPLETE_CB_ID :
        hi2c->SlaveTxCpltCallback = pCallback;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80021fc:	e05a      	b.n	80022b4 <HAL_I2C_RegisterCallback+0x120>

      case HAL_I2C_SLAVE_RX_COMPLETE_CB_ID :
        hi2c->SlaveRxCpltCallback = pCallback;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8002204:	e056      	b.n	80022b4 <HAL_I2C_RegisterCallback+0x120>

      case HAL_I2C_LISTEN_COMPLETE_CB_ID :
        hi2c->ListenCpltCallback = pCallback;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800220c:	e052      	b.n	80022b4 <HAL_I2C_RegisterCallback+0x120>

      case HAL_I2C_MEM_TX_COMPLETE_CB_ID :
        hi2c->MemTxCpltCallback = pCallback;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8002214:	e04e      	b.n	80022b4 <HAL_I2C_RegisterCallback+0x120>

      case HAL_I2C_MEM_RX_COMPLETE_CB_ID :
        hi2c->MemRxCpltCallback = pCallback;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800221c:	e04a      	b.n	80022b4 <HAL_I2C_RegisterCallback+0x120>

      case HAL_I2C_ERROR_CB_ID :
        hi2c->ErrorCallback = pCallback;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8002224:	e046      	b.n	80022b4 <HAL_I2C_RegisterCallback+0x120>

      case HAL_I2C_ABORT_CB_ID :
        hi2c->AbortCpltCallback = pCallback;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800222c:	e042      	b.n	80022b4 <HAL_I2C_RegisterCallback+0x120>

      case HAL_I2C_MSPINIT_CB_ID :
        hi2c->MspInitCallback = pCallback;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8002234:	e03e      	b.n	80022b4 <HAL_I2C_RegisterCallback+0x120>

      case HAL_I2C_MSPDEINIT_CB_ID :
        hi2c->MspDeInitCallback = pCallback;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2180      	movs	r1, #128	@ 0x80
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	505a      	str	r2, [r3, r1]
        break;
 800223e:	e039      	b.n	80022b4 <HAL_I2C_RegisterCallback+0x120>

      default :
        /* Update the error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002244:	2280      	movs	r2, #128	@ 0x80
 8002246:	0052      	lsls	r2, r2, #1
 8002248:	431a      	orrs	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Return error status */
        status =  HAL_ERROR;
 800224e:	2317      	movs	r3, #23
 8002250:	18fb      	adds	r3, r7, r3
 8002252:	2201      	movs	r2, #1
 8002254:	701a      	strb	r2, [r3, #0]
        break;
 8002256:	e02d      	b.n	80022b4 <HAL_I2C_RegisterCallback+0x120>
    }
  }
  else if (HAL_I2C_STATE_RESET == hi2c->State)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2241      	movs	r2, #65	@ 0x41
 800225c:	5c9b      	ldrb	r3, [r3, r2]
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b00      	cmp	r3, #0
 8002262:	d11c      	bne.n	800229e <HAL_I2C_RegisterCallback+0x10a>
  {
    switch (CallbackID)
 8002264:	230b      	movs	r3, #11
 8002266:	18fb      	adds	r3, r7, r3
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b09      	cmp	r3, #9
 800226c:	d002      	beq.n	8002274 <HAL_I2C_RegisterCallback+0xe0>
 800226e:	2b0a      	cmp	r3, #10
 8002270:	d004      	beq.n	800227c <HAL_I2C_RegisterCallback+0xe8>
 8002272:	e008      	b.n	8002286 <HAL_I2C_RegisterCallback+0xf2>
    {
      case HAL_I2C_MSPINIT_CB_ID :
        hi2c->MspInitCallback = pCallback;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800227a:	e01b      	b.n	80022b4 <HAL_I2C_RegisterCallback+0x120>

      case HAL_I2C_MSPDEINIT_CB_ID :
        hi2c->MspDeInitCallback = pCallback;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2180      	movs	r1, #128	@ 0x80
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	505a      	str	r2, [r3, r1]
        break;
 8002284:	e016      	b.n	80022b4 <HAL_I2C_RegisterCallback+0x120>

      default :
        /* Update the error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800228a:	2280      	movs	r2, #128	@ 0x80
 800228c:	0052      	lsls	r2, r2, #1
 800228e:	431a      	orrs	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Return error status */
        status =  HAL_ERROR;
 8002294:	2317      	movs	r3, #23
 8002296:	18fb      	adds	r3, r7, r3
 8002298:	2201      	movs	r2, #1
 800229a:	701a      	strb	r2, [r3, #0]
        break;
 800229c:	e00a      	b.n	80022b4 <HAL_I2C_RegisterCallback+0x120>
    }
  }
  else
  {
    /* Update the error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a2:	2280      	movs	r2, #128	@ 0x80
 80022a4:	0052      	lsls	r2, r2, #1
 80022a6:	431a      	orrs	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Return error status */
    status =  HAL_ERROR;
 80022ac:	2317      	movs	r3, #23
 80022ae:	18fb      	adds	r3, r7, r3
 80022b0:	2201      	movs	r2, #1
 80022b2:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80022b4:	2317      	movs	r3, #23
 80022b6:	18fb      	adds	r3, r7, r3
 80022b8:	781b      	ldrb	r3, [r3, #0]
}
 80022ba:	0018      	movs	r0, r3
 80022bc:	46bd      	mov	sp, r7
 80022be:	b006      	add	sp, #24
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	46c0      	nop			@ (mov r8, r8)
 80022c4:	08004c08 	.word	0x08004c08

080022c8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d005      	beq.n	80022f4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022ec:	68ba      	ldr	r2, [r7, #8]
 80022ee:	68f9      	ldr	r1, [r7, #12]
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	4798      	blx	r3
  }
}
 80022f4:	46c0      	nop			@ (mov r8, r8)
 80022f6:	46bd      	mov	sp, r7
 80022f8:	b004      	add	sp, #16
 80022fa:	bd80      	pop	{r7, pc}

080022fc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002314:	697a      	ldr	r2, [r7, #20]
 8002316:	2380      	movs	r3, #128	@ 0x80
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	4013      	ands	r3, r2
 800231c:	d00e      	beq.n	800233c <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	2280      	movs	r2, #128	@ 0x80
 8002322:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002324:	d00a      	beq.n	800233c <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800232a:	2201      	movs	r2, #1
 800232c:	431a      	orrs	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2280      	movs	r2, #128	@ 0x80
 8002338:	0052      	lsls	r2, r2, #1
 800233a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	2380      	movs	r3, #128	@ 0x80
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	4013      	ands	r3, r2
 8002344:	d00e      	beq.n	8002364 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	2280      	movs	r2, #128	@ 0x80
 800234a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800234c:	d00a      	beq.n	8002364 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002352:	2208      	movs	r2, #8
 8002354:	431a      	orrs	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2280      	movs	r2, #128	@ 0x80
 8002360:	00d2      	lsls	r2, r2, #3
 8002362:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	2380      	movs	r3, #128	@ 0x80
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4013      	ands	r3, r2
 800236c:	d00e      	beq.n	800238c <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	2280      	movs	r2, #128	@ 0x80
 8002372:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002374:	d00a      	beq.n	800238c <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800237a:	2202      	movs	r2, #2
 800237c:	431a      	orrs	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2280      	movs	r2, #128	@ 0x80
 8002388:	0092      	lsls	r2, r2, #2
 800238a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002390:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	220b      	movs	r2, #11
 8002396:	4013      	ands	r3, r2
 8002398:	d005      	beq.n	80023a6 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	0011      	movs	r1, r2
 80023a0:	0018      	movs	r0, r3
 80023a2:	f000 fbe5 	bl	8002b70 <I2C_ITError>
  }
}
 80023a6:	46c0      	nop			@ (mov r8, r8)
 80023a8:	46bd      	mov	sp, r7
 80023aa:	b006      	add	sp, #24
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b082      	sub	sp, #8
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80023b6:	46c0      	nop			@ (mov r8, r8)
 80023b8:	46bd      	mov	sp, r7
 80023ba:	b002      	add	sp, #8
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b082      	sub	sp, #8
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80023c6:	46c0      	nop			@ (mov r8, r8)
 80023c8:	46bd      	mov	sp, r7
 80023ca:	b002      	add	sp, #8
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b082      	sub	sp, #8
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80023d6:	46c0      	nop			@ (mov r8, r8)
 80023d8:	46bd      	mov	sp, r7
 80023da:	b002      	add	sp, #8
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b082      	sub	sp, #8
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80023e6:	46c0      	nop			@ (mov r8, r8)
 80023e8:	46bd      	mov	sp, r7
 80023ea:	b002      	add	sp, #8
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	0008      	movs	r0, r1
 80023f8:	0011      	movs	r1, r2
 80023fa:	1cfb      	adds	r3, r7, #3
 80023fc:	1c02      	adds	r2, r0, #0
 80023fe:	701a      	strb	r2, [r3, #0]
 8002400:	003b      	movs	r3, r7
 8002402:	1c0a      	adds	r2, r1, #0
 8002404:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002406:	46c0      	nop			@ (mov r8, r8)
 8002408:	46bd      	mov	sp, r7
 800240a:	b002      	add	sp, #8
 800240c:	bd80      	pop	{r7, pc}

0800240e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b082      	sub	sp, #8
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002416:	46c0      	nop			@ (mov r8, r8)
 8002418:	46bd      	mov	sp, r7
 800241a:	b002      	add	sp, #8
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002426:	46c0      	nop			@ (mov r8, r8)
 8002428:	46bd      	mov	sp, r7
 800242a:	b002      	add	sp, #8
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b082      	sub	sp, #8
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002436:	46c0      	nop			@ (mov r8, r8)
 8002438:	46bd      	mov	sp, r7
 800243a:	b002      	add	sp, #8
 800243c:	bd80      	pop	{r7, pc}

0800243e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b082      	sub	sp, #8
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002446:	46c0      	nop			@ (mov r8, r8)
 8002448:	46bd      	mov	sp, r7
 800244a:	b002      	add	sp, #8
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002456:	46c0      	nop			@ (mov r8, r8)
 8002458:	46bd      	mov	sp, r7
 800245a:	b002      	add	sp, #8
 800245c:	bd80      	pop	{r7, pc}
	...

08002460 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002470:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2240      	movs	r2, #64	@ 0x40
 800247a:	5c9b      	ldrb	r3, [r3, r2]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d101      	bne.n	8002484 <I2C_Slave_ISR_IT+0x24>
 8002480:	2302      	movs	r3, #2
 8002482:	e0e6      	b.n	8002652 <I2C_Slave_ISR_IT+0x1f2>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2240      	movs	r2, #64	@ 0x40
 8002488:	2101      	movs	r1, #1
 800248a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	2220      	movs	r2, #32
 8002490:	4013      	ands	r3, r2
 8002492:	d009      	beq.n	80024a8 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2220      	movs	r2, #32
 8002498:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800249a:	d005      	beq.n	80024a8 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	0011      	movs	r1, r2
 80024a2:	0018      	movs	r0, r3
 80024a4:	f000 f9ea 	bl	800287c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	2210      	movs	r2, #16
 80024ac:	4013      	ands	r3, r2
 80024ae:	d052      	beq.n	8002556 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2210      	movs	r2, #16
 80024b4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80024b6:	d04e      	beq.n	8002556 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024bc:	b29b      	uxth	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d12d      	bne.n	800251e <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2241      	movs	r2, #65	@ 0x41
 80024c6:	5c9b      	ldrb	r3, [r3, r2]
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b28      	cmp	r3, #40	@ 0x28
 80024cc:	d10b      	bne.n	80024e6 <I2C_Slave_ISR_IT+0x86>
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	2380      	movs	r3, #128	@ 0x80
 80024d2:	049b      	lsls	r3, r3, #18
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d106      	bne.n	80024e6 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	0011      	movs	r1, r2
 80024de:	0018      	movs	r0, r3
 80024e0:	f000 faee 	bl	8002ac0 <I2C_ITListenCplt>
 80024e4:	e036      	b.n	8002554 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2241      	movs	r2, #65	@ 0x41
 80024ea:	5c9b      	ldrb	r3, [r3, r2]
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b29      	cmp	r3, #41	@ 0x29
 80024f0:	d110      	bne.n	8002514 <I2C_Slave_ISR_IT+0xb4>
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	4a59      	ldr	r2, [pc, #356]	@ (800265c <I2C_Slave_ISR_IT+0x1fc>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d00c      	beq.n	8002514 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2210      	movs	r2, #16
 8002500:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	0018      	movs	r0, r3
 8002506:	f000 fc60 	bl	8002dca <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	0018      	movs	r0, r3
 800250e:	f000 f94f 	bl	80027b0 <I2C_ITSlaveSeqCplt>
 8002512:	e01f      	b.n	8002554 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2210      	movs	r2, #16
 800251a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800251c:	e091      	b.n	8002642 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2210      	movs	r2, #16
 8002524:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800252a:	2204      	movs	r2, #4
 800252c:	431a      	orrs	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d005      	beq.n	8002544 <I2C_Slave_ISR_IT+0xe4>
 8002538:	697a      	ldr	r2, [r7, #20]
 800253a:	2380      	movs	r3, #128	@ 0x80
 800253c:	045b      	lsls	r3, r3, #17
 800253e:	429a      	cmp	r2, r3
 8002540:	d000      	beq.n	8002544 <I2C_Slave_ISR_IT+0xe4>
 8002542:	e07e      	b.n	8002642 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	0011      	movs	r1, r2
 800254c:	0018      	movs	r0, r3
 800254e:	f000 fb0f 	bl	8002b70 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002552:	e076      	b.n	8002642 <I2C_Slave_ISR_IT+0x1e2>
 8002554:	e075      	b.n	8002642 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	2204      	movs	r2, #4
 800255a:	4013      	ands	r3, r2
 800255c:	d02f      	beq.n	80025be <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2204      	movs	r2, #4
 8002562:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002564:	d02b      	beq.n	80025be <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800256a:	b29b      	uxth	r3, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	d018      	beq.n	80025a2 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002582:	1c5a      	adds	r2, r3, #1
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800258c:	3b01      	subs	r3, #1
 800258e:	b29a      	uxth	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002598:	b29b      	uxth	r3, r3
 800259a:	3b01      	subs	r3, #1
 800259c:	b29a      	uxth	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d14c      	bne.n	8002646 <I2C_Slave_ISR_IT+0x1e6>
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	4a2b      	ldr	r2, [pc, #172]	@ (800265c <I2C_Slave_ISR_IT+0x1fc>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d048      	beq.n	8002646 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	0018      	movs	r0, r3
 80025b8:	f000 f8fa 	bl	80027b0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80025bc:	e043      	b.n	8002646 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	2208      	movs	r2, #8
 80025c2:	4013      	ands	r3, r2
 80025c4:	d00a      	beq.n	80025dc <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2208      	movs	r2, #8
 80025ca:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80025cc:	d006      	beq.n	80025dc <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	0011      	movs	r1, r2
 80025d4:	0018      	movs	r0, r3
 80025d6:	f000 f843 	bl	8002660 <I2C_ITAddrCplt>
 80025da:	e035      	b.n	8002648 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	2202      	movs	r2, #2
 80025e0:	4013      	ands	r3, r2
 80025e2:	d031      	beq.n	8002648 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2202      	movs	r2, #2
 80025e8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80025ea:	d02d      	beq.n	8002648 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d018      	beq.n	8002628 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fa:	781a      	ldrb	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002606:	1c5a      	adds	r2, r3, #1
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002610:	b29b      	uxth	r3, r3
 8002612:	3b01      	subs	r3, #1
 8002614:	b29a      	uxth	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800261e:	3b01      	subs	r3, #1
 8002620:	b29a      	uxth	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002626:	e00f      	b.n	8002648 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	2380      	movs	r3, #128	@ 0x80
 800262c:	045b      	lsls	r3, r3, #17
 800262e:	429a      	cmp	r2, r3
 8002630:	d002      	beq.n	8002638 <I2C_Slave_ISR_IT+0x1d8>
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d107      	bne.n	8002648 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	0018      	movs	r0, r3
 800263c:	f000 f8b8 	bl	80027b0 <I2C_ITSlaveSeqCplt>
 8002640:	e002      	b.n	8002648 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 8002642:	46c0      	nop			@ (mov r8, r8)
 8002644:	e000      	b.n	8002648 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 8002646:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2240      	movs	r2, #64	@ 0x40
 800264c:	2100      	movs	r1, #0
 800264e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	0018      	movs	r0, r3
 8002654:	46bd      	mov	sp, r7
 8002656:	b006      	add	sp, #24
 8002658:	bd80      	pop	{r7, pc}
 800265a:	46c0      	nop			@ (mov r8, r8)
 800265c:	ffff0000 	.word	0xffff0000

08002660 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002660:	b5b0      	push	{r4, r5, r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2241      	movs	r2, #65	@ 0x41
 800266e:	5c9b      	ldrb	r3, [r3, r2]
 8002670:	b2db      	uxtb	r3, r3
 8002672:	001a      	movs	r2, r3
 8002674:	2328      	movs	r3, #40	@ 0x28
 8002676:	4013      	ands	r3, r2
 8002678:	2b28      	cmp	r3, #40	@ 0x28
 800267a:	d000      	beq.n	800267e <I2C_ITAddrCplt+0x1e>
 800267c:	e08b      	b.n	8002796 <I2C_ITAddrCplt+0x136>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	0c1b      	lsrs	r3, r3, #16
 8002686:	b2da      	uxtb	r2, r3
 8002688:	250f      	movs	r5, #15
 800268a:	197b      	adds	r3, r7, r5
 800268c:	2101      	movs	r1, #1
 800268e:	400a      	ands	r2, r1
 8002690:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	0c1b      	lsrs	r3, r3, #16
 800269a:	b29a      	uxth	r2, r3
 800269c:	200c      	movs	r0, #12
 800269e:	183b      	adds	r3, r7, r0
 80026a0:	21fe      	movs	r1, #254	@ 0xfe
 80026a2:	400a      	ands	r2, r1
 80026a4:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	240a      	movs	r4, #10
 80026b0:	193b      	adds	r3, r7, r4
 80026b2:	0592      	lsls	r2, r2, #22
 80026b4:	0d92      	lsrs	r2, r2, #22
 80026b6:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	b29a      	uxth	r2, r3
 80026c0:	2308      	movs	r3, #8
 80026c2:	18fb      	adds	r3, r7, r3
 80026c4:	21fe      	movs	r1, #254	@ 0xfe
 80026c6:	400a      	ands	r2, r1
 80026c8:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d14a      	bne.n	8002768 <I2C_ITAddrCplt+0x108>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80026d2:	0021      	movs	r1, r4
 80026d4:	187b      	adds	r3, r7, r1
 80026d6:	881b      	ldrh	r3, [r3, #0]
 80026d8:	09db      	lsrs	r3, r3, #7
 80026da:	b29a      	uxth	r2, r3
 80026dc:	183b      	adds	r3, r7, r0
 80026de:	881b      	ldrh	r3, [r3, #0]
 80026e0:	4053      	eors	r3, r2
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	001a      	movs	r2, r3
 80026e6:	2306      	movs	r3, #6
 80026e8:	4013      	ands	r3, r2
 80026ea:	d121      	bne.n	8002730 <I2C_ITAddrCplt+0xd0>
      {
        slaveaddrcode = ownadd1code;
 80026ec:	183b      	adds	r3, r7, r0
 80026ee:	187a      	adds	r2, r7, r1
 80026f0:	8812      	ldrh	r2, [r2, #0]
 80026f2:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026f8:	1c5a      	adds	r2, r3, #1
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002702:	2b02      	cmp	r3, #2
 8002704:	d14f      	bne.n	80027a6 <I2C_ITAddrCplt+0x146>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2208      	movs	r2, #8
 8002712:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2240      	movs	r2, #64	@ 0x40
 8002718:	2100      	movs	r1, #0
 800271a:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002720:	183a      	adds	r2, r7, r0
 8002722:	8814      	ldrh	r4, [r2, #0]
 8002724:	197a      	adds	r2, r7, r5
 8002726:	7811      	ldrb	r1, [r2, #0]
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	0022      	movs	r2, r4
 800272c:	4798      	blx	r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800272e:	e03a      	b.n	80027a6 <I2C_ITAddrCplt+0x146>
        slaveaddrcode = ownadd2code;
 8002730:	240c      	movs	r4, #12
 8002732:	193b      	adds	r3, r7, r4
 8002734:	2208      	movs	r2, #8
 8002736:	18ba      	adds	r2, r7, r2
 8002738:	8812      	ldrh	r2, [r2, #0]
 800273a:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800273c:	2380      	movs	r3, #128	@ 0x80
 800273e:	021a      	lsls	r2, r3, #8
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	0011      	movs	r1, r2
 8002744:	0018      	movs	r0, r3
 8002746:	f000 fb81 	bl	8002e4c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2240      	movs	r2, #64	@ 0x40
 800274e:	2100      	movs	r1, #0
 8002750:	5499      	strb	r1, [r3, r2]
        hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002756:	193a      	adds	r2, r7, r4
 8002758:	8814      	ldrh	r4, [r2, #0]
 800275a:	220f      	movs	r2, #15
 800275c:	18ba      	adds	r2, r7, r2
 800275e:	7811      	ldrb	r1, [r2, #0]
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	0022      	movs	r2, r4
 8002764:	4798      	blx	r3
}
 8002766:	e01e      	b.n	80027a6 <I2C_ITAddrCplt+0x146>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002768:	2380      	movs	r3, #128	@ 0x80
 800276a:	021a      	lsls	r2, r3, #8
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	0011      	movs	r1, r2
 8002770:	0018      	movs	r0, r3
 8002772:	f000 fb6b 	bl	8002e4c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2240      	movs	r2, #64	@ 0x40
 800277a:	2100      	movs	r1, #0
 800277c:	5499      	strb	r1, [r3, r2]
      hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002782:	220c      	movs	r2, #12
 8002784:	18ba      	adds	r2, r7, r2
 8002786:	8814      	ldrh	r4, [r2, #0]
 8002788:	220f      	movs	r2, #15
 800278a:	18ba      	adds	r2, r7, r2
 800278c:	7811      	ldrb	r1, [r2, #0]
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	0022      	movs	r2, r4
 8002792:	4798      	blx	r3
}
 8002794:	e007      	b.n	80027a6 <I2C_ITAddrCplt+0x146>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2208      	movs	r2, #8
 800279c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2240      	movs	r2, #64	@ 0x40
 80027a2:	2100      	movs	r1, #0
 80027a4:	5499      	strb	r1, [r3, r2]
}
 80027a6:	46c0      	nop			@ (mov r8, r8)
 80027a8:	46bd      	mov	sp, r7
 80027aa:	b004      	add	sp, #16
 80027ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

080027b0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2242      	movs	r2, #66	@ 0x42
 80027c4:	2100      	movs	r1, #0
 80027c6:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	2380      	movs	r3, #128	@ 0x80
 80027cc:	01db      	lsls	r3, r3, #7
 80027ce:	4013      	ands	r3, r2
 80027d0:	d008      	beq.n	80027e4 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4925      	ldr	r1, [pc, #148]	@ (8002874 <I2C_ITSlaveSeqCplt+0xc4>)
 80027de:	400a      	ands	r2, r1
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	e00c      	b.n	80027fe <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	2380      	movs	r3, #128	@ 0x80
 80027e8:	021b      	lsls	r3, r3, #8
 80027ea:	4013      	ands	r3, r2
 80027ec:	d007      	beq.n	80027fe <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	491f      	ldr	r1, [pc, #124]	@ (8002878 <I2C_ITSlaveSeqCplt+0xc8>)
 80027fa:	400a      	ands	r2, r1
 80027fc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2241      	movs	r2, #65	@ 0x41
 8002802:	5c9b      	ldrb	r3, [r3, r2]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b29      	cmp	r3, #41	@ 0x29
 8002808:	d115      	bne.n	8002836 <I2C_ITSlaveSeqCplt+0x86>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2241      	movs	r2, #65	@ 0x41
 800280e:	2128      	movs	r1, #40	@ 0x28
 8002810:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2221      	movs	r2, #33	@ 0x21
 8002816:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2101      	movs	r1, #1
 800281c:	0018      	movs	r0, r3
 800281e:	f000 fb15 	bl	8002e4c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2240      	movs	r2, #64	@ 0x40
 8002826:	2100      	movs	r1, #0
 8002828:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	0010      	movs	r0, r2
 8002832:	4798      	blx	r3
  }
  else
  {
    /* Nothing to do */
  }
}
 8002834:	e01a      	b.n	800286c <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2241      	movs	r2, #65	@ 0x41
 800283a:	5c9b      	ldrb	r3, [r3, r2]
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002840:	d114      	bne.n	800286c <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2241      	movs	r2, #65	@ 0x41
 8002846:	2128      	movs	r1, #40	@ 0x28
 8002848:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2222      	movs	r2, #34	@ 0x22
 800284e:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2102      	movs	r1, #2
 8002854:	0018      	movs	r0, r3
 8002856:	f000 faf9 	bl	8002e4c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2240      	movs	r2, #64	@ 0x40
 800285e:	2100      	movs	r1, #0
 8002860:	5499      	strb	r1, [r3, r2]
    hi2c->SlaveRxCpltCallback(hi2c);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	0010      	movs	r0, r2
 800286a:	4798      	blx	r3
}
 800286c:	46c0      	nop			@ (mov r8, r8)
 800286e:	46bd      	mov	sp, r7
 8002870:	b004      	add	sp, #16
 8002872:	bd80      	pop	{r7, pc}
 8002874:	ffffbfff 	.word	0xffffbfff
 8002878:	ffff7fff 	.word	0xffff7fff

0800287c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002892:	200f      	movs	r0, #15
 8002894:	183b      	adds	r3, r7, r0
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	2141      	movs	r1, #65	@ 0x41
 800289a:	5c52      	ldrb	r2, [r2, r1]
 800289c:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2220      	movs	r2, #32
 80028a4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80028a6:	183b      	adds	r3, r7, r0
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b21      	cmp	r3, #33	@ 0x21
 80028ac:	d003      	beq.n	80028b6 <I2C_ITSlaveCplt+0x3a>
 80028ae:	183b      	adds	r3, r7, r0
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b29      	cmp	r3, #41	@ 0x29
 80028b4:	d109      	bne.n	80028ca <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80028b6:	4a7c      	ldr	r2, [pc, #496]	@ (8002aa8 <I2C_ITSlaveCplt+0x22c>)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	0011      	movs	r1, r2
 80028bc:	0018      	movs	r0, r3
 80028be:	f000 fac5 	bl	8002e4c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2221      	movs	r2, #33	@ 0x21
 80028c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80028c8:	e011      	b.n	80028ee <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80028ca:	220f      	movs	r2, #15
 80028cc:	18bb      	adds	r3, r7, r2
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b22      	cmp	r3, #34	@ 0x22
 80028d2:	d003      	beq.n	80028dc <I2C_ITSlaveCplt+0x60>
 80028d4:	18bb      	adds	r3, r7, r2
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80028da:	d108      	bne.n	80028ee <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80028dc:	4a73      	ldr	r2, [pc, #460]	@ (8002aac <I2C_ITSlaveCplt+0x230>)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	0011      	movs	r1, r2
 80028e2:	0018      	movs	r0, r3
 80028e4:	f000 fab2 	bl	8002e4c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2222      	movs	r2, #34	@ 0x22
 80028ec:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2180      	movs	r1, #128	@ 0x80
 80028fa:	0209      	lsls	r1, r1, #8
 80028fc:	430a      	orrs	r2, r1
 80028fe:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4969      	ldr	r1, [pc, #420]	@ (8002ab0 <I2C_ITSlaveCplt+0x234>)
 800290c:	400a      	ands	r2, r1
 800290e:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	0018      	movs	r0, r3
 8002914:	f000 fa59 	bl	8002dca <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	2380      	movs	r3, #128	@ 0x80
 800291c:	01db      	lsls	r3, r3, #7
 800291e:	4013      	ands	r3, r2
 8002920:	d013      	beq.n	800294a <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4961      	ldr	r1, [pc, #388]	@ (8002ab4 <I2C_ITSlaveCplt+0x238>)
 800292e:	400a      	ands	r2, r1
 8002930:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002936:	2b00      	cmp	r3, #0
 8002938:	d01f      	beq.n	800297a <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	b29a      	uxth	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002948:	e017      	b.n	800297a <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	2380      	movs	r3, #128	@ 0x80
 800294e:	021b      	lsls	r3, r3, #8
 8002950:	4013      	ands	r3, r2
 8002952:	d012      	beq.n	800297a <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4956      	ldr	r1, [pc, #344]	@ (8002ab8 <I2C_ITSlaveCplt+0x23c>)
 8002960:	400a      	ands	r2, r1
 8002962:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002968:	2b00      	cmp	r3, #0
 800296a:	d006      	beq.n	800297a <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	b29a      	uxth	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	2204      	movs	r2, #4
 800297e:	4013      	ands	r3, r2
 8002980:	d020      	beq.n	80029c4 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2204      	movs	r2, #4
 8002986:	4393      	bics	r3, r2
 8002988:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299c:	1c5a      	adds	r2, r3, #1
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00c      	beq.n	80029c4 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ae:	3b01      	subs	r3, #1
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	3b01      	subs	r3, #1
 80029be:	b29a      	uxth	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d005      	beq.n	80029da <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d2:	2204      	movs	r2, #4
 80029d4:	431a      	orrs	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2242      	movs	r2, #66	@ 0x42
 80029de:	2100      	movs	r1, #0
 80029e0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d013      	beq.n	8002a18 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	0011      	movs	r1, r2
 80029f8:	0018      	movs	r0, r3
 80029fa:	f000 f8b9 	bl	8002b70 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2241      	movs	r2, #65	@ 0x41
 8002a02:	5c9b      	ldrb	r3, [r3, r2]
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b28      	cmp	r3, #40	@ 0x28
 8002a08:	d14a      	bne.n	8002aa0 <I2C_ITSlaveCplt+0x224>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	0011      	movs	r1, r2
 8002a10:	0018      	movs	r0, r3
 8002a12:	f000 f855 	bl	8002ac0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002a16:	e043      	b.n	8002aa0 <I2C_ITSlaveCplt+0x224>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a1c:	4a27      	ldr	r2, [pc, #156]	@ (8002abc <I2C_ITSlaveCplt+0x240>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d017      	beq.n	8002a52 <I2C_ITSlaveCplt+0x1d6>
    I2C_ITSlaveSeqCplt(hi2c);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	0018      	movs	r0, r3
 8002a26:	f7ff fec3 	bl	80027b0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a23      	ldr	r2, [pc, #140]	@ (8002abc <I2C_ITSlaveCplt+0x240>)
 8002a2e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2241      	movs	r2, #65	@ 0x41
 8002a34:	2120      	movs	r1, #32
 8002a36:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2240      	movs	r2, #64	@ 0x40
 8002a42:	2100      	movs	r1, #0
 8002a44:	5499      	strb	r1, [r3, r2]
    hi2c->ListenCpltCallback(hi2c);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	0010      	movs	r0, r2
 8002a4e:	4798      	blx	r3
}
 8002a50:	e026      	b.n	8002aa0 <I2C_ITSlaveCplt+0x224>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2241      	movs	r2, #65	@ 0x41
 8002a56:	5c9b      	ldrb	r3, [r3, r2]
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b22      	cmp	r3, #34	@ 0x22
 8002a5c:	d110      	bne.n	8002a80 <I2C_ITSlaveCplt+0x204>
    hi2c->State = HAL_I2C_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2241      	movs	r2, #65	@ 0x41
 8002a62:	2120      	movs	r1, #32
 8002a64:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2240      	movs	r2, #64	@ 0x40
 8002a70:	2100      	movs	r1, #0
 8002a72:	5499      	strb	r1, [r3, r2]
    hi2c->SlaveRxCpltCallback(hi2c);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	0010      	movs	r0, r2
 8002a7c:	4798      	blx	r3
}
 8002a7e:	e00f      	b.n	8002aa0 <I2C_ITSlaveCplt+0x224>
    hi2c->State = HAL_I2C_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2241      	movs	r2, #65	@ 0x41
 8002a84:	2120      	movs	r1, #32
 8002a86:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2240      	movs	r2, #64	@ 0x40
 8002a92:	2100      	movs	r1, #0
 8002a94:	5499      	strb	r1, [r3, r2]
    hi2c->SlaveTxCpltCallback(hi2c);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	0010      	movs	r0, r2
 8002a9e:	4798      	blx	r3
}
 8002aa0:	46c0      	nop			@ (mov r8, r8)
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	b006      	add	sp, #24
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	00008001 	.word	0x00008001
 8002aac:	00008002 	.word	0x00008002
 8002ab0:	fe00e800 	.word	0xfe00e800
 8002ab4:	ffffbfff 	.word	0xffffbfff
 8002ab8:	ffff7fff 	.word	0xffff7fff
 8002abc:	ffff0000 	.word	0xffff0000

08002ac0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a26      	ldr	r2, [pc, #152]	@ (8002b68 <I2C_ITListenCplt+0xa8>)
 8002ace:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2241      	movs	r2, #65	@ 0x41
 8002ada:	2120      	movs	r1, #32
 8002adc:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2242      	movs	r2, #66	@ 0x42
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	2204      	movs	r2, #4
 8002af0:	4013      	ands	r3, r2
 8002af2:	d022      	beq.n	8002b3a <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b06:	1c5a      	adds	r2, r3, #1
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d012      	beq.n	8002b3a <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	3b01      	subs	r3, #1
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b32:	2204      	movs	r2, #4
 8002b34:	431a      	orrs	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002b3a:	4a0c      	ldr	r2, [pc, #48]	@ (8002b6c <I2C_ITListenCplt+0xac>)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	0011      	movs	r1, r2
 8002b40:	0018      	movs	r0, r3
 8002b42:	f000 f983 	bl	8002e4c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2210      	movs	r2, #16
 8002b4c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2240      	movs	r2, #64	@ 0x40
 8002b52:	2100      	movs	r1, #0
 8002b54:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	0010      	movs	r0, r2
 8002b5e:	4798      	blx	r3
#else
  HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002b60:	46c0      	nop			@ (mov r8, r8)
 8002b62:	46bd      	mov	sp, r7
 8002b64:	b002      	add	sp, #8
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	ffff0000 	.word	0xffff0000
 8002b6c:	00008003 	.word	0x00008003

08002b70 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002b7a:	200f      	movs	r0, #15
 8002b7c:	183b      	adds	r3, r7, r0
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	2141      	movs	r1, #65	@ 0x41
 8002b82:	5c52      	ldrb	r2, [r2, r1]
 8002b84:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2242      	movs	r2, #66	@ 0x42
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a72      	ldr	r2, [pc, #456]	@ (8002d5c <I2C_ITError+0x1ec>)
 8002b92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002ba6:	183b      	adds	r3, r7, r0
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b28      	cmp	r3, #40	@ 0x28
 8002bac:	d007      	beq.n	8002bbe <I2C_ITError+0x4e>
 8002bae:	183b      	adds	r3, r7, r0
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b29      	cmp	r3, #41	@ 0x29
 8002bb4:	d003      	beq.n	8002bbe <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002bb6:	183b      	adds	r3, r7, r0
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	2b2a      	cmp	r3, #42	@ 0x2a
 8002bbc:	d10c      	bne.n	8002bd8 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2103      	movs	r1, #3
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	f000 f942 	bl	8002e4c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2241      	movs	r2, #65	@ 0x41
 8002bcc:	2128      	movs	r1, #40	@ 0x28
 8002bce:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a63      	ldr	r2, [pc, #396]	@ (8002d60 <I2C_ITError+0x1f0>)
 8002bd4:	635a      	str	r2, [r3, #52]	@ 0x34
 8002bd6:	e032      	b.n	8002c3e <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002bd8:	4a62      	ldr	r2, [pc, #392]	@ (8002d64 <I2C_ITError+0x1f4>)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	0011      	movs	r1, r2
 8002bde:	0018      	movs	r0, r3
 8002be0:	f000 f934 	bl	8002e4c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	0018      	movs	r0, r3
 8002be8:	f000 f8ef 	bl	8002dca <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2241      	movs	r2, #65	@ 0x41
 8002bf0:	5c9b      	ldrb	r3, [r3, r2]
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2b60      	cmp	r3, #96	@ 0x60
 8002bf6:	d01f      	beq.n	8002c38 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2241      	movs	r2, #65	@ 0x41
 8002bfc:	2120      	movs	r1, #32
 8002bfe:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	2220      	movs	r2, #32
 8002c08:	4013      	ands	r3, r2
 8002c0a:	2b20      	cmp	r3, #32
 8002c0c:	d114      	bne.n	8002c38 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	2210      	movs	r2, #16
 8002c16:	4013      	ands	r3, r2
 8002c18:	2b10      	cmp	r3, #16
 8002c1a:	d109      	bne.n	8002c30 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2210      	movs	r2, #16
 8002c22:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c28:	2204      	movs	r2, #4
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2220      	movs	r2, #32
 8002c36:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c42:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d03b      	beq.n	8002cc4 <I2C_ITError+0x154>
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	2b11      	cmp	r3, #17
 8002c50:	d002      	beq.n	8002c58 <I2C_ITError+0xe8>
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	2b21      	cmp	r3, #33	@ 0x21
 8002c56:	d135      	bne.n	8002cc4 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	2380      	movs	r3, #128	@ 0x80
 8002c60:	01db      	lsls	r3, r3, #7
 8002c62:	401a      	ands	r2, r3
 8002c64:	2380      	movs	r3, #128	@ 0x80
 8002c66:	01db      	lsls	r3, r3, #7
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d107      	bne.n	8002c7c <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	493c      	ldr	r1, [pc, #240]	@ (8002d68 <I2C_ITError+0x1f8>)
 8002c78:	400a      	ands	r2, r1
 8002c7a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c80:	0018      	movs	r0, r3
 8002c82:	f7ff f814 	bl	8001cae <HAL_DMA_GetState>
 8002c86:	0003      	movs	r3, r0
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d016      	beq.n	8002cba <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c90:	4a36      	ldr	r2, [pc, #216]	@ (8002d6c <I2C_ITError+0x1fc>)
 8002c92:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2240      	movs	r2, #64	@ 0x40
 8002c98:	2100      	movs	r1, #0
 8002c9a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	f7fe ff1d 	bl	8001ae0 <HAL_DMA_Abort_IT>
 8002ca6:	1e03      	subs	r3, r0, #0
 8002ca8:	d051      	beq.n	8002d4e <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002cb8:	e049      	b.n	8002d4e <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	f000 f859 	bl	8002d74 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002cc2:	e044      	b.n	8002d4e <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d03b      	beq.n	8002d44 <I2C_ITError+0x1d4>
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	2b12      	cmp	r3, #18
 8002cd0:	d002      	beq.n	8002cd8 <I2C_ITError+0x168>
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	2b22      	cmp	r3, #34	@ 0x22
 8002cd6:	d135      	bne.n	8002d44 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	2380      	movs	r3, #128	@ 0x80
 8002ce0:	021b      	lsls	r3, r3, #8
 8002ce2:	401a      	ands	r2, r3
 8002ce4:	2380      	movs	r3, #128	@ 0x80
 8002ce6:	021b      	lsls	r3, r3, #8
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d107      	bne.n	8002cfc <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	491e      	ldr	r1, [pc, #120]	@ (8002d70 <I2C_ITError+0x200>)
 8002cf8:	400a      	ands	r2, r1
 8002cfa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d00:	0018      	movs	r0, r3
 8002d02:	f7fe ffd4 	bl	8001cae <HAL_DMA_GetState>
 8002d06:	0003      	movs	r3, r0
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d016      	beq.n	8002d3a <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d10:	4a16      	ldr	r2, [pc, #88]	@ (8002d6c <I2C_ITError+0x1fc>)
 8002d12:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2240      	movs	r2, #64	@ 0x40
 8002d18:	2100      	movs	r1, #0
 8002d1a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d20:	0018      	movs	r0, r3
 8002d22:	f7fe fedd 	bl	8001ae0 <HAL_DMA_Abort_IT>
 8002d26:	1e03      	subs	r3, r0, #0
 8002d28:	d013      	beq.n	8002d52 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d34:	0018      	movs	r0, r3
 8002d36:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002d38:	e00b      	b.n	8002d52 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f000 f819 	bl	8002d74 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002d42:	e006      	b.n	8002d52 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	0018      	movs	r0, r3
 8002d48:	f000 f814 	bl	8002d74 <I2C_TreatErrorCallback>
  }
}
 8002d4c:	e002      	b.n	8002d54 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002d4e:	46c0      	nop			@ (mov r8, r8)
 8002d50:	e000      	b.n	8002d54 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002d52:	46c0      	nop			@ (mov r8, r8)
}
 8002d54:	46c0      	nop			@ (mov r8, r8)
 8002d56:	46bd      	mov	sp, r7
 8002d58:	b004      	add	sp, #16
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	ffff0000 	.word	0xffff0000
 8002d60:	08002461 	.word	0x08002461
 8002d64:	00008003 	.word	0x00008003
 8002d68:	ffffbfff 	.word	0xffffbfff
 8002d6c:	08002e0f 	.word	0x08002e0f
 8002d70:	ffff7fff 	.word	0xffff7fff

08002d74 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2241      	movs	r2, #65	@ 0x41
 8002d80:	5c9b      	ldrb	r3, [r3, r2]
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b60      	cmp	r3, #96	@ 0x60
 8002d86:	d110      	bne.n	8002daa <I2C_TreatErrorCallback+0x36>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2241      	movs	r2, #65	@ 0x41
 8002d8c:	2120      	movs	r1, #32
 8002d8e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2240      	movs	r2, #64	@ 0x40
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	0010      	movs	r0, r2
 8002da6:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002da8:	e00b      	b.n	8002dc2 <I2C_TreatErrorCallback+0x4e>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2240      	movs	r2, #64	@ 0x40
 8002db4:	2100      	movs	r1, #0
 8002db6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCallback(hi2c);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	0010      	movs	r0, r2
 8002dc0:	4798      	blx	r3
}
 8002dc2:	46c0      	nop			@ (mov r8, r8)
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	b002      	add	sp, #8
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b082      	sub	sp, #8
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	2202      	movs	r2, #2
 8002dda:	4013      	ands	r3, r2
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d103      	bne.n	8002de8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2200      	movs	r2, #0
 8002de6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	2201      	movs	r2, #1
 8002df0:	4013      	ands	r3, r2
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d007      	beq.n	8002e06 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	699a      	ldr	r2, [r3, #24]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2101      	movs	r1, #1
 8002e02:	430a      	orrs	r2, r1
 8002e04:	619a      	str	r2, [r3, #24]
  }
}
 8002e06:	46c0      	nop			@ (mov r8, r8)
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	b002      	add	sp, #8
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b084      	sub	sp, #16
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d003      	beq.n	8002e2c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e28:	2200      	movs	r2, #0
 8002e2a:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d003      	beq.n	8002e3c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e38:	2200      	movs	r2, #0
 8002e3a:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	0018      	movs	r0, r3
 8002e40:	f7ff ff98 	bl	8002d74 <I2C_TreatErrorCallback>
}
 8002e44:	46c0      	nop			@ (mov r8, r8)
 8002e46:	46bd      	mov	sp, r7
 8002e48:	b004      	add	sp, #16
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	000a      	movs	r2, r1
 8002e56:	1cbb      	adds	r3, r7, #2
 8002e58:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002e5e:	1cbb      	adds	r3, r7, #2
 8002e60:	881b      	ldrh	r3, [r3, #0]
 8002e62:	2201      	movs	r2, #1
 8002e64:	4013      	ands	r3, r2
 8002e66:	d010      	beq.n	8002e8a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2242      	movs	r2, #66	@ 0x42
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2241      	movs	r2, #65	@ 0x41
 8002e74:	5c9b      	ldrb	r3, [r3, r2]
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	001a      	movs	r2, r3
 8002e7a:	2328      	movs	r3, #40	@ 0x28
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	2b28      	cmp	r3, #40	@ 0x28
 8002e80:	d003      	beq.n	8002e8a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	22b0      	movs	r2, #176	@ 0xb0
 8002e86:	4313      	orrs	r3, r2
 8002e88:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002e8a:	1cbb      	adds	r3, r7, #2
 8002e8c:	881b      	ldrh	r3, [r3, #0]
 8002e8e:	2202      	movs	r2, #2
 8002e90:	4013      	ands	r3, r2
 8002e92:	d010      	beq.n	8002eb6 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2244      	movs	r2, #68	@ 0x44
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2241      	movs	r2, #65	@ 0x41
 8002ea0:	5c9b      	ldrb	r3, [r3, r2]
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	001a      	movs	r2, r3
 8002ea6:	2328      	movs	r3, #40	@ 0x28
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	2b28      	cmp	r3, #40	@ 0x28
 8002eac:	d003      	beq.n	8002eb6 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	22b0      	movs	r2, #176	@ 0xb0
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002eb6:	1cbb      	adds	r3, r7, #2
 8002eb8:	2200      	movs	r2, #0
 8002eba:	5e9b      	ldrsh	r3, [r3, r2]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	da03      	bge.n	8002ec8 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	22b8      	movs	r2, #184	@ 0xb8
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002ec8:	1cbb      	adds	r3, r7, #2
 8002eca:	881b      	ldrh	r3, [r3, #0]
 8002ecc:	2b10      	cmp	r3, #16
 8002ece:	d103      	bne.n	8002ed8 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2290      	movs	r2, #144	@ 0x90
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002ed8:	1cbb      	adds	r3, r7, #2
 8002eda:	881b      	ldrh	r3, [r3, #0]
 8002edc:	2b20      	cmp	r3, #32
 8002ede:	d103      	bne.n	8002ee8 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002ee8:	1cbb      	adds	r3, r7, #2
 8002eea:	881b      	ldrh	r3, [r3, #0]
 8002eec:	2b40      	cmp	r3, #64	@ 0x40
 8002eee:	d103      	bne.n	8002ef8 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2240      	movs	r2, #64	@ 0x40
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	43d9      	mvns	r1, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	400a      	ands	r2, r1
 8002f08:	601a      	str	r2, [r3, #0]
}
 8002f0a:	46c0      	nop			@ (mov r8, r8)
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	b004      	add	sp, #16
 8002f10:	bd80      	pop	{r7, pc}
	...

08002f14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2241      	movs	r2, #65	@ 0x41
 8002f22:	5c9b      	ldrb	r3, [r3, r2]
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b20      	cmp	r3, #32
 8002f28:	d138      	bne.n	8002f9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2240      	movs	r2, #64	@ 0x40
 8002f2e:	5c9b      	ldrb	r3, [r3, r2]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d101      	bne.n	8002f38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f34:	2302      	movs	r3, #2
 8002f36:	e032      	b.n	8002f9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2240      	movs	r2, #64	@ 0x40
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2241      	movs	r2, #65	@ 0x41
 8002f44:	2124      	movs	r1, #36	@ 0x24
 8002f46:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2101      	movs	r1, #1
 8002f54:	438a      	bics	r2, r1
 8002f56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4911      	ldr	r1, [pc, #68]	@ (8002fa8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002f64:	400a      	ands	r2, r1
 8002f66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6819      	ldr	r1, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2101      	movs	r1, #1
 8002f84:	430a      	orrs	r2, r1
 8002f86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2241      	movs	r2, #65	@ 0x41
 8002f8c:	2120      	movs	r1, #32
 8002f8e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2240      	movs	r2, #64	@ 0x40
 8002f94:	2100      	movs	r1, #0
 8002f96:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	e000      	b.n	8002f9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f9c:	2302      	movs	r3, #2
  }
}
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	b002      	add	sp, #8
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	46c0      	nop			@ (mov r8, r8)
 8002fa8:	ffffefff 	.word	0xffffefff

08002fac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2241      	movs	r2, #65	@ 0x41
 8002fba:	5c9b      	ldrb	r3, [r3, r2]
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b20      	cmp	r3, #32
 8002fc0:	d139      	bne.n	8003036 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2240      	movs	r2, #64	@ 0x40
 8002fc6:	5c9b      	ldrb	r3, [r3, r2]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d101      	bne.n	8002fd0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002fcc:	2302      	movs	r3, #2
 8002fce:	e033      	b.n	8003038 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2240      	movs	r2, #64	@ 0x40
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2241      	movs	r2, #65	@ 0x41
 8002fdc:	2124      	movs	r1, #36	@ 0x24
 8002fde:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2101      	movs	r1, #1
 8002fec:	438a      	bics	r2, r1
 8002fee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	4a11      	ldr	r2, [pc, #68]	@ (8003040 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	021b      	lsls	r3, r3, #8
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	4313      	orrs	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2101      	movs	r1, #1
 800301e:	430a      	orrs	r2, r1
 8003020:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2241      	movs	r2, #65	@ 0x41
 8003026:	2120      	movs	r1, #32
 8003028:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2240      	movs	r2, #64	@ 0x40
 800302e:	2100      	movs	r1, #0
 8003030:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003032:	2300      	movs	r3, #0
 8003034:	e000      	b.n	8003038 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003036:	2302      	movs	r3, #2
  }
}
 8003038:	0018      	movs	r0, r3
 800303a:	46bd      	mov	sp, r7
 800303c:	b004      	add	sp, #16
 800303e:	bd80      	pop	{r7, pc}
 8003040:	fffff0ff 	.word	0xfffff0ff

08003044 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b088      	sub	sp, #32
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d102      	bne.n	8003058 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	f000 fb76 	bl	8003744 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2201      	movs	r2, #1
 800305e:	4013      	ands	r3, r2
 8003060:	d100      	bne.n	8003064 <HAL_RCC_OscConfig+0x20>
 8003062:	e08e      	b.n	8003182 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003064:	4bc5      	ldr	r3, [pc, #788]	@ (800337c <HAL_RCC_OscConfig+0x338>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	220c      	movs	r2, #12
 800306a:	4013      	ands	r3, r2
 800306c:	2b04      	cmp	r3, #4
 800306e:	d00e      	beq.n	800308e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003070:	4bc2      	ldr	r3, [pc, #776]	@ (800337c <HAL_RCC_OscConfig+0x338>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	220c      	movs	r2, #12
 8003076:	4013      	ands	r3, r2
 8003078:	2b08      	cmp	r3, #8
 800307a:	d117      	bne.n	80030ac <HAL_RCC_OscConfig+0x68>
 800307c:	4bbf      	ldr	r3, [pc, #764]	@ (800337c <HAL_RCC_OscConfig+0x338>)
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	23c0      	movs	r3, #192	@ 0xc0
 8003082:	025b      	lsls	r3, r3, #9
 8003084:	401a      	ands	r2, r3
 8003086:	2380      	movs	r3, #128	@ 0x80
 8003088:	025b      	lsls	r3, r3, #9
 800308a:	429a      	cmp	r2, r3
 800308c:	d10e      	bne.n	80030ac <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800308e:	4bbb      	ldr	r3, [pc, #748]	@ (800337c <HAL_RCC_OscConfig+0x338>)
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	2380      	movs	r3, #128	@ 0x80
 8003094:	029b      	lsls	r3, r3, #10
 8003096:	4013      	ands	r3, r2
 8003098:	d100      	bne.n	800309c <HAL_RCC_OscConfig+0x58>
 800309a:	e071      	b.n	8003180 <HAL_RCC_OscConfig+0x13c>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d000      	beq.n	80030a6 <HAL_RCC_OscConfig+0x62>
 80030a4:	e06c      	b.n	8003180 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	f000 fb4c 	bl	8003744 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d107      	bne.n	80030c4 <HAL_RCC_OscConfig+0x80>
 80030b4:	4bb1      	ldr	r3, [pc, #708]	@ (800337c <HAL_RCC_OscConfig+0x338>)
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	4bb0      	ldr	r3, [pc, #704]	@ (800337c <HAL_RCC_OscConfig+0x338>)
 80030ba:	2180      	movs	r1, #128	@ 0x80
 80030bc:	0249      	lsls	r1, r1, #9
 80030be:	430a      	orrs	r2, r1
 80030c0:	601a      	str	r2, [r3, #0]
 80030c2:	e02f      	b.n	8003124 <HAL_RCC_OscConfig+0xe0>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d10c      	bne.n	80030e6 <HAL_RCC_OscConfig+0xa2>
 80030cc:	4bab      	ldr	r3, [pc, #684]	@ (800337c <HAL_RCC_OscConfig+0x338>)
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	4baa      	ldr	r3, [pc, #680]	@ (800337c <HAL_RCC_OscConfig+0x338>)
 80030d2:	49ab      	ldr	r1, [pc, #684]	@ (8003380 <HAL_RCC_OscConfig+0x33c>)
 80030d4:	400a      	ands	r2, r1
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	4ba8      	ldr	r3, [pc, #672]	@ (800337c <HAL_RCC_OscConfig+0x338>)
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	4ba7      	ldr	r3, [pc, #668]	@ (800337c <HAL_RCC_OscConfig+0x338>)
 80030de:	49a9      	ldr	r1, [pc, #676]	@ (8003384 <HAL_RCC_OscConfig+0x340>)
 80030e0:	400a      	ands	r2, r1
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	e01e      	b.n	8003124 <HAL_RCC_OscConfig+0xe0>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	2b05      	cmp	r3, #5
 80030ec:	d10e      	bne.n	800310c <HAL_RCC_OscConfig+0xc8>
 80030ee:	4ba3      	ldr	r3, [pc, #652]	@ (800337c <HAL_RCC_OscConfig+0x338>)
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	4ba2      	ldr	r3, [pc, #648]	@ (800337c <HAL_RCC_OscConfig+0x338>)
 80030f4:	2180      	movs	r1, #128	@ 0x80
 80030f6:	02c9      	lsls	r1, r1, #11
 80030f8:	430a      	orrs	r2, r1
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	4b9f      	ldr	r3, [pc, #636]	@ (800337c <HAL_RCC_OscConfig+0x338>)
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	4b9e      	ldr	r3, [pc, #632]	@ (800337c <HAL_RCC_OscConfig+0x338>)
 8003102:	2180      	movs	r1, #128	@ 0x80
 8003104:	0249      	lsls	r1, r1, #9
 8003106:	430a      	orrs	r2, r1
 8003108:	601a      	str	r2, [r3, #0]
 800310a:	e00b      	b.n	8003124 <HAL_RCC_OscConfig+0xe0>
 800310c:	4b9b      	ldr	r3, [pc, #620]	@ (800337c <HAL_RCC_OscConfig+0x338>)
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	4b9a      	ldr	r3, [pc, #616]	@ (800337c <HAL_RCC_OscConfig+0x338>)
 8003112:	499b      	ldr	r1, [pc, #620]	@ (8003380 <HAL_RCC_OscConfig+0x33c>)
 8003114:	400a      	ands	r2, r1
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	4b98      	ldr	r3, [pc, #608]	@ (800337c <HAL_RCC_OscConfig+0x338>)
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	4b97      	ldr	r3, [pc, #604]	@ (800337c <HAL_RCC_OscConfig+0x338>)
 800311e:	4999      	ldr	r1, [pc, #612]	@ (8003384 <HAL_RCC_OscConfig+0x340>)
 8003120:	400a      	ands	r2, r1
 8003122:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d014      	beq.n	8003156 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312c:	f7fd fee0 	bl	8000ef0 <HAL_GetTick>
 8003130:	0003      	movs	r3, r0
 8003132:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003134:	e008      	b.n	8003148 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003136:	f7fd fedb 	bl	8000ef0 <HAL_GetTick>
 800313a:	0002      	movs	r2, r0
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b64      	cmp	r3, #100	@ 0x64
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e2fd      	b.n	8003744 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003148:	4b8c      	ldr	r3, [pc, #560]	@ (800337c <HAL_RCC_OscConfig+0x338>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	2380      	movs	r3, #128	@ 0x80
 800314e:	029b      	lsls	r3, r3, #10
 8003150:	4013      	ands	r3, r2
 8003152:	d0f0      	beq.n	8003136 <HAL_RCC_OscConfig+0xf2>
 8003154:	e015      	b.n	8003182 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003156:	f7fd fecb 	bl	8000ef0 <HAL_GetTick>
 800315a:	0003      	movs	r3, r0
 800315c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003160:	f7fd fec6 	bl	8000ef0 <HAL_GetTick>
 8003164:	0002      	movs	r2, r0
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b64      	cmp	r3, #100	@ 0x64
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e2e8      	b.n	8003744 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003172:	4b82      	ldr	r3, [pc, #520]	@ (800337c <HAL_RCC_OscConfig+0x338>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	2380      	movs	r3, #128	@ 0x80
 8003178:	029b      	lsls	r3, r3, #10
 800317a:	4013      	ands	r3, r2
 800317c:	d1f0      	bne.n	8003160 <HAL_RCC_OscConfig+0x11c>
 800317e:	e000      	b.n	8003182 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003180:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2202      	movs	r2, #2
 8003188:	4013      	ands	r3, r2
 800318a:	d100      	bne.n	800318e <HAL_RCC_OscConfig+0x14a>
 800318c:	e06c      	b.n	8003268 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800318e:	4b7b      	ldr	r3, [pc, #492]	@ (800337c <HAL_RCC_OscConfig+0x338>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	220c      	movs	r2, #12
 8003194:	4013      	ands	r3, r2
 8003196:	d00e      	beq.n	80031b6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003198:	4b78      	ldr	r3, [pc, #480]	@ (800337c <HAL_RCC_OscConfig+0x338>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	220c      	movs	r2, #12
 800319e:	4013      	ands	r3, r2
 80031a0:	2b08      	cmp	r3, #8
 80031a2:	d11f      	bne.n	80031e4 <HAL_RCC_OscConfig+0x1a0>
 80031a4:	4b75      	ldr	r3, [pc, #468]	@ (800337c <HAL_RCC_OscConfig+0x338>)
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	23c0      	movs	r3, #192	@ 0xc0
 80031aa:	025b      	lsls	r3, r3, #9
 80031ac:	401a      	ands	r2, r3
 80031ae:	2380      	movs	r3, #128	@ 0x80
 80031b0:	021b      	lsls	r3, r3, #8
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d116      	bne.n	80031e4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031b6:	4b71      	ldr	r3, [pc, #452]	@ (800337c <HAL_RCC_OscConfig+0x338>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2202      	movs	r2, #2
 80031bc:	4013      	ands	r3, r2
 80031be:	d005      	beq.n	80031cc <HAL_RCC_OscConfig+0x188>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d001      	beq.n	80031cc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e2bb      	b.n	8003744 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031cc:	4b6b      	ldr	r3, [pc, #428]	@ (800337c <HAL_RCC_OscConfig+0x338>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	22f8      	movs	r2, #248	@ 0xf8
 80031d2:	4393      	bics	r3, r2
 80031d4:	0019      	movs	r1, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	00da      	lsls	r2, r3, #3
 80031dc:	4b67      	ldr	r3, [pc, #412]	@ (800337c <HAL_RCC_OscConfig+0x338>)
 80031de:	430a      	orrs	r2, r1
 80031e0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031e2:	e041      	b.n	8003268 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d024      	beq.n	8003236 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031ec:	4b63      	ldr	r3, [pc, #396]	@ (800337c <HAL_RCC_OscConfig+0x338>)
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	4b62      	ldr	r3, [pc, #392]	@ (800337c <HAL_RCC_OscConfig+0x338>)
 80031f2:	2101      	movs	r1, #1
 80031f4:	430a      	orrs	r2, r1
 80031f6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f8:	f7fd fe7a 	bl	8000ef0 <HAL_GetTick>
 80031fc:	0003      	movs	r3, r0
 80031fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003200:	e008      	b.n	8003214 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003202:	f7fd fe75 	bl	8000ef0 <HAL_GetTick>
 8003206:	0002      	movs	r2, r0
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d901      	bls.n	8003214 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e297      	b.n	8003744 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003214:	4b59      	ldr	r3, [pc, #356]	@ (800337c <HAL_RCC_OscConfig+0x338>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2202      	movs	r2, #2
 800321a:	4013      	ands	r3, r2
 800321c:	d0f1      	beq.n	8003202 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800321e:	4b57      	ldr	r3, [pc, #348]	@ (800337c <HAL_RCC_OscConfig+0x338>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	22f8      	movs	r2, #248	@ 0xf8
 8003224:	4393      	bics	r3, r2
 8003226:	0019      	movs	r1, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	00da      	lsls	r2, r3, #3
 800322e:	4b53      	ldr	r3, [pc, #332]	@ (800337c <HAL_RCC_OscConfig+0x338>)
 8003230:	430a      	orrs	r2, r1
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	e018      	b.n	8003268 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003236:	4b51      	ldr	r3, [pc, #324]	@ (800337c <HAL_RCC_OscConfig+0x338>)
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	4b50      	ldr	r3, [pc, #320]	@ (800337c <HAL_RCC_OscConfig+0x338>)
 800323c:	2101      	movs	r1, #1
 800323e:	438a      	bics	r2, r1
 8003240:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003242:	f7fd fe55 	bl	8000ef0 <HAL_GetTick>
 8003246:	0003      	movs	r3, r0
 8003248:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800324c:	f7fd fe50 	bl	8000ef0 <HAL_GetTick>
 8003250:	0002      	movs	r2, r0
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b02      	cmp	r3, #2
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e272      	b.n	8003744 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800325e:	4b47      	ldr	r3, [pc, #284]	@ (800337c <HAL_RCC_OscConfig+0x338>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2202      	movs	r2, #2
 8003264:	4013      	ands	r3, r2
 8003266:	d1f1      	bne.n	800324c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2208      	movs	r2, #8
 800326e:	4013      	ands	r3, r2
 8003270:	d036      	beq.n	80032e0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d019      	beq.n	80032ae <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800327a:	4b40      	ldr	r3, [pc, #256]	@ (800337c <HAL_RCC_OscConfig+0x338>)
 800327c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800327e:	4b3f      	ldr	r3, [pc, #252]	@ (800337c <HAL_RCC_OscConfig+0x338>)
 8003280:	2101      	movs	r1, #1
 8003282:	430a      	orrs	r2, r1
 8003284:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003286:	f7fd fe33 	bl	8000ef0 <HAL_GetTick>
 800328a:	0003      	movs	r3, r0
 800328c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003290:	f7fd fe2e 	bl	8000ef0 <HAL_GetTick>
 8003294:	0002      	movs	r2, r0
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e250      	b.n	8003744 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032a2:	4b36      	ldr	r3, [pc, #216]	@ (800337c <HAL_RCC_OscConfig+0x338>)
 80032a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a6:	2202      	movs	r2, #2
 80032a8:	4013      	ands	r3, r2
 80032aa:	d0f1      	beq.n	8003290 <HAL_RCC_OscConfig+0x24c>
 80032ac:	e018      	b.n	80032e0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032ae:	4b33      	ldr	r3, [pc, #204]	@ (800337c <HAL_RCC_OscConfig+0x338>)
 80032b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032b2:	4b32      	ldr	r3, [pc, #200]	@ (800337c <HAL_RCC_OscConfig+0x338>)
 80032b4:	2101      	movs	r1, #1
 80032b6:	438a      	bics	r2, r1
 80032b8:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ba:	f7fd fe19 	bl	8000ef0 <HAL_GetTick>
 80032be:	0003      	movs	r3, r0
 80032c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032c4:	f7fd fe14 	bl	8000ef0 <HAL_GetTick>
 80032c8:	0002      	movs	r2, r0
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e236      	b.n	8003744 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d6:	4b29      	ldr	r3, [pc, #164]	@ (800337c <HAL_RCC_OscConfig+0x338>)
 80032d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032da:	2202      	movs	r2, #2
 80032dc:	4013      	ands	r3, r2
 80032de:	d1f1      	bne.n	80032c4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2204      	movs	r2, #4
 80032e6:	4013      	ands	r3, r2
 80032e8:	d100      	bne.n	80032ec <HAL_RCC_OscConfig+0x2a8>
 80032ea:	e0b5      	b.n	8003458 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ec:	201f      	movs	r0, #31
 80032ee:	183b      	adds	r3, r7, r0
 80032f0:	2200      	movs	r2, #0
 80032f2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032f4:	4b21      	ldr	r3, [pc, #132]	@ (800337c <HAL_RCC_OscConfig+0x338>)
 80032f6:	69da      	ldr	r2, [r3, #28]
 80032f8:	2380      	movs	r3, #128	@ 0x80
 80032fa:	055b      	lsls	r3, r3, #21
 80032fc:	4013      	ands	r3, r2
 80032fe:	d110      	bne.n	8003322 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003300:	4b1e      	ldr	r3, [pc, #120]	@ (800337c <HAL_RCC_OscConfig+0x338>)
 8003302:	69da      	ldr	r2, [r3, #28]
 8003304:	4b1d      	ldr	r3, [pc, #116]	@ (800337c <HAL_RCC_OscConfig+0x338>)
 8003306:	2180      	movs	r1, #128	@ 0x80
 8003308:	0549      	lsls	r1, r1, #21
 800330a:	430a      	orrs	r2, r1
 800330c:	61da      	str	r2, [r3, #28]
 800330e:	4b1b      	ldr	r3, [pc, #108]	@ (800337c <HAL_RCC_OscConfig+0x338>)
 8003310:	69da      	ldr	r2, [r3, #28]
 8003312:	2380      	movs	r3, #128	@ 0x80
 8003314:	055b      	lsls	r3, r3, #21
 8003316:	4013      	ands	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]
 800331a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800331c:	183b      	adds	r3, r7, r0
 800331e:	2201      	movs	r2, #1
 8003320:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003322:	4b19      	ldr	r3, [pc, #100]	@ (8003388 <HAL_RCC_OscConfig+0x344>)
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	2380      	movs	r3, #128	@ 0x80
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	4013      	ands	r3, r2
 800332c:	d11a      	bne.n	8003364 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800332e:	4b16      	ldr	r3, [pc, #88]	@ (8003388 <HAL_RCC_OscConfig+0x344>)
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	4b15      	ldr	r3, [pc, #84]	@ (8003388 <HAL_RCC_OscConfig+0x344>)
 8003334:	2180      	movs	r1, #128	@ 0x80
 8003336:	0049      	lsls	r1, r1, #1
 8003338:	430a      	orrs	r2, r1
 800333a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800333c:	f7fd fdd8 	bl	8000ef0 <HAL_GetTick>
 8003340:	0003      	movs	r3, r0
 8003342:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003344:	e008      	b.n	8003358 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003346:	f7fd fdd3 	bl	8000ef0 <HAL_GetTick>
 800334a:	0002      	movs	r2, r0
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b64      	cmp	r3, #100	@ 0x64
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e1f5      	b.n	8003744 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003358:	4b0b      	ldr	r3, [pc, #44]	@ (8003388 <HAL_RCC_OscConfig+0x344>)
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	2380      	movs	r3, #128	@ 0x80
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	4013      	ands	r3, r2
 8003362:	d0f0      	beq.n	8003346 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d10f      	bne.n	800338c <HAL_RCC_OscConfig+0x348>
 800336c:	4b03      	ldr	r3, [pc, #12]	@ (800337c <HAL_RCC_OscConfig+0x338>)
 800336e:	6a1a      	ldr	r2, [r3, #32]
 8003370:	4b02      	ldr	r3, [pc, #8]	@ (800337c <HAL_RCC_OscConfig+0x338>)
 8003372:	2101      	movs	r1, #1
 8003374:	430a      	orrs	r2, r1
 8003376:	621a      	str	r2, [r3, #32]
 8003378:	e036      	b.n	80033e8 <HAL_RCC_OscConfig+0x3a4>
 800337a:	46c0      	nop			@ (mov r8, r8)
 800337c:	40021000 	.word	0x40021000
 8003380:	fffeffff 	.word	0xfffeffff
 8003384:	fffbffff 	.word	0xfffbffff
 8003388:	40007000 	.word	0x40007000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10c      	bne.n	80033ae <HAL_RCC_OscConfig+0x36a>
 8003394:	4bca      	ldr	r3, [pc, #808]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 8003396:	6a1a      	ldr	r2, [r3, #32]
 8003398:	4bc9      	ldr	r3, [pc, #804]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 800339a:	2101      	movs	r1, #1
 800339c:	438a      	bics	r2, r1
 800339e:	621a      	str	r2, [r3, #32]
 80033a0:	4bc7      	ldr	r3, [pc, #796]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 80033a2:	6a1a      	ldr	r2, [r3, #32]
 80033a4:	4bc6      	ldr	r3, [pc, #792]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 80033a6:	2104      	movs	r1, #4
 80033a8:	438a      	bics	r2, r1
 80033aa:	621a      	str	r2, [r3, #32]
 80033ac:	e01c      	b.n	80033e8 <HAL_RCC_OscConfig+0x3a4>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	2b05      	cmp	r3, #5
 80033b4:	d10c      	bne.n	80033d0 <HAL_RCC_OscConfig+0x38c>
 80033b6:	4bc2      	ldr	r3, [pc, #776]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 80033b8:	6a1a      	ldr	r2, [r3, #32]
 80033ba:	4bc1      	ldr	r3, [pc, #772]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 80033bc:	2104      	movs	r1, #4
 80033be:	430a      	orrs	r2, r1
 80033c0:	621a      	str	r2, [r3, #32]
 80033c2:	4bbf      	ldr	r3, [pc, #764]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 80033c4:	6a1a      	ldr	r2, [r3, #32]
 80033c6:	4bbe      	ldr	r3, [pc, #760]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 80033c8:	2101      	movs	r1, #1
 80033ca:	430a      	orrs	r2, r1
 80033cc:	621a      	str	r2, [r3, #32]
 80033ce:	e00b      	b.n	80033e8 <HAL_RCC_OscConfig+0x3a4>
 80033d0:	4bbb      	ldr	r3, [pc, #748]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 80033d2:	6a1a      	ldr	r2, [r3, #32]
 80033d4:	4bba      	ldr	r3, [pc, #744]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 80033d6:	2101      	movs	r1, #1
 80033d8:	438a      	bics	r2, r1
 80033da:	621a      	str	r2, [r3, #32]
 80033dc:	4bb8      	ldr	r3, [pc, #736]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 80033de:	6a1a      	ldr	r2, [r3, #32]
 80033e0:	4bb7      	ldr	r3, [pc, #732]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 80033e2:	2104      	movs	r1, #4
 80033e4:	438a      	bics	r2, r1
 80033e6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d014      	beq.n	800341a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f0:	f7fd fd7e 	bl	8000ef0 <HAL_GetTick>
 80033f4:	0003      	movs	r3, r0
 80033f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f8:	e009      	b.n	800340e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033fa:	f7fd fd79 	bl	8000ef0 <HAL_GetTick>
 80033fe:	0002      	movs	r2, r0
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	4aaf      	ldr	r2, [pc, #700]	@ (80036c4 <HAL_RCC_OscConfig+0x680>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e19a      	b.n	8003744 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800340e:	4bac      	ldr	r3, [pc, #688]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	2202      	movs	r2, #2
 8003414:	4013      	ands	r3, r2
 8003416:	d0f0      	beq.n	80033fa <HAL_RCC_OscConfig+0x3b6>
 8003418:	e013      	b.n	8003442 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800341a:	f7fd fd69 	bl	8000ef0 <HAL_GetTick>
 800341e:	0003      	movs	r3, r0
 8003420:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003422:	e009      	b.n	8003438 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003424:	f7fd fd64 	bl	8000ef0 <HAL_GetTick>
 8003428:	0002      	movs	r2, r0
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	4aa5      	ldr	r2, [pc, #660]	@ (80036c4 <HAL_RCC_OscConfig+0x680>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d901      	bls.n	8003438 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e185      	b.n	8003744 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003438:	4ba1      	ldr	r3, [pc, #644]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	2202      	movs	r2, #2
 800343e:	4013      	ands	r3, r2
 8003440:	d1f0      	bne.n	8003424 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003442:	231f      	movs	r3, #31
 8003444:	18fb      	adds	r3, r7, r3
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d105      	bne.n	8003458 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800344c:	4b9c      	ldr	r3, [pc, #624]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 800344e:	69da      	ldr	r2, [r3, #28]
 8003450:	4b9b      	ldr	r3, [pc, #620]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 8003452:	499d      	ldr	r1, [pc, #628]	@ (80036c8 <HAL_RCC_OscConfig+0x684>)
 8003454:	400a      	ands	r2, r1
 8003456:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2210      	movs	r2, #16
 800345e:	4013      	ands	r3, r2
 8003460:	d063      	beq.n	800352a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d12a      	bne.n	80034c0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800346a:	4b95      	ldr	r3, [pc, #596]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 800346c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800346e:	4b94      	ldr	r3, [pc, #592]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 8003470:	2104      	movs	r1, #4
 8003472:	430a      	orrs	r2, r1
 8003474:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003476:	4b92      	ldr	r3, [pc, #584]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 8003478:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800347a:	4b91      	ldr	r3, [pc, #580]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 800347c:	2101      	movs	r1, #1
 800347e:	430a      	orrs	r2, r1
 8003480:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003482:	f7fd fd35 	bl	8000ef0 <HAL_GetTick>
 8003486:	0003      	movs	r3, r0
 8003488:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800348c:	f7fd fd30 	bl	8000ef0 <HAL_GetTick>
 8003490:	0002      	movs	r2, r0
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e152      	b.n	8003744 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800349e:	4b88      	ldr	r3, [pc, #544]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 80034a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034a2:	2202      	movs	r2, #2
 80034a4:	4013      	ands	r3, r2
 80034a6:	d0f1      	beq.n	800348c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80034a8:	4b85      	ldr	r3, [pc, #532]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 80034aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ac:	22f8      	movs	r2, #248	@ 0xf8
 80034ae:	4393      	bics	r3, r2
 80034b0:	0019      	movs	r1, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	00da      	lsls	r2, r3, #3
 80034b8:	4b81      	ldr	r3, [pc, #516]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 80034ba:	430a      	orrs	r2, r1
 80034bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80034be:	e034      	b.n	800352a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	3305      	adds	r3, #5
 80034c6:	d111      	bne.n	80034ec <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80034c8:	4b7d      	ldr	r3, [pc, #500]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 80034ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034cc:	4b7c      	ldr	r3, [pc, #496]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 80034ce:	2104      	movs	r1, #4
 80034d0:	438a      	bics	r2, r1
 80034d2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80034d4:	4b7a      	ldr	r3, [pc, #488]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 80034d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034d8:	22f8      	movs	r2, #248	@ 0xf8
 80034da:	4393      	bics	r3, r2
 80034dc:	0019      	movs	r1, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	00da      	lsls	r2, r3, #3
 80034e4:	4b76      	ldr	r3, [pc, #472]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 80034e6:	430a      	orrs	r2, r1
 80034e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80034ea:	e01e      	b.n	800352a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80034ec:	4b74      	ldr	r3, [pc, #464]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 80034ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034f0:	4b73      	ldr	r3, [pc, #460]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 80034f2:	2104      	movs	r1, #4
 80034f4:	430a      	orrs	r2, r1
 80034f6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80034f8:	4b71      	ldr	r3, [pc, #452]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 80034fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034fc:	4b70      	ldr	r3, [pc, #448]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 80034fe:	2101      	movs	r1, #1
 8003500:	438a      	bics	r2, r1
 8003502:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003504:	f7fd fcf4 	bl	8000ef0 <HAL_GetTick>
 8003508:	0003      	movs	r3, r0
 800350a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800350c:	e008      	b.n	8003520 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800350e:	f7fd fcef 	bl	8000ef0 <HAL_GetTick>
 8003512:	0002      	movs	r2, r0
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e111      	b.n	8003744 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003520:	4b67      	ldr	r3, [pc, #412]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 8003522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003524:	2202      	movs	r2, #2
 8003526:	4013      	ands	r3, r2
 8003528:	d1f1      	bne.n	800350e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2220      	movs	r2, #32
 8003530:	4013      	ands	r3, r2
 8003532:	d05c      	beq.n	80035ee <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003534:	4b62      	ldr	r3, [pc, #392]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	220c      	movs	r2, #12
 800353a:	4013      	ands	r3, r2
 800353c:	2b0c      	cmp	r3, #12
 800353e:	d00e      	beq.n	800355e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003540:	4b5f      	ldr	r3, [pc, #380]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	220c      	movs	r2, #12
 8003546:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003548:	2b08      	cmp	r3, #8
 800354a:	d114      	bne.n	8003576 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800354c:	4b5c      	ldr	r3, [pc, #368]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	23c0      	movs	r3, #192	@ 0xc0
 8003552:	025b      	lsls	r3, r3, #9
 8003554:	401a      	ands	r2, r3
 8003556:	23c0      	movs	r3, #192	@ 0xc0
 8003558:	025b      	lsls	r3, r3, #9
 800355a:	429a      	cmp	r2, r3
 800355c:	d10b      	bne.n	8003576 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800355e:	4b58      	ldr	r3, [pc, #352]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 8003560:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003562:	2380      	movs	r3, #128	@ 0x80
 8003564:	029b      	lsls	r3, r3, #10
 8003566:	4013      	ands	r3, r2
 8003568:	d040      	beq.n	80035ec <HAL_RCC_OscConfig+0x5a8>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d03c      	beq.n	80035ec <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e0e6      	b.n	8003744 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d01b      	beq.n	80035b6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800357e:	4b50      	ldr	r3, [pc, #320]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 8003580:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003582:	4b4f      	ldr	r3, [pc, #316]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 8003584:	2180      	movs	r1, #128	@ 0x80
 8003586:	0249      	lsls	r1, r1, #9
 8003588:	430a      	orrs	r2, r1
 800358a:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800358c:	f7fd fcb0 	bl	8000ef0 <HAL_GetTick>
 8003590:	0003      	movs	r3, r0
 8003592:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003594:	e008      	b.n	80035a8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003596:	f7fd fcab 	bl	8000ef0 <HAL_GetTick>
 800359a:	0002      	movs	r2, r0
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e0cd      	b.n	8003744 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80035a8:	4b45      	ldr	r3, [pc, #276]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 80035aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035ac:	2380      	movs	r3, #128	@ 0x80
 80035ae:	029b      	lsls	r3, r3, #10
 80035b0:	4013      	ands	r3, r2
 80035b2:	d0f0      	beq.n	8003596 <HAL_RCC_OscConfig+0x552>
 80035b4:	e01b      	b.n	80035ee <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80035b6:	4b42      	ldr	r3, [pc, #264]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 80035b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035ba:	4b41      	ldr	r3, [pc, #260]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 80035bc:	4943      	ldr	r1, [pc, #268]	@ (80036cc <HAL_RCC_OscConfig+0x688>)
 80035be:	400a      	ands	r2, r1
 80035c0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c2:	f7fd fc95 	bl	8000ef0 <HAL_GetTick>
 80035c6:	0003      	movs	r3, r0
 80035c8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035cc:	f7fd fc90 	bl	8000ef0 <HAL_GetTick>
 80035d0:	0002      	movs	r2, r0
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e0b2      	b.n	8003744 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80035de:	4b38      	ldr	r3, [pc, #224]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 80035e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035e2:	2380      	movs	r3, #128	@ 0x80
 80035e4:	029b      	lsls	r3, r3, #10
 80035e6:	4013      	ands	r3, r2
 80035e8:	d1f0      	bne.n	80035cc <HAL_RCC_OscConfig+0x588>
 80035ea:	e000      	b.n	80035ee <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80035ec:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d100      	bne.n	80035f8 <HAL_RCC_OscConfig+0x5b4>
 80035f6:	e0a4      	b.n	8003742 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035f8:	4b31      	ldr	r3, [pc, #196]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	220c      	movs	r2, #12
 80035fe:	4013      	ands	r3, r2
 8003600:	2b08      	cmp	r3, #8
 8003602:	d100      	bne.n	8003606 <HAL_RCC_OscConfig+0x5c2>
 8003604:	e078      	b.n	80036f8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360a:	2b02      	cmp	r3, #2
 800360c:	d14c      	bne.n	80036a8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800360e:	4b2c      	ldr	r3, [pc, #176]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	4b2b      	ldr	r3, [pc, #172]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 8003614:	492e      	ldr	r1, [pc, #184]	@ (80036d0 <HAL_RCC_OscConfig+0x68c>)
 8003616:	400a      	ands	r2, r1
 8003618:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800361a:	f7fd fc69 	bl	8000ef0 <HAL_GetTick>
 800361e:	0003      	movs	r3, r0
 8003620:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003624:	f7fd fc64 	bl	8000ef0 <HAL_GetTick>
 8003628:	0002      	movs	r2, r0
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e086      	b.n	8003744 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003636:	4b22      	ldr	r3, [pc, #136]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	2380      	movs	r3, #128	@ 0x80
 800363c:	049b      	lsls	r3, r3, #18
 800363e:	4013      	ands	r3, r2
 8003640:	d1f0      	bne.n	8003624 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003642:	4b1f      	ldr	r3, [pc, #124]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 8003644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003646:	220f      	movs	r2, #15
 8003648:	4393      	bics	r3, r2
 800364a:	0019      	movs	r1, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003650:	4b1b      	ldr	r3, [pc, #108]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 8003652:	430a      	orrs	r2, r1
 8003654:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003656:	4b1a      	ldr	r3, [pc, #104]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	4a1e      	ldr	r2, [pc, #120]	@ (80036d4 <HAL_RCC_OscConfig+0x690>)
 800365c:	4013      	ands	r3, r2
 800365e:	0019      	movs	r1, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003668:	431a      	orrs	r2, r3
 800366a:	4b15      	ldr	r3, [pc, #84]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 800366c:	430a      	orrs	r2, r1
 800366e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003670:	4b13      	ldr	r3, [pc, #76]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	4b12      	ldr	r3, [pc, #72]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 8003676:	2180      	movs	r1, #128	@ 0x80
 8003678:	0449      	lsls	r1, r1, #17
 800367a:	430a      	orrs	r2, r1
 800367c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800367e:	f7fd fc37 	bl	8000ef0 <HAL_GetTick>
 8003682:	0003      	movs	r3, r0
 8003684:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003688:	f7fd fc32 	bl	8000ef0 <HAL_GetTick>
 800368c:	0002      	movs	r2, r0
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e054      	b.n	8003744 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800369a:	4b09      	ldr	r3, [pc, #36]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	2380      	movs	r3, #128	@ 0x80
 80036a0:	049b      	lsls	r3, r3, #18
 80036a2:	4013      	ands	r3, r2
 80036a4:	d0f0      	beq.n	8003688 <HAL_RCC_OscConfig+0x644>
 80036a6:	e04c      	b.n	8003742 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036a8:	4b05      	ldr	r3, [pc, #20]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	4b04      	ldr	r3, [pc, #16]	@ (80036c0 <HAL_RCC_OscConfig+0x67c>)
 80036ae:	4908      	ldr	r1, [pc, #32]	@ (80036d0 <HAL_RCC_OscConfig+0x68c>)
 80036b0:	400a      	ands	r2, r1
 80036b2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b4:	f7fd fc1c 	bl	8000ef0 <HAL_GetTick>
 80036b8:	0003      	movs	r3, r0
 80036ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036bc:	e015      	b.n	80036ea <HAL_RCC_OscConfig+0x6a6>
 80036be:	46c0      	nop			@ (mov r8, r8)
 80036c0:	40021000 	.word	0x40021000
 80036c4:	00001388 	.word	0x00001388
 80036c8:	efffffff 	.word	0xefffffff
 80036cc:	fffeffff 	.word	0xfffeffff
 80036d0:	feffffff 	.word	0xfeffffff
 80036d4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036d8:	f7fd fc0a 	bl	8000ef0 <HAL_GetTick>
 80036dc:	0002      	movs	r2, r0
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e02c      	b.n	8003744 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ea:	4b18      	ldr	r3, [pc, #96]	@ (800374c <HAL_RCC_OscConfig+0x708>)
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	2380      	movs	r3, #128	@ 0x80
 80036f0:	049b      	lsls	r3, r3, #18
 80036f2:	4013      	ands	r3, r2
 80036f4:	d1f0      	bne.n	80036d8 <HAL_RCC_OscConfig+0x694>
 80036f6:	e024      	b.n	8003742 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d101      	bne.n	8003704 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e01f      	b.n	8003744 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003704:	4b11      	ldr	r3, [pc, #68]	@ (800374c <HAL_RCC_OscConfig+0x708>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800370a:	4b10      	ldr	r3, [pc, #64]	@ (800374c <HAL_RCC_OscConfig+0x708>)
 800370c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800370e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	23c0      	movs	r3, #192	@ 0xc0
 8003714:	025b      	lsls	r3, r3, #9
 8003716:	401a      	ands	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800371c:	429a      	cmp	r2, r3
 800371e:	d10e      	bne.n	800373e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	220f      	movs	r2, #15
 8003724:	401a      	ands	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800372a:	429a      	cmp	r2, r3
 800372c:	d107      	bne.n	800373e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	23f0      	movs	r3, #240	@ 0xf0
 8003732:	039b      	lsls	r3, r3, #14
 8003734:	401a      	ands	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800373a:	429a      	cmp	r2, r3
 800373c:	d001      	beq.n	8003742 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e000      	b.n	8003744 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	0018      	movs	r0, r3
 8003746:	46bd      	mov	sp, r7
 8003748:	b008      	add	sp, #32
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40021000 	.word	0x40021000

08003750 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e0bf      	b.n	80038e4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003764:	4b61      	ldr	r3, [pc, #388]	@ (80038ec <HAL_RCC_ClockConfig+0x19c>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2201      	movs	r2, #1
 800376a:	4013      	ands	r3, r2
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	429a      	cmp	r2, r3
 8003770:	d911      	bls.n	8003796 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003772:	4b5e      	ldr	r3, [pc, #376]	@ (80038ec <HAL_RCC_ClockConfig+0x19c>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2201      	movs	r2, #1
 8003778:	4393      	bics	r3, r2
 800377a:	0019      	movs	r1, r3
 800377c:	4b5b      	ldr	r3, [pc, #364]	@ (80038ec <HAL_RCC_ClockConfig+0x19c>)
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003784:	4b59      	ldr	r3, [pc, #356]	@ (80038ec <HAL_RCC_ClockConfig+0x19c>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2201      	movs	r2, #1
 800378a:	4013      	ands	r3, r2
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	429a      	cmp	r2, r3
 8003790:	d001      	beq.n	8003796 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e0a6      	b.n	80038e4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2202      	movs	r2, #2
 800379c:	4013      	ands	r3, r2
 800379e:	d015      	beq.n	80037cc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2204      	movs	r2, #4
 80037a6:	4013      	ands	r3, r2
 80037a8:	d006      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80037aa:	4b51      	ldr	r3, [pc, #324]	@ (80038f0 <HAL_RCC_ClockConfig+0x1a0>)
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	4b50      	ldr	r3, [pc, #320]	@ (80038f0 <HAL_RCC_ClockConfig+0x1a0>)
 80037b0:	21e0      	movs	r1, #224	@ 0xe0
 80037b2:	00c9      	lsls	r1, r1, #3
 80037b4:	430a      	orrs	r2, r1
 80037b6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037b8:	4b4d      	ldr	r3, [pc, #308]	@ (80038f0 <HAL_RCC_ClockConfig+0x1a0>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	22f0      	movs	r2, #240	@ 0xf0
 80037be:	4393      	bics	r3, r2
 80037c0:	0019      	movs	r1, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689a      	ldr	r2, [r3, #8]
 80037c6:	4b4a      	ldr	r3, [pc, #296]	@ (80038f0 <HAL_RCC_ClockConfig+0x1a0>)
 80037c8:	430a      	orrs	r2, r1
 80037ca:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2201      	movs	r2, #1
 80037d2:	4013      	ands	r3, r2
 80037d4:	d04c      	beq.n	8003870 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d107      	bne.n	80037ee <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037de:	4b44      	ldr	r3, [pc, #272]	@ (80038f0 <HAL_RCC_ClockConfig+0x1a0>)
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	2380      	movs	r3, #128	@ 0x80
 80037e4:	029b      	lsls	r3, r3, #10
 80037e6:	4013      	ands	r3, r2
 80037e8:	d120      	bne.n	800382c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e07a      	b.n	80038e4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d107      	bne.n	8003806 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037f6:	4b3e      	ldr	r3, [pc, #248]	@ (80038f0 <HAL_RCC_ClockConfig+0x1a0>)
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	2380      	movs	r3, #128	@ 0x80
 80037fc:	049b      	lsls	r3, r3, #18
 80037fe:	4013      	ands	r3, r2
 8003800:	d114      	bne.n	800382c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e06e      	b.n	80038e4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2b03      	cmp	r3, #3
 800380c:	d107      	bne.n	800381e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800380e:	4b38      	ldr	r3, [pc, #224]	@ (80038f0 <HAL_RCC_ClockConfig+0x1a0>)
 8003810:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003812:	2380      	movs	r3, #128	@ 0x80
 8003814:	029b      	lsls	r3, r3, #10
 8003816:	4013      	ands	r3, r2
 8003818:	d108      	bne.n	800382c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e062      	b.n	80038e4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800381e:	4b34      	ldr	r3, [pc, #208]	@ (80038f0 <HAL_RCC_ClockConfig+0x1a0>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2202      	movs	r2, #2
 8003824:	4013      	ands	r3, r2
 8003826:	d101      	bne.n	800382c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e05b      	b.n	80038e4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800382c:	4b30      	ldr	r3, [pc, #192]	@ (80038f0 <HAL_RCC_ClockConfig+0x1a0>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	2203      	movs	r2, #3
 8003832:	4393      	bics	r3, r2
 8003834:	0019      	movs	r1, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	4b2d      	ldr	r3, [pc, #180]	@ (80038f0 <HAL_RCC_ClockConfig+0x1a0>)
 800383c:	430a      	orrs	r2, r1
 800383e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003840:	f7fd fb56 	bl	8000ef0 <HAL_GetTick>
 8003844:	0003      	movs	r3, r0
 8003846:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003848:	e009      	b.n	800385e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800384a:	f7fd fb51 	bl	8000ef0 <HAL_GetTick>
 800384e:	0002      	movs	r2, r0
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	4a27      	ldr	r2, [pc, #156]	@ (80038f4 <HAL_RCC_ClockConfig+0x1a4>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d901      	bls.n	800385e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e042      	b.n	80038e4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800385e:	4b24      	ldr	r3, [pc, #144]	@ (80038f0 <HAL_RCC_ClockConfig+0x1a0>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	220c      	movs	r2, #12
 8003864:	401a      	ands	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	429a      	cmp	r2, r3
 800386e:	d1ec      	bne.n	800384a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003870:	4b1e      	ldr	r3, [pc, #120]	@ (80038ec <HAL_RCC_ClockConfig+0x19c>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2201      	movs	r2, #1
 8003876:	4013      	ands	r3, r2
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	429a      	cmp	r2, r3
 800387c:	d211      	bcs.n	80038a2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800387e:	4b1b      	ldr	r3, [pc, #108]	@ (80038ec <HAL_RCC_ClockConfig+0x19c>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2201      	movs	r2, #1
 8003884:	4393      	bics	r3, r2
 8003886:	0019      	movs	r1, r3
 8003888:	4b18      	ldr	r3, [pc, #96]	@ (80038ec <HAL_RCC_ClockConfig+0x19c>)
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003890:	4b16      	ldr	r3, [pc, #88]	@ (80038ec <HAL_RCC_ClockConfig+0x19c>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2201      	movs	r2, #1
 8003896:	4013      	ands	r3, r2
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	429a      	cmp	r2, r3
 800389c:	d001      	beq.n	80038a2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e020      	b.n	80038e4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2204      	movs	r2, #4
 80038a8:	4013      	ands	r3, r2
 80038aa:	d009      	beq.n	80038c0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80038ac:	4b10      	ldr	r3, [pc, #64]	@ (80038f0 <HAL_RCC_ClockConfig+0x1a0>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	4a11      	ldr	r2, [pc, #68]	@ (80038f8 <HAL_RCC_ClockConfig+0x1a8>)
 80038b2:	4013      	ands	r3, r2
 80038b4:	0019      	movs	r1, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	68da      	ldr	r2, [r3, #12]
 80038ba:	4b0d      	ldr	r3, [pc, #52]	@ (80038f0 <HAL_RCC_ClockConfig+0x1a0>)
 80038bc:	430a      	orrs	r2, r1
 80038be:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80038c0:	f000 f820 	bl	8003904 <HAL_RCC_GetSysClockFreq>
 80038c4:	0001      	movs	r1, r0
 80038c6:	4b0a      	ldr	r3, [pc, #40]	@ (80038f0 <HAL_RCC_ClockConfig+0x1a0>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	091b      	lsrs	r3, r3, #4
 80038cc:	220f      	movs	r2, #15
 80038ce:	4013      	ands	r3, r2
 80038d0:	4a0a      	ldr	r2, [pc, #40]	@ (80038fc <HAL_RCC_ClockConfig+0x1ac>)
 80038d2:	5cd3      	ldrb	r3, [r2, r3]
 80038d4:	000a      	movs	r2, r1
 80038d6:	40da      	lsrs	r2, r3
 80038d8:	4b09      	ldr	r3, [pc, #36]	@ (8003900 <HAL_RCC_ClockConfig+0x1b0>)
 80038da:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80038dc:	2003      	movs	r0, #3
 80038de:	f7fd fac1 	bl	8000e64 <HAL_InitTick>
  
  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	0018      	movs	r0, r3
 80038e6:	46bd      	mov	sp, r7
 80038e8:	b004      	add	sp, #16
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	40022000 	.word	0x40022000
 80038f0:	40021000 	.word	0x40021000
 80038f4:	00001388 	.word	0x00001388
 80038f8:	fffff8ff 	.word	0xfffff8ff
 80038fc:	08004bf8 	.word	0x08004bf8
 8003900:	20000000 	.word	0x20000000

08003904 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800390a:	2300      	movs	r3, #0
 800390c:	60fb      	str	r3, [r7, #12]
 800390e:	2300      	movs	r3, #0
 8003910:	60bb      	str	r3, [r7, #8]
 8003912:	2300      	movs	r3, #0
 8003914:	617b      	str	r3, [r7, #20]
 8003916:	2300      	movs	r3, #0
 8003918:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800391a:	2300      	movs	r3, #0
 800391c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800391e:	4b2d      	ldr	r3, [pc, #180]	@ (80039d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	220c      	movs	r2, #12
 8003928:	4013      	ands	r3, r2
 800392a:	2b0c      	cmp	r3, #12
 800392c:	d046      	beq.n	80039bc <HAL_RCC_GetSysClockFreq+0xb8>
 800392e:	d848      	bhi.n	80039c2 <HAL_RCC_GetSysClockFreq+0xbe>
 8003930:	2b04      	cmp	r3, #4
 8003932:	d002      	beq.n	800393a <HAL_RCC_GetSysClockFreq+0x36>
 8003934:	2b08      	cmp	r3, #8
 8003936:	d003      	beq.n	8003940 <HAL_RCC_GetSysClockFreq+0x3c>
 8003938:	e043      	b.n	80039c2 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800393a:	4b27      	ldr	r3, [pc, #156]	@ (80039d8 <HAL_RCC_GetSysClockFreq+0xd4>)
 800393c:	613b      	str	r3, [r7, #16]
      break;
 800393e:	e043      	b.n	80039c8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	0c9b      	lsrs	r3, r3, #18
 8003944:	220f      	movs	r2, #15
 8003946:	4013      	ands	r3, r2
 8003948:	4a24      	ldr	r2, [pc, #144]	@ (80039dc <HAL_RCC_GetSysClockFreq+0xd8>)
 800394a:	5cd3      	ldrb	r3, [r2, r3]
 800394c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800394e:	4b21      	ldr	r3, [pc, #132]	@ (80039d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003952:	220f      	movs	r2, #15
 8003954:	4013      	ands	r3, r2
 8003956:	4a22      	ldr	r2, [pc, #136]	@ (80039e0 <HAL_RCC_GetSysClockFreq+0xdc>)
 8003958:	5cd3      	ldrb	r3, [r2, r3]
 800395a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	23c0      	movs	r3, #192	@ 0xc0
 8003960:	025b      	lsls	r3, r3, #9
 8003962:	401a      	ands	r2, r3
 8003964:	2380      	movs	r3, #128	@ 0x80
 8003966:	025b      	lsls	r3, r3, #9
 8003968:	429a      	cmp	r2, r3
 800396a:	d109      	bne.n	8003980 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800396c:	68b9      	ldr	r1, [r7, #8]
 800396e:	481a      	ldr	r0, [pc, #104]	@ (80039d8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003970:	f7fc fbd4 	bl	800011c <__udivsi3>
 8003974:	0003      	movs	r3, r0
 8003976:	001a      	movs	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4353      	muls	r3, r2
 800397c:	617b      	str	r3, [r7, #20]
 800397e:	e01a      	b.n	80039b6 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	23c0      	movs	r3, #192	@ 0xc0
 8003984:	025b      	lsls	r3, r3, #9
 8003986:	401a      	ands	r2, r3
 8003988:	23c0      	movs	r3, #192	@ 0xc0
 800398a:	025b      	lsls	r3, r3, #9
 800398c:	429a      	cmp	r2, r3
 800398e:	d109      	bne.n	80039a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003990:	68b9      	ldr	r1, [r7, #8]
 8003992:	4814      	ldr	r0, [pc, #80]	@ (80039e4 <HAL_RCC_GetSysClockFreq+0xe0>)
 8003994:	f7fc fbc2 	bl	800011c <__udivsi3>
 8003998:	0003      	movs	r3, r0
 800399a:	001a      	movs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4353      	muls	r3, r2
 80039a0:	617b      	str	r3, [r7, #20]
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80039a4:	68b9      	ldr	r1, [r7, #8]
 80039a6:	480c      	ldr	r0, [pc, #48]	@ (80039d8 <HAL_RCC_GetSysClockFreq+0xd4>)
 80039a8:	f7fc fbb8 	bl	800011c <__udivsi3>
 80039ac:	0003      	movs	r3, r0
 80039ae:	001a      	movs	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4353      	muls	r3, r2
 80039b4:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	613b      	str	r3, [r7, #16]
      break;
 80039ba:	e005      	b.n	80039c8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80039bc:	4b09      	ldr	r3, [pc, #36]	@ (80039e4 <HAL_RCC_GetSysClockFreq+0xe0>)
 80039be:	613b      	str	r3, [r7, #16]
      break;
 80039c0:	e002      	b.n	80039c8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039c2:	4b05      	ldr	r3, [pc, #20]	@ (80039d8 <HAL_RCC_GetSysClockFreq+0xd4>)
 80039c4:	613b      	str	r3, [r7, #16]
      break;
 80039c6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80039c8:	693b      	ldr	r3, [r7, #16]
}
 80039ca:	0018      	movs	r0, r3
 80039cc:	46bd      	mov	sp, r7
 80039ce:	b006      	add	sp, #24
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	46c0      	nop			@ (mov r8, r8)
 80039d4:	40021000 	.word	0x40021000
 80039d8:	007a1200 	.word	0x007a1200
 80039dc:	08004c34 	.word	0x08004c34
 80039e0:	08004c44 	.word	0x08004c44
 80039e4:	02dc6c00 	.word	0x02dc6c00

080039e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80039f4:	2300      	movs	r3, #0
 80039f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	2380      	movs	r3, #128	@ 0x80
 80039fe:	025b      	lsls	r3, r3, #9
 8003a00:	4013      	ands	r3, r2
 8003a02:	d100      	bne.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003a04:	e08e      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003a06:	2017      	movs	r0, #23
 8003a08:	183b      	adds	r3, r7, r0
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a0e:	4b67      	ldr	r3, [pc, #412]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003a10:	69da      	ldr	r2, [r3, #28]
 8003a12:	2380      	movs	r3, #128	@ 0x80
 8003a14:	055b      	lsls	r3, r3, #21
 8003a16:	4013      	ands	r3, r2
 8003a18:	d110      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a1a:	4b64      	ldr	r3, [pc, #400]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003a1c:	69da      	ldr	r2, [r3, #28]
 8003a1e:	4b63      	ldr	r3, [pc, #396]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003a20:	2180      	movs	r1, #128	@ 0x80
 8003a22:	0549      	lsls	r1, r1, #21
 8003a24:	430a      	orrs	r2, r1
 8003a26:	61da      	str	r2, [r3, #28]
 8003a28:	4b60      	ldr	r3, [pc, #384]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003a2a:	69da      	ldr	r2, [r3, #28]
 8003a2c:	2380      	movs	r3, #128	@ 0x80
 8003a2e:	055b      	lsls	r3, r3, #21
 8003a30:	4013      	ands	r3, r2
 8003a32:	60bb      	str	r3, [r7, #8]
 8003a34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a36:	183b      	adds	r3, r7, r0
 8003a38:	2201      	movs	r2, #1
 8003a3a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a3c:	4b5c      	ldr	r3, [pc, #368]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	2380      	movs	r3, #128	@ 0x80
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	4013      	ands	r3, r2
 8003a46:	d11a      	bne.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a48:	4b59      	ldr	r3, [pc, #356]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	4b58      	ldr	r3, [pc, #352]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003a4e:	2180      	movs	r1, #128	@ 0x80
 8003a50:	0049      	lsls	r1, r1, #1
 8003a52:	430a      	orrs	r2, r1
 8003a54:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a56:	f7fd fa4b 	bl	8000ef0 <HAL_GetTick>
 8003a5a:	0003      	movs	r3, r0
 8003a5c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a5e:	e008      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a60:	f7fd fa46 	bl	8000ef0 <HAL_GetTick>
 8003a64:	0002      	movs	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b64      	cmp	r3, #100	@ 0x64
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e097      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a72:	4b4f      	ldr	r3, [pc, #316]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	2380      	movs	r3, #128	@ 0x80
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	d0f0      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a7e:	4b4b      	ldr	r3, [pc, #300]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003a80:	6a1a      	ldr	r2, [r3, #32]
 8003a82:	23c0      	movs	r3, #192	@ 0xc0
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	4013      	ands	r3, r2
 8003a88:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d034      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685a      	ldr	r2, [r3, #4]
 8003a94:	23c0      	movs	r3, #192	@ 0xc0
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4013      	ands	r3, r2
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d02c      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003aa0:	4b42      	ldr	r3, [pc, #264]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	4a43      	ldr	r2, [pc, #268]	@ (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003aaa:	4b40      	ldr	r3, [pc, #256]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003aac:	6a1a      	ldr	r2, [r3, #32]
 8003aae:	4b3f      	ldr	r3, [pc, #252]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003ab0:	2180      	movs	r1, #128	@ 0x80
 8003ab2:	0249      	lsls	r1, r1, #9
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ab8:	4b3c      	ldr	r3, [pc, #240]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003aba:	6a1a      	ldr	r2, [r3, #32]
 8003abc:	4b3b      	ldr	r3, [pc, #236]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003abe:	493e      	ldr	r1, [pc, #248]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ac0:	400a      	ands	r2, r1
 8003ac2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ac4:	4b39      	ldr	r3, [pc, #228]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2201      	movs	r2, #1
 8003ace:	4013      	ands	r3, r2
 8003ad0:	d013      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad2:	f7fd fa0d 	bl	8000ef0 <HAL_GetTick>
 8003ad6:	0003      	movs	r3, r0
 8003ad8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ada:	e009      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003adc:	f7fd fa08 	bl	8000ef0 <HAL_GetTick>
 8003ae0:	0002      	movs	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	4a35      	ldr	r2, [pc, #212]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e058      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af0:	4b2e      	ldr	r3, [pc, #184]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	2202      	movs	r2, #2
 8003af6:	4013      	ands	r3, r2
 8003af8:	d0f0      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003afa:	4b2c      	ldr	r3, [pc, #176]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	4a2d      	ldr	r2, [pc, #180]	@ (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003b00:	4013      	ands	r3, r2
 8003b02:	0019      	movs	r1, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	4b28      	ldr	r3, [pc, #160]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b0e:	2317      	movs	r3, #23
 8003b10:	18fb      	adds	r3, r7, r3
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d105      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b18:	4b24      	ldr	r3, [pc, #144]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003b1a:	69da      	ldr	r2, [r3, #28]
 8003b1c:	4b23      	ldr	r3, [pc, #140]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003b1e:	4928      	ldr	r1, [pc, #160]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003b20:	400a      	ands	r2, r1
 8003b22:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	d009      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b2e:	4b1f      	ldr	r3, [pc, #124]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b32:	2203      	movs	r2, #3
 8003b34:	4393      	bics	r3, r2
 8003b36:	0019      	movs	r1, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689a      	ldr	r2, [r3, #8]
 8003b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2220      	movs	r2, #32
 8003b48:	4013      	ands	r3, r2
 8003b4a:	d009      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b4c:	4b17      	ldr	r3, [pc, #92]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b50:	2210      	movs	r2, #16
 8003b52:	4393      	bics	r3, r2
 8003b54:	0019      	movs	r1, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68da      	ldr	r2, [r3, #12]
 8003b5a:	4b14      	ldr	r3, [pc, #80]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	2380      	movs	r3, #128	@ 0x80
 8003b66:	029b      	lsls	r3, r3, #10
 8003b68:	4013      	ands	r3, r2
 8003b6a:	d009      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b70:	2280      	movs	r2, #128	@ 0x80
 8003b72:	4393      	bics	r3, r2
 8003b74:	0019      	movs	r1, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	695a      	ldr	r2, [r3, #20]
 8003b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	2380      	movs	r3, #128	@ 0x80
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	4013      	ands	r3, r2
 8003b8a:	d009      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b8c:	4b07      	ldr	r3, [pc, #28]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b90:	2240      	movs	r2, #64	@ 0x40
 8003b92:	4393      	bics	r3, r2
 8003b94:	0019      	movs	r1, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	691a      	ldr	r2, [r3, #16]
 8003b9a:	4b04      	ldr	r3, [pc, #16]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	0018      	movs	r0, r3
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	b006      	add	sp, #24
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	46c0      	nop			@ (mov r8, r8)
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	40007000 	.word	0x40007000
 8003bb4:	fffffcff 	.word	0xfffffcff
 8003bb8:	fffeffff 	.word	0xfffeffff
 8003bbc:	00001388 	.word	0x00001388
 8003bc0:	efffffff 	.word	0xefffffff

08003bc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	223d      	movs	r2, #61	@ 0x3d
 8003bd0:	5c9b      	ldrb	r3, [r3, r2]
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d001      	beq.n	8003bdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e036      	b.n	8003c4a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	223d      	movs	r2, #61	@ 0x3d
 8003be0:	2102      	movs	r1, #2
 8003be2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68da      	ldr	r2, [r3, #12]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2101      	movs	r1, #1
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a16      	ldr	r2, [pc, #88]	@ (8003c54 <HAL_TIM_Base_Start_IT+0x90>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d00a      	beq.n	8003c14 <HAL_TIM_Base_Start_IT+0x50>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	2380      	movs	r3, #128	@ 0x80
 8003c04:	05db      	lsls	r3, r3, #23
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d004      	beq.n	8003c14 <HAL_TIM_Base_Start_IT+0x50>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a12      	ldr	r2, [pc, #72]	@ (8003c58 <HAL_TIM_Base_Start_IT+0x94>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d111      	bne.n	8003c38 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	2207      	movs	r2, #7
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2b06      	cmp	r3, #6
 8003c24:	d010      	beq.n	8003c48 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2101      	movs	r1, #1
 8003c32:	430a      	orrs	r2, r1
 8003c34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c36:	e007      	b.n	8003c48 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2101      	movs	r1, #1
 8003c44:	430a      	orrs	r2, r1
 8003c46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	0018      	movs	r0, r3
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	b004      	add	sp, #16
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	46c0      	nop			@ (mov r8, r8)
 8003c54:	40012c00 	.word	0x40012c00
 8003c58:	40000400 	.word	0x40000400

08003c5c <std>:
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	b510      	push	{r4, lr}
 8003c60:	0004      	movs	r4, r0
 8003c62:	6003      	str	r3, [r0, #0]
 8003c64:	6043      	str	r3, [r0, #4]
 8003c66:	6083      	str	r3, [r0, #8]
 8003c68:	8181      	strh	r1, [r0, #12]
 8003c6a:	6643      	str	r3, [r0, #100]	@ 0x64
 8003c6c:	81c2      	strh	r2, [r0, #14]
 8003c6e:	6103      	str	r3, [r0, #16]
 8003c70:	6143      	str	r3, [r0, #20]
 8003c72:	6183      	str	r3, [r0, #24]
 8003c74:	0019      	movs	r1, r3
 8003c76:	2208      	movs	r2, #8
 8003c78:	305c      	adds	r0, #92	@ 0x5c
 8003c7a:	f000 f90f 	bl	8003e9c <memset>
 8003c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8003cac <std+0x50>)
 8003c80:	6224      	str	r4, [r4, #32]
 8003c82:	6263      	str	r3, [r4, #36]	@ 0x24
 8003c84:	4b0a      	ldr	r3, [pc, #40]	@ (8003cb0 <std+0x54>)
 8003c86:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003c88:	4b0a      	ldr	r3, [pc, #40]	@ (8003cb4 <std+0x58>)
 8003c8a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8003cb8 <std+0x5c>)
 8003c8e:	6323      	str	r3, [r4, #48]	@ 0x30
 8003c90:	4b0a      	ldr	r3, [pc, #40]	@ (8003cbc <std+0x60>)
 8003c92:	429c      	cmp	r4, r3
 8003c94:	d005      	beq.n	8003ca2 <std+0x46>
 8003c96:	4b0a      	ldr	r3, [pc, #40]	@ (8003cc0 <std+0x64>)
 8003c98:	429c      	cmp	r4, r3
 8003c9a:	d002      	beq.n	8003ca2 <std+0x46>
 8003c9c:	4b09      	ldr	r3, [pc, #36]	@ (8003cc4 <std+0x68>)
 8003c9e:	429c      	cmp	r4, r3
 8003ca0:	d103      	bne.n	8003caa <std+0x4e>
 8003ca2:	0020      	movs	r0, r4
 8003ca4:	3058      	adds	r0, #88	@ 0x58
 8003ca6:	f000 f979 	bl	8003f9c <__retarget_lock_init_recursive>
 8003caa:	bd10      	pop	{r4, pc}
 8003cac:	08003e05 	.word	0x08003e05
 8003cb0:	08003e2d 	.word	0x08003e2d
 8003cb4:	08003e65 	.word	0x08003e65
 8003cb8:	08003e91 	.word	0x08003e91
 8003cbc:	20000278 	.word	0x20000278
 8003cc0:	200002e0 	.word	0x200002e0
 8003cc4:	20000348 	.word	0x20000348

08003cc8 <stdio_exit_handler>:
 8003cc8:	b510      	push	{r4, lr}
 8003cca:	4a03      	ldr	r2, [pc, #12]	@ (8003cd8 <stdio_exit_handler+0x10>)
 8003ccc:	4903      	ldr	r1, [pc, #12]	@ (8003cdc <stdio_exit_handler+0x14>)
 8003cce:	4804      	ldr	r0, [pc, #16]	@ (8003ce0 <stdio_exit_handler+0x18>)
 8003cd0:	f000 f86c 	bl	8003dac <_fwalk_sglue>
 8003cd4:	bd10      	pop	{r4, pc}
 8003cd6:	46c0      	nop			@ (mov r8, r8)
 8003cd8:	2000000c 	.word	0x2000000c
 8003cdc:	0800482d 	.word	0x0800482d
 8003ce0:	2000001c 	.word	0x2000001c

08003ce4 <cleanup_stdio>:
 8003ce4:	6841      	ldr	r1, [r0, #4]
 8003ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8003d14 <cleanup_stdio+0x30>)
 8003ce8:	b510      	push	{r4, lr}
 8003cea:	0004      	movs	r4, r0
 8003cec:	4299      	cmp	r1, r3
 8003cee:	d001      	beq.n	8003cf4 <cleanup_stdio+0x10>
 8003cf0:	f000 fd9c 	bl	800482c <_fflush_r>
 8003cf4:	68a1      	ldr	r1, [r4, #8]
 8003cf6:	4b08      	ldr	r3, [pc, #32]	@ (8003d18 <cleanup_stdio+0x34>)
 8003cf8:	4299      	cmp	r1, r3
 8003cfa:	d002      	beq.n	8003d02 <cleanup_stdio+0x1e>
 8003cfc:	0020      	movs	r0, r4
 8003cfe:	f000 fd95 	bl	800482c <_fflush_r>
 8003d02:	68e1      	ldr	r1, [r4, #12]
 8003d04:	4b05      	ldr	r3, [pc, #20]	@ (8003d1c <cleanup_stdio+0x38>)
 8003d06:	4299      	cmp	r1, r3
 8003d08:	d002      	beq.n	8003d10 <cleanup_stdio+0x2c>
 8003d0a:	0020      	movs	r0, r4
 8003d0c:	f000 fd8e 	bl	800482c <_fflush_r>
 8003d10:	bd10      	pop	{r4, pc}
 8003d12:	46c0      	nop			@ (mov r8, r8)
 8003d14:	20000278 	.word	0x20000278
 8003d18:	200002e0 	.word	0x200002e0
 8003d1c:	20000348 	.word	0x20000348

08003d20 <global_stdio_init.part.0>:
 8003d20:	b510      	push	{r4, lr}
 8003d22:	4b09      	ldr	r3, [pc, #36]	@ (8003d48 <global_stdio_init.part.0+0x28>)
 8003d24:	4a09      	ldr	r2, [pc, #36]	@ (8003d4c <global_stdio_init.part.0+0x2c>)
 8003d26:	2104      	movs	r1, #4
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	4809      	ldr	r0, [pc, #36]	@ (8003d50 <global_stdio_init.part.0+0x30>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f7ff ff95 	bl	8003c5c <std>
 8003d32:	2201      	movs	r2, #1
 8003d34:	2109      	movs	r1, #9
 8003d36:	4807      	ldr	r0, [pc, #28]	@ (8003d54 <global_stdio_init.part.0+0x34>)
 8003d38:	f7ff ff90 	bl	8003c5c <std>
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	2112      	movs	r1, #18
 8003d40:	4805      	ldr	r0, [pc, #20]	@ (8003d58 <global_stdio_init.part.0+0x38>)
 8003d42:	f7ff ff8b 	bl	8003c5c <std>
 8003d46:	bd10      	pop	{r4, pc}
 8003d48:	200003b0 	.word	0x200003b0
 8003d4c:	08003cc9 	.word	0x08003cc9
 8003d50:	20000278 	.word	0x20000278
 8003d54:	200002e0 	.word	0x200002e0
 8003d58:	20000348 	.word	0x20000348

08003d5c <__sfp_lock_acquire>:
 8003d5c:	b510      	push	{r4, lr}
 8003d5e:	4802      	ldr	r0, [pc, #8]	@ (8003d68 <__sfp_lock_acquire+0xc>)
 8003d60:	f000 f91d 	bl	8003f9e <__retarget_lock_acquire_recursive>
 8003d64:	bd10      	pop	{r4, pc}
 8003d66:	46c0      	nop			@ (mov r8, r8)
 8003d68:	200003b9 	.word	0x200003b9

08003d6c <__sfp_lock_release>:
 8003d6c:	b510      	push	{r4, lr}
 8003d6e:	4802      	ldr	r0, [pc, #8]	@ (8003d78 <__sfp_lock_release+0xc>)
 8003d70:	f000 f916 	bl	8003fa0 <__retarget_lock_release_recursive>
 8003d74:	bd10      	pop	{r4, pc}
 8003d76:	46c0      	nop			@ (mov r8, r8)
 8003d78:	200003b9 	.word	0x200003b9

08003d7c <__sinit>:
 8003d7c:	b510      	push	{r4, lr}
 8003d7e:	0004      	movs	r4, r0
 8003d80:	f7ff ffec 	bl	8003d5c <__sfp_lock_acquire>
 8003d84:	6a23      	ldr	r3, [r4, #32]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d002      	beq.n	8003d90 <__sinit+0x14>
 8003d8a:	f7ff ffef 	bl	8003d6c <__sfp_lock_release>
 8003d8e:	bd10      	pop	{r4, pc}
 8003d90:	4b04      	ldr	r3, [pc, #16]	@ (8003da4 <__sinit+0x28>)
 8003d92:	6223      	str	r3, [r4, #32]
 8003d94:	4b04      	ldr	r3, [pc, #16]	@ (8003da8 <__sinit+0x2c>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1f6      	bne.n	8003d8a <__sinit+0xe>
 8003d9c:	f7ff ffc0 	bl	8003d20 <global_stdio_init.part.0>
 8003da0:	e7f3      	b.n	8003d8a <__sinit+0xe>
 8003da2:	46c0      	nop			@ (mov r8, r8)
 8003da4:	08003ce5 	.word	0x08003ce5
 8003da8:	200003b0 	.word	0x200003b0

08003dac <_fwalk_sglue>:
 8003dac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003dae:	0014      	movs	r4, r2
 8003db0:	2600      	movs	r6, #0
 8003db2:	9000      	str	r0, [sp, #0]
 8003db4:	9101      	str	r1, [sp, #4]
 8003db6:	68a5      	ldr	r5, [r4, #8]
 8003db8:	6867      	ldr	r7, [r4, #4]
 8003dba:	3f01      	subs	r7, #1
 8003dbc:	d504      	bpl.n	8003dc8 <_fwalk_sglue+0x1c>
 8003dbe:	6824      	ldr	r4, [r4, #0]
 8003dc0:	2c00      	cmp	r4, #0
 8003dc2:	d1f8      	bne.n	8003db6 <_fwalk_sglue+0xa>
 8003dc4:	0030      	movs	r0, r6
 8003dc6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003dc8:	89ab      	ldrh	r3, [r5, #12]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d908      	bls.n	8003de0 <_fwalk_sglue+0x34>
 8003dce:	220e      	movs	r2, #14
 8003dd0:	5eab      	ldrsh	r3, [r5, r2]
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	d004      	beq.n	8003de0 <_fwalk_sglue+0x34>
 8003dd6:	0029      	movs	r1, r5
 8003dd8:	9800      	ldr	r0, [sp, #0]
 8003dda:	9b01      	ldr	r3, [sp, #4]
 8003ddc:	4798      	blx	r3
 8003dde:	4306      	orrs	r6, r0
 8003de0:	3568      	adds	r5, #104	@ 0x68
 8003de2:	e7ea      	b.n	8003dba <_fwalk_sglue+0xe>

08003de4 <iprintf>:
 8003de4:	b40f      	push	{r0, r1, r2, r3}
 8003de6:	b507      	push	{r0, r1, r2, lr}
 8003de8:	4905      	ldr	r1, [pc, #20]	@ (8003e00 <iprintf+0x1c>)
 8003dea:	ab04      	add	r3, sp, #16
 8003dec:	6808      	ldr	r0, [r1, #0]
 8003dee:	cb04      	ldmia	r3!, {r2}
 8003df0:	6881      	ldr	r1, [r0, #8]
 8003df2:	9301      	str	r3, [sp, #4]
 8003df4:	f000 f9fa 	bl	80041ec <_vfiprintf_r>
 8003df8:	b003      	add	sp, #12
 8003dfa:	bc08      	pop	{r3}
 8003dfc:	b004      	add	sp, #16
 8003dfe:	4718      	bx	r3
 8003e00:	20000018 	.word	0x20000018

08003e04 <__sread>:
 8003e04:	b570      	push	{r4, r5, r6, lr}
 8003e06:	000c      	movs	r4, r1
 8003e08:	250e      	movs	r5, #14
 8003e0a:	5f49      	ldrsh	r1, [r1, r5]
 8003e0c:	f000 f874 	bl	8003ef8 <_read_r>
 8003e10:	2800      	cmp	r0, #0
 8003e12:	db03      	blt.n	8003e1c <__sread+0x18>
 8003e14:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003e16:	181b      	adds	r3, r3, r0
 8003e18:	6563      	str	r3, [r4, #84]	@ 0x54
 8003e1a:	bd70      	pop	{r4, r5, r6, pc}
 8003e1c:	89a3      	ldrh	r3, [r4, #12]
 8003e1e:	4a02      	ldr	r2, [pc, #8]	@ (8003e28 <__sread+0x24>)
 8003e20:	4013      	ands	r3, r2
 8003e22:	81a3      	strh	r3, [r4, #12]
 8003e24:	e7f9      	b.n	8003e1a <__sread+0x16>
 8003e26:	46c0      	nop			@ (mov r8, r8)
 8003e28:	ffffefff 	.word	0xffffefff

08003e2c <__swrite>:
 8003e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e2e:	001f      	movs	r7, r3
 8003e30:	898b      	ldrh	r3, [r1, #12]
 8003e32:	0005      	movs	r5, r0
 8003e34:	000c      	movs	r4, r1
 8003e36:	0016      	movs	r6, r2
 8003e38:	05db      	lsls	r3, r3, #23
 8003e3a:	d505      	bpl.n	8003e48 <__swrite+0x1c>
 8003e3c:	230e      	movs	r3, #14
 8003e3e:	5ec9      	ldrsh	r1, [r1, r3]
 8003e40:	2200      	movs	r2, #0
 8003e42:	2302      	movs	r3, #2
 8003e44:	f000 f844 	bl	8003ed0 <_lseek_r>
 8003e48:	89a3      	ldrh	r3, [r4, #12]
 8003e4a:	4a05      	ldr	r2, [pc, #20]	@ (8003e60 <__swrite+0x34>)
 8003e4c:	0028      	movs	r0, r5
 8003e4e:	4013      	ands	r3, r2
 8003e50:	81a3      	strh	r3, [r4, #12]
 8003e52:	0032      	movs	r2, r6
 8003e54:	230e      	movs	r3, #14
 8003e56:	5ee1      	ldrsh	r1, [r4, r3]
 8003e58:	003b      	movs	r3, r7
 8003e5a:	f000 f861 	bl	8003f20 <_write_r>
 8003e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e60:	ffffefff 	.word	0xffffefff

08003e64 <__sseek>:
 8003e64:	b570      	push	{r4, r5, r6, lr}
 8003e66:	000c      	movs	r4, r1
 8003e68:	250e      	movs	r5, #14
 8003e6a:	5f49      	ldrsh	r1, [r1, r5]
 8003e6c:	f000 f830 	bl	8003ed0 <_lseek_r>
 8003e70:	89a3      	ldrh	r3, [r4, #12]
 8003e72:	1c42      	adds	r2, r0, #1
 8003e74:	d103      	bne.n	8003e7e <__sseek+0x1a>
 8003e76:	4a05      	ldr	r2, [pc, #20]	@ (8003e8c <__sseek+0x28>)
 8003e78:	4013      	ands	r3, r2
 8003e7a:	81a3      	strh	r3, [r4, #12]
 8003e7c:	bd70      	pop	{r4, r5, r6, pc}
 8003e7e:	2280      	movs	r2, #128	@ 0x80
 8003e80:	0152      	lsls	r2, r2, #5
 8003e82:	4313      	orrs	r3, r2
 8003e84:	81a3      	strh	r3, [r4, #12]
 8003e86:	6560      	str	r0, [r4, #84]	@ 0x54
 8003e88:	e7f8      	b.n	8003e7c <__sseek+0x18>
 8003e8a:	46c0      	nop			@ (mov r8, r8)
 8003e8c:	ffffefff 	.word	0xffffefff

08003e90 <__sclose>:
 8003e90:	b510      	push	{r4, lr}
 8003e92:	230e      	movs	r3, #14
 8003e94:	5ec9      	ldrsh	r1, [r1, r3]
 8003e96:	f000 f809 	bl	8003eac <_close_r>
 8003e9a:	bd10      	pop	{r4, pc}

08003e9c <memset>:
 8003e9c:	0003      	movs	r3, r0
 8003e9e:	1882      	adds	r2, r0, r2
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d100      	bne.n	8003ea6 <memset+0xa>
 8003ea4:	4770      	bx	lr
 8003ea6:	7019      	strb	r1, [r3, #0]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	e7f9      	b.n	8003ea0 <memset+0x4>

08003eac <_close_r>:
 8003eac:	2300      	movs	r3, #0
 8003eae:	b570      	push	{r4, r5, r6, lr}
 8003eb0:	4d06      	ldr	r5, [pc, #24]	@ (8003ecc <_close_r+0x20>)
 8003eb2:	0004      	movs	r4, r0
 8003eb4:	0008      	movs	r0, r1
 8003eb6:	602b      	str	r3, [r5, #0]
 8003eb8:	f7fc ff15 	bl	8000ce6 <_close>
 8003ebc:	1c43      	adds	r3, r0, #1
 8003ebe:	d103      	bne.n	8003ec8 <_close_r+0x1c>
 8003ec0:	682b      	ldr	r3, [r5, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d000      	beq.n	8003ec8 <_close_r+0x1c>
 8003ec6:	6023      	str	r3, [r4, #0]
 8003ec8:	bd70      	pop	{r4, r5, r6, pc}
 8003eca:	46c0      	nop			@ (mov r8, r8)
 8003ecc:	200003b4 	.word	0x200003b4

08003ed0 <_lseek_r>:
 8003ed0:	b570      	push	{r4, r5, r6, lr}
 8003ed2:	0004      	movs	r4, r0
 8003ed4:	0008      	movs	r0, r1
 8003ed6:	0011      	movs	r1, r2
 8003ed8:	001a      	movs	r2, r3
 8003eda:	2300      	movs	r3, #0
 8003edc:	4d05      	ldr	r5, [pc, #20]	@ (8003ef4 <_lseek_r+0x24>)
 8003ede:	602b      	str	r3, [r5, #0]
 8003ee0:	f7fc ff22 	bl	8000d28 <_lseek>
 8003ee4:	1c43      	adds	r3, r0, #1
 8003ee6:	d103      	bne.n	8003ef0 <_lseek_r+0x20>
 8003ee8:	682b      	ldr	r3, [r5, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d000      	beq.n	8003ef0 <_lseek_r+0x20>
 8003eee:	6023      	str	r3, [r4, #0]
 8003ef0:	bd70      	pop	{r4, r5, r6, pc}
 8003ef2:	46c0      	nop			@ (mov r8, r8)
 8003ef4:	200003b4 	.word	0x200003b4

08003ef8 <_read_r>:
 8003ef8:	b570      	push	{r4, r5, r6, lr}
 8003efa:	0004      	movs	r4, r0
 8003efc:	0008      	movs	r0, r1
 8003efe:	0011      	movs	r1, r2
 8003f00:	001a      	movs	r2, r3
 8003f02:	2300      	movs	r3, #0
 8003f04:	4d05      	ldr	r5, [pc, #20]	@ (8003f1c <_read_r+0x24>)
 8003f06:	602b      	str	r3, [r5, #0]
 8003f08:	f7fc feb4 	bl	8000c74 <_read>
 8003f0c:	1c43      	adds	r3, r0, #1
 8003f0e:	d103      	bne.n	8003f18 <_read_r+0x20>
 8003f10:	682b      	ldr	r3, [r5, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d000      	beq.n	8003f18 <_read_r+0x20>
 8003f16:	6023      	str	r3, [r4, #0]
 8003f18:	bd70      	pop	{r4, r5, r6, pc}
 8003f1a:	46c0      	nop			@ (mov r8, r8)
 8003f1c:	200003b4 	.word	0x200003b4

08003f20 <_write_r>:
 8003f20:	b570      	push	{r4, r5, r6, lr}
 8003f22:	0004      	movs	r4, r0
 8003f24:	0008      	movs	r0, r1
 8003f26:	0011      	movs	r1, r2
 8003f28:	001a      	movs	r2, r3
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	4d05      	ldr	r5, [pc, #20]	@ (8003f44 <_write_r+0x24>)
 8003f2e:	602b      	str	r3, [r5, #0]
 8003f30:	f7fc febd 	bl	8000cae <_write>
 8003f34:	1c43      	adds	r3, r0, #1
 8003f36:	d103      	bne.n	8003f40 <_write_r+0x20>
 8003f38:	682b      	ldr	r3, [r5, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d000      	beq.n	8003f40 <_write_r+0x20>
 8003f3e:	6023      	str	r3, [r4, #0]
 8003f40:	bd70      	pop	{r4, r5, r6, pc}
 8003f42:	46c0      	nop			@ (mov r8, r8)
 8003f44:	200003b4 	.word	0x200003b4

08003f48 <__errno>:
 8003f48:	4b01      	ldr	r3, [pc, #4]	@ (8003f50 <__errno+0x8>)
 8003f4a:	6818      	ldr	r0, [r3, #0]
 8003f4c:	4770      	bx	lr
 8003f4e:	46c0      	nop			@ (mov r8, r8)
 8003f50:	20000018 	.word	0x20000018

08003f54 <__libc_init_array>:
 8003f54:	b570      	push	{r4, r5, r6, lr}
 8003f56:	2600      	movs	r6, #0
 8003f58:	4c0c      	ldr	r4, [pc, #48]	@ (8003f8c <__libc_init_array+0x38>)
 8003f5a:	4d0d      	ldr	r5, [pc, #52]	@ (8003f90 <__libc_init_array+0x3c>)
 8003f5c:	1b64      	subs	r4, r4, r5
 8003f5e:	10a4      	asrs	r4, r4, #2
 8003f60:	42a6      	cmp	r6, r4
 8003f62:	d109      	bne.n	8003f78 <__libc_init_array+0x24>
 8003f64:	2600      	movs	r6, #0
 8003f66:	f000 fddb 	bl	8004b20 <_init>
 8003f6a:	4c0a      	ldr	r4, [pc, #40]	@ (8003f94 <__libc_init_array+0x40>)
 8003f6c:	4d0a      	ldr	r5, [pc, #40]	@ (8003f98 <__libc_init_array+0x44>)
 8003f6e:	1b64      	subs	r4, r4, r5
 8003f70:	10a4      	asrs	r4, r4, #2
 8003f72:	42a6      	cmp	r6, r4
 8003f74:	d105      	bne.n	8003f82 <__libc_init_array+0x2e>
 8003f76:	bd70      	pop	{r4, r5, r6, pc}
 8003f78:	00b3      	lsls	r3, r6, #2
 8003f7a:	58eb      	ldr	r3, [r5, r3]
 8003f7c:	4798      	blx	r3
 8003f7e:	3601      	adds	r6, #1
 8003f80:	e7ee      	b.n	8003f60 <__libc_init_array+0xc>
 8003f82:	00b3      	lsls	r3, r6, #2
 8003f84:	58eb      	ldr	r3, [r5, r3]
 8003f86:	4798      	blx	r3
 8003f88:	3601      	adds	r6, #1
 8003f8a:	e7f2      	b.n	8003f72 <__libc_init_array+0x1e>
 8003f8c:	08004c88 	.word	0x08004c88
 8003f90:	08004c88 	.word	0x08004c88
 8003f94:	08004c8c 	.word	0x08004c8c
 8003f98:	08004c88 	.word	0x08004c88

08003f9c <__retarget_lock_init_recursive>:
 8003f9c:	4770      	bx	lr

08003f9e <__retarget_lock_acquire_recursive>:
 8003f9e:	4770      	bx	lr

08003fa0 <__retarget_lock_release_recursive>:
 8003fa0:	4770      	bx	lr
	...

08003fa4 <_free_r>:
 8003fa4:	b570      	push	{r4, r5, r6, lr}
 8003fa6:	0005      	movs	r5, r0
 8003fa8:	1e0c      	subs	r4, r1, #0
 8003faa:	d010      	beq.n	8003fce <_free_r+0x2a>
 8003fac:	3c04      	subs	r4, #4
 8003fae:	6823      	ldr	r3, [r4, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	da00      	bge.n	8003fb6 <_free_r+0x12>
 8003fb4:	18e4      	adds	r4, r4, r3
 8003fb6:	0028      	movs	r0, r5
 8003fb8:	f000 f8e0 	bl	800417c <__malloc_lock>
 8003fbc:	4a1d      	ldr	r2, [pc, #116]	@ (8004034 <_free_r+0x90>)
 8003fbe:	6813      	ldr	r3, [r2, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d105      	bne.n	8003fd0 <_free_r+0x2c>
 8003fc4:	6063      	str	r3, [r4, #4]
 8003fc6:	6014      	str	r4, [r2, #0]
 8003fc8:	0028      	movs	r0, r5
 8003fca:	f000 f8df 	bl	800418c <__malloc_unlock>
 8003fce:	bd70      	pop	{r4, r5, r6, pc}
 8003fd0:	42a3      	cmp	r3, r4
 8003fd2:	d908      	bls.n	8003fe6 <_free_r+0x42>
 8003fd4:	6820      	ldr	r0, [r4, #0]
 8003fd6:	1821      	adds	r1, r4, r0
 8003fd8:	428b      	cmp	r3, r1
 8003fda:	d1f3      	bne.n	8003fc4 <_free_r+0x20>
 8003fdc:	6819      	ldr	r1, [r3, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	1809      	adds	r1, r1, r0
 8003fe2:	6021      	str	r1, [r4, #0]
 8003fe4:	e7ee      	b.n	8003fc4 <_free_r+0x20>
 8003fe6:	001a      	movs	r2, r3
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <_free_r+0x4e>
 8003fee:	42a3      	cmp	r3, r4
 8003ff0:	d9f9      	bls.n	8003fe6 <_free_r+0x42>
 8003ff2:	6811      	ldr	r1, [r2, #0]
 8003ff4:	1850      	adds	r0, r2, r1
 8003ff6:	42a0      	cmp	r0, r4
 8003ff8:	d10b      	bne.n	8004012 <_free_r+0x6e>
 8003ffa:	6820      	ldr	r0, [r4, #0]
 8003ffc:	1809      	adds	r1, r1, r0
 8003ffe:	1850      	adds	r0, r2, r1
 8004000:	6011      	str	r1, [r2, #0]
 8004002:	4283      	cmp	r3, r0
 8004004:	d1e0      	bne.n	8003fc8 <_free_r+0x24>
 8004006:	6818      	ldr	r0, [r3, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	1841      	adds	r1, r0, r1
 800400c:	6011      	str	r1, [r2, #0]
 800400e:	6053      	str	r3, [r2, #4]
 8004010:	e7da      	b.n	8003fc8 <_free_r+0x24>
 8004012:	42a0      	cmp	r0, r4
 8004014:	d902      	bls.n	800401c <_free_r+0x78>
 8004016:	230c      	movs	r3, #12
 8004018:	602b      	str	r3, [r5, #0]
 800401a:	e7d5      	b.n	8003fc8 <_free_r+0x24>
 800401c:	6820      	ldr	r0, [r4, #0]
 800401e:	1821      	adds	r1, r4, r0
 8004020:	428b      	cmp	r3, r1
 8004022:	d103      	bne.n	800402c <_free_r+0x88>
 8004024:	6819      	ldr	r1, [r3, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	1809      	adds	r1, r1, r0
 800402a:	6021      	str	r1, [r4, #0]
 800402c:	6063      	str	r3, [r4, #4]
 800402e:	6054      	str	r4, [r2, #4]
 8004030:	e7ca      	b.n	8003fc8 <_free_r+0x24>
 8004032:	46c0      	nop			@ (mov r8, r8)
 8004034:	200003c0 	.word	0x200003c0

08004038 <sbrk_aligned>:
 8004038:	b570      	push	{r4, r5, r6, lr}
 800403a:	4e0f      	ldr	r6, [pc, #60]	@ (8004078 <sbrk_aligned+0x40>)
 800403c:	000d      	movs	r5, r1
 800403e:	6831      	ldr	r1, [r6, #0]
 8004040:	0004      	movs	r4, r0
 8004042:	2900      	cmp	r1, #0
 8004044:	d102      	bne.n	800404c <sbrk_aligned+0x14>
 8004046:	f000 fcbd 	bl	80049c4 <_sbrk_r>
 800404a:	6030      	str	r0, [r6, #0]
 800404c:	0029      	movs	r1, r5
 800404e:	0020      	movs	r0, r4
 8004050:	f000 fcb8 	bl	80049c4 <_sbrk_r>
 8004054:	1c43      	adds	r3, r0, #1
 8004056:	d103      	bne.n	8004060 <sbrk_aligned+0x28>
 8004058:	2501      	movs	r5, #1
 800405a:	426d      	negs	r5, r5
 800405c:	0028      	movs	r0, r5
 800405e:	bd70      	pop	{r4, r5, r6, pc}
 8004060:	2303      	movs	r3, #3
 8004062:	1cc5      	adds	r5, r0, #3
 8004064:	439d      	bics	r5, r3
 8004066:	42a8      	cmp	r0, r5
 8004068:	d0f8      	beq.n	800405c <sbrk_aligned+0x24>
 800406a:	1a29      	subs	r1, r5, r0
 800406c:	0020      	movs	r0, r4
 800406e:	f000 fca9 	bl	80049c4 <_sbrk_r>
 8004072:	3001      	adds	r0, #1
 8004074:	d1f2      	bne.n	800405c <sbrk_aligned+0x24>
 8004076:	e7ef      	b.n	8004058 <sbrk_aligned+0x20>
 8004078:	200003bc 	.word	0x200003bc

0800407c <_malloc_r>:
 800407c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800407e:	2203      	movs	r2, #3
 8004080:	1ccb      	adds	r3, r1, #3
 8004082:	4393      	bics	r3, r2
 8004084:	3308      	adds	r3, #8
 8004086:	0005      	movs	r5, r0
 8004088:	001f      	movs	r7, r3
 800408a:	2b0c      	cmp	r3, #12
 800408c:	d234      	bcs.n	80040f8 <_malloc_r+0x7c>
 800408e:	270c      	movs	r7, #12
 8004090:	42b9      	cmp	r1, r7
 8004092:	d833      	bhi.n	80040fc <_malloc_r+0x80>
 8004094:	0028      	movs	r0, r5
 8004096:	f000 f871 	bl	800417c <__malloc_lock>
 800409a:	4e37      	ldr	r6, [pc, #220]	@ (8004178 <_malloc_r+0xfc>)
 800409c:	6833      	ldr	r3, [r6, #0]
 800409e:	001c      	movs	r4, r3
 80040a0:	2c00      	cmp	r4, #0
 80040a2:	d12f      	bne.n	8004104 <_malloc_r+0x88>
 80040a4:	0039      	movs	r1, r7
 80040a6:	0028      	movs	r0, r5
 80040a8:	f7ff ffc6 	bl	8004038 <sbrk_aligned>
 80040ac:	0004      	movs	r4, r0
 80040ae:	1c43      	adds	r3, r0, #1
 80040b0:	d15f      	bne.n	8004172 <_malloc_r+0xf6>
 80040b2:	6834      	ldr	r4, [r6, #0]
 80040b4:	9400      	str	r4, [sp, #0]
 80040b6:	9b00      	ldr	r3, [sp, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d14a      	bne.n	8004152 <_malloc_r+0xd6>
 80040bc:	2c00      	cmp	r4, #0
 80040be:	d052      	beq.n	8004166 <_malloc_r+0xea>
 80040c0:	6823      	ldr	r3, [r4, #0]
 80040c2:	0028      	movs	r0, r5
 80040c4:	18e3      	adds	r3, r4, r3
 80040c6:	9900      	ldr	r1, [sp, #0]
 80040c8:	9301      	str	r3, [sp, #4]
 80040ca:	f000 fc7b 	bl	80049c4 <_sbrk_r>
 80040ce:	9b01      	ldr	r3, [sp, #4]
 80040d0:	4283      	cmp	r3, r0
 80040d2:	d148      	bne.n	8004166 <_malloc_r+0xea>
 80040d4:	6823      	ldr	r3, [r4, #0]
 80040d6:	0028      	movs	r0, r5
 80040d8:	1aff      	subs	r7, r7, r3
 80040da:	0039      	movs	r1, r7
 80040dc:	f7ff ffac 	bl	8004038 <sbrk_aligned>
 80040e0:	3001      	adds	r0, #1
 80040e2:	d040      	beq.n	8004166 <_malloc_r+0xea>
 80040e4:	6823      	ldr	r3, [r4, #0]
 80040e6:	19db      	adds	r3, r3, r7
 80040e8:	6023      	str	r3, [r4, #0]
 80040ea:	6833      	ldr	r3, [r6, #0]
 80040ec:	685a      	ldr	r2, [r3, #4]
 80040ee:	2a00      	cmp	r2, #0
 80040f0:	d133      	bne.n	800415a <_malloc_r+0xde>
 80040f2:	9b00      	ldr	r3, [sp, #0]
 80040f4:	6033      	str	r3, [r6, #0]
 80040f6:	e019      	b.n	800412c <_malloc_r+0xb0>
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	dac9      	bge.n	8004090 <_malloc_r+0x14>
 80040fc:	230c      	movs	r3, #12
 80040fe:	602b      	str	r3, [r5, #0]
 8004100:	2000      	movs	r0, #0
 8004102:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004104:	6821      	ldr	r1, [r4, #0]
 8004106:	1bc9      	subs	r1, r1, r7
 8004108:	d420      	bmi.n	800414c <_malloc_r+0xd0>
 800410a:	290b      	cmp	r1, #11
 800410c:	d90a      	bls.n	8004124 <_malloc_r+0xa8>
 800410e:	19e2      	adds	r2, r4, r7
 8004110:	6027      	str	r7, [r4, #0]
 8004112:	42a3      	cmp	r3, r4
 8004114:	d104      	bne.n	8004120 <_malloc_r+0xa4>
 8004116:	6032      	str	r2, [r6, #0]
 8004118:	6863      	ldr	r3, [r4, #4]
 800411a:	6011      	str	r1, [r2, #0]
 800411c:	6053      	str	r3, [r2, #4]
 800411e:	e005      	b.n	800412c <_malloc_r+0xb0>
 8004120:	605a      	str	r2, [r3, #4]
 8004122:	e7f9      	b.n	8004118 <_malloc_r+0x9c>
 8004124:	6862      	ldr	r2, [r4, #4]
 8004126:	42a3      	cmp	r3, r4
 8004128:	d10e      	bne.n	8004148 <_malloc_r+0xcc>
 800412a:	6032      	str	r2, [r6, #0]
 800412c:	0028      	movs	r0, r5
 800412e:	f000 f82d 	bl	800418c <__malloc_unlock>
 8004132:	0020      	movs	r0, r4
 8004134:	2207      	movs	r2, #7
 8004136:	300b      	adds	r0, #11
 8004138:	1d23      	adds	r3, r4, #4
 800413a:	4390      	bics	r0, r2
 800413c:	1ac2      	subs	r2, r0, r3
 800413e:	4298      	cmp	r0, r3
 8004140:	d0df      	beq.n	8004102 <_malloc_r+0x86>
 8004142:	1a1b      	subs	r3, r3, r0
 8004144:	50a3      	str	r3, [r4, r2]
 8004146:	e7dc      	b.n	8004102 <_malloc_r+0x86>
 8004148:	605a      	str	r2, [r3, #4]
 800414a:	e7ef      	b.n	800412c <_malloc_r+0xb0>
 800414c:	0023      	movs	r3, r4
 800414e:	6864      	ldr	r4, [r4, #4]
 8004150:	e7a6      	b.n	80040a0 <_malloc_r+0x24>
 8004152:	9c00      	ldr	r4, [sp, #0]
 8004154:	6863      	ldr	r3, [r4, #4]
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	e7ad      	b.n	80040b6 <_malloc_r+0x3a>
 800415a:	001a      	movs	r2, r3
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	42a3      	cmp	r3, r4
 8004160:	d1fb      	bne.n	800415a <_malloc_r+0xde>
 8004162:	2300      	movs	r3, #0
 8004164:	e7da      	b.n	800411c <_malloc_r+0xa0>
 8004166:	230c      	movs	r3, #12
 8004168:	0028      	movs	r0, r5
 800416a:	602b      	str	r3, [r5, #0]
 800416c:	f000 f80e 	bl	800418c <__malloc_unlock>
 8004170:	e7c6      	b.n	8004100 <_malloc_r+0x84>
 8004172:	6007      	str	r7, [r0, #0]
 8004174:	e7da      	b.n	800412c <_malloc_r+0xb0>
 8004176:	46c0      	nop			@ (mov r8, r8)
 8004178:	200003c0 	.word	0x200003c0

0800417c <__malloc_lock>:
 800417c:	b510      	push	{r4, lr}
 800417e:	4802      	ldr	r0, [pc, #8]	@ (8004188 <__malloc_lock+0xc>)
 8004180:	f7ff ff0d 	bl	8003f9e <__retarget_lock_acquire_recursive>
 8004184:	bd10      	pop	{r4, pc}
 8004186:	46c0      	nop			@ (mov r8, r8)
 8004188:	200003b8 	.word	0x200003b8

0800418c <__malloc_unlock>:
 800418c:	b510      	push	{r4, lr}
 800418e:	4802      	ldr	r0, [pc, #8]	@ (8004198 <__malloc_unlock+0xc>)
 8004190:	f7ff ff06 	bl	8003fa0 <__retarget_lock_release_recursive>
 8004194:	bd10      	pop	{r4, pc}
 8004196:	46c0      	nop			@ (mov r8, r8)
 8004198:	200003b8 	.word	0x200003b8

0800419c <__sfputc_r>:
 800419c:	6893      	ldr	r3, [r2, #8]
 800419e:	b510      	push	{r4, lr}
 80041a0:	3b01      	subs	r3, #1
 80041a2:	6093      	str	r3, [r2, #8]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	da04      	bge.n	80041b2 <__sfputc_r+0x16>
 80041a8:	6994      	ldr	r4, [r2, #24]
 80041aa:	42a3      	cmp	r3, r4
 80041ac:	db07      	blt.n	80041be <__sfputc_r+0x22>
 80041ae:	290a      	cmp	r1, #10
 80041b0:	d005      	beq.n	80041be <__sfputc_r+0x22>
 80041b2:	6813      	ldr	r3, [r2, #0]
 80041b4:	1c58      	adds	r0, r3, #1
 80041b6:	6010      	str	r0, [r2, #0]
 80041b8:	7019      	strb	r1, [r3, #0]
 80041ba:	0008      	movs	r0, r1
 80041bc:	bd10      	pop	{r4, pc}
 80041be:	f000 fb60 	bl	8004882 <__swbuf_r>
 80041c2:	0001      	movs	r1, r0
 80041c4:	e7f9      	b.n	80041ba <__sfputc_r+0x1e>

080041c6 <__sfputs_r>:
 80041c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041c8:	0006      	movs	r6, r0
 80041ca:	000f      	movs	r7, r1
 80041cc:	0014      	movs	r4, r2
 80041ce:	18d5      	adds	r5, r2, r3
 80041d0:	42ac      	cmp	r4, r5
 80041d2:	d101      	bne.n	80041d8 <__sfputs_r+0x12>
 80041d4:	2000      	movs	r0, #0
 80041d6:	e007      	b.n	80041e8 <__sfputs_r+0x22>
 80041d8:	7821      	ldrb	r1, [r4, #0]
 80041da:	003a      	movs	r2, r7
 80041dc:	0030      	movs	r0, r6
 80041de:	f7ff ffdd 	bl	800419c <__sfputc_r>
 80041e2:	3401      	adds	r4, #1
 80041e4:	1c43      	adds	r3, r0, #1
 80041e6:	d1f3      	bne.n	80041d0 <__sfputs_r+0xa>
 80041e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080041ec <_vfiprintf_r>:
 80041ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041ee:	b0a1      	sub	sp, #132	@ 0x84
 80041f0:	000f      	movs	r7, r1
 80041f2:	0015      	movs	r5, r2
 80041f4:	001e      	movs	r6, r3
 80041f6:	9003      	str	r0, [sp, #12]
 80041f8:	2800      	cmp	r0, #0
 80041fa:	d004      	beq.n	8004206 <_vfiprintf_r+0x1a>
 80041fc:	6a03      	ldr	r3, [r0, #32]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <_vfiprintf_r+0x1a>
 8004202:	f7ff fdbb 	bl	8003d7c <__sinit>
 8004206:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004208:	07db      	lsls	r3, r3, #31
 800420a:	d405      	bmi.n	8004218 <_vfiprintf_r+0x2c>
 800420c:	89bb      	ldrh	r3, [r7, #12]
 800420e:	059b      	lsls	r3, r3, #22
 8004210:	d402      	bmi.n	8004218 <_vfiprintf_r+0x2c>
 8004212:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004214:	f7ff fec3 	bl	8003f9e <__retarget_lock_acquire_recursive>
 8004218:	89bb      	ldrh	r3, [r7, #12]
 800421a:	071b      	lsls	r3, r3, #28
 800421c:	d502      	bpl.n	8004224 <_vfiprintf_r+0x38>
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d113      	bne.n	800424c <_vfiprintf_r+0x60>
 8004224:	0039      	movs	r1, r7
 8004226:	9803      	ldr	r0, [sp, #12]
 8004228:	f000 fb6e 	bl	8004908 <__swsetup_r>
 800422c:	2800      	cmp	r0, #0
 800422e:	d00d      	beq.n	800424c <_vfiprintf_r+0x60>
 8004230:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004232:	07db      	lsls	r3, r3, #31
 8004234:	d503      	bpl.n	800423e <_vfiprintf_r+0x52>
 8004236:	2001      	movs	r0, #1
 8004238:	4240      	negs	r0, r0
 800423a:	b021      	add	sp, #132	@ 0x84
 800423c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800423e:	89bb      	ldrh	r3, [r7, #12]
 8004240:	059b      	lsls	r3, r3, #22
 8004242:	d4f8      	bmi.n	8004236 <_vfiprintf_r+0x4a>
 8004244:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004246:	f7ff feab 	bl	8003fa0 <__retarget_lock_release_recursive>
 800424a:	e7f4      	b.n	8004236 <_vfiprintf_r+0x4a>
 800424c:	2300      	movs	r3, #0
 800424e:	ac08      	add	r4, sp, #32
 8004250:	6163      	str	r3, [r4, #20]
 8004252:	3320      	adds	r3, #32
 8004254:	7663      	strb	r3, [r4, #25]
 8004256:	3310      	adds	r3, #16
 8004258:	76a3      	strb	r3, [r4, #26]
 800425a:	9607      	str	r6, [sp, #28]
 800425c:	002e      	movs	r6, r5
 800425e:	7833      	ldrb	r3, [r6, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <_vfiprintf_r+0x7c>
 8004264:	2b25      	cmp	r3, #37	@ 0x25
 8004266:	d148      	bne.n	80042fa <_vfiprintf_r+0x10e>
 8004268:	1b73      	subs	r3, r6, r5
 800426a:	9305      	str	r3, [sp, #20]
 800426c:	42ae      	cmp	r6, r5
 800426e:	d00b      	beq.n	8004288 <_vfiprintf_r+0x9c>
 8004270:	002a      	movs	r2, r5
 8004272:	0039      	movs	r1, r7
 8004274:	9803      	ldr	r0, [sp, #12]
 8004276:	f7ff ffa6 	bl	80041c6 <__sfputs_r>
 800427a:	3001      	adds	r0, #1
 800427c:	d100      	bne.n	8004280 <_vfiprintf_r+0x94>
 800427e:	e0ae      	b.n	80043de <_vfiprintf_r+0x1f2>
 8004280:	6963      	ldr	r3, [r4, #20]
 8004282:	9a05      	ldr	r2, [sp, #20]
 8004284:	189b      	adds	r3, r3, r2
 8004286:	6163      	str	r3, [r4, #20]
 8004288:	7833      	ldrb	r3, [r6, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d100      	bne.n	8004290 <_vfiprintf_r+0xa4>
 800428e:	e0a6      	b.n	80043de <_vfiprintf_r+0x1f2>
 8004290:	2201      	movs	r2, #1
 8004292:	2300      	movs	r3, #0
 8004294:	4252      	negs	r2, r2
 8004296:	6062      	str	r2, [r4, #4]
 8004298:	a904      	add	r1, sp, #16
 800429a:	3254      	adds	r2, #84	@ 0x54
 800429c:	1852      	adds	r2, r2, r1
 800429e:	1c75      	adds	r5, r6, #1
 80042a0:	6023      	str	r3, [r4, #0]
 80042a2:	60e3      	str	r3, [r4, #12]
 80042a4:	60a3      	str	r3, [r4, #8]
 80042a6:	7013      	strb	r3, [r2, #0]
 80042a8:	65a3      	str	r3, [r4, #88]	@ 0x58
 80042aa:	4b59      	ldr	r3, [pc, #356]	@ (8004410 <_vfiprintf_r+0x224>)
 80042ac:	2205      	movs	r2, #5
 80042ae:	0018      	movs	r0, r3
 80042b0:	7829      	ldrb	r1, [r5, #0]
 80042b2:	9305      	str	r3, [sp, #20]
 80042b4:	f000 fb98 	bl	80049e8 <memchr>
 80042b8:	1c6e      	adds	r6, r5, #1
 80042ba:	2800      	cmp	r0, #0
 80042bc:	d11f      	bne.n	80042fe <_vfiprintf_r+0x112>
 80042be:	6822      	ldr	r2, [r4, #0]
 80042c0:	06d3      	lsls	r3, r2, #27
 80042c2:	d504      	bpl.n	80042ce <_vfiprintf_r+0xe2>
 80042c4:	2353      	movs	r3, #83	@ 0x53
 80042c6:	a904      	add	r1, sp, #16
 80042c8:	185b      	adds	r3, r3, r1
 80042ca:	2120      	movs	r1, #32
 80042cc:	7019      	strb	r1, [r3, #0]
 80042ce:	0713      	lsls	r3, r2, #28
 80042d0:	d504      	bpl.n	80042dc <_vfiprintf_r+0xf0>
 80042d2:	2353      	movs	r3, #83	@ 0x53
 80042d4:	a904      	add	r1, sp, #16
 80042d6:	185b      	adds	r3, r3, r1
 80042d8:	212b      	movs	r1, #43	@ 0x2b
 80042da:	7019      	strb	r1, [r3, #0]
 80042dc:	782b      	ldrb	r3, [r5, #0]
 80042de:	2b2a      	cmp	r3, #42	@ 0x2a
 80042e0:	d016      	beq.n	8004310 <_vfiprintf_r+0x124>
 80042e2:	002e      	movs	r6, r5
 80042e4:	2100      	movs	r1, #0
 80042e6:	200a      	movs	r0, #10
 80042e8:	68e3      	ldr	r3, [r4, #12]
 80042ea:	7832      	ldrb	r2, [r6, #0]
 80042ec:	1c75      	adds	r5, r6, #1
 80042ee:	3a30      	subs	r2, #48	@ 0x30
 80042f0:	2a09      	cmp	r2, #9
 80042f2:	d950      	bls.n	8004396 <_vfiprintf_r+0x1aa>
 80042f4:	2900      	cmp	r1, #0
 80042f6:	d111      	bne.n	800431c <_vfiprintf_r+0x130>
 80042f8:	e017      	b.n	800432a <_vfiprintf_r+0x13e>
 80042fa:	3601      	adds	r6, #1
 80042fc:	e7af      	b.n	800425e <_vfiprintf_r+0x72>
 80042fe:	9b05      	ldr	r3, [sp, #20]
 8004300:	6822      	ldr	r2, [r4, #0]
 8004302:	1ac0      	subs	r0, r0, r3
 8004304:	2301      	movs	r3, #1
 8004306:	4083      	lsls	r3, r0
 8004308:	4313      	orrs	r3, r2
 800430a:	0035      	movs	r5, r6
 800430c:	6023      	str	r3, [r4, #0]
 800430e:	e7cc      	b.n	80042aa <_vfiprintf_r+0xbe>
 8004310:	9b07      	ldr	r3, [sp, #28]
 8004312:	1d19      	adds	r1, r3, #4
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	9107      	str	r1, [sp, #28]
 8004318:	2b00      	cmp	r3, #0
 800431a:	db01      	blt.n	8004320 <_vfiprintf_r+0x134>
 800431c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800431e:	e004      	b.n	800432a <_vfiprintf_r+0x13e>
 8004320:	425b      	negs	r3, r3
 8004322:	60e3      	str	r3, [r4, #12]
 8004324:	2302      	movs	r3, #2
 8004326:	4313      	orrs	r3, r2
 8004328:	6023      	str	r3, [r4, #0]
 800432a:	7833      	ldrb	r3, [r6, #0]
 800432c:	2b2e      	cmp	r3, #46	@ 0x2e
 800432e:	d10c      	bne.n	800434a <_vfiprintf_r+0x15e>
 8004330:	7873      	ldrb	r3, [r6, #1]
 8004332:	2b2a      	cmp	r3, #42	@ 0x2a
 8004334:	d134      	bne.n	80043a0 <_vfiprintf_r+0x1b4>
 8004336:	9b07      	ldr	r3, [sp, #28]
 8004338:	3602      	adds	r6, #2
 800433a:	1d1a      	adds	r2, r3, #4
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	9207      	str	r2, [sp, #28]
 8004340:	2b00      	cmp	r3, #0
 8004342:	da01      	bge.n	8004348 <_vfiprintf_r+0x15c>
 8004344:	2301      	movs	r3, #1
 8004346:	425b      	negs	r3, r3
 8004348:	9309      	str	r3, [sp, #36]	@ 0x24
 800434a:	4d32      	ldr	r5, [pc, #200]	@ (8004414 <_vfiprintf_r+0x228>)
 800434c:	2203      	movs	r2, #3
 800434e:	0028      	movs	r0, r5
 8004350:	7831      	ldrb	r1, [r6, #0]
 8004352:	f000 fb49 	bl	80049e8 <memchr>
 8004356:	2800      	cmp	r0, #0
 8004358:	d006      	beq.n	8004368 <_vfiprintf_r+0x17c>
 800435a:	2340      	movs	r3, #64	@ 0x40
 800435c:	1b40      	subs	r0, r0, r5
 800435e:	4083      	lsls	r3, r0
 8004360:	6822      	ldr	r2, [r4, #0]
 8004362:	3601      	adds	r6, #1
 8004364:	4313      	orrs	r3, r2
 8004366:	6023      	str	r3, [r4, #0]
 8004368:	7831      	ldrb	r1, [r6, #0]
 800436a:	2206      	movs	r2, #6
 800436c:	482a      	ldr	r0, [pc, #168]	@ (8004418 <_vfiprintf_r+0x22c>)
 800436e:	1c75      	adds	r5, r6, #1
 8004370:	7621      	strb	r1, [r4, #24]
 8004372:	f000 fb39 	bl	80049e8 <memchr>
 8004376:	2800      	cmp	r0, #0
 8004378:	d040      	beq.n	80043fc <_vfiprintf_r+0x210>
 800437a:	4b28      	ldr	r3, [pc, #160]	@ (800441c <_vfiprintf_r+0x230>)
 800437c:	2b00      	cmp	r3, #0
 800437e:	d122      	bne.n	80043c6 <_vfiprintf_r+0x1da>
 8004380:	2207      	movs	r2, #7
 8004382:	9b07      	ldr	r3, [sp, #28]
 8004384:	3307      	adds	r3, #7
 8004386:	4393      	bics	r3, r2
 8004388:	3308      	adds	r3, #8
 800438a:	9307      	str	r3, [sp, #28]
 800438c:	6963      	ldr	r3, [r4, #20]
 800438e:	9a04      	ldr	r2, [sp, #16]
 8004390:	189b      	adds	r3, r3, r2
 8004392:	6163      	str	r3, [r4, #20]
 8004394:	e762      	b.n	800425c <_vfiprintf_r+0x70>
 8004396:	4343      	muls	r3, r0
 8004398:	002e      	movs	r6, r5
 800439a:	2101      	movs	r1, #1
 800439c:	189b      	adds	r3, r3, r2
 800439e:	e7a4      	b.n	80042ea <_vfiprintf_r+0xfe>
 80043a0:	2300      	movs	r3, #0
 80043a2:	200a      	movs	r0, #10
 80043a4:	0019      	movs	r1, r3
 80043a6:	3601      	adds	r6, #1
 80043a8:	6063      	str	r3, [r4, #4]
 80043aa:	7832      	ldrb	r2, [r6, #0]
 80043ac:	1c75      	adds	r5, r6, #1
 80043ae:	3a30      	subs	r2, #48	@ 0x30
 80043b0:	2a09      	cmp	r2, #9
 80043b2:	d903      	bls.n	80043bc <_vfiprintf_r+0x1d0>
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0c8      	beq.n	800434a <_vfiprintf_r+0x15e>
 80043b8:	9109      	str	r1, [sp, #36]	@ 0x24
 80043ba:	e7c6      	b.n	800434a <_vfiprintf_r+0x15e>
 80043bc:	4341      	muls	r1, r0
 80043be:	002e      	movs	r6, r5
 80043c0:	2301      	movs	r3, #1
 80043c2:	1889      	adds	r1, r1, r2
 80043c4:	e7f1      	b.n	80043aa <_vfiprintf_r+0x1be>
 80043c6:	aa07      	add	r2, sp, #28
 80043c8:	9200      	str	r2, [sp, #0]
 80043ca:	0021      	movs	r1, r4
 80043cc:	003a      	movs	r2, r7
 80043ce:	4b14      	ldr	r3, [pc, #80]	@ (8004420 <_vfiprintf_r+0x234>)
 80043d0:	9803      	ldr	r0, [sp, #12]
 80043d2:	e000      	b.n	80043d6 <_vfiprintf_r+0x1ea>
 80043d4:	bf00      	nop
 80043d6:	9004      	str	r0, [sp, #16]
 80043d8:	9b04      	ldr	r3, [sp, #16]
 80043da:	3301      	adds	r3, #1
 80043dc:	d1d6      	bne.n	800438c <_vfiprintf_r+0x1a0>
 80043de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043e0:	07db      	lsls	r3, r3, #31
 80043e2:	d405      	bmi.n	80043f0 <_vfiprintf_r+0x204>
 80043e4:	89bb      	ldrh	r3, [r7, #12]
 80043e6:	059b      	lsls	r3, r3, #22
 80043e8:	d402      	bmi.n	80043f0 <_vfiprintf_r+0x204>
 80043ea:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80043ec:	f7ff fdd8 	bl	8003fa0 <__retarget_lock_release_recursive>
 80043f0:	89bb      	ldrh	r3, [r7, #12]
 80043f2:	065b      	lsls	r3, r3, #25
 80043f4:	d500      	bpl.n	80043f8 <_vfiprintf_r+0x20c>
 80043f6:	e71e      	b.n	8004236 <_vfiprintf_r+0x4a>
 80043f8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80043fa:	e71e      	b.n	800423a <_vfiprintf_r+0x4e>
 80043fc:	aa07      	add	r2, sp, #28
 80043fe:	9200      	str	r2, [sp, #0]
 8004400:	0021      	movs	r1, r4
 8004402:	003a      	movs	r2, r7
 8004404:	4b06      	ldr	r3, [pc, #24]	@ (8004420 <_vfiprintf_r+0x234>)
 8004406:	9803      	ldr	r0, [sp, #12]
 8004408:	f000 f87c 	bl	8004504 <_printf_i>
 800440c:	e7e3      	b.n	80043d6 <_vfiprintf_r+0x1ea>
 800440e:	46c0      	nop			@ (mov r8, r8)
 8004410:	08004c54 	.word	0x08004c54
 8004414:	08004c5a 	.word	0x08004c5a
 8004418:	08004c5e 	.word	0x08004c5e
 800441c:	00000000 	.word	0x00000000
 8004420:	080041c7 	.word	0x080041c7

08004424 <_printf_common>:
 8004424:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004426:	0016      	movs	r6, r2
 8004428:	9301      	str	r3, [sp, #4]
 800442a:	688a      	ldr	r2, [r1, #8]
 800442c:	690b      	ldr	r3, [r1, #16]
 800442e:	000c      	movs	r4, r1
 8004430:	9000      	str	r0, [sp, #0]
 8004432:	4293      	cmp	r3, r2
 8004434:	da00      	bge.n	8004438 <_printf_common+0x14>
 8004436:	0013      	movs	r3, r2
 8004438:	0022      	movs	r2, r4
 800443a:	6033      	str	r3, [r6, #0]
 800443c:	3243      	adds	r2, #67	@ 0x43
 800443e:	7812      	ldrb	r2, [r2, #0]
 8004440:	2a00      	cmp	r2, #0
 8004442:	d001      	beq.n	8004448 <_printf_common+0x24>
 8004444:	3301      	adds	r3, #1
 8004446:	6033      	str	r3, [r6, #0]
 8004448:	6823      	ldr	r3, [r4, #0]
 800444a:	069b      	lsls	r3, r3, #26
 800444c:	d502      	bpl.n	8004454 <_printf_common+0x30>
 800444e:	6833      	ldr	r3, [r6, #0]
 8004450:	3302      	adds	r3, #2
 8004452:	6033      	str	r3, [r6, #0]
 8004454:	6822      	ldr	r2, [r4, #0]
 8004456:	2306      	movs	r3, #6
 8004458:	0015      	movs	r5, r2
 800445a:	401d      	ands	r5, r3
 800445c:	421a      	tst	r2, r3
 800445e:	d027      	beq.n	80044b0 <_printf_common+0x8c>
 8004460:	0023      	movs	r3, r4
 8004462:	3343      	adds	r3, #67	@ 0x43
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	1e5a      	subs	r2, r3, #1
 8004468:	4193      	sbcs	r3, r2
 800446a:	6822      	ldr	r2, [r4, #0]
 800446c:	0692      	lsls	r2, r2, #26
 800446e:	d430      	bmi.n	80044d2 <_printf_common+0xae>
 8004470:	0022      	movs	r2, r4
 8004472:	9901      	ldr	r1, [sp, #4]
 8004474:	9800      	ldr	r0, [sp, #0]
 8004476:	9d08      	ldr	r5, [sp, #32]
 8004478:	3243      	adds	r2, #67	@ 0x43
 800447a:	47a8      	blx	r5
 800447c:	3001      	adds	r0, #1
 800447e:	d025      	beq.n	80044cc <_printf_common+0xa8>
 8004480:	2206      	movs	r2, #6
 8004482:	6823      	ldr	r3, [r4, #0]
 8004484:	2500      	movs	r5, #0
 8004486:	4013      	ands	r3, r2
 8004488:	2b04      	cmp	r3, #4
 800448a:	d105      	bne.n	8004498 <_printf_common+0x74>
 800448c:	6833      	ldr	r3, [r6, #0]
 800448e:	68e5      	ldr	r5, [r4, #12]
 8004490:	1aed      	subs	r5, r5, r3
 8004492:	43eb      	mvns	r3, r5
 8004494:	17db      	asrs	r3, r3, #31
 8004496:	401d      	ands	r5, r3
 8004498:	68a3      	ldr	r3, [r4, #8]
 800449a:	6922      	ldr	r2, [r4, #16]
 800449c:	4293      	cmp	r3, r2
 800449e:	dd01      	ble.n	80044a4 <_printf_common+0x80>
 80044a0:	1a9b      	subs	r3, r3, r2
 80044a2:	18ed      	adds	r5, r5, r3
 80044a4:	2600      	movs	r6, #0
 80044a6:	42b5      	cmp	r5, r6
 80044a8:	d120      	bne.n	80044ec <_printf_common+0xc8>
 80044aa:	2000      	movs	r0, #0
 80044ac:	e010      	b.n	80044d0 <_printf_common+0xac>
 80044ae:	3501      	adds	r5, #1
 80044b0:	68e3      	ldr	r3, [r4, #12]
 80044b2:	6832      	ldr	r2, [r6, #0]
 80044b4:	1a9b      	subs	r3, r3, r2
 80044b6:	42ab      	cmp	r3, r5
 80044b8:	ddd2      	ble.n	8004460 <_printf_common+0x3c>
 80044ba:	0022      	movs	r2, r4
 80044bc:	2301      	movs	r3, #1
 80044be:	9901      	ldr	r1, [sp, #4]
 80044c0:	9800      	ldr	r0, [sp, #0]
 80044c2:	9f08      	ldr	r7, [sp, #32]
 80044c4:	3219      	adds	r2, #25
 80044c6:	47b8      	blx	r7
 80044c8:	3001      	adds	r0, #1
 80044ca:	d1f0      	bne.n	80044ae <_printf_common+0x8a>
 80044cc:	2001      	movs	r0, #1
 80044ce:	4240      	negs	r0, r0
 80044d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80044d2:	2030      	movs	r0, #48	@ 0x30
 80044d4:	18e1      	adds	r1, r4, r3
 80044d6:	3143      	adds	r1, #67	@ 0x43
 80044d8:	7008      	strb	r0, [r1, #0]
 80044da:	0021      	movs	r1, r4
 80044dc:	1c5a      	adds	r2, r3, #1
 80044de:	3145      	adds	r1, #69	@ 0x45
 80044e0:	7809      	ldrb	r1, [r1, #0]
 80044e2:	18a2      	adds	r2, r4, r2
 80044e4:	3243      	adds	r2, #67	@ 0x43
 80044e6:	3302      	adds	r3, #2
 80044e8:	7011      	strb	r1, [r2, #0]
 80044ea:	e7c1      	b.n	8004470 <_printf_common+0x4c>
 80044ec:	0022      	movs	r2, r4
 80044ee:	2301      	movs	r3, #1
 80044f0:	9901      	ldr	r1, [sp, #4]
 80044f2:	9800      	ldr	r0, [sp, #0]
 80044f4:	9f08      	ldr	r7, [sp, #32]
 80044f6:	321a      	adds	r2, #26
 80044f8:	47b8      	blx	r7
 80044fa:	3001      	adds	r0, #1
 80044fc:	d0e6      	beq.n	80044cc <_printf_common+0xa8>
 80044fe:	3601      	adds	r6, #1
 8004500:	e7d1      	b.n	80044a6 <_printf_common+0x82>
	...

08004504 <_printf_i>:
 8004504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004506:	b08b      	sub	sp, #44	@ 0x2c
 8004508:	9206      	str	r2, [sp, #24]
 800450a:	000a      	movs	r2, r1
 800450c:	3243      	adds	r2, #67	@ 0x43
 800450e:	9307      	str	r3, [sp, #28]
 8004510:	9005      	str	r0, [sp, #20]
 8004512:	9203      	str	r2, [sp, #12]
 8004514:	7e0a      	ldrb	r2, [r1, #24]
 8004516:	000c      	movs	r4, r1
 8004518:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800451a:	2a78      	cmp	r2, #120	@ 0x78
 800451c:	d809      	bhi.n	8004532 <_printf_i+0x2e>
 800451e:	2a62      	cmp	r2, #98	@ 0x62
 8004520:	d80b      	bhi.n	800453a <_printf_i+0x36>
 8004522:	2a00      	cmp	r2, #0
 8004524:	d100      	bne.n	8004528 <_printf_i+0x24>
 8004526:	e0bc      	b.n	80046a2 <_printf_i+0x19e>
 8004528:	497b      	ldr	r1, [pc, #492]	@ (8004718 <_printf_i+0x214>)
 800452a:	9104      	str	r1, [sp, #16]
 800452c:	2a58      	cmp	r2, #88	@ 0x58
 800452e:	d100      	bne.n	8004532 <_printf_i+0x2e>
 8004530:	e090      	b.n	8004654 <_printf_i+0x150>
 8004532:	0025      	movs	r5, r4
 8004534:	3542      	adds	r5, #66	@ 0x42
 8004536:	702a      	strb	r2, [r5, #0]
 8004538:	e022      	b.n	8004580 <_printf_i+0x7c>
 800453a:	0010      	movs	r0, r2
 800453c:	3863      	subs	r0, #99	@ 0x63
 800453e:	2815      	cmp	r0, #21
 8004540:	d8f7      	bhi.n	8004532 <_printf_i+0x2e>
 8004542:	f7fb fde1 	bl	8000108 <__gnu_thumb1_case_shi>
 8004546:	0016      	.short	0x0016
 8004548:	fff6001f 	.word	0xfff6001f
 800454c:	fff6fff6 	.word	0xfff6fff6
 8004550:	001ffff6 	.word	0x001ffff6
 8004554:	fff6fff6 	.word	0xfff6fff6
 8004558:	fff6fff6 	.word	0xfff6fff6
 800455c:	003600a1 	.word	0x003600a1
 8004560:	fff60080 	.word	0xfff60080
 8004564:	00b2fff6 	.word	0x00b2fff6
 8004568:	0036fff6 	.word	0x0036fff6
 800456c:	fff6fff6 	.word	0xfff6fff6
 8004570:	0084      	.short	0x0084
 8004572:	0025      	movs	r5, r4
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	3542      	adds	r5, #66	@ 0x42
 8004578:	1d11      	adds	r1, r2, #4
 800457a:	6019      	str	r1, [r3, #0]
 800457c:	6813      	ldr	r3, [r2, #0]
 800457e:	702b      	strb	r3, [r5, #0]
 8004580:	2301      	movs	r3, #1
 8004582:	e0a0      	b.n	80046c6 <_printf_i+0x1c2>
 8004584:	6818      	ldr	r0, [r3, #0]
 8004586:	6809      	ldr	r1, [r1, #0]
 8004588:	1d02      	adds	r2, r0, #4
 800458a:	060d      	lsls	r5, r1, #24
 800458c:	d50b      	bpl.n	80045a6 <_printf_i+0xa2>
 800458e:	6806      	ldr	r6, [r0, #0]
 8004590:	601a      	str	r2, [r3, #0]
 8004592:	2e00      	cmp	r6, #0
 8004594:	da03      	bge.n	800459e <_printf_i+0x9a>
 8004596:	232d      	movs	r3, #45	@ 0x2d
 8004598:	9a03      	ldr	r2, [sp, #12]
 800459a:	4276      	negs	r6, r6
 800459c:	7013      	strb	r3, [r2, #0]
 800459e:	4b5e      	ldr	r3, [pc, #376]	@ (8004718 <_printf_i+0x214>)
 80045a0:	270a      	movs	r7, #10
 80045a2:	9304      	str	r3, [sp, #16]
 80045a4:	e018      	b.n	80045d8 <_printf_i+0xd4>
 80045a6:	6806      	ldr	r6, [r0, #0]
 80045a8:	601a      	str	r2, [r3, #0]
 80045aa:	0649      	lsls	r1, r1, #25
 80045ac:	d5f1      	bpl.n	8004592 <_printf_i+0x8e>
 80045ae:	b236      	sxth	r6, r6
 80045b0:	e7ef      	b.n	8004592 <_printf_i+0x8e>
 80045b2:	6808      	ldr	r0, [r1, #0]
 80045b4:	6819      	ldr	r1, [r3, #0]
 80045b6:	c940      	ldmia	r1!, {r6}
 80045b8:	0605      	lsls	r5, r0, #24
 80045ba:	d402      	bmi.n	80045c2 <_printf_i+0xbe>
 80045bc:	0640      	lsls	r0, r0, #25
 80045be:	d500      	bpl.n	80045c2 <_printf_i+0xbe>
 80045c0:	b2b6      	uxth	r6, r6
 80045c2:	6019      	str	r1, [r3, #0]
 80045c4:	4b54      	ldr	r3, [pc, #336]	@ (8004718 <_printf_i+0x214>)
 80045c6:	270a      	movs	r7, #10
 80045c8:	9304      	str	r3, [sp, #16]
 80045ca:	2a6f      	cmp	r2, #111	@ 0x6f
 80045cc:	d100      	bne.n	80045d0 <_printf_i+0xcc>
 80045ce:	3f02      	subs	r7, #2
 80045d0:	0023      	movs	r3, r4
 80045d2:	2200      	movs	r2, #0
 80045d4:	3343      	adds	r3, #67	@ 0x43
 80045d6:	701a      	strb	r2, [r3, #0]
 80045d8:	6863      	ldr	r3, [r4, #4]
 80045da:	60a3      	str	r3, [r4, #8]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	db03      	blt.n	80045e8 <_printf_i+0xe4>
 80045e0:	2104      	movs	r1, #4
 80045e2:	6822      	ldr	r2, [r4, #0]
 80045e4:	438a      	bics	r2, r1
 80045e6:	6022      	str	r2, [r4, #0]
 80045e8:	2e00      	cmp	r6, #0
 80045ea:	d102      	bne.n	80045f2 <_printf_i+0xee>
 80045ec:	9d03      	ldr	r5, [sp, #12]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00c      	beq.n	800460c <_printf_i+0x108>
 80045f2:	9d03      	ldr	r5, [sp, #12]
 80045f4:	0030      	movs	r0, r6
 80045f6:	0039      	movs	r1, r7
 80045f8:	f7fb fe16 	bl	8000228 <__aeabi_uidivmod>
 80045fc:	9b04      	ldr	r3, [sp, #16]
 80045fe:	3d01      	subs	r5, #1
 8004600:	5c5b      	ldrb	r3, [r3, r1]
 8004602:	702b      	strb	r3, [r5, #0]
 8004604:	0033      	movs	r3, r6
 8004606:	0006      	movs	r6, r0
 8004608:	429f      	cmp	r7, r3
 800460a:	d9f3      	bls.n	80045f4 <_printf_i+0xf0>
 800460c:	2f08      	cmp	r7, #8
 800460e:	d109      	bne.n	8004624 <_printf_i+0x120>
 8004610:	6823      	ldr	r3, [r4, #0]
 8004612:	07db      	lsls	r3, r3, #31
 8004614:	d506      	bpl.n	8004624 <_printf_i+0x120>
 8004616:	6862      	ldr	r2, [r4, #4]
 8004618:	6923      	ldr	r3, [r4, #16]
 800461a:	429a      	cmp	r2, r3
 800461c:	dc02      	bgt.n	8004624 <_printf_i+0x120>
 800461e:	2330      	movs	r3, #48	@ 0x30
 8004620:	3d01      	subs	r5, #1
 8004622:	702b      	strb	r3, [r5, #0]
 8004624:	9b03      	ldr	r3, [sp, #12]
 8004626:	1b5b      	subs	r3, r3, r5
 8004628:	6123      	str	r3, [r4, #16]
 800462a:	9b07      	ldr	r3, [sp, #28]
 800462c:	0021      	movs	r1, r4
 800462e:	9300      	str	r3, [sp, #0]
 8004630:	9805      	ldr	r0, [sp, #20]
 8004632:	9b06      	ldr	r3, [sp, #24]
 8004634:	aa09      	add	r2, sp, #36	@ 0x24
 8004636:	f7ff fef5 	bl	8004424 <_printf_common>
 800463a:	3001      	adds	r0, #1
 800463c:	d148      	bne.n	80046d0 <_printf_i+0x1cc>
 800463e:	2001      	movs	r0, #1
 8004640:	4240      	negs	r0, r0
 8004642:	b00b      	add	sp, #44	@ 0x2c
 8004644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004646:	2220      	movs	r2, #32
 8004648:	6809      	ldr	r1, [r1, #0]
 800464a:	430a      	orrs	r2, r1
 800464c:	6022      	str	r2, [r4, #0]
 800464e:	2278      	movs	r2, #120	@ 0x78
 8004650:	4932      	ldr	r1, [pc, #200]	@ (800471c <_printf_i+0x218>)
 8004652:	9104      	str	r1, [sp, #16]
 8004654:	0021      	movs	r1, r4
 8004656:	3145      	adds	r1, #69	@ 0x45
 8004658:	700a      	strb	r2, [r1, #0]
 800465a:	6819      	ldr	r1, [r3, #0]
 800465c:	6822      	ldr	r2, [r4, #0]
 800465e:	c940      	ldmia	r1!, {r6}
 8004660:	0610      	lsls	r0, r2, #24
 8004662:	d402      	bmi.n	800466a <_printf_i+0x166>
 8004664:	0650      	lsls	r0, r2, #25
 8004666:	d500      	bpl.n	800466a <_printf_i+0x166>
 8004668:	b2b6      	uxth	r6, r6
 800466a:	6019      	str	r1, [r3, #0]
 800466c:	07d3      	lsls	r3, r2, #31
 800466e:	d502      	bpl.n	8004676 <_printf_i+0x172>
 8004670:	2320      	movs	r3, #32
 8004672:	4313      	orrs	r3, r2
 8004674:	6023      	str	r3, [r4, #0]
 8004676:	2e00      	cmp	r6, #0
 8004678:	d001      	beq.n	800467e <_printf_i+0x17a>
 800467a:	2710      	movs	r7, #16
 800467c:	e7a8      	b.n	80045d0 <_printf_i+0xcc>
 800467e:	2220      	movs	r2, #32
 8004680:	6823      	ldr	r3, [r4, #0]
 8004682:	4393      	bics	r3, r2
 8004684:	6023      	str	r3, [r4, #0]
 8004686:	e7f8      	b.n	800467a <_printf_i+0x176>
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	680d      	ldr	r5, [r1, #0]
 800468c:	1d10      	adds	r0, r2, #4
 800468e:	6949      	ldr	r1, [r1, #20]
 8004690:	6018      	str	r0, [r3, #0]
 8004692:	6813      	ldr	r3, [r2, #0]
 8004694:	062e      	lsls	r6, r5, #24
 8004696:	d501      	bpl.n	800469c <_printf_i+0x198>
 8004698:	6019      	str	r1, [r3, #0]
 800469a:	e002      	b.n	80046a2 <_printf_i+0x19e>
 800469c:	066d      	lsls	r5, r5, #25
 800469e:	d5fb      	bpl.n	8004698 <_printf_i+0x194>
 80046a0:	8019      	strh	r1, [r3, #0]
 80046a2:	2300      	movs	r3, #0
 80046a4:	9d03      	ldr	r5, [sp, #12]
 80046a6:	6123      	str	r3, [r4, #16]
 80046a8:	e7bf      	b.n	800462a <_printf_i+0x126>
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	1d11      	adds	r1, r2, #4
 80046ae:	6019      	str	r1, [r3, #0]
 80046b0:	6815      	ldr	r5, [r2, #0]
 80046b2:	2100      	movs	r1, #0
 80046b4:	0028      	movs	r0, r5
 80046b6:	6862      	ldr	r2, [r4, #4]
 80046b8:	f000 f996 	bl	80049e8 <memchr>
 80046bc:	2800      	cmp	r0, #0
 80046be:	d001      	beq.n	80046c4 <_printf_i+0x1c0>
 80046c0:	1b40      	subs	r0, r0, r5
 80046c2:	6060      	str	r0, [r4, #4]
 80046c4:	6863      	ldr	r3, [r4, #4]
 80046c6:	6123      	str	r3, [r4, #16]
 80046c8:	2300      	movs	r3, #0
 80046ca:	9a03      	ldr	r2, [sp, #12]
 80046cc:	7013      	strb	r3, [r2, #0]
 80046ce:	e7ac      	b.n	800462a <_printf_i+0x126>
 80046d0:	002a      	movs	r2, r5
 80046d2:	6923      	ldr	r3, [r4, #16]
 80046d4:	9906      	ldr	r1, [sp, #24]
 80046d6:	9805      	ldr	r0, [sp, #20]
 80046d8:	9d07      	ldr	r5, [sp, #28]
 80046da:	47a8      	blx	r5
 80046dc:	3001      	adds	r0, #1
 80046de:	d0ae      	beq.n	800463e <_printf_i+0x13a>
 80046e0:	6823      	ldr	r3, [r4, #0]
 80046e2:	079b      	lsls	r3, r3, #30
 80046e4:	d415      	bmi.n	8004712 <_printf_i+0x20e>
 80046e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046e8:	68e0      	ldr	r0, [r4, #12]
 80046ea:	4298      	cmp	r0, r3
 80046ec:	daa9      	bge.n	8004642 <_printf_i+0x13e>
 80046ee:	0018      	movs	r0, r3
 80046f0:	e7a7      	b.n	8004642 <_printf_i+0x13e>
 80046f2:	0022      	movs	r2, r4
 80046f4:	2301      	movs	r3, #1
 80046f6:	9906      	ldr	r1, [sp, #24]
 80046f8:	9805      	ldr	r0, [sp, #20]
 80046fa:	9e07      	ldr	r6, [sp, #28]
 80046fc:	3219      	adds	r2, #25
 80046fe:	47b0      	blx	r6
 8004700:	3001      	adds	r0, #1
 8004702:	d09c      	beq.n	800463e <_printf_i+0x13a>
 8004704:	3501      	adds	r5, #1
 8004706:	68e3      	ldr	r3, [r4, #12]
 8004708:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800470a:	1a9b      	subs	r3, r3, r2
 800470c:	42ab      	cmp	r3, r5
 800470e:	dcf0      	bgt.n	80046f2 <_printf_i+0x1ee>
 8004710:	e7e9      	b.n	80046e6 <_printf_i+0x1e2>
 8004712:	2500      	movs	r5, #0
 8004714:	e7f7      	b.n	8004706 <_printf_i+0x202>
 8004716:	46c0      	nop			@ (mov r8, r8)
 8004718:	08004c65 	.word	0x08004c65
 800471c:	08004c76 	.word	0x08004c76

08004720 <__sflush_r>:
 8004720:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004722:	220c      	movs	r2, #12
 8004724:	5e8b      	ldrsh	r3, [r1, r2]
 8004726:	0005      	movs	r5, r0
 8004728:	000c      	movs	r4, r1
 800472a:	071a      	lsls	r2, r3, #28
 800472c:	d456      	bmi.n	80047dc <__sflush_r+0xbc>
 800472e:	684a      	ldr	r2, [r1, #4]
 8004730:	2a00      	cmp	r2, #0
 8004732:	dc02      	bgt.n	800473a <__sflush_r+0x1a>
 8004734:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8004736:	2a00      	cmp	r2, #0
 8004738:	dd4e      	ble.n	80047d8 <__sflush_r+0xb8>
 800473a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800473c:	2f00      	cmp	r7, #0
 800473e:	d04b      	beq.n	80047d8 <__sflush_r+0xb8>
 8004740:	2200      	movs	r2, #0
 8004742:	2080      	movs	r0, #128	@ 0x80
 8004744:	682e      	ldr	r6, [r5, #0]
 8004746:	602a      	str	r2, [r5, #0]
 8004748:	001a      	movs	r2, r3
 800474a:	0140      	lsls	r0, r0, #5
 800474c:	6a21      	ldr	r1, [r4, #32]
 800474e:	4002      	ands	r2, r0
 8004750:	4203      	tst	r3, r0
 8004752:	d033      	beq.n	80047bc <__sflush_r+0x9c>
 8004754:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004756:	89a3      	ldrh	r3, [r4, #12]
 8004758:	075b      	lsls	r3, r3, #29
 800475a:	d506      	bpl.n	800476a <__sflush_r+0x4a>
 800475c:	6863      	ldr	r3, [r4, #4]
 800475e:	1ad2      	subs	r2, r2, r3
 8004760:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <__sflush_r+0x4a>
 8004766:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004768:	1ad2      	subs	r2, r2, r3
 800476a:	2300      	movs	r3, #0
 800476c:	0028      	movs	r0, r5
 800476e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004770:	6a21      	ldr	r1, [r4, #32]
 8004772:	47b8      	blx	r7
 8004774:	89a2      	ldrh	r2, [r4, #12]
 8004776:	1c43      	adds	r3, r0, #1
 8004778:	d106      	bne.n	8004788 <__sflush_r+0x68>
 800477a:	6829      	ldr	r1, [r5, #0]
 800477c:	291d      	cmp	r1, #29
 800477e:	d846      	bhi.n	800480e <__sflush_r+0xee>
 8004780:	4b29      	ldr	r3, [pc, #164]	@ (8004828 <__sflush_r+0x108>)
 8004782:	410b      	asrs	r3, r1
 8004784:	07db      	lsls	r3, r3, #31
 8004786:	d442      	bmi.n	800480e <__sflush_r+0xee>
 8004788:	2300      	movs	r3, #0
 800478a:	6063      	str	r3, [r4, #4]
 800478c:	6923      	ldr	r3, [r4, #16]
 800478e:	6023      	str	r3, [r4, #0]
 8004790:	04d2      	lsls	r2, r2, #19
 8004792:	d505      	bpl.n	80047a0 <__sflush_r+0x80>
 8004794:	1c43      	adds	r3, r0, #1
 8004796:	d102      	bne.n	800479e <__sflush_r+0x7e>
 8004798:	682b      	ldr	r3, [r5, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d100      	bne.n	80047a0 <__sflush_r+0x80>
 800479e:	6560      	str	r0, [r4, #84]	@ 0x54
 80047a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80047a2:	602e      	str	r6, [r5, #0]
 80047a4:	2900      	cmp	r1, #0
 80047a6:	d017      	beq.n	80047d8 <__sflush_r+0xb8>
 80047a8:	0023      	movs	r3, r4
 80047aa:	3344      	adds	r3, #68	@ 0x44
 80047ac:	4299      	cmp	r1, r3
 80047ae:	d002      	beq.n	80047b6 <__sflush_r+0x96>
 80047b0:	0028      	movs	r0, r5
 80047b2:	f7ff fbf7 	bl	8003fa4 <_free_r>
 80047b6:	2300      	movs	r3, #0
 80047b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80047ba:	e00d      	b.n	80047d8 <__sflush_r+0xb8>
 80047bc:	2301      	movs	r3, #1
 80047be:	0028      	movs	r0, r5
 80047c0:	47b8      	blx	r7
 80047c2:	0002      	movs	r2, r0
 80047c4:	1c43      	adds	r3, r0, #1
 80047c6:	d1c6      	bne.n	8004756 <__sflush_r+0x36>
 80047c8:	682b      	ldr	r3, [r5, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0c3      	beq.n	8004756 <__sflush_r+0x36>
 80047ce:	2b1d      	cmp	r3, #29
 80047d0:	d001      	beq.n	80047d6 <__sflush_r+0xb6>
 80047d2:	2b16      	cmp	r3, #22
 80047d4:	d11a      	bne.n	800480c <__sflush_r+0xec>
 80047d6:	602e      	str	r6, [r5, #0]
 80047d8:	2000      	movs	r0, #0
 80047da:	e01e      	b.n	800481a <__sflush_r+0xfa>
 80047dc:	690e      	ldr	r6, [r1, #16]
 80047de:	2e00      	cmp	r6, #0
 80047e0:	d0fa      	beq.n	80047d8 <__sflush_r+0xb8>
 80047e2:	680f      	ldr	r7, [r1, #0]
 80047e4:	600e      	str	r6, [r1, #0]
 80047e6:	1bba      	subs	r2, r7, r6
 80047e8:	9201      	str	r2, [sp, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	079b      	lsls	r3, r3, #30
 80047ee:	d100      	bne.n	80047f2 <__sflush_r+0xd2>
 80047f0:	694a      	ldr	r2, [r1, #20]
 80047f2:	60a2      	str	r2, [r4, #8]
 80047f4:	9b01      	ldr	r3, [sp, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	ddee      	ble.n	80047d8 <__sflush_r+0xb8>
 80047fa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80047fc:	0032      	movs	r2, r6
 80047fe:	001f      	movs	r7, r3
 8004800:	0028      	movs	r0, r5
 8004802:	9b01      	ldr	r3, [sp, #4]
 8004804:	6a21      	ldr	r1, [r4, #32]
 8004806:	47b8      	blx	r7
 8004808:	2800      	cmp	r0, #0
 800480a:	dc07      	bgt.n	800481c <__sflush_r+0xfc>
 800480c:	89a2      	ldrh	r2, [r4, #12]
 800480e:	2340      	movs	r3, #64	@ 0x40
 8004810:	2001      	movs	r0, #1
 8004812:	4313      	orrs	r3, r2
 8004814:	b21b      	sxth	r3, r3
 8004816:	81a3      	strh	r3, [r4, #12]
 8004818:	4240      	negs	r0, r0
 800481a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800481c:	9b01      	ldr	r3, [sp, #4]
 800481e:	1836      	adds	r6, r6, r0
 8004820:	1a1b      	subs	r3, r3, r0
 8004822:	9301      	str	r3, [sp, #4]
 8004824:	e7e6      	b.n	80047f4 <__sflush_r+0xd4>
 8004826:	46c0      	nop			@ (mov r8, r8)
 8004828:	dfbffffe 	.word	0xdfbffffe

0800482c <_fflush_r>:
 800482c:	690b      	ldr	r3, [r1, #16]
 800482e:	b570      	push	{r4, r5, r6, lr}
 8004830:	0005      	movs	r5, r0
 8004832:	000c      	movs	r4, r1
 8004834:	2b00      	cmp	r3, #0
 8004836:	d102      	bne.n	800483e <_fflush_r+0x12>
 8004838:	2500      	movs	r5, #0
 800483a:	0028      	movs	r0, r5
 800483c:	bd70      	pop	{r4, r5, r6, pc}
 800483e:	2800      	cmp	r0, #0
 8004840:	d004      	beq.n	800484c <_fflush_r+0x20>
 8004842:	6a03      	ldr	r3, [r0, #32]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d101      	bne.n	800484c <_fflush_r+0x20>
 8004848:	f7ff fa98 	bl	8003d7c <__sinit>
 800484c:	220c      	movs	r2, #12
 800484e:	5ea3      	ldrsh	r3, [r4, r2]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d0f1      	beq.n	8004838 <_fflush_r+0xc>
 8004854:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004856:	07d2      	lsls	r2, r2, #31
 8004858:	d404      	bmi.n	8004864 <_fflush_r+0x38>
 800485a:	059b      	lsls	r3, r3, #22
 800485c:	d402      	bmi.n	8004864 <_fflush_r+0x38>
 800485e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004860:	f7ff fb9d 	bl	8003f9e <__retarget_lock_acquire_recursive>
 8004864:	0028      	movs	r0, r5
 8004866:	0021      	movs	r1, r4
 8004868:	f7ff ff5a 	bl	8004720 <__sflush_r>
 800486c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800486e:	0005      	movs	r5, r0
 8004870:	07db      	lsls	r3, r3, #31
 8004872:	d4e2      	bmi.n	800483a <_fflush_r+0xe>
 8004874:	89a3      	ldrh	r3, [r4, #12]
 8004876:	059b      	lsls	r3, r3, #22
 8004878:	d4df      	bmi.n	800483a <_fflush_r+0xe>
 800487a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800487c:	f7ff fb90 	bl	8003fa0 <__retarget_lock_release_recursive>
 8004880:	e7db      	b.n	800483a <_fflush_r+0xe>

08004882 <__swbuf_r>:
 8004882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004884:	0006      	movs	r6, r0
 8004886:	000d      	movs	r5, r1
 8004888:	0014      	movs	r4, r2
 800488a:	2800      	cmp	r0, #0
 800488c:	d004      	beq.n	8004898 <__swbuf_r+0x16>
 800488e:	6a03      	ldr	r3, [r0, #32]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <__swbuf_r+0x16>
 8004894:	f7ff fa72 	bl	8003d7c <__sinit>
 8004898:	69a3      	ldr	r3, [r4, #24]
 800489a:	60a3      	str	r3, [r4, #8]
 800489c:	89a3      	ldrh	r3, [r4, #12]
 800489e:	071b      	lsls	r3, r3, #28
 80048a0:	d502      	bpl.n	80048a8 <__swbuf_r+0x26>
 80048a2:	6923      	ldr	r3, [r4, #16]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d109      	bne.n	80048bc <__swbuf_r+0x3a>
 80048a8:	0021      	movs	r1, r4
 80048aa:	0030      	movs	r0, r6
 80048ac:	f000 f82c 	bl	8004908 <__swsetup_r>
 80048b0:	2800      	cmp	r0, #0
 80048b2:	d003      	beq.n	80048bc <__swbuf_r+0x3a>
 80048b4:	2501      	movs	r5, #1
 80048b6:	426d      	negs	r5, r5
 80048b8:	0028      	movs	r0, r5
 80048ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048bc:	6923      	ldr	r3, [r4, #16]
 80048be:	6820      	ldr	r0, [r4, #0]
 80048c0:	b2ef      	uxtb	r7, r5
 80048c2:	1ac0      	subs	r0, r0, r3
 80048c4:	6963      	ldr	r3, [r4, #20]
 80048c6:	b2ed      	uxtb	r5, r5
 80048c8:	4283      	cmp	r3, r0
 80048ca:	dc05      	bgt.n	80048d8 <__swbuf_r+0x56>
 80048cc:	0021      	movs	r1, r4
 80048ce:	0030      	movs	r0, r6
 80048d0:	f7ff ffac 	bl	800482c <_fflush_r>
 80048d4:	2800      	cmp	r0, #0
 80048d6:	d1ed      	bne.n	80048b4 <__swbuf_r+0x32>
 80048d8:	68a3      	ldr	r3, [r4, #8]
 80048da:	3001      	adds	r0, #1
 80048dc:	3b01      	subs	r3, #1
 80048de:	60a3      	str	r3, [r4, #8]
 80048e0:	6823      	ldr	r3, [r4, #0]
 80048e2:	1c5a      	adds	r2, r3, #1
 80048e4:	6022      	str	r2, [r4, #0]
 80048e6:	701f      	strb	r7, [r3, #0]
 80048e8:	6963      	ldr	r3, [r4, #20]
 80048ea:	4283      	cmp	r3, r0
 80048ec:	d004      	beq.n	80048f8 <__swbuf_r+0x76>
 80048ee:	89a3      	ldrh	r3, [r4, #12]
 80048f0:	07db      	lsls	r3, r3, #31
 80048f2:	d5e1      	bpl.n	80048b8 <__swbuf_r+0x36>
 80048f4:	2d0a      	cmp	r5, #10
 80048f6:	d1df      	bne.n	80048b8 <__swbuf_r+0x36>
 80048f8:	0021      	movs	r1, r4
 80048fa:	0030      	movs	r0, r6
 80048fc:	f7ff ff96 	bl	800482c <_fflush_r>
 8004900:	2800      	cmp	r0, #0
 8004902:	d0d9      	beq.n	80048b8 <__swbuf_r+0x36>
 8004904:	e7d6      	b.n	80048b4 <__swbuf_r+0x32>
	...

08004908 <__swsetup_r>:
 8004908:	4b2d      	ldr	r3, [pc, #180]	@ (80049c0 <__swsetup_r+0xb8>)
 800490a:	b570      	push	{r4, r5, r6, lr}
 800490c:	0005      	movs	r5, r0
 800490e:	6818      	ldr	r0, [r3, #0]
 8004910:	000c      	movs	r4, r1
 8004912:	2800      	cmp	r0, #0
 8004914:	d004      	beq.n	8004920 <__swsetup_r+0x18>
 8004916:	6a03      	ldr	r3, [r0, #32]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <__swsetup_r+0x18>
 800491c:	f7ff fa2e 	bl	8003d7c <__sinit>
 8004920:	230c      	movs	r3, #12
 8004922:	5ee2      	ldrsh	r2, [r4, r3]
 8004924:	0713      	lsls	r3, r2, #28
 8004926:	d423      	bmi.n	8004970 <__swsetup_r+0x68>
 8004928:	06d3      	lsls	r3, r2, #27
 800492a:	d407      	bmi.n	800493c <__swsetup_r+0x34>
 800492c:	2309      	movs	r3, #9
 800492e:	602b      	str	r3, [r5, #0]
 8004930:	2340      	movs	r3, #64	@ 0x40
 8004932:	2001      	movs	r0, #1
 8004934:	4313      	orrs	r3, r2
 8004936:	81a3      	strh	r3, [r4, #12]
 8004938:	4240      	negs	r0, r0
 800493a:	e03a      	b.n	80049b2 <__swsetup_r+0xaa>
 800493c:	0752      	lsls	r2, r2, #29
 800493e:	d513      	bpl.n	8004968 <__swsetup_r+0x60>
 8004940:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004942:	2900      	cmp	r1, #0
 8004944:	d008      	beq.n	8004958 <__swsetup_r+0x50>
 8004946:	0023      	movs	r3, r4
 8004948:	3344      	adds	r3, #68	@ 0x44
 800494a:	4299      	cmp	r1, r3
 800494c:	d002      	beq.n	8004954 <__swsetup_r+0x4c>
 800494e:	0028      	movs	r0, r5
 8004950:	f7ff fb28 	bl	8003fa4 <_free_r>
 8004954:	2300      	movs	r3, #0
 8004956:	6363      	str	r3, [r4, #52]	@ 0x34
 8004958:	2224      	movs	r2, #36	@ 0x24
 800495a:	89a3      	ldrh	r3, [r4, #12]
 800495c:	4393      	bics	r3, r2
 800495e:	81a3      	strh	r3, [r4, #12]
 8004960:	2300      	movs	r3, #0
 8004962:	6063      	str	r3, [r4, #4]
 8004964:	6923      	ldr	r3, [r4, #16]
 8004966:	6023      	str	r3, [r4, #0]
 8004968:	2308      	movs	r3, #8
 800496a:	89a2      	ldrh	r2, [r4, #12]
 800496c:	4313      	orrs	r3, r2
 800496e:	81a3      	strh	r3, [r4, #12]
 8004970:	6923      	ldr	r3, [r4, #16]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10b      	bne.n	800498e <__swsetup_r+0x86>
 8004976:	21a0      	movs	r1, #160	@ 0xa0
 8004978:	2280      	movs	r2, #128	@ 0x80
 800497a:	89a3      	ldrh	r3, [r4, #12]
 800497c:	0089      	lsls	r1, r1, #2
 800497e:	0092      	lsls	r2, r2, #2
 8004980:	400b      	ands	r3, r1
 8004982:	4293      	cmp	r3, r2
 8004984:	d003      	beq.n	800498e <__swsetup_r+0x86>
 8004986:	0021      	movs	r1, r4
 8004988:	0028      	movs	r0, r5
 800498a:	f000 f863 	bl	8004a54 <__smakebuf_r>
 800498e:	230c      	movs	r3, #12
 8004990:	5ee2      	ldrsh	r2, [r4, r3]
 8004992:	2101      	movs	r1, #1
 8004994:	0013      	movs	r3, r2
 8004996:	400b      	ands	r3, r1
 8004998:	420a      	tst	r2, r1
 800499a:	d00b      	beq.n	80049b4 <__swsetup_r+0xac>
 800499c:	2300      	movs	r3, #0
 800499e:	60a3      	str	r3, [r4, #8]
 80049a0:	6963      	ldr	r3, [r4, #20]
 80049a2:	425b      	negs	r3, r3
 80049a4:	61a3      	str	r3, [r4, #24]
 80049a6:	2000      	movs	r0, #0
 80049a8:	6923      	ldr	r3, [r4, #16]
 80049aa:	4283      	cmp	r3, r0
 80049ac:	d101      	bne.n	80049b2 <__swsetup_r+0xaa>
 80049ae:	0613      	lsls	r3, r2, #24
 80049b0:	d4be      	bmi.n	8004930 <__swsetup_r+0x28>
 80049b2:	bd70      	pop	{r4, r5, r6, pc}
 80049b4:	0791      	lsls	r1, r2, #30
 80049b6:	d400      	bmi.n	80049ba <__swsetup_r+0xb2>
 80049b8:	6963      	ldr	r3, [r4, #20]
 80049ba:	60a3      	str	r3, [r4, #8]
 80049bc:	e7f3      	b.n	80049a6 <__swsetup_r+0x9e>
 80049be:	46c0      	nop			@ (mov r8, r8)
 80049c0:	20000018 	.word	0x20000018

080049c4 <_sbrk_r>:
 80049c4:	2300      	movs	r3, #0
 80049c6:	b570      	push	{r4, r5, r6, lr}
 80049c8:	4d06      	ldr	r5, [pc, #24]	@ (80049e4 <_sbrk_r+0x20>)
 80049ca:	0004      	movs	r4, r0
 80049cc:	0008      	movs	r0, r1
 80049ce:	602b      	str	r3, [r5, #0]
 80049d0:	f7fc f9b6 	bl	8000d40 <_sbrk>
 80049d4:	1c43      	adds	r3, r0, #1
 80049d6:	d103      	bne.n	80049e0 <_sbrk_r+0x1c>
 80049d8:	682b      	ldr	r3, [r5, #0]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d000      	beq.n	80049e0 <_sbrk_r+0x1c>
 80049de:	6023      	str	r3, [r4, #0]
 80049e0:	bd70      	pop	{r4, r5, r6, pc}
 80049e2:	46c0      	nop			@ (mov r8, r8)
 80049e4:	200003b4 	.word	0x200003b4

080049e8 <memchr>:
 80049e8:	b2c9      	uxtb	r1, r1
 80049ea:	1882      	adds	r2, r0, r2
 80049ec:	4290      	cmp	r0, r2
 80049ee:	d101      	bne.n	80049f4 <memchr+0xc>
 80049f0:	2000      	movs	r0, #0
 80049f2:	4770      	bx	lr
 80049f4:	7803      	ldrb	r3, [r0, #0]
 80049f6:	428b      	cmp	r3, r1
 80049f8:	d0fb      	beq.n	80049f2 <memchr+0xa>
 80049fa:	3001      	adds	r0, #1
 80049fc:	e7f6      	b.n	80049ec <memchr+0x4>
	...

08004a00 <__swhatbuf_r>:
 8004a00:	b570      	push	{r4, r5, r6, lr}
 8004a02:	000e      	movs	r6, r1
 8004a04:	001d      	movs	r5, r3
 8004a06:	230e      	movs	r3, #14
 8004a08:	5ec9      	ldrsh	r1, [r1, r3]
 8004a0a:	0014      	movs	r4, r2
 8004a0c:	b096      	sub	sp, #88	@ 0x58
 8004a0e:	2900      	cmp	r1, #0
 8004a10:	da0c      	bge.n	8004a2c <__swhatbuf_r+0x2c>
 8004a12:	89b2      	ldrh	r2, [r6, #12]
 8004a14:	2380      	movs	r3, #128	@ 0x80
 8004a16:	0011      	movs	r1, r2
 8004a18:	4019      	ands	r1, r3
 8004a1a:	421a      	tst	r2, r3
 8004a1c:	d114      	bne.n	8004a48 <__swhatbuf_r+0x48>
 8004a1e:	2380      	movs	r3, #128	@ 0x80
 8004a20:	00db      	lsls	r3, r3, #3
 8004a22:	2000      	movs	r0, #0
 8004a24:	6029      	str	r1, [r5, #0]
 8004a26:	6023      	str	r3, [r4, #0]
 8004a28:	b016      	add	sp, #88	@ 0x58
 8004a2a:	bd70      	pop	{r4, r5, r6, pc}
 8004a2c:	466a      	mov	r2, sp
 8004a2e:	f000 f853 	bl	8004ad8 <_fstat_r>
 8004a32:	2800      	cmp	r0, #0
 8004a34:	dbed      	blt.n	8004a12 <__swhatbuf_r+0x12>
 8004a36:	23f0      	movs	r3, #240	@ 0xf0
 8004a38:	9901      	ldr	r1, [sp, #4]
 8004a3a:	021b      	lsls	r3, r3, #8
 8004a3c:	4019      	ands	r1, r3
 8004a3e:	4b04      	ldr	r3, [pc, #16]	@ (8004a50 <__swhatbuf_r+0x50>)
 8004a40:	18c9      	adds	r1, r1, r3
 8004a42:	424b      	negs	r3, r1
 8004a44:	4159      	adcs	r1, r3
 8004a46:	e7ea      	b.n	8004a1e <__swhatbuf_r+0x1e>
 8004a48:	2100      	movs	r1, #0
 8004a4a:	2340      	movs	r3, #64	@ 0x40
 8004a4c:	e7e9      	b.n	8004a22 <__swhatbuf_r+0x22>
 8004a4e:	46c0      	nop			@ (mov r8, r8)
 8004a50:	ffffe000 	.word	0xffffe000

08004a54 <__smakebuf_r>:
 8004a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a56:	2602      	movs	r6, #2
 8004a58:	898b      	ldrh	r3, [r1, #12]
 8004a5a:	0005      	movs	r5, r0
 8004a5c:	000c      	movs	r4, r1
 8004a5e:	b085      	sub	sp, #20
 8004a60:	4233      	tst	r3, r6
 8004a62:	d007      	beq.n	8004a74 <__smakebuf_r+0x20>
 8004a64:	0023      	movs	r3, r4
 8004a66:	3347      	adds	r3, #71	@ 0x47
 8004a68:	6023      	str	r3, [r4, #0]
 8004a6a:	6123      	str	r3, [r4, #16]
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	6163      	str	r3, [r4, #20]
 8004a70:	b005      	add	sp, #20
 8004a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a74:	ab03      	add	r3, sp, #12
 8004a76:	aa02      	add	r2, sp, #8
 8004a78:	f7ff ffc2 	bl	8004a00 <__swhatbuf_r>
 8004a7c:	9f02      	ldr	r7, [sp, #8]
 8004a7e:	9001      	str	r0, [sp, #4]
 8004a80:	0039      	movs	r1, r7
 8004a82:	0028      	movs	r0, r5
 8004a84:	f7ff fafa 	bl	800407c <_malloc_r>
 8004a88:	2800      	cmp	r0, #0
 8004a8a:	d108      	bne.n	8004a9e <__smakebuf_r+0x4a>
 8004a8c:	220c      	movs	r2, #12
 8004a8e:	5ea3      	ldrsh	r3, [r4, r2]
 8004a90:	059a      	lsls	r2, r3, #22
 8004a92:	d4ed      	bmi.n	8004a70 <__smakebuf_r+0x1c>
 8004a94:	2203      	movs	r2, #3
 8004a96:	4393      	bics	r3, r2
 8004a98:	431e      	orrs	r6, r3
 8004a9a:	81a6      	strh	r6, [r4, #12]
 8004a9c:	e7e2      	b.n	8004a64 <__smakebuf_r+0x10>
 8004a9e:	2380      	movs	r3, #128	@ 0x80
 8004aa0:	89a2      	ldrh	r2, [r4, #12]
 8004aa2:	6020      	str	r0, [r4, #0]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	81a3      	strh	r3, [r4, #12]
 8004aa8:	9b03      	ldr	r3, [sp, #12]
 8004aaa:	6120      	str	r0, [r4, #16]
 8004aac:	6167      	str	r7, [r4, #20]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00c      	beq.n	8004acc <__smakebuf_r+0x78>
 8004ab2:	0028      	movs	r0, r5
 8004ab4:	230e      	movs	r3, #14
 8004ab6:	5ee1      	ldrsh	r1, [r4, r3]
 8004ab8:	f000 f820 	bl	8004afc <_isatty_r>
 8004abc:	2800      	cmp	r0, #0
 8004abe:	d005      	beq.n	8004acc <__smakebuf_r+0x78>
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	89a2      	ldrh	r2, [r4, #12]
 8004ac4:	439a      	bics	r2, r3
 8004ac6:	3b02      	subs	r3, #2
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	81a3      	strh	r3, [r4, #12]
 8004acc:	89a3      	ldrh	r3, [r4, #12]
 8004ace:	9a01      	ldr	r2, [sp, #4]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	81a3      	strh	r3, [r4, #12]
 8004ad4:	e7cc      	b.n	8004a70 <__smakebuf_r+0x1c>
	...

08004ad8 <_fstat_r>:
 8004ad8:	2300      	movs	r3, #0
 8004ada:	b570      	push	{r4, r5, r6, lr}
 8004adc:	4d06      	ldr	r5, [pc, #24]	@ (8004af8 <_fstat_r+0x20>)
 8004ade:	0004      	movs	r4, r0
 8004ae0:	0008      	movs	r0, r1
 8004ae2:	0011      	movs	r1, r2
 8004ae4:	602b      	str	r3, [r5, #0]
 8004ae6:	f7fc f908 	bl	8000cfa <_fstat>
 8004aea:	1c43      	adds	r3, r0, #1
 8004aec:	d103      	bne.n	8004af6 <_fstat_r+0x1e>
 8004aee:	682b      	ldr	r3, [r5, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d000      	beq.n	8004af6 <_fstat_r+0x1e>
 8004af4:	6023      	str	r3, [r4, #0]
 8004af6:	bd70      	pop	{r4, r5, r6, pc}
 8004af8:	200003b4 	.word	0x200003b4

08004afc <_isatty_r>:
 8004afc:	2300      	movs	r3, #0
 8004afe:	b570      	push	{r4, r5, r6, lr}
 8004b00:	4d06      	ldr	r5, [pc, #24]	@ (8004b1c <_isatty_r+0x20>)
 8004b02:	0004      	movs	r4, r0
 8004b04:	0008      	movs	r0, r1
 8004b06:	602b      	str	r3, [r5, #0]
 8004b08:	f7fc f905 	bl	8000d16 <_isatty>
 8004b0c:	1c43      	adds	r3, r0, #1
 8004b0e:	d103      	bne.n	8004b18 <_isatty_r+0x1c>
 8004b10:	682b      	ldr	r3, [r5, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d000      	beq.n	8004b18 <_isatty_r+0x1c>
 8004b16:	6023      	str	r3, [r4, #0]
 8004b18:	bd70      	pop	{r4, r5, r6, pc}
 8004b1a:	46c0      	nop			@ (mov r8, r8)
 8004b1c:	200003b4 	.word	0x200003b4

08004b20 <_init>:
 8004b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b22:	46c0      	nop			@ (mov r8, r8)
 8004b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b26:	bc08      	pop	{r3}
 8004b28:	469e      	mov	lr, r3
 8004b2a:	4770      	bx	lr

08004b2c <_fini>:
 8004b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b2e:	46c0      	nop			@ (mov r8, r8)
 8004b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b32:	bc08      	pop	{r3}
 8004b34:	469e      	mov	lr, r3
 8004b36:	4770      	bx	lr

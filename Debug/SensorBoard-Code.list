
SensorBoard-Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ed8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002f98  08002f98  00012f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fc8  08002fc8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002fc8  08002fc8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fc8  08002fc8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fc8  08002fc8  00012fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fcc  08002fcc  00012fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002fd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  2000000c  08002fdc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08002fdc  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   000094aa  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b1f  00000000  00000000  00029521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000948  00000000  00000000  0002b040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000071d  00000000  00000000  0002b988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017ad3  00000000  00000000  0002c0a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b6b0  00000000  00000000  00043b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087998  00000000  00000000  0004f228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002074  00000000  00000000  000d6bc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000d8c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002f80 	.word	0x08002f80

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002f80 	.word	0x08002f80

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_CAN_RxFifo0MsgPendingCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK) {
 8000228:	4b06      	ldr	r3, [pc, #24]	; (8000244 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 800022a:	4a07      	ldr	r2, [pc, #28]	; (8000248 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 800022c:	6878      	ldr	r0, [r7, #4]
 800022e:	2100      	movs	r1, #0
 8000230:	f001 f9ce 	bl	80015d0 <HAL_CAN_GetRxMessage>
 8000234:	1e03      	subs	r3, r0, #0
 8000236:	d001      	beq.n	800023c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
		Error_Handler();
 8000238:	f000 fa02 	bl	8000640 <Error_Handler>
	}

}
 800023c:	46c0      	nop			; (mov r8, r8)
 800023e:	46bd      	mov	sp, r7
 8000240:	b002      	add	sp, #8
 8000242:	bd80      	pop	{r7, pc}
 8000244:	2000013c 	.word	0x2000013c
 8000248:	20000120 	.word	0x20000120

0800024c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b08a      	sub	sp, #40	; 0x28
 8000250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  txHeader.IDE = CAN_ID_STD;
 8000252:	4b30      	ldr	r3, [pc, #192]	; (8000314 <main+0xc8>)
 8000254:	2200      	movs	r2, #0
 8000256:	609a      	str	r2, [r3, #8]
  txHeader.StdId = 0x001;
 8000258:	4b2e      	ldr	r3, [pc, #184]	; (8000314 <main+0xc8>)
 800025a:	2201      	movs	r2, #1
 800025c:	601a      	str	r2, [r3, #0]
  txHeader.RTR = CAN_RTR_DATA;
 800025e:	4b2d      	ldr	r3, [pc, #180]	; (8000314 <main+0xc8>)
 8000260:	2200      	movs	r2, #0
 8000262:	60da      	str	r2, [r3, #12]
  txHeader.DLC = 2;
 8000264:	4b2b      	ldr	r3, [pc, #172]	; (8000314 <main+0xc8>)
 8000266:	2202      	movs	r2, #2
 8000268:	611a      	str	r2, [r3, #16]
  txData[0] = 'n';
 800026a:	4b2b      	ldr	r3, [pc, #172]	; (8000318 <main+0xcc>)
 800026c:	226e      	movs	r2, #110	; 0x6e
 800026e:	701a      	strb	r2, [r3, #0]
  txData[1] = 'o';
 8000270:	4b29      	ldr	r3, [pc, #164]	; (8000318 <main+0xcc>)
 8000272:	226f      	movs	r2, #111	; 0x6f
 8000274:	705a      	strb	r2, [r3, #1]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000276:	f000 fb81 	bl	800097c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027a:	f000 f853 	bl	8000324 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027e:	f000 f9ab 	bl	80005d8 <MX_GPIO_Init>
  MX_ADC_Init();
 8000282:	f000 f8af 	bl	80003e4 <MX_ADC_Init>
  MX_CAN_Init();
 8000286:	f000 f92f 	bl	80004e8 <MX_CAN_Init>
  MX_I2C1_Init();
 800028a:	f000 f965 	bl	8000558 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  CAN_FilterTypeDef sFilterConfig;


  sFilterConfig.FilterFIFOAssignment=CAN_RX_FIFO0; //set fifo assignment
 800028e:	003b      	movs	r3, r7
 8000290:	2200      	movs	r2, #0
 8000292:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterIdHigh = 0;
 8000294:	003b      	movs	r3, r7
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0;
 800029a:	003b      	movs	r3, r7
 800029c:	2200      	movs	r2, #0
 800029e:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0;
 80002a0:	003b      	movs	r3, r7
 80002a2:	2200      	movs	r2, #0
 80002a4:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0;
 80002a6:	003b      	movs	r3, r7
 80002a8:	2200      	movs	r2, #0
 80002aa:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT; //set filter scale
 80002ac:	003b      	movs	r3, r7
 80002ae:	2201      	movs	r2, #1
 80002b0:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterActivation=ENABLE;
 80002b2:	003b      	movs	r3, r7
 80002b4:	2201      	movs	r2, #1
 80002b6:	621a      	str	r2, [r3, #32]
  sFilterConfig.FilterBank = 5;
 80002b8:	003b      	movs	r3, r7
 80002ba:	2205      	movs	r2, #5
 80002bc:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80002be:	003b      	movs	r3, r7
 80002c0:	2200      	movs	r2, #0
 80002c2:	619a      	str	r2, [r3, #24]
  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 80002c4:	003a      	movs	r2, r7
 80002c6:	4b15      	ldr	r3, [pc, #84]	; (800031c <main+0xd0>)
 80002c8:	0011      	movs	r1, r2
 80002ca:	0018      	movs	r0, r3
 80002cc:	f000 ff76 	bl	80011bc <HAL_CAN_ConfigFilter>

  if (HAL_CAN_Start(&hcan) != HAL_OK)
 80002d0:	4b12      	ldr	r3, [pc, #72]	; (800031c <main+0xd0>)
 80002d2:	0018      	movs	r0, r3
 80002d4:	f001 f864 	bl	80013a0 <HAL_CAN_Start>
 80002d8:	1e03      	subs	r3, r0, #0
 80002da:	d001      	beq.n	80002e0 <main+0x94>
  {
     Error_Handler ();
 80002dc:	f000 f9b0 	bl	8000640 <Error_Handler>
  }

  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80002e0:	4b0e      	ldr	r3, [pc, #56]	; (800031c <main+0xd0>)
 80002e2:	2102      	movs	r1, #2
 80002e4:	0018      	movs	r0, r3
 80002e6:	f001 fa9e 	bl	8001826 <HAL_CAN_ActivateNotification>
 80002ea:	1e03      	subs	r3, r0, #0
 80002ec:	d001      	beq.n	80002f2 <main+0xa6>
  {
      Error_Handler();
 80002ee:	f000 f9a7 	bl	8000640 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (HAL_CAN_AddTxMessage(&hcan, &txHeader, txData, &txMailbox) != HAL_OK)
 80002f2:	4b0b      	ldr	r3, [pc, #44]	; (8000320 <main+0xd4>)
 80002f4:	4a08      	ldr	r2, [pc, #32]	; (8000318 <main+0xcc>)
 80002f6:	4907      	ldr	r1, [pc, #28]	; (8000314 <main+0xc8>)
 80002f8:	4808      	ldr	r0, [pc, #32]	; (800031c <main+0xd0>)
 80002fa:	f001 f897 	bl	800142c <HAL_CAN_AddTxMessage>
 80002fe:	1e03      	subs	r3, r0, #0
 8000300:	d001      	beq.n	8000306 <main+0xba>
	{
	   Error_Handler ();
 8000302:	f000 f99d 	bl	8000640 <Error_Handler>
	}
	HAL_Delay(1000);
 8000306:	23fa      	movs	r3, #250	; 0xfa
 8000308:	009b      	lsls	r3, r3, #2
 800030a:	0018      	movs	r0, r3
 800030c:	f000 fb9a 	bl	8000a44 <HAL_Delay>
	if (HAL_CAN_AddTxMessage(&hcan, &txHeader, txData, &txMailbox) != HAL_OK)
 8000310:	e7ef      	b.n	80002f2 <main+0xa6>
 8000312:	46c0      	nop			; (mov r8, r8)
 8000314:	20000144 	.word	0x20000144
 8000318:	2000015c 	.word	0x2000015c
 800031c:	20000068 	.word	0x20000068
 8000320:	20000164 	.word	0x20000164

08000324 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000324:	b590      	push	{r4, r7, lr}
 8000326:	b099      	sub	sp, #100	; 0x64
 8000328:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032a:	242c      	movs	r4, #44	; 0x2c
 800032c:	193b      	adds	r3, r7, r4
 800032e:	0018      	movs	r0, r3
 8000330:	2334      	movs	r3, #52	; 0x34
 8000332:	001a      	movs	r2, r3
 8000334:	2100      	movs	r1, #0
 8000336:	f002 fdf7 	bl	8002f28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800033a:	231c      	movs	r3, #28
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	0018      	movs	r0, r3
 8000340:	2310      	movs	r3, #16
 8000342:	001a      	movs	r2, r3
 8000344:	2100      	movs	r1, #0
 8000346:	f002 fdef 	bl	8002f28 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	0018      	movs	r0, r3
 800034e:	2318      	movs	r3, #24
 8000350:	001a      	movs	r2, r3
 8000352:	2100      	movs	r1, #0
 8000354:	f002 fde8 	bl	8002f28 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8000358:	0021      	movs	r1, r4
 800035a:	187b      	adds	r3, r7, r1
 800035c:	2213      	movs	r2, #19
 800035e:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000360:	187b      	adds	r3, r7, r1
 8000362:	2201      	movs	r2, #1
 8000364:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000366:	187b      	adds	r3, r7, r1
 8000368:	2201      	movs	r2, #1
 800036a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800036c:	187b      	adds	r3, r7, r1
 800036e:	2201      	movs	r2, #1
 8000370:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000372:	187b      	adds	r3, r7, r1
 8000374:	2210      	movs	r2, #16
 8000376:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000378:	187b      	adds	r3, r7, r1
 800037a:	2210      	movs	r2, #16
 800037c:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800037e:	187b      	adds	r3, r7, r1
 8000380:	2200      	movs	r2, #0
 8000382:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000384:	187b      	adds	r3, r7, r1
 8000386:	0018      	movs	r0, r3
 8000388:	f002 f80c 	bl	80023a4 <HAL_RCC_OscConfig>
 800038c:	1e03      	subs	r3, r0, #0
 800038e:	d001      	beq.n	8000394 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000390:	f000 f956 	bl	8000640 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000394:	211c      	movs	r1, #28
 8000396:	187b      	adds	r3, r7, r1
 8000398:	2207      	movs	r2, #7
 800039a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800039c:	187b      	adds	r3, r7, r1
 800039e:	2201      	movs	r2, #1
 80003a0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003a2:	187b      	adds	r3, r7, r1
 80003a4:	2200      	movs	r2, #0
 80003a6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003a8:	187b      	adds	r3, r7, r1
 80003aa:	2200      	movs	r2, #0
 80003ac:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003ae:	187b      	adds	r3, r7, r1
 80003b0:	2100      	movs	r1, #0
 80003b2:	0018      	movs	r0, r3
 80003b4:	f002 fb7c 	bl	8002ab0 <HAL_RCC_ClockConfig>
 80003b8:	1e03      	subs	r3, r0, #0
 80003ba:	d001      	beq.n	80003c0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80003bc:	f000 f940 	bl	8000640 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80003c0:	1d3b      	adds	r3, r7, #4
 80003c2:	2220      	movs	r2, #32
 80003c4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	2200      	movs	r2, #0
 80003ca:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	0018      	movs	r0, r3
 80003d0:	f002 fcbc 	bl	8002d4c <HAL_RCCEx_PeriphCLKConfig>
 80003d4:	1e03      	subs	r3, r0, #0
 80003d6:	d001      	beq.n	80003dc <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80003d8:	f000 f932 	bl	8000640 <Error_Handler>
  }
}
 80003dc:	46c0      	nop			; (mov r8, r8)
 80003de:	46bd      	mov	sp, r7
 80003e0:	b019      	add	sp, #100	; 0x64
 80003e2:	bd90      	pop	{r4, r7, pc}

080003e4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b084      	sub	sp, #16
 80003e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	0018      	movs	r0, r3
 80003ee:	230c      	movs	r3, #12
 80003f0:	001a      	movs	r2, r3
 80003f2:	2100      	movs	r1, #0
 80003f4:	f002 fd98 	bl	8002f28 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80003f8:	4b39      	ldr	r3, [pc, #228]	; (80004e0 <MX_ADC_Init+0xfc>)
 80003fa:	4a3a      	ldr	r2, [pc, #232]	; (80004e4 <MX_ADC_Init+0x100>)
 80003fc:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003fe:	4b38      	ldr	r3, [pc, #224]	; (80004e0 <MX_ADC_Init+0xfc>)
 8000400:	2200      	movs	r2, #0
 8000402:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000404:	4b36      	ldr	r3, [pc, #216]	; (80004e0 <MX_ADC_Init+0xfc>)
 8000406:	2200      	movs	r2, #0
 8000408:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800040a:	4b35      	ldr	r3, [pc, #212]	; (80004e0 <MX_ADC_Init+0xfc>)
 800040c:	2200      	movs	r2, #0
 800040e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000410:	4b33      	ldr	r3, [pc, #204]	; (80004e0 <MX_ADC_Init+0xfc>)
 8000412:	2201      	movs	r2, #1
 8000414:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000416:	4b32      	ldr	r3, [pc, #200]	; (80004e0 <MX_ADC_Init+0xfc>)
 8000418:	2204      	movs	r2, #4
 800041a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800041c:	4b30      	ldr	r3, [pc, #192]	; (80004e0 <MX_ADC_Init+0xfc>)
 800041e:	2200      	movs	r2, #0
 8000420:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000422:	4b2f      	ldr	r3, [pc, #188]	; (80004e0 <MX_ADC_Init+0xfc>)
 8000424:	2200      	movs	r2, #0
 8000426:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000428:	4b2d      	ldr	r3, [pc, #180]	; (80004e0 <MX_ADC_Init+0xfc>)
 800042a:	2200      	movs	r2, #0
 800042c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800042e:	4b2c      	ldr	r3, [pc, #176]	; (80004e0 <MX_ADC_Init+0xfc>)
 8000430:	2200      	movs	r2, #0
 8000432:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000434:	4b2a      	ldr	r3, [pc, #168]	; (80004e0 <MX_ADC_Init+0xfc>)
 8000436:	22c2      	movs	r2, #194	; 0xc2
 8000438:	32ff      	adds	r2, #255	; 0xff
 800043a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800043c:	4b28      	ldr	r3, [pc, #160]	; (80004e0 <MX_ADC_Init+0xfc>)
 800043e:	2200      	movs	r2, #0
 8000440:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000442:	4b27      	ldr	r3, [pc, #156]	; (80004e0 <MX_ADC_Init+0xfc>)
 8000444:	2224      	movs	r2, #36	; 0x24
 8000446:	2100      	movs	r1, #0
 8000448:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800044a:	4b25      	ldr	r3, [pc, #148]	; (80004e0 <MX_ADC_Init+0xfc>)
 800044c:	2201      	movs	r2, #1
 800044e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000450:	4b23      	ldr	r3, [pc, #140]	; (80004e0 <MX_ADC_Init+0xfc>)
 8000452:	0018      	movs	r0, r3
 8000454:	f000 fb1a 	bl	8000a8c <HAL_ADC_Init>
 8000458:	1e03      	subs	r3, r0, #0
 800045a:	d001      	beq.n	8000460 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 800045c:	f000 f8f0 	bl	8000640 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000460:	1d3b      	adds	r3, r7, #4
 8000462:	2206      	movs	r2, #6
 8000464:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000466:	1d3b      	adds	r3, r7, #4
 8000468:	2280      	movs	r2, #128	; 0x80
 800046a:	0152      	lsls	r2, r2, #5
 800046c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800046e:	1d3b      	adds	r3, r7, #4
 8000470:	2280      	movs	r2, #128	; 0x80
 8000472:	0552      	lsls	r2, r2, #21
 8000474:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000476:	1d3a      	adds	r2, r7, #4
 8000478:	4b19      	ldr	r3, [pc, #100]	; (80004e0 <MX_ADC_Init+0xfc>)
 800047a:	0011      	movs	r1, r2
 800047c:	0018      	movs	r0, r3
 800047e:	f000 fc45 	bl	8000d0c <HAL_ADC_ConfigChannel>
 8000482:	1e03      	subs	r3, r0, #0
 8000484:	d001      	beq.n	800048a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000486:	f000 f8db 	bl	8000640 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	2207      	movs	r2, #7
 800048e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000490:	1d3a      	adds	r2, r7, #4
 8000492:	4b13      	ldr	r3, [pc, #76]	; (80004e0 <MX_ADC_Init+0xfc>)
 8000494:	0011      	movs	r1, r2
 8000496:	0018      	movs	r0, r3
 8000498:	f000 fc38 	bl	8000d0c <HAL_ADC_ConfigChannel>
 800049c:	1e03      	subs	r3, r0, #0
 800049e:	d001      	beq.n	80004a4 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 80004a0:	f000 f8ce 	bl	8000640 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80004a4:	1d3b      	adds	r3, r7, #4
 80004a6:	2208      	movs	r2, #8
 80004a8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80004aa:	1d3a      	adds	r2, r7, #4
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <MX_ADC_Init+0xfc>)
 80004ae:	0011      	movs	r1, r2
 80004b0:	0018      	movs	r0, r3
 80004b2:	f000 fc2b 	bl	8000d0c <HAL_ADC_ConfigChannel>
 80004b6:	1e03      	subs	r3, r0, #0
 80004b8:	d001      	beq.n	80004be <MX_ADC_Init+0xda>
  {
    Error_Handler();
 80004ba:	f000 f8c1 	bl	8000640 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80004be:	1d3b      	adds	r3, r7, #4
 80004c0:	2209      	movs	r2, #9
 80004c2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80004c4:	1d3a      	adds	r2, r7, #4
 80004c6:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <MX_ADC_Init+0xfc>)
 80004c8:	0011      	movs	r1, r2
 80004ca:	0018      	movs	r0, r3
 80004cc:	f000 fc1e 	bl	8000d0c <HAL_ADC_ConfigChannel>
 80004d0:	1e03      	subs	r3, r0, #0
 80004d2:	d001      	beq.n	80004d8 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 80004d4:	f000 f8b4 	bl	8000640 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80004d8:	46c0      	nop			; (mov r8, r8)
 80004da:	46bd      	mov	sp, r7
 80004dc:	b004      	add	sp, #16
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	20000028 	.word	0x20000028
 80004e4:	40012400 	.word	0x40012400

080004e8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80004ec:	4b18      	ldr	r3, [pc, #96]	; (8000550 <MX_CAN_Init+0x68>)
 80004ee:	4a19      	ldr	r2, [pc, #100]	; (8000554 <MX_CAN_Init+0x6c>)
 80004f0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 1;
 80004f2:	4b17      	ldr	r3, [pc, #92]	; (8000550 <MX_CAN_Init+0x68>)
 80004f4:	2201      	movs	r2, #1
 80004f6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80004f8:	4b15      	ldr	r3, [pc, #84]	; (8000550 <MX_CAN_Init+0x68>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004fe:	4b14      	ldr	r3, [pc, #80]	; (8000550 <MX_CAN_Init+0x68>)
 8000500:	2200      	movs	r2, #0
 8000502:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000504:	4b12      	ldr	r3, [pc, #72]	; (8000550 <MX_CAN_Init+0x68>)
 8000506:	22c0      	movs	r2, #192	; 0xc0
 8000508:	0312      	lsls	r2, r2, #12
 800050a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800050c:	4b10      	ldr	r3, [pc, #64]	; (8000550 <MX_CAN_Init+0x68>)
 800050e:	2280      	movs	r2, #128	; 0x80
 8000510:	0352      	lsls	r2, r2, #13
 8000512:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000514:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <MX_CAN_Init+0x68>)
 8000516:	2200      	movs	r2, #0
 8000518:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800051a:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <MX_CAN_Init+0x68>)
 800051c:	2200      	movs	r2, #0
 800051e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000520:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <MX_CAN_Init+0x68>)
 8000522:	2200      	movs	r2, #0
 8000524:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000526:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <MX_CAN_Init+0x68>)
 8000528:	2200      	movs	r2, #0
 800052a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800052c:	4b08      	ldr	r3, [pc, #32]	; (8000550 <MX_CAN_Init+0x68>)
 800052e:	2200      	movs	r2, #0
 8000530:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000532:	4b07      	ldr	r3, [pc, #28]	; (8000550 <MX_CAN_Init+0x68>)
 8000534:	2200      	movs	r2, #0
 8000536:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000538:	4b05      	ldr	r3, [pc, #20]	; (8000550 <MX_CAN_Init+0x68>)
 800053a:	0018      	movs	r0, r3
 800053c:	f000 fcf4 	bl	8000f28 <HAL_CAN_Init>
 8000540:	1e03      	subs	r3, r0, #0
 8000542:	d001      	beq.n	8000548 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000544:	f000 f87c 	bl	8000640 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000548:	46c0      	nop			; (mov r8, r8)
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	20000068 	.word	0x20000068
 8000554:	40006400 	.word	0x40006400

08000558 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800055c:	4b1b      	ldr	r3, [pc, #108]	; (80005cc <MX_I2C1_Init+0x74>)
 800055e:	4a1c      	ldr	r2, [pc, #112]	; (80005d0 <MX_I2C1_Init+0x78>)
 8000560:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000562:	4b1a      	ldr	r3, [pc, #104]	; (80005cc <MX_I2C1_Init+0x74>)
 8000564:	4a1b      	ldr	r2, [pc, #108]	; (80005d4 <MX_I2C1_Init+0x7c>)
 8000566:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000568:	4b18      	ldr	r3, [pc, #96]	; (80005cc <MX_I2C1_Init+0x74>)
 800056a:	2200      	movs	r2, #0
 800056c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800056e:	4b17      	ldr	r3, [pc, #92]	; (80005cc <MX_I2C1_Init+0x74>)
 8000570:	2201      	movs	r2, #1
 8000572:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000574:	4b15      	ldr	r3, [pc, #84]	; (80005cc <MX_I2C1_Init+0x74>)
 8000576:	2200      	movs	r2, #0
 8000578:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800057a:	4b14      	ldr	r3, [pc, #80]	; (80005cc <MX_I2C1_Init+0x74>)
 800057c:	2200      	movs	r2, #0
 800057e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000580:	4b12      	ldr	r3, [pc, #72]	; (80005cc <MX_I2C1_Init+0x74>)
 8000582:	2200      	movs	r2, #0
 8000584:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <MX_I2C1_Init+0x74>)
 8000588:	2200      	movs	r2, #0
 800058a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <MX_I2C1_Init+0x74>)
 800058e:	2200      	movs	r2, #0
 8000590:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000592:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <MX_I2C1_Init+0x74>)
 8000594:	0018      	movs	r0, r3
 8000596:	f001 fdd7 	bl	8002148 <HAL_I2C_Init>
 800059a:	1e03      	subs	r3, r0, #0
 800059c:	d001      	beq.n	80005a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800059e:	f000 f84f 	bl	8000640 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005a2:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <MX_I2C1_Init+0x74>)
 80005a4:	2100      	movs	r1, #0
 80005a6:	0018      	movs	r0, r3
 80005a8:	f001 fe64 	bl	8002274 <HAL_I2CEx_ConfigAnalogFilter>
 80005ac:	1e03      	subs	r3, r0, #0
 80005ae:	d001      	beq.n	80005b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005b0:	f000 f846 	bl	8000640 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005b4:	4b05      	ldr	r3, [pc, #20]	; (80005cc <MX_I2C1_Init+0x74>)
 80005b6:	2100      	movs	r1, #0
 80005b8:	0018      	movs	r0, r3
 80005ba:	f001 fea7 	bl	800230c <HAL_I2CEx_ConfigDigitalFilter>
 80005be:	1e03      	subs	r3, r0, #0
 80005c0:	d001      	beq.n	80005c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005c2:	f000 f83d 	bl	8000640 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	200000cc 	.word	0x200000cc
 80005d0:	40005400 	.word	0x40005400
 80005d4:	2000090e 	.word	0x2000090e

080005d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005de:	4b17      	ldr	r3, [pc, #92]	; (800063c <MX_GPIO_Init+0x64>)
 80005e0:	695a      	ldr	r2, [r3, #20]
 80005e2:	4b16      	ldr	r3, [pc, #88]	; (800063c <MX_GPIO_Init+0x64>)
 80005e4:	2180      	movs	r1, #128	; 0x80
 80005e6:	03c9      	lsls	r1, r1, #15
 80005e8:	430a      	orrs	r2, r1
 80005ea:	615a      	str	r2, [r3, #20]
 80005ec:	4b13      	ldr	r3, [pc, #76]	; (800063c <MX_GPIO_Init+0x64>)
 80005ee:	695a      	ldr	r2, [r3, #20]
 80005f0:	2380      	movs	r3, #128	; 0x80
 80005f2:	03db      	lsls	r3, r3, #15
 80005f4:	4013      	ands	r3, r2
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	4b10      	ldr	r3, [pc, #64]	; (800063c <MX_GPIO_Init+0x64>)
 80005fc:	695a      	ldr	r2, [r3, #20]
 80005fe:	4b0f      	ldr	r3, [pc, #60]	; (800063c <MX_GPIO_Init+0x64>)
 8000600:	2180      	movs	r1, #128	; 0x80
 8000602:	0289      	lsls	r1, r1, #10
 8000604:	430a      	orrs	r2, r1
 8000606:	615a      	str	r2, [r3, #20]
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <MX_GPIO_Init+0x64>)
 800060a:	695a      	ldr	r2, [r3, #20]
 800060c:	2380      	movs	r3, #128	; 0x80
 800060e:	029b      	lsls	r3, r3, #10
 8000610:	4013      	ands	r3, r2
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000616:	4b09      	ldr	r3, [pc, #36]	; (800063c <MX_GPIO_Init+0x64>)
 8000618:	695a      	ldr	r2, [r3, #20]
 800061a:	4b08      	ldr	r3, [pc, #32]	; (800063c <MX_GPIO_Init+0x64>)
 800061c:	2180      	movs	r1, #128	; 0x80
 800061e:	02c9      	lsls	r1, r1, #11
 8000620:	430a      	orrs	r2, r1
 8000622:	615a      	str	r2, [r3, #20]
 8000624:	4b05      	ldr	r3, [pc, #20]	; (800063c <MX_GPIO_Init+0x64>)
 8000626:	695a      	ldr	r2, [r3, #20]
 8000628:	2380      	movs	r3, #128	; 0x80
 800062a:	02db      	lsls	r3, r3, #11
 800062c:	4013      	ands	r3, r2
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	46bd      	mov	sp, r7
 8000636:	b004      	add	sp, #16
 8000638:	bd80      	pop	{r7, pc}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	40021000 	.word	0x40021000

08000640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000644:	b672      	cpsid	i
}
 8000646:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000648:	e7fe      	b.n	8000648 <Error_Handler+0x8>
	...

0800064c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000652:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <HAL_MspInit+0x44>)
 8000654:	699a      	ldr	r2, [r3, #24]
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <HAL_MspInit+0x44>)
 8000658:	2101      	movs	r1, #1
 800065a:	430a      	orrs	r2, r1
 800065c:	619a      	str	r2, [r3, #24]
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <HAL_MspInit+0x44>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	2201      	movs	r2, #1
 8000664:	4013      	ands	r3, r2
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <HAL_MspInit+0x44>)
 800066c:	69da      	ldr	r2, [r3, #28]
 800066e:	4b08      	ldr	r3, [pc, #32]	; (8000690 <HAL_MspInit+0x44>)
 8000670:	2180      	movs	r1, #128	; 0x80
 8000672:	0549      	lsls	r1, r1, #21
 8000674:	430a      	orrs	r2, r1
 8000676:	61da      	str	r2, [r3, #28]
 8000678:	4b05      	ldr	r3, [pc, #20]	; (8000690 <HAL_MspInit+0x44>)
 800067a:	69da      	ldr	r2, [r3, #28]
 800067c:	2380      	movs	r3, #128	; 0x80
 800067e:	055b      	lsls	r3, r3, #21
 8000680:	4013      	ands	r3, r2
 8000682:	603b      	str	r3, [r7, #0]
 8000684:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	46bd      	mov	sp, r7
 800068a:	b002      	add	sp, #8
 800068c:	bd80      	pop	{r7, pc}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	40021000 	.word	0x40021000

08000694 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b08b      	sub	sp, #44	; 0x2c
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069c:	2414      	movs	r4, #20
 800069e:	193b      	adds	r3, r7, r4
 80006a0:	0018      	movs	r0, r3
 80006a2:	2314      	movs	r3, #20
 80006a4:	001a      	movs	r2, r3
 80006a6:	2100      	movs	r1, #0
 80006a8:	f002 fc3e 	bl	8002f28 <memset>
  if(hadc->Instance==ADC1)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a27      	ldr	r2, [pc, #156]	; (8000750 <HAL_ADC_MspInit+0xbc>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d148      	bne.n	8000748 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006b6:	4b27      	ldr	r3, [pc, #156]	; (8000754 <HAL_ADC_MspInit+0xc0>)
 80006b8:	699a      	ldr	r2, [r3, #24]
 80006ba:	4b26      	ldr	r3, [pc, #152]	; (8000754 <HAL_ADC_MspInit+0xc0>)
 80006bc:	2180      	movs	r1, #128	; 0x80
 80006be:	0089      	lsls	r1, r1, #2
 80006c0:	430a      	orrs	r2, r1
 80006c2:	619a      	str	r2, [r3, #24]
 80006c4:	4b23      	ldr	r3, [pc, #140]	; (8000754 <HAL_ADC_MspInit+0xc0>)
 80006c6:	699a      	ldr	r2, [r3, #24]
 80006c8:	2380      	movs	r3, #128	; 0x80
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	4013      	ands	r3, r2
 80006ce:	613b      	str	r3, [r7, #16]
 80006d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	4b20      	ldr	r3, [pc, #128]	; (8000754 <HAL_ADC_MspInit+0xc0>)
 80006d4:	695a      	ldr	r2, [r3, #20]
 80006d6:	4b1f      	ldr	r3, [pc, #124]	; (8000754 <HAL_ADC_MspInit+0xc0>)
 80006d8:	2180      	movs	r1, #128	; 0x80
 80006da:	0289      	lsls	r1, r1, #10
 80006dc:	430a      	orrs	r2, r1
 80006de:	615a      	str	r2, [r3, #20]
 80006e0:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <HAL_ADC_MspInit+0xc0>)
 80006e2:	695a      	ldr	r2, [r3, #20]
 80006e4:	2380      	movs	r3, #128	; 0x80
 80006e6:	029b      	lsls	r3, r3, #10
 80006e8:	4013      	ands	r3, r2
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ee:	4b19      	ldr	r3, [pc, #100]	; (8000754 <HAL_ADC_MspInit+0xc0>)
 80006f0:	695a      	ldr	r2, [r3, #20]
 80006f2:	4b18      	ldr	r3, [pc, #96]	; (8000754 <HAL_ADC_MspInit+0xc0>)
 80006f4:	2180      	movs	r1, #128	; 0x80
 80006f6:	02c9      	lsls	r1, r1, #11
 80006f8:	430a      	orrs	r2, r1
 80006fa:	615a      	str	r2, [r3, #20]
 80006fc:	4b15      	ldr	r3, [pc, #84]	; (8000754 <HAL_ADC_MspInit+0xc0>)
 80006fe:	695a      	ldr	r2, [r3, #20]
 8000700:	2380      	movs	r3, #128	; 0x80
 8000702:	02db      	lsls	r3, r3, #11
 8000704:	4013      	ands	r3, r2
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = S1_Pin|S2_Pin;
 800070a:	193b      	adds	r3, r7, r4
 800070c:	22c0      	movs	r2, #192	; 0xc0
 800070e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000710:	193b      	adds	r3, r7, r4
 8000712:	2203      	movs	r2, #3
 8000714:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	193b      	adds	r3, r7, r4
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071c:	193a      	adds	r2, r7, r4
 800071e:	2390      	movs	r3, #144	; 0x90
 8000720:	05db      	lsls	r3, r3, #23
 8000722:	0011      	movs	r1, r2
 8000724:	0018      	movs	r0, r3
 8000726:	f001 fba7 	bl	8001e78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = S3_Pin|S4_Pin;
 800072a:	193b      	adds	r3, r7, r4
 800072c:	2203      	movs	r2, #3
 800072e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000730:	193b      	adds	r3, r7, r4
 8000732:	2203      	movs	r2, #3
 8000734:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	193b      	adds	r3, r7, r4
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073c:	193b      	adds	r3, r7, r4
 800073e:	4a06      	ldr	r2, [pc, #24]	; (8000758 <HAL_ADC_MspInit+0xc4>)
 8000740:	0019      	movs	r1, r3
 8000742:	0010      	movs	r0, r2
 8000744:	f001 fb98 	bl	8001e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000748:	46c0      	nop			; (mov r8, r8)
 800074a:	46bd      	mov	sp, r7
 800074c:	b00b      	add	sp, #44	; 0x2c
 800074e:	bd90      	pop	{r4, r7, pc}
 8000750:	40012400 	.word	0x40012400
 8000754:	40021000 	.word	0x40021000
 8000758:	48000400 	.word	0x48000400

0800075c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800075c:	b590      	push	{r4, r7, lr}
 800075e:	b08b      	sub	sp, #44	; 0x2c
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000764:	2414      	movs	r4, #20
 8000766:	193b      	adds	r3, r7, r4
 8000768:	0018      	movs	r0, r3
 800076a:	2314      	movs	r3, #20
 800076c:	001a      	movs	r2, r3
 800076e:	2100      	movs	r1, #0
 8000770:	f002 fbda 	bl	8002f28 <memset>
  if(hcan->Instance==CAN)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a21      	ldr	r2, [pc, #132]	; (8000800 <HAL_CAN_MspInit+0xa4>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d13b      	bne.n	80007f6 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800077e:	4b21      	ldr	r3, [pc, #132]	; (8000804 <HAL_CAN_MspInit+0xa8>)
 8000780:	69da      	ldr	r2, [r3, #28]
 8000782:	4b20      	ldr	r3, [pc, #128]	; (8000804 <HAL_CAN_MspInit+0xa8>)
 8000784:	2180      	movs	r1, #128	; 0x80
 8000786:	0489      	lsls	r1, r1, #18
 8000788:	430a      	orrs	r2, r1
 800078a:	61da      	str	r2, [r3, #28]
 800078c:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <HAL_CAN_MspInit+0xa8>)
 800078e:	69da      	ldr	r2, [r3, #28]
 8000790:	2380      	movs	r3, #128	; 0x80
 8000792:	049b      	lsls	r3, r3, #18
 8000794:	4013      	ands	r3, r2
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <HAL_CAN_MspInit+0xa8>)
 800079c:	695a      	ldr	r2, [r3, #20]
 800079e:	4b19      	ldr	r3, [pc, #100]	; (8000804 <HAL_CAN_MspInit+0xa8>)
 80007a0:	2180      	movs	r1, #128	; 0x80
 80007a2:	0289      	lsls	r1, r1, #10
 80007a4:	430a      	orrs	r2, r1
 80007a6:	615a      	str	r2, [r3, #20]
 80007a8:	4b16      	ldr	r3, [pc, #88]	; (8000804 <HAL_CAN_MspInit+0xa8>)
 80007aa:	695a      	ldr	r2, [r3, #20]
 80007ac:	2380      	movs	r3, #128	; 0x80
 80007ae:	029b      	lsls	r3, r3, #10
 80007b0:	4013      	ands	r3, r2
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80007b6:	193b      	adds	r3, r7, r4
 80007b8:	22c0      	movs	r2, #192	; 0xc0
 80007ba:	0152      	lsls	r2, r2, #5
 80007bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007be:	0021      	movs	r1, r4
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	2202      	movs	r2, #2
 80007c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	2203      	movs	r2, #3
 80007d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 80007d2:	187b      	adds	r3, r7, r1
 80007d4:	2204      	movs	r2, #4
 80007d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d8:	187a      	adds	r2, r7, r1
 80007da:	2390      	movs	r3, #144	; 0x90
 80007dc:	05db      	lsls	r3, r3, #23
 80007de:	0011      	movs	r1, r2
 80007e0:	0018      	movs	r0, r3
 80007e2:	f001 fb49 	bl	8001e78 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2100      	movs	r1, #0
 80007ea:	201e      	movs	r0, #30
 80007ec:	f001 fb12 	bl	8001e14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 80007f0:	201e      	movs	r0, #30
 80007f2:	f001 fb24 	bl	8001e3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	46bd      	mov	sp, r7
 80007fa:	b00b      	add	sp, #44	; 0x2c
 80007fc:	bd90      	pop	{r4, r7, pc}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	40006400 	.word	0x40006400
 8000804:	40021000 	.word	0x40021000

08000808 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000808:	b590      	push	{r4, r7, lr}
 800080a:	b08b      	sub	sp, #44	; 0x2c
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000810:	2414      	movs	r4, #20
 8000812:	193b      	adds	r3, r7, r4
 8000814:	0018      	movs	r0, r3
 8000816:	2314      	movs	r3, #20
 8000818:	001a      	movs	r2, r3
 800081a:	2100      	movs	r1, #0
 800081c:	f002 fb84 	bl	8002f28 <memset>
  if(hi2c->Instance==I2C1)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a1d      	ldr	r2, [pc, #116]	; (800089c <HAL_I2C_MspInit+0x94>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d133      	bne.n	8000892 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	4b1d      	ldr	r3, [pc, #116]	; (80008a0 <HAL_I2C_MspInit+0x98>)
 800082c:	695a      	ldr	r2, [r3, #20]
 800082e:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <HAL_I2C_MspInit+0x98>)
 8000830:	2180      	movs	r1, #128	; 0x80
 8000832:	0289      	lsls	r1, r1, #10
 8000834:	430a      	orrs	r2, r1
 8000836:	615a      	str	r2, [r3, #20]
 8000838:	4b19      	ldr	r3, [pc, #100]	; (80008a0 <HAL_I2C_MspInit+0x98>)
 800083a:	695a      	ldr	r2, [r3, #20]
 800083c:	2380      	movs	r3, #128	; 0x80
 800083e:	029b      	lsls	r3, r3, #10
 8000840:	4013      	ands	r3, r2
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000846:	193b      	adds	r3, r7, r4
 8000848:	22c0      	movs	r2, #192	; 0xc0
 800084a:	00d2      	lsls	r2, r2, #3
 800084c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800084e:	0021      	movs	r1, r4
 8000850:	187b      	adds	r3, r7, r1
 8000852:	2212      	movs	r2, #18
 8000854:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	187b      	adds	r3, r7, r1
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800085c:	187b      	adds	r3, r7, r1
 800085e:	2203      	movs	r2, #3
 8000860:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000862:	187b      	adds	r3, r7, r1
 8000864:	2204      	movs	r2, #4
 8000866:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000868:	187a      	adds	r2, r7, r1
 800086a:	2390      	movs	r3, #144	; 0x90
 800086c:	05db      	lsls	r3, r3, #23
 800086e:	0011      	movs	r1, r2
 8000870:	0018      	movs	r0, r3
 8000872:	f001 fb01 	bl	8001e78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000876:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <HAL_I2C_MspInit+0x98>)
 8000878:	69da      	ldr	r2, [r3, #28]
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <HAL_I2C_MspInit+0x98>)
 800087c:	2180      	movs	r1, #128	; 0x80
 800087e:	0389      	lsls	r1, r1, #14
 8000880:	430a      	orrs	r2, r1
 8000882:	61da      	str	r2, [r3, #28]
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <HAL_I2C_MspInit+0x98>)
 8000886:	69da      	ldr	r2, [r3, #28]
 8000888:	2380      	movs	r3, #128	; 0x80
 800088a:	039b      	lsls	r3, r3, #14
 800088c:	4013      	ands	r3, r2
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	b00b      	add	sp, #44	; 0x2c
 8000898:	bd90      	pop	{r4, r7, pc}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	40005400 	.word	0x40005400
 80008a0:	40021000 	.word	0x40021000

080008a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008a8:	e7fe      	b.n	80008a8 <NMI_Handler+0x4>

080008aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <HardFault_Handler+0x4>

080008b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008b4:	46c0      	nop			; (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c8:	f000 f8a0 	bl	8000a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008cc:	46c0      	nop			; (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
	...

080008d4 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80008d8:	4b03      	ldr	r3, [pc, #12]	; (80008e8 <CEC_CAN_IRQHandler+0x14>)
 80008da:	0018      	movs	r0, r3
 80008dc:	f000 ffcd 	bl	800187a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 80008e0:	46c0      	nop			; (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	20000068 	.word	0x20000068

080008ec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80008f0:	46c0      	nop			; (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008f8:	4813      	ldr	r0, [pc, #76]	; (8000948 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008fa:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008fc:	f7ff fff6 	bl	80008ec <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000900:	4812      	ldr	r0, [pc, #72]	; (800094c <LoopForever+0x6>)
    LDR R1, [R0]
 8000902:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000904:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000906:	4a12      	ldr	r2, [pc, #72]	; (8000950 <LoopForever+0xa>)
    CMP R1, R2
 8000908:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800090a:	d105      	bne.n	8000918 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 800090c:	4811      	ldr	r0, [pc, #68]	; (8000954 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800090e:	4912      	ldr	r1, [pc, #72]	; (8000958 <LoopForever+0x12>)
    STR R1, [R0]
 8000910:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000912:	4812      	ldr	r0, [pc, #72]	; (800095c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000914:	4912      	ldr	r1, [pc, #72]	; (8000960 <LoopForever+0x1a>)
    STR R1, [R0]
 8000916:	6001      	str	r1, [r0, #0]

08000918 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000918:	4812      	ldr	r0, [pc, #72]	; (8000964 <LoopForever+0x1e>)
  ldr r1, =_edata
 800091a:	4913      	ldr	r1, [pc, #76]	; (8000968 <LoopForever+0x22>)
  ldr r2, =_sidata
 800091c:	4a13      	ldr	r2, [pc, #76]	; (800096c <LoopForever+0x26>)
  movs r3, #0
 800091e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000920:	e002      	b.n	8000928 <LoopCopyDataInit>

08000922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000926:	3304      	adds	r3, #4

08000928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800092a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800092c:	d3f9      	bcc.n	8000922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800092e:	4a10      	ldr	r2, [pc, #64]	; (8000970 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000930:	4c10      	ldr	r4, [pc, #64]	; (8000974 <LoopForever+0x2e>)
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000934:	e001      	b.n	800093a <LoopFillZerobss>

08000936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000938:	3204      	adds	r2, #4

0800093a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800093a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800093c:	d3fb      	bcc.n	8000936 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800093e:	f002 fafb 	bl	8002f38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000942:	f7ff fc83 	bl	800024c <main>

08000946 <LoopForever>:

LoopForever:
    b LoopForever
 8000946:	e7fe      	b.n	8000946 <LoopForever>
  ldr   r0, =_estack
 8000948:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 800094c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000950:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000954:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000958:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 800095c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000960:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000968:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800096c:	08002fd0 	.word	0x08002fd0
  ldr r2, =_sbss
 8000970:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000974:	2000016c 	.word	0x2000016c

08000978 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000978:	e7fe      	b.n	8000978 <ADC1_IRQHandler>
	...

0800097c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000980:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <HAL_Init+0x24>)
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <HAL_Init+0x24>)
 8000986:	2110      	movs	r1, #16
 8000988:	430a      	orrs	r2, r1
 800098a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800098c:	2003      	movs	r0, #3
 800098e:	f000 f809 	bl	80009a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000992:	f7ff fe5b 	bl	800064c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000996:	2300      	movs	r3, #0
}
 8000998:	0018      	movs	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	40022000 	.word	0x40022000

080009a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a4:	b590      	push	{r4, r7, lr}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009ac:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <HAL_InitTick+0x5c>)
 80009ae:	681c      	ldr	r4, [r3, #0]
 80009b0:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <HAL_InitTick+0x60>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	0019      	movs	r1, r3
 80009b6:	23fa      	movs	r3, #250	; 0xfa
 80009b8:	0098      	lsls	r0, r3, #2
 80009ba:	f7ff fba5 	bl	8000108 <__udivsi3>
 80009be:	0003      	movs	r3, r0
 80009c0:	0019      	movs	r1, r3
 80009c2:	0020      	movs	r0, r4
 80009c4:	f7ff fba0 	bl	8000108 <__udivsi3>
 80009c8:	0003      	movs	r3, r0
 80009ca:	0018      	movs	r0, r3
 80009cc:	f001 fa47 	bl	8001e5e <HAL_SYSTICK_Config>
 80009d0:	1e03      	subs	r3, r0, #0
 80009d2:	d001      	beq.n	80009d8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80009d4:	2301      	movs	r3, #1
 80009d6:	e00f      	b.n	80009f8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2b03      	cmp	r3, #3
 80009dc:	d80b      	bhi.n	80009f6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009de:	6879      	ldr	r1, [r7, #4]
 80009e0:	2301      	movs	r3, #1
 80009e2:	425b      	negs	r3, r3
 80009e4:	2200      	movs	r2, #0
 80009e6:	0018      	movs	r0, r3
 80009e8:	f001 fa14 	bl	8001e14 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <HAL_InitTick+0x64>)
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80009f2:	2300      	movs	r3, #0
 80009f4:	e000      	b.n	80009f8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
}
 80009f8:	0018      	movs	r0, r3
 80009fa:	46bd      	mov	sp, r7
 80009fc:	b003      	add	sp, #12
 80009fe:	bd90      	pop	{r4, r7, pc}
 8000a00:	20000000 	.word	0x20000000
 8000a04:	20000008 	.word	0x20000008
 8000a08:	20000004 	.word	0x20000004

08000a0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a10:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <HAL_IncTick+0x1c>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	001a      	movs	r2, r3
 8000a16:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <HAL_IncTick+0x20>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	18d2      	adds	r2, r2, r3
 8000a1c:	4b03      	ldr	r3, [pc, #12]	; (8000a2c <HAL_IncTick+0x20>)
 8000a1e:	601a      	str	r2, [r3, #0]
}
 8000a20:	46c0      	nop			; (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	20000008 	.word	0x20000008
 8000a2c:	20000168 	.word	0x20000168

08000a30 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  return uwTick;
 8000a34:	4b02      	ldr	r3, [pc, #8]	; (8000a40 <HAL_GetTick+0x10>)
 8000a36:	681b      	ldr	r3, [r3, #0]
}
 8000a38:	0018      	movs	r0, r3
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	20000168 	.word	0x20000168

08000a44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a4c:	f7ff fff0 	bl	8000a30 <HAL_GetTick>
 8000a50:	0003      	movs	r3, r0
 8000a52:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	d005      	beq.n	8000a6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a5e:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <HAL_Delay+0x44>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	001a      	movs	r2, r3
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	189b      	adds	r3, r3, r2
 8000a68:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	f7ff ffe0 	bl	8000a30 <HAL_GetTick>
 8000a70:	0002      	movs	r2, r0
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	68fa      	ldr	r2, [r7, #12]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d8f7      	bhi.n	8000a6c <HAL_Delay+0x28>
  {
  }
}
 8000a7c:	46c0      	nop			; (mov r8, r8)
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	46bd      	mov	sp, r7
 8000a82:	b004      	add	sp, #16
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	20000008 	.word	0x20000008

08000a8c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a94:	230f      	movs	r3, #15
 8000a96:	18fb      	adds	r3, r7, r3
 8000a98:	2200      	movs	r2, #0
 8000a9a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d101      	bne.n	8000aaa <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e125      	b.n	8000cf6 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d10a      	bne.n	8000ac8 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2234      	movs	r2, #52	; 0x34
 8000abc:	2100      	movs	r1, #0
 8000abe:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f7ff fde6 	bl	8000694 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000acc:	2210      	movs	r2, #16
 8000ace:	4013      	ands	r3, r2
 8000ad0:	d000      	beq.n	8000ad4 <HAL_ADC_Init+0x48>
 8000ad2:	e103      	b.n	8000cdc <HAL_ADC_Init+0x250>
 8000ad4:	230f      	movs	r3, #15
 8000ad6:	18fb      	adds	r3, r7, r3
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d000      	beq.n	8000ae0 <HAL_ADC_Init+0x54>
 8000ade:	e0fd      	b.n	8000cdc <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	689b      	ldr	r3, [r3, #8]
 8000ae6:	2204      	movs	r2, #4
 8000ae8:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000aea:	d000      	beq.n	8000aee <HAL_ADC_Init+0x62>
 8000aec:	e0f6      	b.n	8000cdc <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000af2:	4a83      	ldr	r2, [pc, #524]	; (8000d00 <HAL_ADC_Init+0x274>)
 8000af4:	4013      	ands	r3, r2
 8000af6:	2202      	movs	r2, #2
 8000af8:	431a      	orrs	r2, r3
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	2203      	movs	r2, #3
 8000b06:	4013      	ands	r3, r2
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d112      	bne.n	8000b32 <HAL_ADC_Init+0xa6>
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	2201      	movs	r2, #1
 8000b14:	4013      	ands	r3, r2
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d009      	beq.n	8000b2e <HAL_ADC_Init+0xa2>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	68da      	ldr	r2, [r3, #12]
 8000b20:	2380      	movs	r3, #128	; 0x80
 8000b22:	021b      	lsls	r3, r3, #8
 8000b24:	401a      	ands	r2, r3
 8000b26:	2380      	movs	r3, #128	; 0x80
 8000b28:	021b      	lsls	r3, r3, #8
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d101      	bne.n	8000b32 <HAL_ADC_Init+0xa6>
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e000      	b.n	8000b34 <HAL_ADC_Init+0xa8>
 8000b32:	2300      	movs	r3, #0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d116      	bne.n	8000b66 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	68db      	ldr	r3, [r3, #12]
 8000b3e:	2218      	movs	r2, #24
 8000b40:	4393      	bics	r3, r2
 8000b42:	0019      	movs	r1, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	689a      	ldr	r2, [r3, #8]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	430a      	orrs	r2, r1
 8000b4e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	691b      	ldr	r3, [r3, #16]
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	0899      	lsrs	r1, r3, #2
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	685a      	ldr	r2, [r3, #4]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	430a      	orrs	r2, r1
 8000b64:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	68da      	ldr	r2, [r3, #12]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4964      	ldr	r1, [pc, #400]	; (8000d04 <HAL_ADC_Init+0x278>)
 8000b72:	400a      	ands	r2, r1
 8000b74:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	7e1b      	ldrb	r3, [r3, #24]
 8000b7a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	7e5b      	ldrb	r3, [r3, #25]
 8000b80:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000b82:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	7e9b      	ldrb	r3, [r3, #26]
 8000b88:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000b8a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d002      	beq.n	8000b9a <HAL_ADC_Init+0x10e>
 8000b94:	2380      	movs	r3, #128	; 0x80
 8000b96:	015b      	lsls	r3, r3, #5
 8000b98:	e000      	b.n	8000b9c <HAL_ADC_Init+0x110>
 8000b9a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000b9c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000ba2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	691b      	ldr	r3, [r3, #16]
 8000ba8:	2b02      	cmp	r3, #2
 8000baa:	d101      	bne.n	8000bb0 <HAL_ADC_Init+0x124>
 8000bac:	2304      	movs	r3, #4
 8000bae:	e000      	b.n	8000bb2 <HAL_ADC_Init+0x126>
 8000bb0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000bb2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2124      	movs	r1, #36	; 0x24
 8000bb8:	5c5b      	ldrb	r3, [r3, r1]
 8000bba:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000bbc:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000bbe:	68ba      	ldr	r2, [r7, #8]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	7edb      	ldrb	r3, [r3, #27]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d115      	bne.n	8000bf8 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	7e9b      	ldrb	r3, [r3, #26]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d105      	bne.n	8000be0 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	2280      	movs	r2, #128	; 0x80
 8000bd8:	0252      	lsls	r2, r2, #9
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	e00b      	b.n	8000bf8 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000be4:	2220      	movs	r2, #32
 8000be6:	431a      	orrs	r2, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	431a      	orrs	r2, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	69da      	ldr	r2, [r3, #28]
 8000bfc:	23c2      	movs	r3, #194	; 0xc2
 8000bfe:	33ff      	adds	r3, #255	; 0xff
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d007      	beq.n	8000c14 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	68d9      	ldr	r1, [r3, #12]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	68ba      	ldr	r2, [r7, #8]
 8000c20:	430a      	orrs	r2, r1
 8000c22:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c28:	2380      	movs	r3, #128	; 0x80
 8000c2a:	055b      	lsls	r3, r3, #21
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d01b      	beq.n	8000c68 <HAL_ADC_Init+0x1dc>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d017      	beq.n	8000c68 <HAL_ADC_Init+0x1dc>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c3c:	2b02      	cmp	r3, #2
 8000c3e:	d013      	beq.n	8000c68 <HAL_ADC_Init+0x1dc>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c44:	2b03      	cmp	r3, #3
 8000c46:	d00f      	beq.n	8000c68 <HAL_ADC_Init+0x1dc>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c4c:	2b04      	cmp	r3, #4
 8000c4e:	d00b      	beq.n	8000c68 <HAL_ADC_Init+0x1dc>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c54:	2b05      	cmp	r3, #5
 8000c56:	d007      	beq.n	8000c68 <HAL_ADC_Init+0x1dc>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c5c:	2b06      	cmp	r3, #6
 8000c5e:	d003      	beq.n	8000c68 <HAL_ADC_Init+0x1dc>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c64:	2b07      	cmp	r3, #7
 8000c66:	d112      	bne.n	8000c8e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	695a      	ldr	r2, [r3, #20]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2107      	movs	r1, #7
 8000c74:	438a      	bics	r2, r1
 8000c76:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	6959      	ldr	r1, [r3, #20]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c82:	2207      	movs	r2, #7
 8000c84:	401a      	ands	r2, r3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	4a1c      	ldr	r2, [pc, #112]	; (8000d08 <HAL_ADC_Init+0x27c>)
 8000c96:	4013      	ands	r3, r2
 8000c98:	68ba      	ldr	r2, [r7, #8]
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	d10b      	bne.n	8000cb6 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ca8:	2203      	movs	r2, #3
 8000caa:	4393      	bics	r3, r2
 8000cac:	2201      	movs	r2, #1
 8000cae:	431a      	orrs	r2, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000cb4:	e01c      	b.n	8000cf0 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cba:	2212      	movs	r2, #18
 8000cbc:	4393      	bics	r3, r2
 8000cbe:	2210      	movs	r2, #16
 8000cc0:	431a      	orrs	r2, r3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cca:	2201      	movs	r2, #1
 8000ccc:	431a      	orrs	r2, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000cd2:	230f      	movs	r3, #15
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000cda:	e009      	b.n	8000cf0 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ce0:	2210      	movs	r2, #16
 8000ce2:	431a      	orrs	r2, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000ce8:	230f      	movs	r3, #15
 8000cea:	18fb      	adds	r3, r7, r3
 8000cec:	2201      	movs	r2, #1
 8000cee:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000cf0:	230f      	movs	r3, #15
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	781b      	ldrb	r3, [r3, #0]
}
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	b004      	add	sp, #16
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	fffffefd 	.word	0xfffffefd
 8000d04:	fffe0219 	.word	0xfffe0219
 8000d08:	833fffe7 	.word	0x833fffe7

08000d0c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d16:	230f      	movs	r3, #15
 8000d18:	18fb      	adds	r3, r7, r3
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d26:	2380      	movs	r3, #128	; 0x80
 8000d28:	055b      	lsls	r3, r3, #21
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d011      	beq.n	8000d52 <HAL_ADC_ConfigChannel+0x46>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d00d      	beq.n	8000d52 <HAL_ADC_ConfigChannel+0x46>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	d009      	beq.n	8000d52 <HAL_ADC_ConfigChannel+0x46>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d42:	2b03      	cmp	r3, #3
 8000d44:	d005      	beq.n	8000d52 <HAL_ADC_ConfigChannel+0x46>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d4a:	2b04      	cmp	r3, #4
 8000d4c:	d001      	beq.n	8000d52 <HAL_ADC_ConfigChannel+0x46>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2234      	movs	r2, #52	; 0x34
 8000d56:	5c9b      	ldrb	r3, [r3, r2]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d101      	bne.n	8000d60 <HAL_ADC_ConfigChannel+0x54>
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	e0d0      	b.n	8000f02 <HAL_ADC_ConfigChannel+0x1f6>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2234      	movs	r2, #52	; 0x34
 8000d64:	2101      	movs	r1, #1
 8000d66:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	2204      	movs	r2, #4
 8000d70:	4013      	ands	r3, r2
 8000d72:	d000      	beq.n	8000d76 <HAL_ADC_ConfigChannel+0x6a>
 8000d74:	e0b4      	b.n	8000ee0 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	4a64      	ldr	r2, [pc, #400]	; (8000f0c <HAL_ADC_ConfigChannel+0x200>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d100      	bne.n	8000d82 <HAL_ADC_ConfigChannel+0x76>
 8000d80:	e082      	b.n	8000e88 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	409a      	lsls	r2, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	430a      	orrs	r2, r1
 8000d96:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d9c:	2380      	movs	r3, #128	; 0x80
 8000d9e:	055b      	lsls	r3, r3, #21
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d037      	beq.n	8000e14 <HAL_ADC_ConfigChannel+0x108>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d033      	beq.n	8000e14 <HAL_ADC_ConfigChannel+0x108>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d02f      	beq.n	8000e14 <HAL_ADC_ConfigChannel+0x108>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db8:	2b03      	cmp	r3, #3
 8000dba:	d02b      	beq.n	8000e14 <HAL_ADC_ConfigChannel+0x108>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc0:	2b04      	cmp	r3, #4
 8000dc2:	d027      	beq.n	8000e14 <HAL_ADC_ConfigChannel+0x108>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc8:	2b05      	cmp	r3, #5
 8000dca:	d023      	beq.n	8000e14 <HAL_ADC_ConfigChannel+0x108>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd0:	2b06      	cmp	r3, #6
 8000dd2:	d01f      	beq.n	8000e14 <HAL_ADC_ConfigChannel+0x108>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd8:	2b07      	cmp	r3, #7
 8000dda:	d01b      	beq.n	8000e14 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	689a      	ldr	r2, [r3, #8]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	2107      	movs	r1, #7
 8000de8:	400b      	ands	r3, r1
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d012      	beq.n	8000e14 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	695a      	ldr	r2, [r3, #20]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2107      	movs	r1, #7
 8000dfa:	438a      	bics	r2, r1
 8000dfc:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	6959      	ldr	r1, [r3, #20]
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	2207      	movs	r2, #7
 8000e0a:	401a      	ands	r2, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	430a      	orrs	r2, r1
 8000e12:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b10      	cmp	r3, #16
 8000e1a:	d007      	beq.n	8000e2c <HAL_ADC_ConfigChannel+0x120>
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2b11      	cmp	r3, #17
 8000e22:	d003      	beq.n	8000e2c <HAL_ADC_ConfigChannel+0x120>
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b12      	cmp	r3, #18
 8000e2a:	d163      	bne.n	8000ef4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000e2c:	4b38      	ldr	r3, [pc, #224]	; (8000f10 <HAL_ADC_ConfigChannel+0x204>)
 8000e2e:	6819      	ldr	r1, [r3, #0]
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b10      	cmp	r3, #16
 8000e36:	d009      	beq.n	8000e4c <HAL_ADC_ConfigChannel+0x140>
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b11      	cmp	r3, #17
 8000e3e:	d102      	bne.n	8000e46 <HAL_ADC_ConfigChannel+0x13a>
 8000e40:	2380      	movs	r3, #128	; 0x80
 8000e42:	03db      	lsls	r3, r3, #15
 8000e44:	e004      	b.n	8000e50 <HAL_ADC_ConfigChannel+0x144>
 8000e46:	2380      	movs	r3, #128	; 0x80
 8000e48:	045b      	lsls	r3, r3, #17
 8000e4a:	e001      	b.n	8000e50 <HAL_ADC_ConfigChannel+0x144>
 8000e4c:	2380      	movs	r3, #128	; 0x80
 8000e4e:	041b      	lsls	r3, r3, #16
 8000e50:	4a2f      	ldr	r2, [pc, #188]	; (8000f10 <HAL_ADC_ConfigChannel+0x204>)
 8000e52:	430b      	orrs	r3, r1
 8000e54:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2b10      	cmp	r3, #16
 8000e5c:	d14a      	bne.n	8000ef4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e5e:	4b2d      	ldr	r3, [pc, #180]	; (8000f14 <HAL_ADC_ConfigChannel+0x208>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	492d      	ldr	r1, [pc, #180]	; (8000f18 <HAL_ADC_ConfigChannel+0x20c>)
 8000e64:	0018      	movs	r0, r3
 8000e66:	f7ff f94f 	bl	8000108 <__udivsi3>
 8000e6a:	0003      	movs	r3, r0
 8000e6c:	001a      	movs	r2, r3
 8000e6e:	0013      	movs	r3, r2
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	189b      	adds	r3, r3, r2
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e78:	e002      	b.n	8000e80 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d1f9      	bne.n	8000e7a <HAL_ADC_ConfigChannel+0x16e>
 8000e86:	e035      	b.n	8000ef4 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2101      	movs	r1, #1
 8000e94:	4099      	lsls	r1, r3
 8000e96:	000b      	movs	r3, r1
 8000e98:	43d9      	mvns	r1, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	400a      	ands	r2, r1
 8000ea0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2b10      	cmp	r3, #16
 8000ea8:	d007      	beq.n	8000eba <HAL_ADC_ConfigChannel+0x1ae>
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2b11      	cmp	r3, #17
 8000eb0:	d003      	beq.n	8000eba <HAL_ADC_ConfigChannel+0x1ae>
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2b12      	cmp	r3, #18
 8000eb8:	d11c      	bne.n	8000ef4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000eba:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <HAL_ADC_ConfigChannel+0x204>)
 8000ebc:	6819      	ldr	r1, [r3, #0]
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2b10      	cmp	r3, #16
 8000ec4:	d007      	beq.n	8000ed6 <HAL_ADC_ConfigChannel+0x1ca>
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2b11      	cmp	r3, #17
 8000ecc:	d101      	bne.n	8000ed2 <HAL_ADC_ConfigChannel+0x1c6>
 8000ece:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <HAL_ADC_ConfigChannel+0x210>)
 8000ed0:	e002      	b.n	8000ed8 <HAL_ADC_ConfigChannel+0x1cc>
 8000ed2:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <HAL_ADC_ConfigChannel+0x214>)
 8000ed4:	e000      	b.n	8000ed8 <HAL_ADC_ConfigChannel+0x1cc>
 8000ed6:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <HAL_ADC_ConfigChannel+0x218>)
 8000ed8:	4a0d      	ldr	r2, [pc, #52]	; (8000f10 <HAL_ADC_ConfigChannel+0x204>)
 8000eda:	400b      	ands	r3, r1
 8000edc:	6013      	str	r3, [r2, #0]
 8000ede:	e009      	b.n	8000ef4 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ee4:	2220      	movs	r2, #32
 8000ee6:	431a      	orrs	r2, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8000eec:	230f      	movs	r3, #15
 8000eee:	18fb      	adds	r3, r7, r3
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2234      	movs	r2, #52	; 0x34
 8000ef8:	2100      	movs	r1, #0
 8000efa:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000efc:	230f      	movs	r3, #15
 8000efe:	18fb      	adds	r3, r7, r3
 8000f00:	781b      	ldrb	r3, [r3, #0]
}
 8000f02:	0018      	movs	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	b004      	add	sp, #16
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	00001001 	.word	0x00001001
 8000f10:	40012708 	.word	0x40012708
 8000f14:	20000000 	.word	0x20000000
 8000f18:	000f4240 	.word	0x000f4240
 8000f1c:	ffbfffff 	.word	0xffbfffff
 8000f20:	feffffff 	.word	0xfeffffff
 8000f24:	ff7fffff 	.word	0xff7fffff

08000f28 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d101      	bne.n	8000f3a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e11f      	b.n	800117a <HAL_CAN_Init+0x252>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2220      	movs	r2, #32
 8000f3e:	5c9b      	ldrb	r3, [r3, r2]
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d132      	bne.n	8000fac <HAL_CAN_Init+0x84>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a8e      	ldr	r2, [pc, #568]	; (8001184 <HAL_CAN_Init+0x25c>)
 8000f4a:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a8e      	ldr	r2, [pc, #568]	; (8001188 <HAL_CAN_Init+0x260>)
 8000f50:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a8d      	ldr	r2, [pc, #564]	; (800118c <HAL_CAN_Init+0x264>)
 8000f56:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a8d      	ldr	r2, [pc, #564]	; (8001190 <HAL_CAN_Init+0x268>)
 8000f5c:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a8c      	ldr	r2, [pc, #560]	; (8001194 <HAL_CAN_Init+0x26c>)
 8000f62:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a8c      	ldr	r2, [pc, #560]	; (8001198 <HAL_CAN_Init+0x270>)
 8000f68:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a8b      	ldr	r2, [pc, #556]	; (800119c <HAL_CAN_Init+0x274>)
 8000f6e:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4a8b      	ldr	r2, [pc, #556]	; (80011a0 <HAL_CAN_Init+0x278>)
 8000f74:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a8a      	ldr	r2, [pc, #552]	; (80011a4 <HAL_CAN_Init+0x27c>)
 8000f7a:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a8a      	ldr	r2, [pc, #552]	; (80011a8 <HAL_CAN_Init+0x280>)
 8000f80:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a89      	ldr	r2, [pc, #548]	; (80011ac <HAL_CAN_Init+0x284>)
 8000f86:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a89      	ldr	r2, [pc, #548]	; (80011b0 <HAL_CAN_Init+0x288>)
 8000f8c:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a88      	ldr	r2, [pc, #544]	; (80011b4 <HAL_CAN_Init+0x28c>)
 8000f92:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d102      	bne.n	8000fa2 <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a86      	ldr	r2, [pc, #536]	; (80011b8 <HAL_CAN_Init+0x290>)
 8000fa0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	0010      	movs	r0, r2
 8000faa:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fbc:	f7ff fd38 	bl	8000a30 <HAL_GetTick>
 8000fc0:	0003      	movs	r3, r0
 8000fc2:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000fc4:	e013      	b.n	8000fee <HAL_CAN_Init+0xc6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fc6:	f7ff fd33 	bl	8000a30 <HAL_GetTick>
 8000fca:	0002      	movs	r2, r0
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	2b0a      	cmp	r3, #10
 8000fd2:	d90c      	bls.n	8000fee <HAL_CAN_Init+0xc6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd8:	2280      	movs	r2, #128	; 0x80
 8000fda:	0292      	lsls	r2, r2, #10
 8000fdc:	431a      	orrs	r2, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2220      	movs	r2, #32
 8000fe6:	2105      	movs	r1, #5
 8000fe8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e0c5      	b.n	800117a <HAL_CAN_Init+0x252>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	d0e5      	beq.n	8000fc6 <HAL_CAN_Init+0x9e>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2102      	movs	r1, #2
 8001006:	438a      	bics	r2, r1
 8001008:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800100a:	f7ff fd11 	bl	8000a30 <HAL_GetTick>
 800100e:	0003      	movs	r3, r0
 8001010:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001012:	e013      	b.n	800103c <HAL_CAN_Init+0x114>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001014:	f7ff fd0c 	bl	8000a30 <HAL_GetTick>
 8001018:	0002      	movs	r2, r0
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	2b0a      	cmp	r3, #10
 8001020:	d90c      	bls.n	800103c <HAL_CAN_Init+0x114>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001026:	2280      	movs	r2, #128	; 0x80
 8001028:	0292      	lsls	r2, r2, #10
 800102a:	431a      	orrs	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2220      	movs	r2, #32
 8001034:	2105      	movs	r1, #5
 8001036:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	e09e      	b.n	800117a <HAL_CAN_Init+0x252>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	2202      	movs	r2, #2
 8001044:	4013      	ands	r3, r2
 8001046:	d1e5      	bne.n	8001014 <HAL_CAN_Init+0xec>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	7e1b      	ldrb	r3, [r3, #24]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d108      	bne.n	8001062 <HAL_CAN_Init+0x13a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2180      	movs	r1, #128	; 0x80
 800105c:	430a      	orrs	r2, r1
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	e007      	b.n	8001072 <HAL_CAN_Init+0x14a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2180      	movs	r1, #128	; 0x80
 800106e:	438a      	bics	r2, r1
 8001070:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	7e5b      	ldrb	r3, [r3, #25]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d108      	bne.n	800108c <HAL_CAN_Init+0x164>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2140      	movs	r1, #64	; 0x40
 8001086:	430a      	orrs	r2, r1
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	e007      	b.n	800109c <HAL_CAN_Init+0x174>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2140      	movs	r1, #64	; 0x40
 8001098:	438a      	bics	r2, r1
 800109a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	7e9b      	ldrb	r3, [r3, #26]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d108      	bne.n	80010b6 <HAL_CAN_Init+0x18e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2120      	movs	r1, #32
 80010b0:	430a      	orrs	r2, r1
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	e007      	b.n	80010c6 <HAL_CAN_Init+0x19e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2120      	movs	r1, #32
 80010c2:	438a      	bics	r2, r1
 80010c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	7edb      	ldrb	r3, [r3, #27]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d108      	bne.n	80010e0 <HAL_CAN_Init+0x1b8>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2110      	movs	r1, #16
 80010da:	438a      	bics	r2, r1
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	e007      	b.n	80010f0 <HAL_CAN_Init+0x1c8>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2110      	movs	r1, #16
 80010ec:	430a      	orrs	r2, r1
 80010ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	7f1b      	ldrb	r3, [r3, #28]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d108      	bne.n	800110a <HAL_CAN_Init+0x1e2>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2108      	movs	r1, #8
 8001104:	430a      	orrs	r2, r1
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	e007      	b.n	800111a <HAL_CAN_Init+0x1f2>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2108      	movs	r1, #8
 8001116:	438a      	bics	r2, r1
 8001118:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	7f5b      	ldrb	r3, [r3, #29]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d108      	bne.n	8001134 <HAL_CAN_Init+0x20c>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2104      	movs	r1, #4
 800112e:	430a      	orrs	r2, r1
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	e007      	b.n	8001144 <HAL_CAN_Init+0x21c>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2104      	movs	r1, #4
 8001140:	438a      	bics	r2, r1
 8001142:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689a      	ldr	r2, [r3, #8]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	431a      	orrs	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	691b      	ldr	r3, [r3, #16]
 8001152:	431a      	orrs	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	695b      	ldr	r3, [r3, #20]
 8001158:	431a      	orrs	r2, r3
 800115a:	0011      	movs	r1, r2
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	1e5a      	subs	r2, r3, #1
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	430a      	orrs	r2, r1
 8001168:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2220      	movs	r2, #32
 8001174:	2101      	movs	r1, #1
 8001176:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001178:	2300      	movs	r3, #0
}
 800117a:	0018      	movs	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	b004      	add	sp, #16
 8001180:	bd80      	pop	{r7, pc}
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	08000221 	.word	0x08000221
 8001188:	08001c5d 	.word	0x08001c5d
 800118c:	08001c6d 	.word	0x08001c6d
 8001190:	08001c7d 	.word	0x08001c7d
 8001194:	08001bfd 	.word	0x08001bfd
 8001198:	08001c0d 	.word	0x08001c0d
 800119c:	08001c1d 	.word	0x08001c1d
 80011a0:	08001c2d 	.word	0x08001c2d
 80011a4:	08001c3d 	.word	0x08001c3d
 80011a8:	08001c4d 	.word	0x08001c4d
 80011ac:	08001c8d 	.word	0x08001c8d
 80011b0:	08001c9d 	.word	0x08001c9d
 80011b4:	08001cad 	.word	0x08001cad
 80011b8:	0800075d 	.word	0x0800075d

080011bc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011cc:	2013      	movs	r0, #19
 80011ce:	183b      	adds	r3, r7, r0
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	2120      	movs	r1, #32
 80011d4:	5c52      	ldrb	r2, [r2, r1]
 80011d6:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 80011d8:	0002      	movs	r2, r0
 80011da:	18bb      	adds	r3, r7, r2
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d004      	beq.n	80011ec <HAL_CAN_ConfigFilter+0x30>
 80011e2:	18bb      	adds	r3, r7, r2
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d000      	beq.n	80011ec <HAL_CAN_ConfigFilter+0x30>
 80011ea:	e0cd      	b.n	8001388 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80011ec:	697a      	ldr	r2, [r7, #20]
 80011ee:	2380      	movs	r3, #128	; 0x80
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	58d3      	ldr	r3, [r2, r3]
 80011f4:	2201      	movs	r2, #1
 80011f6:	431a      	orrs	r2, r3
 80011f8:	0011      	movs	r1, r2
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	2380      	movs	r3, #128	; 0x80
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	221f      	movs	r2, #31
 8001208:	4013      	ands	r3, r2
 800120a:	2201      	movs	r2, #1
 800120c:	409a      	lsls	r2, r3
 800120e:	0013      	movs	r3, r2
 8001210:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001212:	697a      	ldr	r2, [r7, #20]
 8001214:	2387      	movs	r3, #135	; 0x87
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	58d3      	ldr	r3, [r2, r3]
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	43d2      	mvns	r2, r2
 800121e:	401a      	ands	r2, r3
 8001220:	0011      	movs	r1, r2
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	2387      	movs	r3, #135	; 0x87
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d129      	bne.n	8001286 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	2383      	movs	r3, #131	; 0x83
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	58d3      	ldr	r3, [r2, r3]
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	43d2      	mvns	r2, r2
 800123e:	401a      	ands	r2, r3
 8001240:	0011      	movs	r1, r2
 8001242:	697a      	ldr	r2, [r7, #20]
 8001244:	2383      	movs	r3, #131	; 0x83
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	041b      	lsls	r3, r3, #16
 8001256:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800125c:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	3248      	adds	r2, #72	; 0x48
 8001262:	00d2      	lsls	r2, r2, #3
 8001264:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	041b      	lsls	r3, r3, #16
 8001272:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001278:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800127a:	6979      	ldr	r1, [r7, #20]
 800127c:	3348      	adds	r3, #72	; 0x48
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	18cb      	adds	r3, r1, r3
 8001282:	3304      	adds	r3, #4
 8001284:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d128      	bne.n	80012e0 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800128e:	697a      	ldr	r2, [r7, #20]
 8001290:	2383      	movs	r3, #131	; 0x83
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	58d2      	ldr	r2, [r2, r3]
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	431a      	orrs	r2, r3
 800129a:	0011      	movs	r1, r2
 800129c:	697a      	ldr	r2, [r7, #20]
 800129e:	2383      	movs	r3, #131	; 0x83
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	041b      	lsls	r3, r3, #16
 80012b0:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012b6:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	3248      	adds	r2, #72	; 0x48
 80012bc:	00d2      	lsls	r2, r2, #3
 80012be:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	041b      	lsls	r3, r3, #16
 80012cc:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012d2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012d4:	6979      	ldr	r1, [r7, #20]
 80012d6:	3348      	adds	r3, #72	; 0x48
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	18cb      	adds	r3, r1, r3
 80012dc:	3304      	adds	r3, #4
 80012de:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d10c      	bne.n	8001302 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80012e8:	697a      	ldr	r2, [r7, #20]
 80012ea:	2381      	movs	r3, #129	; 0x81
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	58d3      	ldr	r3, [r2, r3]
 80012f0:	68fa      	ldr	r2, [r7, #12]
 80012f2:	43d2      	mvns	r2, r2
 80012f4:	401a      	ands	r2, r3
 80012f6:	0011      	movs	r1, r2
 80012f8:	697a      	ldr	r2, [r7, #20]
 80012fa:	2381      	movs	r3, #129	; 0x81
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	50d1      	str	r1, [r2, r3]
 8001300:	e00a      	b.n	8001318 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001302:	697a      	ldr	r2, [r7, #20]
 8001304:	2381      	movs	r3, #129	; 0x81
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	58d2      	ldr	r2, [r2, r3]
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	431a      	orrs	r2, r3
 800130e:	0011      	movs	r1, r2
 8001310:	697a      	ldr	r2, [r7, #20]
 8001312:	2381      	movs	r3, #129	; 0x81
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	691b      	ldr	r3, [r3, #16]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d10c      	bne.n	800133a <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001320:	697a      	ldr	r2, [r7, #20]
 8001322:	2385      	movs	r3, #133	; 0x85
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	58d3      	ldr	r3, [r2, r3]
 8001328:	68fa      	ldr	r2, [r7, #12]
 800132a:	43d2      	mvns	r2, r2
 800132c:	401a      	ands	r2, r3
 800132e:	0011      	movs	r1, r2
 8001330:	697a      	ldr	r2, [r7, #20]
 8001332:	2385      	movs	r3, #133	; 0x85
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	50d1      	str	r1, [r2, r3]
 8001338:	e00a      	b.n	8001350 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800133a:	697a      	ldr	r2, [r7, #20]
 800133c:	2385      	movs	r3, #133	; 0x85
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	58d2      	ldr	r2, [r2, r3]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	431a      	orrs	r2, r3
 8001346:	0011      	movs	r1, r2
 8001348:	697a      	ldr	r2, [r7, #20]
 800134a:	2385      	movs	r3, #133	; 0x85
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	6a1b      	ldr	r3, [r3, #32]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d10a      	bne.n	800136e <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001358:	697a      	ldr	r2, [r7, #20]
 800135a:	2387      	movs	r3, #135	; 0x87
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	58d2      	ldr	r2, [r2, r3]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	431a      	orrs	r2, r3
 8001364:	0011      	movs	r1, r2
 8001366:	697a      	ldr	r2, [r7, #20]
 8001368:	2387      	movs	r3, #135	; 0x87
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800136e:	697a      	ldr	r2, [r7, #20]
 8001370:	2380      	movs	r3, #128	; 0x80
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	58d3      	ldr	r3, [r2, r3]
 8001376:	2201      	movs	r2, #1
 8001378:	4393      	bics	r3, r2
 800137a:	0019      	movs	r1, r3
 800137c:	697a      	ldr	r2, [r7, #20]
 800137e:	2380      	movs	r3, #128	; 0x80
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8001384:	2300      	movs	r3, #0
 8001386:	e007      	b.n	8001398 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138c:	2280      	movs	r2, #128	; 0x80
 800138e:	02d2      	lsls	r2, r2, #11
 8001390:	431a      	orrs	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
  }
}
 8001398:	0018      	movs	r0, r3
 800139a:	46bd      	mov	sp, r7
 800139c:	b006      	add	sp, #24
 800139e:	bd80      	pop	{r7, pc}

080013a0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2220      	movs	r2, #32
 80013ac:	5c9b      	ldrb	r3, [r3, r2]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d12f      	bne.n	8001414 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2220      	movs	r2, #32
 80013b8:	2102      	movs	r1, #2
 80013ba:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2101      	movs	r1, #1
 80013c8:	438a      	bics	r2, r1
 80013ca:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80013cc:	f7ff fb30 	bl	8000a30 <HAL_GetTick>
 80013d0:	0003      	movs	r3, r0
 80013d2:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013d4:	e013      	b.n	80013fe <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013d6:	f7ff fb2b 	bl	8000a30 <HAL_GetTick>
 80013da:	0002      	movs	r2, r0
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2b0a      	cmp	r3, #10
 80013e2:	d90c      	bls.n	80013fe <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e8:	2280      	movs	r2, #128	; 0x80
 80013ea:	0292      	lsls	r2, r2, #10
 80013ec:	431a      	orrs	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2220      	movs	r2, #32
 80013f6:	2105      	movs	r1, #5
 80013f8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e012      	b.n	8001424 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2201      	movs	r2, #1
 8001406:	4013      	ands	r3, r2
 8001408:	d1e5      	bne.n	80013d6 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001410:	2300      	movs	r3, #0
 8001412:	e007      	b.n	8001424 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001418:	2280      	movs	r2, #128	; 0x80
 800141a:	0312      	lsls	r2, r2, #12
 800141c:	431a      	orrs	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
  }
}
 8001424:	0018      	movs	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	b004      	add	sp, #16
 800142a:	bd80      	pop	{r7, pc}

0800142c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b088      	sub	sp, #32
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
 8001438:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800143a:	201f      	movs	r0, #31
 800143c:	183b      	adds	r3, r7, r0
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	2120      	movs	r1, #32
 8001442:	5c52      	ldrb	r2, [r2, r1]
 8001444:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800144e:	183b      	adds	r3, r7, r0
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d004      	beq.n	8001460 <HAL_CAN_AddTxMessage+0x34>
 8001456:	183b      	adds	r3, r7, r0
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b02      	cmp	r3, #2
 800145c:	d000      	beq.n	8001460 <HAL_CAN_AddTxMessage+0x34>
 800145e:	e0ab      	b.n	80015b8 <HAL_CAN_AddTxMessage+0x18c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	2380      	movs	r3, #128	; 0x80
 8001464:	04db      	lsls	r3, r3, #19
 8001466:	4013      	ands	r3, r2
 8001468:	d10a      	bne.n	8001480 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	2380      	movs	r3, #128	; 0x80
 800146e:	051b      	lsls	r3, r3, #20
 8001470:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001472:	d105      	bne.n	8001480 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	2380      	movs	r3, #128	; 0x80
 8001478:	055b      	lsls	r3, r3, #21
 800147a:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800147c:	d100      	bne.n	8001480 <HAL_CAN_AddTxMessage+0x54>
 800147e:	e092      	b.n	80015a6 <HAL_CAN_AddTxMessage+0x17a>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	0e1b      	lsrs	r3, r3, #24
 8001484:	2203      	movs	r2, #3
 8001486:	4013      	ands	r3, r2
 8001488:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800148a:	2201      	movs	r2, #1
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	409a      	lsls	r2, r3
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d10c      	bne.n	80014b6 <HAL_CAN_AddTxMessage+0x8a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4311      	orrs	r1, r2
 80014ac:	697a      	ldr	r2, [r7, #20]
 80014ae:	3218      	adds	r2, #24
 80014b0:	0112      	lsls	r2, r2, #4
 80014b2:	50d1      	str	r1, [r2, r3]
 80014b4:	e00f      	b.n	80014d6 <HAL_CAN_AddTxMessage+0xaa>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014c0:	431a      	orrs	r2, r3
 80014c2:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 80014cc:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	3218      	adds	r2, #24
 80014d2:	0112      	lsls	r2, r2, #4
 80014d4:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6819      	ldr	r1, [r3, #0]
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	691a      	ldr	r2, [r3, #16]
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	3318      	adds	r3, #24
 80014e2:	011b      	lsls	r3, r3, #4
 80014e4:	18cb      	adds	r3, r1, r3
 80014e6:	3304      	adds	r3, #4
 80014e8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	7d1b      	ldrb	r3, [r3, #20]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d112      	bne.n	8001518 <HAL_CAN_AddTxMessage+0xec>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	3318      	adds	r3, #24
 80014fa:	011b      	lsls	r3, r3, #4
 80014fc:	18d3      	adds	r3, r2, r3
 80014fe:	3304      	adds	r3, #4
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	6819      	ldr	r1, [r3, #0]
 8001506:	2380      	movs	r3, #128	; 0x80
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	431a      	orrs	r2, r3
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	3318      	adds	r3, #24
 8001510:	011b      	lsls	r3, r3, #4
 8001512:	18cb      	adds	r3, r1, r3
 8001514:	3304      	adds	r3, #4
 8001516:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3307      	adds	r3, #7
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	061a      	lsls	r2, r3, #24
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3306      	adds	r3, #6
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	041b      	lsls	r3, r3, #16
 8001528:	431a      	orrs	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	3305      	adds	r3, #5
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	021b      	lsls	r3, r3, #8
 8001532:	431a      	orrs	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3304      	adds	r3, #4
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	0019      	movs	r1, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	6818      	ldr	r0, [r3, #0]
 8001540:	430a      	orrs	r2, r1
 8001542:	6979      	ldr	r1, [r7, #20]
 8001544:	23c6      	movs	r3, #198	; 0xc6
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	0109      	lsls	r1, r1, #4
 800154a:	1841      	adds	r1, r0, r1
 800154c:	18cb      	adds	r3, r1, r3
 800154e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3303      	adds	r3, #3
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	061a      	lsls	r2, r3, #24
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3302      	adds	r3, #2
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	041b      	lsls	r3, r3, #16
 8001560:	431a      	orrs	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	3301      	adds	r3, #1
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	021b      	lsls	r3, r3, #8
 800156a:	431a      	orrs	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	0019      	movs	r1, r3
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6818      	ldr	r0, [r3, #0]
 8001576:	430a      	orrs	r2, r1
 8001578:	6979      	ldr	r1, [r7, #20]
 800157a:	23c4      	movs	r3, #196	; 0xc4
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	0109      	lsls	r1, r1, #4
 8001580:	1841      	adds	r1, r0, r1
 8001582:	18cb      	adds	r3, r1, r3
 8001584:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	697a      	ldr	r2, [r7, #20]
 800158c:	3218      	adds	r2, #24
 800158e:	0112      	lsls	r2, r2, #4
 8001590:	58d2      	ldr	r2, [r2, r3]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2101      	movs	r1, #1
 8001598:	4311      	orrs	r1, r2
 800159a:	697a      	ldr	r2, [r7, #20]
 800159c:	3218      	adds	r2, #24
 800159e:	0112      	lsls	r2, r2, #4
 80015a0:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 80015a2:	2300      	movs	r3, #0
 80015a4:	e010      	b.n	80015c8 <HAL_CAN_AddTxMessage+0x19c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015aa:	2280      	movs	r2, #128	; 0x80
 80015ac:	0392      	lsls	r2, r2, #14
 80015ae:	431a      	orrs	r2, r3
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e007      	b.n	80015c8 <HAL_CAN_AddTxMessage+0x19c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015bc:	2280      	movs	r2, #128	; 0x80
 80015be:	02d2      	lsls	r2, r2, #11
 80015c0:	431a      	orrs	r2, r3
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
  }
}
 80015c8:	0018      	movs	r0, r3
 80015ca:	46bd      	mov	sp, r7
 80015cc:	b008      	add	sp, #32
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
 80015dc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015de:	2017      	movs	r0, #23
 80015e0:	183b      	adds	r3, r7, r0
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	2120      	movs	r1, #32
 80015e6:	5c52      	ldrb	r2, [r2, r1]
 80015e8:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80015ea:	0002      	movs	r2, r0
 80015ec:	18bb      	adds	r3, r7, r2
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d004      	beq.n	80015fe <HAL_CAN_GetRxMessage+0x2e>
 80015f4:	18bb      	adds	r3, r7, r2
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d000      	beq.n	80015fe <HAL_CAN_GetRxMessage+0x2e>
 80015fc:	e107      	b.n	800180e <HAL_CAN_GetRxMessage+0x23e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d10e      	bne.n	8001622 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	2203      	movs	r2, #3
 800160c:	4013      	ands	r3, r2
 800160e:	d117      	bne.n	8001640 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001614:	2280      	movs	r2, #128	; 0x80
 8001616:	0392      	lsls	r2, r2, #14
 8001618:	431a      	orrs	r2, r3
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e0fd      	b.n	800181e <HAL_CAN_GetRxMessage+0x24e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	2203      	movs	r2, #3
 800162a:	4013      	ands	r3, r2
 800162c:	d108      	bne.n	8001640 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001632:	2280      	movs	r2, #128	; 0x80
 8001634:	0392      	lsls	r2, r2, #14
 8001636:	431a      	orrs	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e0ee      	b.n	800181e <HAL_CAN_GetRxMessage+0x24e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	68ba      	ldr	r2, [r7, #8]
 8001646:	321b      	adds	r2, #27
 8001648:	0112      	lsls	r2, r2, #4
 800164a:	58d3      	ldr	r3, [r2, r3]
 800164c:	2204      	movs	r2, #4
 800164e:	401a      	ands	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d10b      	bne.n	8001674 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68ba      	ldr	r2, [r7, #8]
 8001662:	321b      	adds	r2, #27
 8001664:	0112      	lsls	r2, r2, #4
 8001666:	58d3      	ldr	r3, [r2, r3]
 8001668:	0d5b      	lsrs	r3, r3, #21
 800166a:	055b      	lsls	r3, r3, #21
 800166c:	0d5a      	lsrs	r2, r3, #21
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	e00a      	b.n	800168a <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	68ba      	ldr	r2, [r7, #8]
 800167a:	321b      	adds	r2, #27
 800167c:	0112      	lsls	r2, r2, #4
 800167e:	58d3      	ldr	r3, [r2, r3]
 8001680:	08db      	lsrs	r3, r3, #3
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	08da      	lsrs	r2, r3, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68ba      	ldr	r2, [r7, #8]
 8001690:	321b      	adds	r2, #27
 8001692:	0112      	lsls	r2, r2, #4
 8001694:	58d3      	ldr	r3, [r2, r3]
 8001696:	2202      	movs	r2, #2
 8001698:	401a      	ands	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	331b      	adds	r3, #27
 80016a6:	011b      	lsls	r3, r3, #4
 80016a8:	18d3      	adds	r3, r2, r3
 80016aa:	3304      	adds	r3, #4
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2208      	movs	r2, #8
 80016b0:	4013      	ands	r3, r2
 80016b2:	d003      	beq.n	80016bc <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2208      	movs	r2, #8
 80016b8:	611a      	str	r2, [r3, #16]
 80016ba:	e00b      	b.n	80016d4 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	331b      	adds	r3, #27
 80016c4:	011b      	lsls	r3, r3, #4
 80016c6:	18d3      	adds	r3, r2, r3
 80016c8:	3304      	adds	r3, #4
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	220f      	movs	r2, #15
 80016ce:	401a      	ands	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	331b      	adds	r3, #27
 80016dc:	011b      	lsls	r3, r3, #4
 80016de:	18d3      	adds	r3, r2, r3
 80016e0:	3304      	adds	r3, #4
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	0a1b      	lsrs	r3, r3, #8
 80016e6:	22ff      	movs	r2, #255	; 0xff
 80016e8:	401a      	ands	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	331b      	adds	r3, #27
 80016f6:	011b      	lsls	r3, r3, #4
 80016f8:	18d3      	adds	r3, r2, r3
 80016fa:	3304      	adds	r3, #4
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	0c1b      	lsrs	r3, r3, #16
 8001700:	041b      	lsls	r3, r3, #16
 8001702:	0c1a      	lsrs	r2, r3, #16
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6819      	ldr	r1, [r3, #0]
 800170c:	68ba      	ldr	r2, [r7, #8]
 800170e:	23dc      	movs	r3, #220	; 0xdc
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	0112      	lsls	r2, r2, #4
 8001714:	188a      	adds	r2, r1, r2
 8001716:	18d3      	adds	r3, r2, r3
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	b2da      	uxtb	r2, r3
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6819      	ldr	r1, [r3, #0]
 8001724:	68ba      	ldr	r2, [r7, #8]
 8001726:	23dc      	movs	r3, #220	; 0xdc
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	0112      	lsls	r2, r2, #4
 800172c:	188a      	adds	r2, r1, r2
 800172e:	18d3      	adds	r3, r2, r3
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	0a1a      	lsrs	r2, r3, #8
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	3301      	adds	r3, #1
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6819      	ldr	r1, [r3, #0]
 8001740:	68ba      	ldr	r2, [r7, #8]
 8001742:	23dc      	movs	r3, #220	; 0xdc
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	0112      	lsls	r2, r2, #4
 8001748:	188a      	adds	r2, r1, r2
 800174a:	18d3      	adds	r3, r2, r3
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	0c1a      	lsrs	r2, r3, #16
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	3302      	adds	r3, #2
 8001754:	b2d2      	uxtb	r2, r2
 8001756:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	6819      	ldr	r1, [r3, #0]
 800175c:	68ba      	ldr	r2, [r7, #8]
 800175e:	23dc      	movs	r3, #220	; 0xdc
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	0112      	lsls	r2, r2, #4
 8001764:	188a      	adds	r2, r1, r2
 8001766:	18d3      	adds	r3, r2, r3
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	0e1a      	lsrs	r2, r3, #24
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	3303      	adds	r3, #3
 8001770:	b2d2      	uxtb	r2, r2
 8001772:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6819      	ldr	r1, [r3, #0]
 8001778:	68ba      	ldr	r2, [r7, #8]
 800177a:	23de      	movs	r3, #222	; 0xde
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	0112      	lsls	r2, r2, #4
 8001780:	188a      	adds	r2, r1, r2
 8001782:	18d3      	adds	r3, r2, r3
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	3304      	adds	r3, #4
 800178a:	b2d2      	uxtb	r2, r2
 800178c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	6819      	ldr	r1, [r3, #0]
 8001792:	68ba      	ldr	r2, [r7, #8]
 8001794:	23de      	movs	r3, #222	; 0xde
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	0112      	lsls	r2, r2, #4
 800179a:	188a      	adds	r2, r1, r2
 800179c:	18d3      	adds	r3, r2, r3
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	0a1a      	lsrs	r2, r3, #8
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	3305      	adds	r3, #5
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6819      	ldr	r1, [r3, #0]
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	23de      	movs	r3, #222	; 0xde
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	0112      	lsls	r2, r2, #4
 80017b6:	188a      	adds	r2, r1, r2
 80017b8:	18d3      	adds	r3, r2, r3
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	0c1a      	lsrs	r2, r3, #16
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	3306      	adds	r3, #6
 80017c2:	b2d2      	uxtb	r2, r2
 80017c4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	6819      	ldr	r1, [r3, #0]
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	23de      	movs	r3, #222	; 0xde
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	0112      	lsls	r2, r2, #4
 80017d2:	188a      	adds	r2, r1, r2
 80017d4:	18d3      	adds	r3, r2, r3
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	0e1a      	lsrs	r2, r3, #24
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	3307      	adds	r3, #7
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d108      	bne.n	80017fa <HAL_CAN_GetRxMessage+0x22a>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	68da      	ldr	r2, [r3, #12]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2120      	movs	r1, #32
 80017f4:	430a      	orrs	r2, r1
 80017f6:	60da      	str	r2, [r3, #12]
 80017f8:	e007      	b.n	800180a <HAL_CAN_GetRxMessage+0x23a>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	691a      	ldr	r2, [r3, #16]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2120      	movs	r1, #32
 8001806:	430a      	orrs	r2, r1
 8001808:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	e007      	b.n	800181e <HAL_CAN_GetRxMessage+0x24e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001812:	2280      	movs	r2, #128	; 0x80
 8001814:	02d2      	lsls	r2, r2, #11
 8001816:	431a      	orrs	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
  }
}
 800181e:	0018      	movs	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	b006      	add	sp, #24
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b084      	sub	sp, #16
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001830:	200f      	movs	r0, #15
 8001832:	183b      	adds	r3, r7, r0
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	2120      	movs	r1, #32
 8001838:	5c52      	ldrb	r2, [r2, r1]
 800183a:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800183c:	0002      	movs	r2, r0
 800183e:	18bb      	adds	r3, r7, r2
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d003      	beq.n	800184e <HAL_CAN_ActivateNotification+0x28>
 8001846:	18bb      	adds	r3, r7, r2
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b02      	cmp	r3, #2
 800184c:	d109      	bne.n	8001862 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6959      	ldr	r1, [r3, #20]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	430a      	orrs	r2, r1
 800185c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	e007      	b.n	8001872 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001866:	2280      	movs	r2, #128	; 0x80
 8001868:	02d2      	lsls	r2, r2, #11
 800186a:	431a      	orrs	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
  }
}
 8001872:	0018      	movs	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	b004      	add	sp, #16
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b08a      	sub	sp, #40	; 0x28
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001882:	2300      	movs	r3, #0
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80018b6:	6a3b      	ldr	r3, [r7, #32]
 80018b8:	2201      	movs	r2, #1
 80018ba:	4013      	ands	r3, r2
 80018bc:	d100      	bne.n	80018c0 <HAL_CAN_IRQHandler+0x46>
 80018be:	e08a      	b.n	80019d6 <HAL_CAN_IRQHandler+0x15c>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	2201      	movs	r2, #1
 80018c4:	4013      	ands	r3, r2
 80018c6:	d026      	beq.n	8001916 <HAL_CAN_IRQHandler+0x9c>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2201      	movs	r2, #1
 80018ce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	2202      	movs	r2, #2
 80018d4:	4013      	ands	r3, r2
 80018d6:	d005      	beq.n	80018e4 <HAL_CAN_IRQHandler+0x6a>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	0010      	movs	r0, r2
 80018e0:	4798      	blx	r3
 80018e2:	e018      	b.n	8001916 <HAL_CAN_IRQHandler+0x9c>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	2204      	movs	r2, #4
 80018e8:	4013      	ands	r3, r2
 80018ea:	d005      	beq.n	80018f8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	2280      	movs	r2, #128	; 0x80
 80018f0:	0112      	lsls	r2, r2, #4
 80018f2:	4313      	orrs	r3, r2
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
 80018f6:	e00e      	b.n	8001916 <HAL_CAN_IRQHandler+0x9c>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	2208      	movs	r2, #8
 80018fc:	4013      	ands	r3, r2
 80018fe:	d005      	beq.n	800190c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	2280      	movs	r2, #128	; 0x80
 8001904:	0152      	lsls	r2, r2, #5
 8001906:	4313      	orrs	r3, r2
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
 800190a:	e004      	b.n	8001916 <HAL_CAN_IRQHandler+0x9c>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	0010      	movs	r0, r2
 8001914:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	2380      	movs	r3, #128	; 0x80
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	4013      	ands	r3, r2
 800191e:	d02a      	beq.n	8001976 <HAL_CAN_IRQHandler+0xfc>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2280      	movs	r2, #128	; 0x80
 8001926:	0052      	lsls	r2, r2, #1
 8001928:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	2380      	movs	r3, #128	; 0x80
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4013      	ands	r3, r2
 8001932:	d005      	beq.n	8001940 <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	0010      	movs	r0, r2
 800193c:	4798      	blx	r3
 800193e:	e01a      	b.n	8001976 <HAL_CAN_IRQHandler+0xfc>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	2380      	movs	r3, #128	; 0x80
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	4013      	ands	r3, r2
 8001948:	d005      	beq.n	8001956 <HAL_CAN_IRQHandler+0xdc>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	2280      	movs	r2, #128	; 0x80
 800194e:	0192      	lsls	r2, r2, #6
 8001950:	4313      	orrs	r3, r2
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
 8001954:	e00f      	b.n	8001976 <HAL_CAN_IRQHandler+0xfc>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	2380      	movs	r3, #128	; 0x80
 800195a:	011b      	lsls	r3, r3, #4
 800195c:	4013      	ands	r3, r2
 800195e:	d005      	beq.n	800196c <HAL_CAN_IRQHandler+0xf2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	2280      	movs	r2, #128	; 0x80
 8001964:	01d2      	lsls	r2, r2, #7
 8001966:	4313      	orrs	r3, r2
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
 800196a:	e004      	b.n	8001976 <HAL_CAN_IRQHandler+0xfc>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	0010      	movs	r0, r2
 8001974:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	2380      	movs	r3, #128	; 0x80
 800197a:	025b      	lsls	r3, r3, #9
 800197c:	4013      	ands	r3, r2
 800197e:	d02a      	beq.n	80019d6 <HAL_CAN_IRQHandler+0x15c>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2280      	movs	r2, #128	; 0x80
 8001986:	0252      	lsls	r2, r2, #9
 8001988:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	2380      	movs	r3, #128	; 0x80
 800198e:	029b      	lsls	r3, r3, #10
 8001990:	4013      	ands	r3, r2
 8001992:	d005      	beq.n	80019a0 <HAL_CAN_IRQHandler+0x126>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	0010      	movs	r0, r2
 800199c:	4798      	blx	r3
 800199e:	e01a      	b.n	80019d6 <HAL_CAN_IRQHandler+0x15c>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	2380      	movs	r3, #128	; 0x80
 80019a4:	02db      	lsls	r3, r3, #11
 80019a6:	4013      	ands	r3, r2
 80019a8:	d005      	beq.n	80019b6 <HAL_CAN_IRQHandler+0x13c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	2280      	movs	r2, #128	; 0x80
 80019ae:	0212      	lsls	r2, r2, #8
 80019b0:	4313      	orrs	r3, r2
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
 80019b4:	e00f      	b.n	80019d6 <HAL_CAN_IRQHandler+0x15c>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	2380      	movs	r3, #128	; 0x80
 80019ba:	031b      	lsls	r3, r3, #12
 80019bc:	4013      	ands	r3, r2
 80019be:	d005      	beq.n	80019cc <HAL_CAN_IRQHandler+0x152>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	2280      	movs	r2, #128	; 0x80
 80019c4:	0252      	lsls	r2, r2, #9
 80019c6:	4313      	orrs	r3, r2
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
 80019ca:	e004      	b.n	80019d6 <HAL_CAN_IRQHandler+0x15c>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	0010      	movs	r0, r2
 80019d4:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80019d6:	6a3b      	ldr	r3, [r7, #32]
 80019d8:	2208      	movs	r2, #8
 80019da:	4013      	ands	r3, r2
 80019dc:	d00c      	beq.n	80019f8 <HAL_CAN_IRQHandler+0x17e>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	2210      	movs	r2, #16
 80019e2:	4013      	ands	r3, r2
 80019e4:	d008      	beq.n	80019f8 <HAL_CAN_IRQHandler+0x17e>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	2280      	movs	r2, #128	; 0x80
 80019ea:	0092      	lsls	r2, r2, #2
 80019ec:	4313      	orrs	r3, r2
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2210      	movs	r2, #16
 80019f6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80019f8:	6a3b      	ldr	r3, [r7, #32]
 80019fa:	2204      	movs	r2, #4
 80019fc:	4013      	ands	r3, r2
 80019fe:	d00c      	beq.n	8001a1a <HAL_CAN_IRQHandler+0x1a0>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	2208      	movs	r2, #8
 8001a04:	4013      	ands	r3, r2
 8001a06:	d008      	beq.n	8001a1a <HAL_CAN_IRQHandler+0x1a0>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2208      	movs	r2, #8
 8001a0e:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	0010      	movs	r0, r2
 8001a18:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001a1a:	6a3b      	ldr	r3, [r7, #32]
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d00a      	beq.n	8001a38 <HAL_CAN_IRQHandler+0x1be>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	2203      	movs	r2, #3
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	d004      	beq.n	8001a38 <HAL_CAN_IRQHandler+0x1be>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	0010      	movs	r0, r2
 8001a36:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001a38:	6a3b      	ldr	r3, [r7, #32]
 8001a3a:	2240      	movs	r2, #64	; 0x40
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	d00c      	beq.n	8001a5a <HAL_CAN_IRQHandler+0x1e0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	2210      	movs	r2, #16
 8001a44:	4013      	ands	r3, r2
 8001a46:	d008      	beq.n	8001a5a <HAL_CAN_IRQHandler+0x1e0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	2280      	movs	r2, #128	; 0x80
 8001a4c:	00d2      	lsls	r2, r2, #3
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2210      	movs	r2, #16
 8001a58:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001a5a:	6a3b      	ldr	r3, [r7, #32]
 8001a5c:	2220      	movs	r2, #32
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d00c      	beq.n	8001a7c <HAL_CAN_IRQHandler+0x202>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	2208      	movs	r2, #8
 8001a66:	4013      	ands	r3, r2
 8001a68:	d008      	beq.n	8001a7c <HAL_CAN_IRQHandler+0x202>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2208      	movs	r2, #8
 8001a70:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	0010      	movs	r0, r2
 8001a7a:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001a7c:	6a3b      	ldr	r3, [r7, #32]
 8001a7e:	2210      	movs	r2, #16
 8001a80:	4013      	ands	r3, r2
 8001a82:	d00a      	beq.n	8001a9a <HAL_CAN_IRQHandler+0x220>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	2203      	movs	r2, #3
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d004      	beq.n	8001a9a <HAL_CAN_IRQHandler+0x220>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	0010      	movs	r0, r2
 8001a98:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001a9a:	6a3a      	ldr	r2, [r7, #32]
 8001a9c:	2380      	movs	r3, #128	; 0x80
 8001a9e:	029b      	lsls	r3, r3, #10
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	d00c      	beq.n	8001abe <HAL_CAN_IRQHandler+0x244>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	2210      	movs	r2, #16
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	d008      	beq.n	8001abe <HAL_CAN_IRQHandler+0x244>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2210      	movs	r2, #16
 8001ab2:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	0010      	movs	r0, r2
 8001abc:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001abe:	6a3a      	ldr	r2, [r7, #32]
 8001ac0:	2380      	movs	r3, #128	; 0x80
 8001ac2:	025b      	lsls	r3, r3, #9
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	d00c      	beq.n	8001ae2 <HAL_CAN_IRQHandler+0x268>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	2208      	movs	r2, #8
 8001acc:	4013      	ands	r3, r2
 8001ace:	d008      	beq.n	8001ae2 <HAL_CAN_IRQHandler+0x268>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2208      	movs	r2, #8
 8001ad6:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	0010      	movs	r0, r2
 8001ae0:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001ae2:	6a3a      	ldr	r2, [r7, #32]
 8001ae4:	2380      	movs	r3, #128	; 0x80
 8001ae6:	021b      	lsls	r3, r3, #8
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d100      	bne.n	8001aee <HAL_CAN_IRQHandler+0x274>
 8001aec:	e074      	b.n	8001bd8 <HAL_CAN_IRQHandler+0x35e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	2204      	movs	r2, #4
 8001af2:	4013      	ands	r3, r2
 8001af4:	d100      	bne.n	8001af8 <HAL_CAN_IRQHandler+0x27e>
 8001af6:	e06b      	b.n	8001bd0 <HAL_CAN_IRQHandler+0x356>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001af8:	6a3a      	ldr	r2, [r7, #32]
 8001afa:	2380      	movs	r3, #128	; 0x80
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	4013      	ands	r3, r2
 8001b00:	d007      	beq.n	8001b12 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2201      	movs	r2, #1
 8001b06:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b08:	d003      	beq.n	8001b12 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b12:	6a3a      	ldr	r2, [r7, #32]
 8001b14:	2380      	movs	r3, #128	; 0x80
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4013      	ands	r3, r2
 8001b1a:	d007      	beq.n	8001b2c <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2202      	movs	r2, #2
 8001b20:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b22:	d003      	beq.n	8001b2c <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b26:	2202      	movs	r2, #2
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b2c:	6a3a      	ldr	r2, [r7, #32]
 8001b2e:	2380      	movs	r3, #128	; 0x80
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	4013      	ands	r3, r2
 8001b34:	d007      	beq.n	8001b46 <HAL_CAN_IRQHandler+0x2cc>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2204      	movs	r2, #4
 8001b3a:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b3c:	d003      	beq.n	8001b46 <HAL_CAN_IRQHandler+0x2cc>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	2204      	movs	r2, #4
 8001b42:	4313      	orrs	r3, r2
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b46:	6a3a      	ldr	r2, [r7, #32]
 8001b48:	2380      	movs	r3, #128	; 0x80
 8001b4a:	011b      	lsls	r3, r3, #4
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	d03f      	beq.n	8001bd0 <HAL_CAN_IRQHandler+0x356>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2270      	movs	r2, #112	; 0x70
 8001b54:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b56:	d03b      	beq.n	8001bd0 <HAL_CAN_IRQHandler+0x356>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2270      	movs	r2, #112	; 0x70
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	2b60      	cmp	r3, #96	; 0x60
 8001b60:	d027      	beq.n	8001bb2 <HAL_CAN_IRQHandler+0x338>
 8001b62:	d82c      	bhi.n	8001bbe <HAL_CAN_IRQHandler+0x344>
 8001b64:	2b50      	cmp	r3, #80	; 0x50
 8001b66:	d01f      	beq.n	8001ba8 <HAL_CAN_IRQHandler+0x32e>
 8001b68:	d829      	bhi.n	8001bbe <HAL_CAN_IRQHandler+0x344>
 8001b6a:	2b40      	cmp	r3, #64	; 0x40
 8001b6c:	d017      	beq.n	8001b9e <HAL_CAN_IRQHandler+0x324>
 8001b6e:	d826      	bhi.n	8001bbe <HAL_CAN_IRQHandler+0x344>
 8001b70:	2b30      	cmp	r3, #48	; 0x30
 8001b72:	d00f      	beq.n	8001b94 <HAL_CAN_IRQHandler+0x31a>
 8001b74:	d823      	bhi.n	8001bbe <HAL_CAN_IRQHandler+0x344>
 8001b76:	2b10      	cmp	r3, #16
 8001b78:	d002      	beq.n	8001b80 <HAL_CAN_IRQHandler+0x306>
 8001b7a:	2b20      	cmp	r3, #32
 8001b7c:	d005      	beq.n	8001b8a <HAL_CAN_IRQHandler+0x310>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001b7e:	e01e      	b.n	8001bbe <HAL_CAN_IRQHandler+0x344>
            errorcode |= HAL_CAN_ERROR_STF;
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	2208      	movs	r2, #8
 8001b84:	4313      	orrs	r3, r2
 8001b86:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b88:	e01a      	b.n	8001bc0 <HAL_CAN_IRQHandler+0x346>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	2210      	movs	r2, #16
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b92:	e015      	b.n	8001bc0 <HAL_CAN_IRQHandler+0x346>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b96:	2220      	movs	r2, #32
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b9c:	e010      	b.n	8001bc0 <HAL_CAN_IRQHandler+0x346>
            errorcode |= HAL_CAN_ERROR_BR;
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	2240      	movs	r2, #64	; 0x40
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ba6:	e00b      	b.n	8001bc0 <HAL_CAN_IRQHandler+0x346>
            errorcode |= HAL_CAN_ERROR_BD;
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001baa:	2280      	movs	r2, #128	; 0x80
 8001bac:	4313      	orrs	r3, r2
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bb0:	e006      	b.n	8001bc0 <HAL_CAN_IRQHandler+0x346>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	2280      	movs	r2, #128	; 0x80
 8001bb6:	0052      	lsls	r2, r2, #1
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bbc:	e000      	b.n	8001bc0 <HAL_CAN_IRQHandler+0x346>
            break;
 8001bbe:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	699a      	ldr	r2, [r3, #24]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2170      	movs	r1, #112	; 0x70
 8001bcc:	438a      	bics	r2, r1
 8001bce:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2204      	movs	r2, #4
 8001bd6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d00a      	beq.n	8001bf4 <HAL_CAN_IRQHandler+0x37a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	431a      	orrs	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	0010      	movs	r0, r2
 8001bf2:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001bf4:	46c0      	nop			; (mov r8, r8)
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	b00a      	add	sp, #40	; 0x28
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001c04:	46c0      	nop			; (mov r8, r8)
 8001c06:	46bd      	mov	sp, r7
 8001c08:	b002      	add	sp, #8
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001c14:	46c0      	nop			; (mov r8, r8)
 8001c16:	46bd      	mov	sp, r7
 8001c18:	b002      	add	sp, #8
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001c24:	46c0      	nop			; (mov r8, r8)
 8001c26:	46bd      	mov	sp, r7
 8001c28:	b002      	add	sp, #8
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001c34:	46c0      	nop			; (mov r8, r8)
 8001c36:	46bd      	mov	sp, r7
 8001c38:	b002      	add	sp, #8
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001c44:	46c0      	nop			; (mov r8, r8)
 8001c46:	46bd      	mov	sp, r7
 8001c48:	b002      	add	sp, #8
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001c54:	46c0      	nop			; (mov r8, r8)
 8001c56:	46bd      	mov	sp, r7
 8001c58:	b002      	add	sp, #8
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001c64:	46c0      	nop			; (mov r8, r8)
 8001c66:	46bd      	mov	sp, r7
 8001c68:	b002      	add	sp, #8
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001c74:	46c0      	nop			; (mov r8, r8)
 8001c76:	46bd      	mov	sp, r7
 8001c78:	b002      	add	sp, #8
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001c84:	46c0      	nop			; (mov r8, r8)
 8001c86:	46bd      	mov	sp, r7
 8001c88:	b002      	add	sp, #8
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001c94:	46c0      	nop			; (mov r8, r8)
 8001c96:	46bd      	mov	sp, r7
 8001c98:	b002      	add	sp, #8
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001ca4:	46c0      	nop			; (mov r8, r8)
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	b002      	add	sp, #8
 8001caa:	bd80      	pop	{r7, pc}

08001cac <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001cb4:	46c0      	nop			; (mov r8, r8)
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	b002      	add	sp, #8
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	0002      	movs	r2, r0
 8001cc4:	1dfb      	adds	r3, r7, #7
 8001cc6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001cc8:	1dfb      	adds	r3, r7, #7
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b7f      	cmp	r3, #127	; 0x7f
 8001cce:	d809      	bhi.n	8001ce4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cd0:	1dfb      	adds	r3, r7, #7
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	001a      	movs	r2, r3
 8001cd6:	231f      	movs	r3, #31
 8001cd8:	401a      	ands	r2, r3
 8001cda:	4b04      	ldr	r3, [pc, #16]	; (8001cec <__NVIC_EnableIRQ+0x30>)
 8001cdc:	2101      	movs	r1, #1
 8001cde:	4091      	lsls	r1, r2
 8001ce0:	000a      	movs	r2, r1
 8001ce2:	601a      	str	r2, [r3, #0]
  }
}
 8001ce4:	46c0      	nop			; (mov r8, r8)
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	b002      	add	sp, #8
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	e000e100 	.word	0xe000e100

08001cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf0:	b590      	push	{r4, r7, lr}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	0002      	movs	r2, r0
 8001cf8:	6039      	str	r1, [r7, #0]
 8001cfa:	1dfb      	adds	r3, r7, #7
 8001cfc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001cfe:	1dfb      	adds	r3, r7, #7
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	2b7f      	cmp	r3, #127	; 0x7f
 8001d04:	d828      	bhi.n	8001d58 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d06:	4a2f      	ldr	r2, [pc, #188]	; (8001dc4 <__NVIC_SetPriority+0xd4>)
 8001d08:	1dfb      	adds	r3, r7, #7
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	b25b      	sxtb	r3, r3
 8001d0e:	089b      	lsrs	r3, r3, #2
 8001d10:	33c0      	adds	r3, #192	; 0xc0
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	589b      	ldr	r3, [r3, r2]
 8001d16:	1dfa      	adds	r2, r7, #7
 8001d18:	7812      	ldrb	r2, [r2, #0]
 8001d1a:	0011      	movs	r1, r2
 8001d1c:	2203      	movs	r2, #3
 8001d1e:	400a      	ands	r2, r1
 8001d20:	00d2      	lsls	r2, r2, #3
 8001d22:	21ff      	movs	r1, #255	; 0xff
 8001d24:	4091      	lsls	r1, r2
 8001d26:	000a      	movs	r2, r1
 8001d28:	43d2      	mvns	r2, r2
 8001d2a:	401a      	ands	r2, r3
 8001d2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	019b      	lsls	r3, r3, #6
 8001d32:	22ff      	movs	r2, #255	; 0xff
 8001d34:	401a      	ands	r2, r3
 8001d36:	1dfb      	adds	r3, r7, #7
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	4003      	ands	r3, r0
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d44:	481f      	ldr	r0, [pc, #124]	; (8001dc4 <__NVIC_SetPriority+0xd4>)
 8001d46:	1dfb      	adds	r3, r7, #7
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	b25b      	sxtb	r3, r3
 8001d4c:	089b      	lsrs	r3, r3, #2
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	33c0      	adds	r3, #192	; 0xc0
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001d56:	e031      	b.n	8001dbc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d58:	4a1b      	ldr	r2, [pc, #108]	; (8001dc8 <__NVIC_SetPriority+0xd8>)
 8001d5a:	1dfb      	adds	r3, r7, #7
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	0019      	movs	r1, r3
 8001d60:	230f      	movs	r3, #15
 8001d62:	400b      	ands	r3, r1
 8001d64:	3b08      	subs	r3, #8
 8001d66:	089b      	lsrs	r3, r3, #2
 8001d68:	3306      	adds	r3, #6
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	18d3      	adds	r3, r2, r3
 8001d6e:	3304      	adds	r3, #4
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	1dfa      	adds	r2, r7, #7
 8001d74:	7812      	ldrb	r2, [r2, #0]
 8001d76:	0011      	movs	r1, r2
 8001d78:	2203      	movs	r2, #3
 8001d7a:	400a      	ands	r2, r1
 8001d7c:	00d2      	lsls	r2, r2, #3
 8001d7e:	21ff      	movs	r1, #255	; 0xff
 8001d80:	4091      	lsls	r1, r2
 8001d82:	000a      	movs	r2, r1
 8001d84:	43d2      	mvns	r2, r2
 8001d86:	401a      	ands	r2, r3
 8001d88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	019b      	lsls	r3, r3, #6
 8001d8e:	22ff      	movs	r2, #255	; 0xff
 8001d90:	401a      	ands	r2, r3
 8001d92:	1dfb      	adds	r3, r7, #7
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	0018      	movs	r0, r3
 8001d98:	2303      	movs	r3, #3
 8001d9a:	4003      	ands	r3, r0
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001da0:	4809      	ldr	r0, [pc, #36]	; (8001dc8 <__NVIC_SetPriority+0xd8>)
 8001da2:	1dfb      	adds	r3, r7, #7
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	001c      	movs	r4, r3
 8001da8:	230f      	movs	r3, #15
 8001daa:	4023      	ands	r3, r4
 8001dac:	3b08      	subs	r3, #8
 8001dae:	089b      	lsrs	r3, r3, #2
 8001db0:	430a      	orrs	r2, r1
 8001db2:	3306      	adds	r3, #6
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	18c3      	adds	r3, r0, r3
 8001db8:	3304      	adds	r3, #4
 8001dba:	601a      	str	r2, [r3, #0]
}
 8001dbc:	46c0      	nop			; (mov r8, r8)
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	b003      	add	sp, #12
 8001dc2:	bd90      	pop	{r4, r7, pc}
 8001dc4:	e000e100 	.word	0xe000e100
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	1e5a      	subs	r2, r3, #1
 8001dd8:	2380      	movs	r3, #128	; 0x80
 8001dda:	045b      	lsls	r3, r3, #17
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d301      	bcc.n	8001de4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001de0:	2301      	movs	r3, #1
 8001de2:	e010      	b.n	8001e06 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001de4:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <SysTick_Config+0x44>)
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	3a01      	subs	r2, #1
 8001dea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dec:	2301      	movs	r3, #1
 8001dee:	425b      	negs	r3, r3
 8001df0:	2103      	movs	r1, #3
 8001df2:	0018      	movs	r0, r3
 8001df4:	f7ff ff7c 	bl	8001cf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001df8:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <SysTick_Config+0x44>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dfe:	4b04      	ldr	r3, [pc, #16]	; (8001e10 <SysTick_Config+0x44>)
 8001e00:	2207      	movs	r2, #7
 8001e02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	0018      	movs	r0, r3
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	b002      	add	sp, #8
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	46c0      	nop			; (mov r8, r8)
 8001e10:	e000e010 	.word	0xe000e010

08001e14 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60b9      	str	r1, [r7, #8]
 8001e1c:	607a      	str	r2, [r7, #4]
 8001e1e:	210f      	movs	r1, #15
 8001e20:	187b      	adds	r3, r7, r1
 8001e22:	1c02      	adds	r2, r0, #0
 8001e24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001e26:	68ba      	ldr	r2, [r7, #8]
 8001e28:	187b      	adds	r3, r7, r1
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	b25b      	sxtb	r3, r3
 8001e2e:	0011      	movs	r1, r2
 8001e30:	0018      	movs	r0, r3
 8001e32:	f7ff ff5d 	bl	8001cf0 <__NVIC_SetPriority>
}
 8001e36:	46c0      	nop			; (mov r8, r8)
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	b004      	add	sp, #16
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	0002      	movs	r2, r0
 8001e46:	1dfb      	adds	r3, r7, #7
 8001e48:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e4a:	1dfb      	adds	r3, r7, #7
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	b25b      	sxtb	r3, r3
 8001e50:	0018      	movs	r0, r3
 8001e52:	f7ff ff33 	bl	8001cbc <__NVIC_EnableIRQ>
}
 8001e56:	46c0      	nop			; (mov r8, r8)
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	b002      	add	sp, #8
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b082      	sub	sp, #8
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	0018      	movs	r0, r3
 8001e6a:	f7ff ffaf 	bl	8001dcc <SysTick_Config>
 8001e6e:	0003      	movs	r3, r0
}
 8001e70:	0018      	movs	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	b002      	add	sp, #8
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e86:	e149      	b.n	800211c <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	4091      	lsls	r1, r2
 8001e92:	000a      	movs	r2, r1
 8001e94:	4013      	ands	r3, r2
 8001e96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d100      	bne.n	8001ea0 <HAL_GPIO_Init+0x28>
 8001e9e:	e13a      	b.n	8002116 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2203      	movs	r2, #3
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d005      	beq.n	8001eb8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2203      	movs	r2, #3
 8001eb2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d130      	bne.n	8001f1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	2203      	movs	r2, #3
 8001ec4:	409a      	lsls	r2, r3
 8001ec6:	0013      	movs	r3, r2
 8001ec8:	43da      	mvns	r2, r3
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	68da      	ldr	r2, [r3, #12]
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	409a      	lsls	r2, r3
 8001eda:	0013      	movs	r3, r2
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001eee:	2201      	movs	r2, #1
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	409a      	lsls	r2, r3
 8001ef4:	0013      	movs	r3, r2
 8001ef6:	43da      	mvns	r2, r3
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	4013      	ands	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	091b      	lsrs	r3, r3, #4
 8001f04:	2201      	movs	r2, #1
 8001f06:	401a      	ands	r2, r3
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	409a      	lsls	r2, r3
 8001f0c:	0013      	movs	r3, r2
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2203      	movs	r2, #3
 8001f20:	4013      	ands	r3, r2
 8001f22:	2b03      	cmp	r3, #3
 8001f24:	d017      	beq.n	8001f56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	2203      	movs	r2, #3
 8001f32:	409a      	lsls	r2, r3
 8001f34:	0013      	movs	r3, r2
 8001f36:	43da      	mvns	r2, r3
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	689a      	ldr	r2, [r3, #8]
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	409a      	lsls	r2, r3
 8001f48:	0013      	movs	r3, r2
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2203      	movs	r2, #3
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d123      	bne.n	8001faa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	08da      	lsrs	r2, r3, #3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3208      	adds	r2, #8
 8001f6a:	0092      	lsls	r2, r2, #2
 8001f6c:	58d3      	ldr	r3, [r2, r3]
 8001f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	2207      	movs	r2, #7
 8001f74:	4013      	ands	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	220f      	movs	r2, #15
 8001f7a:	409a      	lsls	r2, r3
 8001f7c:	0013      	movs	r3, r2
 8001f7e:	43da      	mvns	r2, r3
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	4013      	ands	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	691a      	ldr	r2, [r3, #16]
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	2107      	movs	r1, #7
 8001f8e:	400b      	ands	r3, r1
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	409a      	lsls	r2, r3
 8001f94:	0013      	movs	r3, r2
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	08da      	lsrs	r2, r3, #3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3208      	adds	r2, #8
 8001fa4:	0092      	lsls	r2, r2, #2
 8001fa6:	6939      	ldr	r1, [r7, #16]
 8001fa8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	2203      	movs	r2, #3
 8001fb6:	409a      	lsls	r2, r3
 8001fb8:	0013      	movs	r3, r2
 8001fba:	43da      	mvns	r2, r3
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2203      	movs	r2, #3
 8001fc8:	401a      	ands	r2, r3
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	409a      	lsls	r2, r3
 8001fd0:	0013      	movs	r3, r2
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685a      	ldr	r2, [r3, #4]
 8001fe2:	23c0      	movs	r3, #192	; 0xc0
 8001fe4:	029b      	lsls	r3, r3, #10
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	d100      	bne.n	8001fec <HAL_GPIO_Init+0x174>
 8001fea:	e094      	b.n	8002116 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fec:	4b51      	ldr	r3, [pc, #324]	; (8002134 <HAL_GPIO_Init+0x2bc>)
 8001fee:	699a      	ldr	r2, [r3, #24]
 8001ff0:	4b50      	ldr	r3, [pc, #320]	; (8002134 <HAL_GPIO_Init+0x2bc>)
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	619a      	str	r2, [r3, #24]
 8001ff8:	4b4e      	ldr	r3, [pc, #312]	; (8002134 <HAL_GPIO_Init+0x2bc>)
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	4013      	ands	r3, r2
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002004:	4a4c      	ldr	r2, [pc, #304]	; (8002138 <HAL_GPIO_Init+0x2c0>)
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	089b      	lsrs	r3, r3, #2
 800200a:	3302      	adds	r3, #2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	589b      	ldr	r3, [r3, r2]
 8002010:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	2203      	movs	r2, #3
 8002016:	4013      	ands	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	220f      	movs	r2, #15
 800201c:	409a      	lsls	r2, r3
 800201e:	0013      	movs	r3, r2
 8002020:	43da      	mvns	r2, r3
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	4013      	ands	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	2390      	movs	r3, #144	; 0x90
 800202c:	05db      	lsls	r3, r3, #23
 800202e:	429a      	cmp	r2, r3
 8002030:	d00d      	beq.n	800204e <HAL_GPIO_Init+0x1d6>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a41      	ldr	r2, [pc, #260]	; (800213c <HAL_GPIO_Init+0x2c4>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d007      	beq.n	800204a <HAL_GPIO_Init+0x1d2>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a40      	ldr	r2, [pc, #256]	; (8002140 <HAL_GPIO_Init+0x2c8>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d101      	bne.n	8002046 <HAL_GPIO_Init+0x1ce>
 8002042:	2302      	movs	r3, #2
 8002044:	e004      	b.n	8002050 <HAL_GPIO_Init+0x1d8>
 8002046:	2305      	movs	r3, #5
 8002048:	e002      	b.n	8002050 <HAL_GPIO_Init+0x1d8>
 800204a:	2301      	movs	r3, #1
 800204c:	e000      	b.n	8002050 <HAL_GPIO_Init+0x1d8>
 800204e:	2300      	movs	r3, #0
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	2103      	movs	r1, #3
 8002054:	400a      	ands	r2, r1
 8002056:	0092      	lsls	r2, r2, #2
 8002058:	4093      	lsls	r3, r2
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	4313      	orrs	r3, r2
 800205e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002060:	4935      	ldr	r1, [pc, #212]	; (8002138 <HAL_GPIO_Init+0x2c0>)
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	089b      	lsrs	r3, r3, #2
 8002066:	3302      	adds	r3, #2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800206e:	4b35      	ldr	r3, [pc, #212]	; (8002144 <HAL_GPIO_Init+0x2cc>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	43da      	mvns	r2, r3
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	4013      	ands	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	2380      	movs	r3, #128	; 0x80
 8002084:	035b      	lsls	r3, r3, #13
 8002086:	4013      	ands	r3, r2
 8002088:	d003      	beq.n	8002092 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4313      	orrs	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002092:	4b2c      	ldr	r3, [pc, #176]	; (8002144 <HAL_GPIO_Init+0x2cc>)
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002098:	4b2a      	ldr	r3, [pc, #168]	; (8002144 <HAL_GPIO_Init+0x2cc>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	43da      	mvns	r2, r3
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	4013      	ands	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	2380      	movs	r3, #128	; 0x80
 80020ae:	039b      	lsls	r3, r3, #14
 80020b0:	4013      	ands	r3, r2
 80020b2:	d003      	beq.n	80020bc <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80020bc:	4b21      	ldr	r3, [pc, #132]	; (8002144 <HAL_GPIO_Init+0x2cc>)
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80020c2:	4b20      	ldr	r3, [pc, #128]	; (8002144 <HAL_GPIO_Init+0x2cc>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	43da      	mvns	r2, r3
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	4013      	ands	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685a      	ldr	r2, [r3, #4]
 80020d6:	2380      	movs	r3, #128	; 0x80
 80020d8:	029b      	lsls	r3, r3, #10
 80020da:	4013      	ands	r3, r2
 80020dc:	d003      	beq.n	80020e6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80020e6:	4b17      	ldr	r3, [pc, #92]	; (8002144 <HAL_GPIO_Init+0x2cc>)
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80020ec:	4b15      	ldr	r3, [pc, #84]	; (8002144 <HAL_GPIO_Init+0x2cc>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	43da      	mvns	r2, r3
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	4013      	ands	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	2380      	movs	r3, #128	; 0x80
 8002102:	025b      	lsls	r3, r3, #9
 8002104:	4013      	ands	r3, r2
 8002106:	d003      	beq.n	8002110 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	4313      	orrs	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002110:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <HAL_GPIO_Init+0x2cc>)
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	3301      	adds	r3, #1
 800211a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	40da      	lsrs	r2, r3
 8002124:	1e13      	subs	r3, r2, #0
 8002126:	d000      	beq.n	800212a <HAL_GPIO_Init+0x2b2>
 8002128:	e6ae      	b.n	8001e88 <HAL_GPIO_Init+0x10>
  } 
}
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	46c0      	nop			; (mov r8, r8)
 800212e:	46bd      	mov	sp, r7
 8002130:	b006      	add	sp, #24
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40021000 	.word	0x40021000
 8002138:	40010000 	.word	0x40010000
 800213c:	48000400 	.word	0x48000400
 8002140:	48000800 	.word	0x48000800
 8002144:	40010400 	.word	0x40010400

08002148 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e082      	b.n	8002260 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2241      	movs	r2, #65	; 0x41
 800215e:	5c9b      	ldrb	r3, [r3, r2]
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d107      	bne.n	8002176 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2240      	movs	r2, #64	; 0x40
 800216a:	2100      	movs	r1, #0
 800216c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	0018      	movs	r0, r3
 8002172:	f7fe fb49 	bl	8000808 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2241      	movs	r2, #65	; 0x41
 800217a:	2124      	movs	r1, #36	; 0x24
 800217c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2101      	movs	r1, #1
 800218a:	438a      	bics	r2, r1
 800218c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4934      	ldr	r1, [pc, #208]	; (8002268 <HAL_I2C_Init+0x120>)
 8002198:	400a      	ands	r2, r1
 800219a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689a      	ldr	r2, [r3, #8]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4931      	ldr	r1, [pc, #196]	; (800226c <HAL_I2C_Init+0x124>)
 80021a8:	400a      	ands	r2, r1
 80021aa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d108      	bne.n	80021c6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2180      	movs	r1, #128	; 0x80
 80021be:	0209      	lsls	r1, r1, #8
 80021c0:	430a      	orrs	r2, r1
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	e007      	b.n	80021d6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2184      	movs	r1, #132	; 0x84
 80021d0:	0209      	lsls	r1, r1, #8
 80021d2:	430a      	orrs	r2, r1
 80021d4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d104      	bne.n	80021e8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2280      	movs	r2, #128	; 0x80
 80021e4:	0112      	lsls	r2, r2, #4
 80021e6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	491f      	ldr	r1, [pc, #124]	; (8002270 <HAL_I2C_Init+0x128>)
 80021f4:	430a      	orrs	r2, r1
 80021f6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68da      	ldr	r2, [r3, #12]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	491a      	ldr	r1, [pc, #104]	; (800226c <HAL_I2C_Init+0x124>)
 8002204:	400a      	ands	r2, r1
 8002206:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	691a      	ldr	r2, [r3, #16]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	431a      	orrs	r2, r3
 8002212:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	430a      	orrs	r2, r1
 8002220:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69d9      	ldr	r1, [r3, #28]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a1a      	ldr	r2, [r3, #32]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	430a      	orrs	r2, r1
 8002230:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2101      	movs	r1, #1
 800223e:	430a      	orrs	r2, r1
 8002240:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2241      	movs	r2, #65	; 0x41
 800224c:	2120      	movs	r1, #32
 800224e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2242      	movs	r2, #66	; 0x42
 800225a:	2100      	movs	r1, #0
 800225c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	0018      	movs	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	b002      	add	sp, #8
 8002266:	bd80      	pop	{r7, pc}
 8002268:	f0ffffff 	.word	0xf0ffffff
 800226c:	ffff7fff 	.word	0xffff7fff
 8002270:	02008000 	.word	0x02008000

08002274 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2241      	movs	r2, #65	; 0x41
 8002282:	5c9b      	ldrb	r3, [r3, r2]
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b20      	cmp	r3, #32
 8002288:	d138      	bne.n	80022fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2240      	movs	r2, #64	; 0x40
 800228e:	5c9b      	ldrb	r3, [r3, r2]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d101      	bne.n	8002298 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002294:	2302      	movs	r3, #2
 8002296:	e032      	b.n	80022fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2240      	movs	r2, #64	; 0x40
 800229c:	2101      	movs	r1, #1
 800229e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2241      	movs	r2, #65	; 0x41
 80022a4:	2124      	movs	r1, #36	; 0x24
 80022a6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2101      	movs	r1, #1
 80022b4:	438a      	bics	r2, r1
 80022b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4911      	ldr	r1, [pc, #68]	; (8002308 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80022c4:	400a      	ands	r2, r1
 80022c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6819      	ldr	r1, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2101      	movs	r1, #1
 80022e4:	430a      	orrs	r2, r1
 80022e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2241      	movs	r2, #65	; 0x41
 80022ec:	2120      	movs	r1, #32
 80022ee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2240      	movs	r2, #64	; 0x40
 80022f4:	2100      	movs	r1, #0
 80022f6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80022f8:	2300      	movs	r3, #0
 80022fa:	e000      	b.n	80022fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80022fc:	2302      	movs	r3, #2
  }
}
 80022fe:	0018      	movs	r0, r3
 8002300:	46bd      	mov	sp, r7
 8002302:	b002      	add	sp, #8
 8002304:	bd80      	pop	{r7, pc}
 8002306:	46c0      	nop			; (mov r8, r8)
 8002308:	ffffefff 	.word	0xffffefff

0800230c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2241      	movs	r2, #65	; 0x41
 800231a:	5c9b      	ldrb	r3, [r3, r2]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b20      	cmp	r3, #32
 8002320:	d139      	bne.n	8002396 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2240      	movs	r2, #64	; 0x40
 8002326:	5c9b      	ldrb	r3, [r3, r2]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d101      	bne.n	8002330 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800232c:	2302      	movs	r3, #2
 800232e:	e033      	b.n	8002398 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2240      	movs	r2, #64	; 0x40
 8002334:	2101      	movs	r1, #1
 8002336:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2241      	movs	r2, #65	; 0x41
 800233c:	2124      	movs	r1, #36	; 0x24
 800233e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2101      	movs	r1, #1
 800234c:	438a      	bics	r2, r1
 800234e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4a11      	ldr	r2, [pc, #68]	; (80023a0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800235c:	4013      	ands	r3, r2
 800235e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	021b      	lsls	r3, r3, #8
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	4313      	orrs	r3, r2
 8002368:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2101      	movs	r1, #1
 800237e:	430a      	orrs	r2, r1
 8002380:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2241      	movs	r2, #65	; 0x41
 8002386:	2120      	movs	r1, #32
 8002388:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2240      	movs	r2, #64	; 0x40
 800238e:	2100      	movs	r1, #0
 8002390:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002392:	2300      	movs	r3, #0
 8002394:	e000      	b.n	8002398 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002396:	2302      	movs	r3, #2
  }
}
 8002398:	0018      	movs	r0, r3
 800239a:	46bd      	mov	sp, r7
 800239c:	b004      	add	sp, #16
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	fffff0ff 	.word	0xfffff0ff

080023a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b088      	sub	sp, #32
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d102      	bne.n	80023b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	f000 fb76 	bl	8002aa4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2201      	movs	r2, #1
 80023be:	4013      	ands	r3, r2
 80023c0:	d100      	bne.n	80023c4 <HAL_RCC_OscConfig+0x20>
 80023c2:	e08e      	b.n	80024e2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80023c4:	4bc5      	ldr	r3, [pc, #788]	; (80026dc <HAL_RCC_OscConfig+0x338>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	220c      	movs	r2, #12
 80023ca:	4013      	ands	r3, r2
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	d00e      	beq.n	80023ee <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023d0:	4bc2      	ldr	r3, [pc, #776]	; (80026dc <HAL_RCC_OscConfig+0x338>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	220c      	movs	r2, #12
 80023d6:	4013      	ands	r3, r2
 80023d8:	2b08      	cmp	r3, #8
 80023da:	d117      	bne.n	800240c <HAL_RCC_OscConfig+0x68>
 80023dc:	4bbf      	ldr	r3, [pc, #764]	; (80026dc <HAL_RCC_OscConfig+0x338>)
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	23c0      	movs	r3, #192	; 0xc0
 80023e2:	025b      	lsls	r3, r3, #9
 80023e4:	401a      	ands	r2, r3
 80023e6:	2380      	movs	r3, #128	; 0x80
 80023e8:	025b      	lsls	r3, r3, #9
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d10e      	bne.n	800240c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ee:	4bbb      	ldr	r3, [pc, #748]	; (80026dc <HAL_RCC_OscConfig+0x338>)
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	2380      	movs	r3, #128	; 0x80
 80023f4:	029b      	lsls	r3, r3, #10
 80023f6:	4013      	ands	r3, r2
 80023f8:	d100      	bne.n	80023fc <HAL_RCC_OscConfig+0x58>
 80023fa:	e071      	b.n	80024e0 <HAL_RCC_OscConfig+0x13c>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d000      	beq.n	8002406 <HAL_RCC_OscConfig+0x62>
 8002404:	e06c      	b.n	80024e0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	f000 fb4c 	bl	8002aa4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d107      	bne.n	8002424 <HAL_RCC_OscConfig+0x80>
 8002414:	4bb1      	ldr	r3, [pc, #708]	; (80026dc <HAL_RCC_OscConfig+0x338>)
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	4bb0      	ldr	r3, [pc, #704]	; (80026dc <HAL_RCC_OscConfig+0x338>)
 800241a:	2180      	movs	r1, #128	; 0x80
 800241c:	0249      	lsls	r1, r1, #9
 800241e:	430a      	orrs	r2, r1
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	e02f      	b.n	8002484 <HAL_RCC_OscConfig+0xe0>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10c      	bne.n	8002446 <HAL_RCC_OscConfig+0xa2>
 800242c:	4bab      	ldr	r3, [pc, #684]	; (80026dc <HAL_RCC_OscConfig+0x338>)
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	4baa      	ldr	r3, [pc, #680]	; (80026dc <HAL_RCC_OscConfig+0x338>)
 8002432:	49ab      	ldr	r1, [pc, #684]	; (80026e0 <HAL_RCC_OscConfig+0x33c>)
 8002434:	400a      	ands	r2, r1
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	4ba8      	ldr	r3, [pc, #672]	; (80026dc <HAL_RCC_OscConfig+0x338>)
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	4ba7      	ldr	r3, [pc, #668]	; (80026dc <HAL_RCC_OscConfig+0x338>)
 800243e:	49a9      	ldr	r1, [pc, #676]	; (80026e4 <HAL_RCC_OscConfig+0x340>)
 8002440:	400a      	ands	r2, r1
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	e01e      	b.n	8002484 <HAL_RCC_OscConfig+0xe0>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b05      	cmp	r3, #5
 800244c:	d10e      	bne.n	800246c <HAL_RCC_OscConfig+0xc8>
 800244e:	4ba3      	ldr	r3, [pc, #652]	; (80026dc <HAL_RCC_OscConfig+0x338>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	4ba2      	ldr	r3, [pc, #648]	; (80026dc <HAL_RCC_OscConfig+0x338>)
 8002454:	2180      	movs	r1, #128	; 0x80
 8002456:	02c9      	lsls	r1, r1, #11
 8002458:	430a      	orrs	r2, r1
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	4b9f      	ldr	r3, [pc, #636]	; (80026dc <HAL_RCC_OscConfig+0x338>)
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	4b9e      	ldr	r3, [pc, #632]	; (80026dc <HAL_RCC_OscConfig+0x338>)
 8002462:	2180      	movs	r1, #128	; 0x80
 8002464:	0249      	lsls	r1, r1, #9
 8002466:	430a      	orrs	r2, r1
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	e00b      	b.n	8002484 <HAL_RCC_OscConfig+0xe0>
 800246c:	4b9b      	ldr	r3, [pc, #620]	; (80026dc <HAL_RCC_OscConfig+0x338>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	4b9a      	ldr	r3, [pc, #616]	; (80026dc <HAL_RCC_OscConfig+0x338>)
 8002472:	499b      	ldr	r1, [pc, #620]	; (80026e0 <HAL_RCC_OscConfig+0x33c>)
 8002474:	400a      	ands	r2, r1
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	4b98      	ldr	r3, [pc, #608]	; (80026dc <HAL_RCC_OscConfig+0x338>)
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	4b97      	ldr	r3, [pc, #604]	; (80026dc <HAL_RCC_OscConfig+0x338>)
 800247e:	4999      	ldr	r1, [pc, #612]	; (80026e4 <HAL_RCC_OscConfig+0x340>)
 8002480:	400a      	ands	r2, r1
 8002482:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d014      	beq.n	80024b6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248c:	f7fe fad0 	bl	8000a30 <HAL_GetTick>
 8002490:	0003      	movs	r3, r0
 8002492:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002496:	f7fe facb 	bl	8000a30 <HAL_GetTick>
 800249a:	0002      	movs	r2, r0
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b64      	cmp	r3, #100	; 0x64
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e2fd      	b.n	8002aa4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a8:	4b8c      	ldr	r3, [pc, #560]	; (80026dc <HAL_RCC_OscConfig+0x338>)
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	2380      	movs	r3, #128	; 0x80
 80024ae:	029b      	lsls	r3, r3, #10
 80024b0:	4013      	ands	r3, r2
 80024b2:	d0f0      	beq.n	8002496 <HAL_RCC_OscConfig+0xf2>
 80024b4:	e015      	b.n	80024e2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b6:	f7fe fabb 	bl	8000a30 <HAL_GetTick>
 80024ba:	0003      	movs	r3, r0
 80024bc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024c0:	f7fe fab6 	bl	8000a30 <HAL_GetTick>
 80024c4:	0002      	movs	r2, r0
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b64      	cmp	r3, #100	; 0x64
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e2e8      	b.n	8002aa4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024d2:	4b82      	ldr	r3, [pc, #520]	; (80026dc <HAL_RCC_OscConfig+0x338>)
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	2380      	movs	r3, #128	; 0x80
 80024d8:	029b      	lsls	r3, r3, #10
 80024da:	4013      	ands	r3, r2
 80024dc:	d1f0      	bne.n	80024c0 <HAL_RCC_OscConfig+0x11c>
 80024de:	e000      	b.n	80024e2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2202      	movs	r2, #2
 80024e8:	4013      	ands	r3, r2
 80024ea:	d100      	bne.n	80024ee <HAL_RCC_OscConfig+0x14a>
 80024ec:	e06c      	b.n	80025c8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80024ee:	4b7b      	ldr	r3, [pc, #492]	; (80026dc <HAL_RCC_OscConfig+0x338>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	220c      	movs	r2, #12
 80024f4:	4013      	ands	r3, r2
 80024f6:	d00e      	beq.n	8002516 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80024f8:	4b78      	ldr	r3, [pc, #480]	; (80026dc <HAL_RCC_OscConfig+0x338>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	220c      	movs	r2, #12
 80024fe:	4013      	ands	r3, r2
 8002500:	2b08      	cmp	r3, #8
 8002502:	d11f      	bne.n	8002544 <HAL_RCC_OscConfig+0x1a0>
 8002504:	4b75      	ldr	r3, [pc, #468]	; (80026dc <HAL_RCC_OscConfig+0x338>)
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	23c0      	movs	r3, #192	; 0xc0
 800250a:	025b      	lsls	r3, r3, #9
 800250c:	401a      	ands	r2, r3
 800250e:	2380      	movs	r3, #128	; 0x80
 8002510:	021b      	lsls	r3, r3, #8
 8002512:	429a      	cmp	r2, r3
 8002514:	d116      	bne.n	8002544 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002516:	4b71      	ldr	r3, [pc, #452]	; (80026dc <HAL_RCC_OscConfig+0x338>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2202      	movs	r2, #2
 800251c:	4013      	ands	r3, r2
 800251e:	d005      	beq.n	800252c <HAL_RCC_OscConfig+0x188>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d001      	beq.n	800252c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e2bb      	b.n	8002aa4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800252c:	4b6b      	ldr	r3, [pc, #428]	; (80026dc <HAL_RCC_OscConfig+0x338>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	22f8      	movs	r2, #248	; 0xf8
 8002532:	4393      	bics	r3, r2
 8002534:	0019      	movs	r1, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	00da      	lsls	r2, r3, #3
 800253c:	4b67      	ldr	r3, [pc, #412]	; (80026dc <HAL_RCC_OscConfig+0x338>)
 800253e:	430a      	orrs	r2, r1
 8002540:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002542:	e041      	b.n	80025c8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d024      	beq.n	8002596 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800254c:	4b63      	ldr	r3, [pc, #396]	; (80026dc <HAL_RCC_OscConfig+0x338>)
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	4b62      	ldr	r3, [pc, #392]	; (80026dc <HAL_RCC_OscConfig+0x338>)
 8002552:	2101      	movs	r1, #1
 8002554:	430a      	orrs	r2, r1
 8002556:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002558:	f7fe fa6a 	bl	8000a30 <HAL_GetTick>
 800255c:	0003      	movs	r3, r0
 800255e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002560:	e008      	b.n	8002574 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002562:	f7fe fa65 	bl	8000a30 <HAL_GetTick>
 8002566:	0002      	movs	r2, r0
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e297      	b.n	8002aa4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002574:	4b59      	ldr	r3, [pc, #356]	; (80026dc <HAL_RCC_OscConfig+0x338>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2202      	movs	r2, #2
 800257a:	4013      	ands	r3, r2
 800257c:	d0f1      	beq.n	8002562 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800257e:	4b57      	ldr	r3, [pc, #348]	; (80026dc <HAL_RCC_OscConfig+0x338>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	22f8      	movs	r2, #248	; 0xf8
 8002584:	4393      	bics	r3, r2
 8002586:	0019      	movs	r1, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	00da      	lsls	r2, r3, #3
 800258e:	4b53      	ldr	r3, [pc, #332]	; (80026dc <HAL_RCC_OscConfig+0x338>)
 8002590:	430a      	orrs	r2, r1
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	e018      	b.n	80025c8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002596:	4b51      	ldr	r3, [pc, #324]	; (80026dc <HAL_RCC_OscConfig+0x338>)
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	4b50      	ldr	r3, [pc, #320]	; (80026dc <HAL_RCC_OscConfig+0x338>)
 800259c:	2101      	movs	r1, #1
 800259e:	438a      	bics	r2, r1
 80025a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a2:	f7fe fa45 	bl	8000a30 <HAL_GetTick>
 80025a6:	0003      	movs	r3, r0
 80025a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025ac:	f7fe fa40 	bl	8000a30 <HAL_GetTick>
 80025b0:	0002      	movs	r2, r0
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e272      	b.n	8002aa4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025be:	4b47      	ldr	r3, [pc, #284]	; (80026dc <HAL_RCC_OscConfig+0x338>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2202      	movs	r2, #2
 80025c4:	4013      	ands	r3, r2
 80025c6:	d1f1      	bne.n	80025ac <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2208      	movs	r2, #8
 80025ce:	4013      	ands	r3, r2
 80025d0:	d036      	beq.n	8002640 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d019      	beq.n	800260e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025da:	4b40      	ldr	r3, [pc, #256]	; (80026dc <HAL_RCC_OscConfig+0x338>)
 80025dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025de:	4b3f      	ldr	r3, [pc, #252]	; (80026dc <HAL_RCC_OscConfig+0x338>)
 80025e0:	2101      	movs	r1, #1
 80025e2:	430a      	orrs	r2, r1
 80025e4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e6:	f7fe fa23 	bl	8000a30 <HAL_GetTick>
 80025ea:	0003      	movs	r3, r0
 80025ec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025f0:	f7fe fa1e 	bl	8000a30 <HAL_GetTick>
 80025f4:	0002      	movs	r2, r0
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e250      	b.n	8002aa4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002602:	4b36      	ldr	r3, [pc, #216]	; (80026dc <HAL_RCC_OscConfig+0x338>)
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	2202      	movs	r2, #2
 8002608:	4013      	ands	r3, r2
 800260a:	d0f1      	beq.n	80025f0 <HAL_RCC_OscConfig+0x24c>
 800260c:	e018      	b.n	8002640 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800260e:	4b33      	ldr	r3, [pc, #204]	; (80026dc <HAL_RCC_OscConfig+0x338>)
 8002610:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002612:	4b32      	ldr	r3, [pc, #200]	; (80026dc <HAL_RCC_OscConfig+0x338>)
 8002614:	2101      	movs	r1, #1
 8002616:	438a      	bics	r2, r1
 8002618:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800261a:	f7fe fa09 	bl	8000a30 <HAL_GetTick>
 800261e:	0003      	movs	r3, r0
 8002620:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002624:	f7fe fa04 	bl	8000a30 <HAL_GetTick>
 8002628:	0002      	movs	r2, r0
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e236      	b.n	8002aa4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002636:	4b29      	ldr	r3, [pc, #164]	; (80026dc <HAL_RCC_OscConfig+0x338>)
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	2202      	movs	r2, #2
 800263c:	4013      	ands	r3, r2
 800263e:	d1f1      	bne.n	8002624 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2204      	movs	r2, #4
 8002646:	4013      	ands	r3, r2
 8002648:	d100      	bne.n	800264c <HAL_RCC_OscConfig+0x2a8>
 800264a:	e0b5      	b.n	80027b8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800264c:	201f      	movs	r0, #31
 800264e:	183b      	adds	r3, r7, r0
 8002650:	2200      	movs	r2, #0
 8002652:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002654:	4b21      	ldr	r3, [pc, #132]	; (80026dc <HAL_RCC_OscConfig+0x338>)
 8002656:	69da      	ldr	r2, [r3, #28]
 8002658:	2380      	movs	r3, #128	; 0x80
 800265a:	055b      	lsls	r3, r3, #21
 800265c:	4013      	ands	r3, r2
 800265e:	d110      	bne.n	8002682 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002660:	4b1e      	ldr	r3, [pc, #120]	; (80026dc <HAL_RCC_OscConfig+0x338>)
 8002662:	69da      	ldr	r2, [r3, #28]
 8002664:	4b1d      	ldr	r3, [pc, #116]	; (80026dc <HAL_RCC_OscConfig+0x338>)
 8002666:	2180      	movs	r1, #128	; 0x80
 8002668:	0549      	lsls	r1, r1, #21
 800266a:	430a      	orrs	r2, r1
 800266c:	61da      	str	r2, [r3, #28]
 800266e:	4b1b      	ldr	r3, [pc, #108]	; (80026dc <HAL_RCC_OscConfig+0x338>)
 8002670:	69da      	ldr	r2, [r3, #28]
 8002672:	2380      	movs	r3, #128	; 0x80
 8002674:	055b      	lsls	r3, r3, #21
 8002676:	4013      	ands	r3, r2
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800267c:	183b      	adds	r3, r7, r0
 800267e:	2201      	movs	r2, #1
 8002680:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002682:	4b19      	ldr	r3, [pc, #100]	; (80026e8 <HAL_RCC_OscConfig+0x344>)
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	2380      	movs	r3, #128	; 0x80
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	4013      	ands	r3, r2
 800268c:	d11a      	bne.n	80026c4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800268e:	4b16      	ldr	r3, [pc, #88]	; (80026e8 <HAL_RCC_OscConfig+0x344>)
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	4b15      	ldr	r3, [pc, #84]	; (80026e8 <HAL_RCC_OscConfig+0x344>)
 8002694:	2180      	movs	r1, #128	; 0x80
 8002696:	0049      	lsls	r1, r1, #1
 8002698:	430a      	orrs	r2, r1
 800269a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800269c:	f7fe f9c8 	bl	8000a30 <HAL_GetTick>
 80026a0:	0003      	movs	r3, r0
 80026a2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a6:	f7fe f9c3 	bl	8000a30 <HAL_GetTick>
 80026aa:	0002      	movs	r2, r0
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b64      	cmp	r3, #100	; 0x64
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e1f5      	b.n	8002aa4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b8:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <HAL_RCC_OscConfig+0x344>)
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	2380      	movs	r3, #128	; 0x80
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	4013      	ands	r3, r2
 80026c2:	d0f0      	beq.n	80026a6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d10f      	bne.n	80026ec <HAL_RCC_OscConfig+0x348>
 80026cc:	4b03      	ldr	r3, [pc, #12]	; (80026dc <HAL_RCC_OscConfig+0x338>)
 80026ce:	6a1a      	ldr	r2, [r3, #32]
 80026d0:	4b02      	ldr	r3, [pc, #8]	; (80026dc <HAL_RCC_OscConfig+0x338>)
 80026d2:	2101      	movs	r1, #1
 80026d4:	430a      	orrs	r2, r1
 80026d6:	621a      	str	r2, [r3, #32]
 80026d8:	e036      	b.n	8002748 <HAL_RCC_OscConfig+0x3a4>
 80026da:	46c0      	nop			; (mov r8, r8)
 80026dc:	40021000 	.word	0x40021000
 80026e0:	fffeffff 	.word	0xfffeffff
 80026e4:	fffbffff 	.word	0xfffbffff
 80026e8:	40007000 	.word	0x40007000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10c      	bne.n	800270e <HAL_RCC_OscConfig+0x36a>
 80026f4:	4bca      	ldr	r3, [pc, #808]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 80026f6:	6a1a      	ldr	r2, [r3, #32]
 80026f8:	4bc9      	ldr	r3, [pc, #804]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 80026fa:	2101      	movs	r1, #1
 80026fc:	438a      	bics	r2, r1
 80026fe:	621a      	str	r2, [r3, #32]
 8002700:	4bc7      	ldr	r3, [pc, #796]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 8002702:	6a1a      	ldr	r2, [r3, #32]
 8002704:	4bc6      	ldr	r3, [pc, #792]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 8002706:	2104      	movs	r1, #4
 8002708:	438a      	bics	r2, r1
 800270a:	621a      	str	r2, [r3, #32]
 800270c:	e01c      	b.n	8002748 <HAL_RCC_OscConfig+0x3a4>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	2b05      	cmp	r3, #5
 8002714:	d10c      	bne.n	8002730 <HAL_RCC_OscConfig+0x38c>
 8002716:	4bc2      	ldr	r3, [pc, #776]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 8002718:	6a1a      	ldr	r2, [r3, #32]
 800271a:	4bc1      	ldr	r3, [pc, #772]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 800271c:	2104      	movs	r1, #4
 800271e:	430a      	orrs	r2, r1
 8002720:	621a      	str	r2, [r3, #32]
 8002722:	4bbf      	ldr	r3, [pc, #764]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 8002724:	6a1a      	ldr	r2, [r3, #32]
 8002726:	4bbe      	ldr	r3, [pc, #760]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 8002728:	2101      	movs	r1, #1
 800272a:	430a      	orrs	r2, r1
 800272c:	621a      	str	r2, [r3, #32]
 800272e:	e00b      	b.n	8002748 <HAL_RCC_OscConfig+0x3a4>
 8002730:	4bbb      	ldr	r3, [pc, #748]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 8002732:	6a1a      	ldr	r2, [r3, #32]
 8002734:	4bba      	ldr	r3, [pc, #744]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 8002736:	2101      	movs	r1, #1
 8002738:	438a      	bics	r2, r1
 800273a:	621a      	str	r2, [r3, #32]
 800273c:	4bb8      	ldr	r3, [pc, #736]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 800273e:	6a1a      	ldr	r2, [r3, #32]
 8002740:	4bb7      	ldr	r3, [pc, #732]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 8002742:	2104      	movs	r1, #4
 8002744:	438a      	bics	r2, r1
 8002746:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d014      	beq.n	800277a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002750:	f7fe f96e 	bl	8000a30 <HAL_GetTick>
 8002754:	0003      	movs	r3, r0
 8002756:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002758:	e009      	b.n	800276e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800275a:	f7fe f969 	bl	8000a30 <HAL_GetTick>
 800275e:	0002      	movs	r2, r0
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	4aaf      	ldr	r2, [pc, #700]	; (8002a24 <HAL_RCC_OscConfig+0x680>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e19a      	b.n	8002aa4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800276e:	4bac      	ldr	r3, [pc, #688]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	2202      	movs	r2, #2
 8002774:	4013      	ands	r3, r2
 8002776:	d0f0      	beq.n	800275a <HAL_RCC_OscConfig+0x3b6>
 8002778:	e013      	b.n	80027a2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800277a:	f7fe f959 	bl	8000a30 <HAL_GetTick>
 800277e:	0003      	movs	r3, r0
 8002780:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002782:	e009      	b.n	8002798 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002784:	f7fe f954 	bl	8000a30 <HAL_GetTick>
 8002788:	0002      	movs	r2, r0
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	4aa5      	ldr	r2, [pc, #660]	; (8002a24 <HAL_RCC_OscConfig+0x680>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e185      	b.n	8002aa4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002798:	4ba1      	ldr	r3, [pc, #644]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	2202      	movs	r2, #2
 800279e:	4013      	ands	r3, r2
 80027a0:	d1f0      	bne.n	8002784 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027a2:	231f      	movs	r3, #31
 80027a4:	18fb      	adds	r3, r7, r3
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d105      	bne.n	80027b8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ac:	4b9c      	ldr	r3, [pc, #624]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 80027ae:	69da      	ldr	r2, [r3, #28]
 80027b0:	4b9b      	ldr	r3, [pc, #620]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 80027b2:	499d      	ldr	r1, [pc, #628]	; (8002a28 <HAL_RCC_OscConfig+0x684>)
 80027b4:	400a      	ands	r2, r1
 80027b6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2210      	movs	r2, #16
 80027be:	4013      	ands	r3, r2
 80027c0:	d063      	beq.n	800288a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d12a      	bne.n	8002820 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80027ca:	4b95      	ldr	r3, [pc, #596]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 80027cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027ce:	4b94      	ldr	r3, [pc, #592]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 80027d0:	2104      	movs	r1, #4
 80027d2:	430a      	orrs	r2, r1
 80027d4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80027d6:	4b92      	ldr	r3, [pc, #584]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 80027d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027da:	4b91      	ldr	r3, [pc, #580]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 80027dc:	2101      	movs	r1, #1
 80027de:	430a      	orrs	r2, r1
 80027e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e2:	f7fe f925 	bl	8000a30 <HAL_GetTick>
 80027e6:	0003      	movs	r3, r0
 80027e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80027ec:	f7fe f920 	bl	8000a30 <HAL_GetTick>
 80027f0:	0002      	movs	r2, r0
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e152      	b.n	8002aa4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80027fe:	4b88      	ldr	r3, [pc, #544]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 8002800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002802:	2202      	movs	r2, #2
 8002804:	4013      	ands	r3, r2
 8002806:	d0f1      	beq.n	80027ec <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002808:	4b85      	ldr	r3, [pc, #532]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 800280a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800280c:	22f8      	movs	r2, #248	; 0xf8
 800280e:	4393      	bics	r3, r2
 8002810:	0019      	movs	r1, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	00da      	lsls	r2, r3, #3
 8002818:	4b81      	ldr	r3, [pc, #516]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 800281a:	430a      	orrs	r2, r1
 800281c:	635a      	str	r2, [r3, #52]	; 0x34
 800281e:	e034      	b.n	800288a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	3305      	adds	r3, #5
 8002826:	d111      	bne.n	800284c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002828:	4b7d      	ldr	r3, [pc, #500]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 800282a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800282c:	4b7c      	ldr	r3, [pc, #496]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 800282e:	2104      	movs	r1, #4
 8002830:	438a      	bics	r2, r1
 8002832:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002834:	4b7a      	ldr	r3, [pc, #488]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 8002836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002838:	22f8      	movs	r2, #248	; 0xf8
 800283a:	4393      	bics	r3, r2
 800283c:	0019      	movs	r1, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	00da      	lsls	r2, r3, #3
 8002844:	4b76      	ldr	r3, [pc, #472]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 8002846:	430a      	orrs	r2, r1
 8002848:	635a      	str	r2, [r3, #52]	; 0x34
 800284a:	e01e      	b.n	800288a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800284c:	4b74      	ldr	r3, [pc, #464]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 800284e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002850:	4b73      	ldr	r3, [pc, #460]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 8002852:	2104      	movs	r1, #4
 8002854:	430a      	orrs	r2, r1
 8002856:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002858:	4b71      	ldr	r3, [pc, #452]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 800285a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800285c:	4b70      	ldr	r3, [pc, #448]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 800285e:	2101      	movs	r1, #1
 8002860:	438a      	bics	r2, r1
 8002862:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002864:	f7fe f8e4 	bl	8000a30 <HAL_GetTick>
 8002868:	0003      	movs	r3, r0
 800286a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800286c:	e008      	b.n	8002880 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800286e:	f7fe f8df 	bl	8000a30 <HAL_GetTick>
 8002872:	0002      	movs	r2, r0
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e111      	b.n	8002aa4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002880:	4b67      	ldr	r3, [pc, #412]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 8002882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002884:	2202      	movs	r2, #2
 8002886:	4013      	ands	r3, r2
 8002888:	d1f1      	bne.n	800286e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2220      	movs	r2, #32
 8002890:	4013      	ands	r3, r2
 8002892:	d05c      	beq.n	800294e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002894:	4b62      	ldr	r3, [pc, #392]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	220c      	movs	r2, #12
 800289a:	4013      	ands	r3, r2
 800289c:	2b0c      	cmp	r3, #12
 800289e:	d00e      	beq.n	80028be <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80028a0:	4b5f      	ldr	r3, [pc, #380]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	220c      	movs	r2, #12
 80028a6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80028a8:	2b08      	cmp	r3, #8
 80028aa:	d114      	bne.n	80028d6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80028ac:	4b5c      	ldr	r3, [pc, #368]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	23c0      	movs	r3, #192	; 0xc0
 80028b2:	025b      	lsls	r3, r3, #9
 80028b4:	401a      	ands	r2, r3
 80028b6:	23c0      	movs	r3, #192	; 0xc0
 80028b8:	025b      	lsls	r3, r3, #9
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d10b      	bne.n	80028d6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80028be:	4b58      	ldr	r3, [pc, #352]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 80028c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028c2:	2380      	movs	r3, #128	; 0x80
 80028c4:	029b      	lsls	r3, r3, #10
 80028c6:	4013      	ands	r3, r2
 80028c8:	d040      	beq.n	800294c <HAL_RCC_OscConfig+0x5a8>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d03c      	beq.n	800294c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e0e6      	b.n	8002aa4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d01b      	beq.n	8002916 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80028de:	4b50      	ldr	r3, [pc, #320]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 80028e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028e2:	4b4f      	ldr	r3, [pc, #316]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 80028e4:	2180      	movs	r1, #128	; 0x80
 80028e6:	0249      	lsls	r1, r1, #9
 80028e8:	430a      	orrs	r2, r1
 80028ea:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ec:	f7fe f8a0 	bl	8000a30 <HAL_GetTick>
 80028f0:	0003      	movs	r3, r0
 80028f2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80028f4:	e008      	b.n	8002908 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028f6:	f7fe f89b 	bl	8000a30 <HAL_GetTick>
 80028fa:	0002      	movs	r2, r0
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e0cd      	b.n	8002aa4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002908:	4b45      	ldr	r3, [pc, #276]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 800290a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800290c:	2380      	movs	r3, #128	; 0x80
 800290e:	029b      	lsls	r3, r3, #10
 8002910:	4013      	ands	r3, r2
 8002912:	d0f0      	beq.n	80028f6 <HAL_RCC_OscConfig+0x552>
 8002914:	e01b      	b.n	800294e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002916:	4b42      	ldr	r3, [pc, #264]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 8002918:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800291a:	4b41      	ldr	r3, [pc, #260]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 800291c:	4943      	ldr	r1, [pc, #268]	; (8002a2c <HAL_RCC_OscConfig+0x688>)
 800291e:	400a      	ands	r2, r1
 8002920:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002922:	f7fe f885 	bl	8000a30 <HAL_GetTick>
 8002926:	0003      	movs	r3, r0
 8002928:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800292c:	f7fe f880 	bl	8000a30 <HAL_GetTick>
 8002930:	0002      	movs	r2, r0
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e0b2      	b.n	8002aa4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800293e:	4b38      	ldr	r3, [pc, #224]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 8002940:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002942:	2380      	movs	r3, #128	; 0x80
 8002944:	029b      	lsls	r3, r3, #10
 8002946:	4013      	ands	r3, r2
 8002948:	d1f0      	bne.n	800292c <HAL_RCC_OscConfig+0x588>
 800294a:	e000      	b.n	800294e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800294c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002952:	2b00      	cmp	r3, #0
 8002954:	d100      	bne.n	8002958 <HAL_RCC_OscConfig+0x5b4>
 8002956:	e0a4      	b.n	8002aa2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002958:	4b31      	ldr	r3, [pc, #196]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	220c      	movs	r2, #12
 800295e:	4013      	ands	r3, r2
 8002960:	2b08      	cmp	r3, #8
 8002962:	d100      	bne.n	8002966 <HAL_RCC_OscConfig+0x5c2>
 8002964:	e078      	b.n	8002a58 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	2b02      	cmp	r3, #2
 800296c:	d14c      	bne.n	8002a08 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800296e:	4b2c      	ldr	r3, [pc, #176]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	4b2b      	ldr	r3, [pc, #172]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 8002974:	492e      	ldr	r1, [pc, #184]	; (8002a30 <HAL_RCC_OscConfig+0x68c>)
 8002976:	400a      	ands	r2, r1
 8002978:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297a:	f7fe f859 	bl	8000a30 <HAL_GetTick>
 800297e:	0003      	movs	r3, r0
 8002980:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002984:	f7fe f854 	bl	8000a30 <HAL_GetTick>
 8002988:	0002      	movs	r2, r0
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e086      	b.n	8002aa4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002996:	4b22      	ldr	r3, [pc, #136]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	2380      	movs	r3, #128	; 0x80
 800299c:	049b      	lsls	r3, r3, #18
 800299e:	4013      	ands	r3, r2
 80029a0:	d1f0      	bne.n	8002984 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029a2:	4b1f      	ldr	r3, [pc, #124]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 80029a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a6:	220f      	movs	r2, #15
 80029a8:	4393      	bics	r3, r2
 80029aa:	0019      	movs	r1, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029b0:	4b1b      	ldr	r3, [pc, #108]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 80029b2:	430a      	orrs	r2, r1
 80029b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80029b6:	4b1a      	ldr	r3, [pc, #104]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	4a1e      	ldr	r2, [pc, #120]	; (8002a34 <HAL_RCC_OscConfig+0x690>)
 80029bc:	4013      	ands	r3, r2
 80029be:	0019      	movs	r1, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c8:	431a      	orrs	r2, r3
 80029ca:	4b15      	ldr	r3, [pc, #84]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 80029cc:	430a      	orrs	r2, r1
 80029ce:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029d0:	4b13      	ldr	r3, [pc, #76]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 80029d6:	2180      	movs	r1, #128	; 0x80
 80029d8:	0449      	lsls	r1, r1, #17
 80029da:	430a      	orrs	r2, r1
 80029dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029de:	f7fe f827 	bl	8000a30 <HAL_GetTick>
 80029e2:	0003      	movs	r3, r0
 80029e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029e8:	f7fe f822 	bl	8000a30 <HAL_GetTick>
 80029ec:	0002      	movs	r2, r0
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e054      	b.n	8002aa4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029fa:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	2380      	movs	r3, #128	; 0x80
 8002a00:	049b      	lsls	r3, r3, #18
 8002a02:	4013      	ands	r3, r2
 8002a04:	d0f0      	beq.n	80029e8 <HAL_RCC_OscConfig+0x644>
 8002a06:	e04c      	b.n	8002aa2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a08:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	4b04      	ldr	r3, [pc, #16]	; (8002a20 <HAL_RCC_OscConfig+0x67c>)
 8002a0e:	4908      	ldr	r1, [pc, #32]	; (8002a30 <HAL_RCC_OscConfig+0x68c>)
 8002a10:	400a      	ands	r2, r1
 8002a12:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a14:	f7fe f80c 	bl	8000a30 <HAL_GetTick>
 8002a18:	0003      	movs	r3, r0
 8002a1a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a1c:	e015      	b.n	8002a4a <HAL_RCC_OscConfig+0x6a6>
 8002a1e:	46c0      	nop			; (mov r8, r8)
 8002a20:	40021000 	.word	0x40021000
 8002a24:	00001388 	.word	0x00001388
 8002a28:	efffffff 	.word	0xefffffff
 8002a2c:	fffeffff 	.word	0xfffeffff
 8002a30:	feffffff 	.word	0xfeffffff
 8002a34:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a38:	f7fd fffa 	bl	8000a30 <HAL_GetTick>
 8002a3c:	0002      	movs	r2, r0
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e02c      	b.n	8002aa4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a4a:	4b18      	ldr	r3, [pc, #96]	; (8002aac <HAL_RCC_OscConfig+0x708>)
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	2380      	movs	r3, #128	; 0x80
 8002a50:	049b      	lsls	r3, r3, #18
 8002a52:	4013      	ands	r3, r2
 8002a54:	d1f0      	bne.n	8002a38 <HAL_RCC_OscConfig+0x694>
 8002a56:	e024      	b.n	8002aa2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d101      	bne.n	8002a64 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e01f      	b.n	8002aa4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002a64:	4b11      	ldr	r3, [pc, #68]	; (8002aac <HAL_RCC_OscConfig+0x708>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002a6a:	4b10      	ldr	r3, [pc, #64]	; (8002aac <HAL_RCC_OscConfig+0x708>)
 8002a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	23c0      	movs	r3, #192	; 0xc0
 8002a74:	025b      	lsls	r3, r3, #9
 8002a76:	401a      	ands	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d10e      	bne.n	8002a9e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	220f      	movs	r2, #15
 8002a84:	401a      	ands	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d107      	bne.n	8002a9e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	23f0      	movs	r3, #240	; 0xf0
 8002a92:	039b      	lsls	r3, r3, #14
 8002a94:	401a      	ands	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d001      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e000      	b.n	8002aa4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	b008      	add	sp, #32
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40021000 	.word	0x40021000

08002ab0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e0bf      	b.n	8002c44 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ac4:	4b61      	ldr	r3, [pc, #388]	; (8002c4c <HAL_RCC_ClockConfig+0x19c>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	4013      	ands	r3, r2
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d911      	bls.n	8002af6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ad2:	4b5e      	ldr	r3, [pc, #376]	; (8002c4c <HAL_RCC_ClockConfig+0x19c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	4393      	bics	r3, r2
 8002ada:	0019      	movs	r1, r3
 8002adc:	4b5b      	ldr	r3, [pc, #364]	; (8002c4c <HAL_RCC_ClockConfig+0x19c>)
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ae4:	4b59      	ldr	r3, [pc, #356]	; (8002c4c <HAL_RCC_ClockConfig+0x19c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	4013      	ands	r3, r2
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d001      	beq.n	8002af6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e0a6      	b.n	8002c44 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2202      	movs	r2, #2
 8002afc:	4013      	ands	r3, r2
 8002afe:	d015      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2204      	movs	r2, #4
 8002b06:	4013      	ands	r3, r2
 8002b08:	d006      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002b0a:	4b51      	ldr	r3, [pc, #324]	; (8002c50 <HAL_RCC_ClockConfig+0x1a0>)
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	4b50      	ldr	r3, [pc, #320]	; (8002c50 <HAL_RCC_ClockConfig+0x1a0>)
 8002b10:	21e0      	movs	r1, #224	; 0xe0
 8002b12:	00c9      	lsls	r1, r1, #3
 8002b14:	430a      	orrs	r2, r1
 8002b16:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b18:	4b4d      	ldr	r3, [pc, #308]	; (8002c50 <HAL_RCC_ClockConfig+0x1a0>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	22f0      	movs	r2, #240	; 0xf0
 8002b1e:	4393      	bics	r3, r2
 8002b20:	0019      	movs	r1, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689a      	ldr	r2, [r3, #8]
 8002b26:	4b4a      	ldr	r3, [pc, #296]	; (8002c50 <HAL_RCC_ClockConfig+0x1a0>)
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2201      	movs	r2, #1
 8002b32:	4013      	ands	r3, r2
 8002b34:	d04c      	beq.n	8002bd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d107      	bne.n	8002b4e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3e:	4b44      	ldr	r3, [pc, #272]	; (8002c50 <HAL_RCC_ClockConfig+0x1a0>)
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	2380      	movs	r3, #128	; 0x80
 8002b44:	029b      	lsls	r3, r3, #10
 8002b46:	4013      	ands	r3, r2
 8002b48:	d120      	bne.n	8002b8c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e07a      	b.n	8002c44 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d107      	bne.n	8002b66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b56:	4b3e      	ldr	r3, [pc, #248]	; (8002c50 <HAL_RCC_ClockConfig+0x1a0>)
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	2380      	movs	r3, #128	; 0x80
 8002b5c:	049b      	lsls	r3, r3, #18
 8002b5e:	4013      	ands	r3, r2
 8002b60:	d114      	bne.n	8002b8c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e06e      	b.n	8002c44 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b03      	cmp	r3, #3
 8002b6c:	d107      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002b6e:	4b38      	ldr	r3, [pc, #224]	; (8002c50 <HAL_RCC_ClockConfig+0x1a0>)
 8002b70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b72:	2380      	movs	r3, #128	; 0x80
 8002b74:	029b      	lsls	r3, r3, #10
 8002b76:	4013      	ands	r3, r2
 8002b78:	d108      	bne.n	8002b8c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e062      	b.n	8002c44 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b7e:	4b34      	ldr	r3, [pc, #208]	; (8002c50 <HAL_RCC_ClockConfig+0x1a0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2202      	movs	r2, #2
 8002b84:	4013      	ands	r3, r2
 8002b86:	d101      	bne.n	8002b8c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e05b      	b.n	8002c44 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b8c:	4b30      	ldr	r3, [pc, #192]	; (8002c50 <HAL_RCC_ClockConfig+0x1a0>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	2203      	movs	r2, #3
 8002b92:	4393      	bics	r3, r2
 8002b94:	0019      	movs	r1, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	4b2d      	ldr	r3, [pc, #180]	; (8002c50 <HAL_RCC_ClockConfig+0x1a0>)
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ba0:	f7fd ff46 	bl	8000a30 <HAL_GetTick>
 8002ba4:	0003      	movs	r3, r0
 8002ba6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba8:	e009      	b.n	8002bbe <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002baa:	f7fd ff41 	bl	8000a30 <HAL_GetTick>
 8002bae:	0002      	movs	r2, r0
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	4a27      	ldr	r2, [pc, #156]	; (8002c54 <HAL_RCC_ClockConfig+0x1a4>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e042      	b.n	8002c44 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bbe:	4b24      	ldr	r3, [pc, #144]	; (8002c50 <HAL_RCC_ClockConfig+0x1a0>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	220c      	movs	r2, #12
 8002bc4:	401a      	ands	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d1ec      	bne.n	8002baa <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bd0:	4b1e      	ldr	r3, [pc, #120]	; (8002c4c <HAL_RCC_ClockConfig+0x19c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d211      	bcs.n	8002c02 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bde:	4b1b      	ldr	r3, [pc, #108]	; (8002c4c <HAL_RCC_ClockConfig+0x19c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2201      	movs	r2, #1
 8002be4:	4393      	bics	r3, r2
 8002be6:	0019      	movs	r1, r3
 8002be8:	4b18      	ldr	r3, [pc, #96]	; (8002c4c <HAL_RCC_ClockConfig+0x19c>)
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf0:	4b16      	ldr	r3, [pc, #88]	; (8002c4c <HAL_RCC_ClockConfig+0x19c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d001      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e020      	b.n	8002c44 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2204      	movs	r2, #4
 8002c08:	4013      	ands	r3, r2
 8002c0a:	d009      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002c0c:	4b10      	ldr	r3, [pc, #64]	; (8002c50 <HAL_RCC_ClockConfig+0x1a0>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	4a11      	ldr	r2, [pc, #68]	; (8002c58 <HAL_RCC_ClockConfig+0x1a8>)
 8002c12:	4013      	ands	r3, r2
 8002c14:	0019      	movs	r1, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68da      	ldr	r2, [r3, #12]
 8002c1a:	4b0d      	ldr	r3, [pc, #52]	; (8002c50 <HAL_RCC_ClockConfig+0x1a0>)
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c20:	f000 f820 	bl	8002c64 <HAL_RCC_GetSysClockFreq>
 8002c24:	0001      	movs	r1, r0
 8002c26:	4b0a      	ldr	r3, [pc, #40]	; (8002c50 <HAL_RCC_ClockConfig+0x1a0>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	091b      	lsrs	r3, r3, #4
 8002c2c:	220f      	movs	r2, #15
 8002c2e:	4013      	ands	r3, r2
 8002c30:	4a0a      	ldr	r2, [pc, #40]	; (8002c5c <HAL_RCC_ClockConfig+0x1ac>)
 8002c32:	5cd3      	ldrb	r3, [r2, r3]
 8002c34:	000a      	movs	r2, r1
 8002c36:	40da      	lsrs	r2, r3
 8002c38:	4b09      	ldr	r3, [pc, #36]	; (8002c60 <HAL_RCC_ClockConfig+0x1b0>)
 8002c3a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002c3c:	2003      	movs	r0, #3
 8002c3e:	f7fd feb1 	bl	80009a4 <HAL_InitTick>
  
  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	0018      	movs	r0, r3
 8002c46:	46bd      	mov	sp, r7
 8002c48:	b004      	add	sp, #16
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40022000 	.word	0x40022000
 8002c50:	40021000 	.word	0x40021000
 8002c54:	00001388 	.word	0x00001388
 8002c58:	fffff8ff 	.word	0xfffff8ff
 8002c5c:	08002f98 	.word	0x08002f98
 8002c60:	20000000 	.word	0x20000000

08002c64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60bb      	str	r3, [r7, #8]
 8002c72:	2300      	movs	r3, #0
 8002c74:	617b      	str	r3, [r7, #20]
 8002c76:	2300      	movs	r3, #0
 8002c78:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002c7e:	4b2d      	ldr	r3, [pc, #180]	; (8002d34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	220c      	movs	r2, #12
 8002c88:	4013      	ands	r3, r2
 8002c8a:	2b0c      	cmp	r3, #12
 8002c8c:	d046      	beq.n	8002d1c <HAL_RCC_GetSysClockFreq+0xb8>
 8002c8e:	d848      	bhi.n	8002d22 <HAL_RCC_GetSysClockFreq+0xbe>
 8002c90:	2b04      	cmp	r3, #4
 8002c92:	d002      	beq.n	8002c9a <HAL_RCC_GetSysClockFreq+0x36>
 8002c94:	2b08      	cmp	r3, #8
 8002c96:	d003      	beq.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x3c>
 8002c98:	e043      	b.n	8002d22 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c9a:	4b27      	ldr	r3, [pc, #156]	; (8002d38 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002c9c:	613b      	str	r3, [r7, #16]
      break;
 8002c9e:	e043      	b.n	8002d28 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	0c9b      	lsrs	r3, r3, #18
 8002ca4:	220f      	movs	r2, #15
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	4a24      	ldr	r2, [pc, #144]	; (8002d3c <HAL_RCC_GetSysClockFreq+0xd8>)
 8002caa:	5cd3      	ldrb	r3, [r2, r3]
 8002cac:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002cae:	4b21      	ldr	r3, [pc, #132]	; (8002d34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb2:	220f      	movs	r2, #15
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	4a22      	ldr	r2, [pc, #136]	; (8002d40 <HAL_RCC_GetSysClockFreq+0xdc>)
 8002cb8:	5cd3      	ldrb	r3, [r2, r3]
 8002cba:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	23c0      	movs	r3, #192	; 0xc0
 8002cc0:	025b      	lsls	r3, r3, #9
 8002cc2:	401a      	ands	r2, r3
 8002cc4:	2380      	movs	r3, #128	; 0x80
 8002cc6:	025b      	lsls	r3, r3, #9
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d109      	bne.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ccc:	68b9      	ldr	r1, [r7, #8]
 8002cce:	481a      	ldr	r0, [pc, #104]	; (8002d38 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002cd0:	f7fd fa1a 	bl	8000108 <__udivsi3>
 8002cd4:	0003      	movs	r3, r0
 8002cd6:	001a      	movs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4353      	muls	r3, r2
 8002cdc:	617b      	str	r3, [r7, #20]
 8002cde:	e01a      	b.n	8002d16 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	23c0      	movs	r3, #192	; 0xc0
 8002ce4:	025b      	lsls	r3, r3, #9
 8002ce6:	401a      	ands	r2, r3
 8002ce8:	23c0      	movs	r3, #192	; 0xc0
 8002cea:	025b      	lsls	r3, r3, #9
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d109      	bne.n	8002d04 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002cf0:	68b9      	ldr	r1, [r7, #8]
 8002cf2:	4814      	ldr	r0, [pc, #80]	; (8002d44 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002cf4:	f7fd fa08 	bl	8000108 <__udivsi3>
 8002cf8:	0003      	movs	r3, r0
 8002cfa:	001a      	movs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4353      	muls	r3, r2
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d04:	68b9      	ldr	r1, [r7, #8]
 8002d06:	4810      	ldr	r0, [pc, #64]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xe4>)
 8002d08:	f7fd f9fe 	bl	8000108 <__udivsi3>
 8002d0c:	0003      	movs	r3, r0
 8002d0e:	001a      	movs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4353      	muls	r3, r2
 8002d14:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	613b      	str	r3, [r7, #16]
      break;
 8002d1a:	e005      	b.n	8002d28 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002d1c:	4b09      	ldr	r3, [pc, #36]	; (8002d44 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002d1e:	613b      	str	r3, [r7, #16]
      break;
 8002d20:	e002      	b.n	8002d28 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d22:	4b09      	ldr	r3, [pc, #36]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xe4>)
 8002d24:	613b      	str	r3, [r7, #16]
      break;
 8002d26:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002d28:	693b      	ldr	r3, [r7, #16]
}
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	b006      	add	sp, #24
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	46c0      	nop			; (mov r8, r8)
 8002d34:	40021000 	.word	0x40021000
 8002d38:	00f42400 	.word	0x00f42400
 8002d3c:	08002fa8 	.word	0x08002fa8
 8002d40:	08002fb8 	.word	0x08002fb8
 8002d44:	02dc6c00 	.word	0x02dc6c00
 8002d48:	007a1200 	.word	0x007a1200

08002d4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d54:	2300      	movs	r3, #0
 8002d56:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	2380      	movs	r3, #128	; 0x80
 8002d62:	025b      	lsls	r3, r3, #9
 8002d64:	4013      	ands	r3, r2
 8002d66:	d100      	bne.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002d68:	e08e      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002d6a:	2017      	movs	r0, #23
 8002d6c:	183b      	adds	r3, r7, r0
 8002d6e:	2200      	movs	r2, #0
 8002d70:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d72:	4b67      	ldr	r3, [pc, #412]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d74:	69da      	ldr	r2, [r3, #28]
 8002d76:	2380      	movs	r3, #128	; 0x80
 8002d78:	055b      	lsls	r3, r3, #21
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	d110      	bne.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d7e:	4b64      	ldr	r3, [pc, #400]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d80:	69da      	ldr	r2, [r3, #28]
 8002d82:	4b63      	ldr	r3, [pc, #396]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d84:	2180      	movs	r1, #128	; 0x80
 8002d86:	0549      	lsls	r1, r1, #21
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	61da      	str	r2, [r3, #28]
 8002d8c:	4b60      	ldr	r3, [pc, #384]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d8e:	69da      	ldr	r2, [r3, #28]
 8002d90:	2380      	movs	r3, #128	; 0x80
 8002d92:	055b      	lsls	r3, r3, #21
 8002d94:	4013      	ands	r3, r2
 8002d96:	60bb      	str	r3, [r7, #8]
 8002d98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d9a:	183b      	adds	r3, r7, r0
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da0:	4b5c      	ldr	r3, [pc, #368]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	2380      	movs	r3, #128	; 0x80
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	4013      	ands	r3, r2
 8002daa:	d11a      	bne.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dac:	4b59      	ldr	r3, [pc, #356]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	4b58      	ldr	r3, [pc, #352]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002db2:	2180      	movs	r1, #128	; 0x80
 8002db4:	0049      	lsls	r1, r1, #1
 8002db6:	430a      	orrs	r2, r1
 8002db8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dba:	f7fd fe39 	bl	8000a30 <HAL_GetTick>
 8002dbe:	0003      	movs	r3, r0
 8002dc0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dc4:	f7fd fe34 	bl	8000a30 <HAL_GetTick>
 8002dc8:	0002      	movs	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b64      	cmp	r3, #100	; 0x64
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e097      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd6:	4b4f      	ldr	r3, [pc, #316]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	2380      	movs	r3, #128	; 0x80
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	4013      	ands	r3, r2
 8002de0:	d0f0      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002de2:	4b4b      	ldr	r3, [pc, #300]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002de4:	6a1a      	ldr	r2, [r3, #32]
 8002de6:	23c0      	movs	r3, #192	; 0xc0
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4013      	ands	r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d034      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	23c0      	movs	r3, #192	; 0xc0
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d02c      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e04:	4b42      	ldr	r3, [pc, #264]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	4a43      	ldr	r2, [pc, #268]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e0e:	4b40      	ldr	r3, [pc, #256]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e10:	6a1a      	ldr	r2, [r3, #32]
 8002e12:	4b3f      	ldr	r3, [pc, #252]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e14:	2180      	movs	r1, #128	; 0x80
 8002e16:	0249      	lsls	r1, r1, #9
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e1c:	4b3c      	ldr	r3, [pc, #240]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e1e:	6a1a      	ldr	r2, [r3, #32]
 8002e20:	4b3b      	ldr	r3, [pc, #236]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e22:	493e      	ldr	r1, [pc, #248]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e24:	400a      	ands	r2, r1
 8002e26:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e28:	4b39      	ldr	r3, [pc, #228]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2201      	movs	r2, #1
 8002e32:	4013      	ands	r3, r2
 8002e34:	d013      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e36:	f7fd fdfb 	bl	8000a30 <HAL_GetTick>
 8002e3a:	0003      	movs	r3, r0
 8002e3c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e3e:	e009      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e40:	f7fd fdf6 	bl	8000a30 <HAL_GetTick>
 8002e44:	0002      	movs	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	4a35      	ldr	r2, [pc, #212]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e058      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e54:	4b2e      	ldr	r3, [pc, #184]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	2202      	movs	r2, #2
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d0f0      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e5e:	4b2c      	ldr	r3, [pc, #176]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	4a2d      	ldr	r2, [pc, #180]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e64:	4013      	ands	r3, r2
 8002e66:	0019      	movs	r1, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	4b28      	ldr	r3, [pc, #160]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e72:	2317      	movs	r3, #23
 8002e74:	18fb      	adds	r3, r7, r3
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d105      	bne.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e7c:	4b24      	ldr	r3, [pc, #144]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e7e:	69da      	ldr	r2, [r3, #28]
 8002e80:	4b23      	ldr	r3, [pc, #140]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e82:	4928      	ldr	r1, [pc, #160]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e84:	400a      	ands	r2, r1
 8002e86:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	4013      	ands	r3, r2
 8002e90:	d009      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e92:	4b1f      	ldr	r3, [pc, #124]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e96:	2203      	movs	r2, #3
 8002e98:	4393      	bics	r3, r2
 8002e9a:	0019      	movs	r1, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	4b1b      	ldr	r3, [pc, #108]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2220      	movs	r2, #32
 8002eac:	4013      	ands	r3, r2
 8002eae:	d009      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002eb0:	4b17      	ldr	r3, [pc, #92]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb4:	2210      	movs	r2, #16
 8002eb6:	4393      	bics	r3, r2
 8002eb8:	0019      	movs	r1, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68da      	ldr	r2, [r3, #12]
 8002ebe:	4b14      	ldr	r3, [pc, #80]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	2380      	movs	r3, #128	; 0x80
 8002eca:	029b      	lsls	r3, r3, #10
 8002ecc:	4013      	ands	r3, r2
 8002ece:	d009      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ed0:	4b0f      	ldr	r3, [pc, #60]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed4:	2280      	movs	r2, #128	; 0x80
 8002ed6:	4393      	bics	r3, r2
 8002ed8:	0019      	movs	r1, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	695a      	ldr	r2, [r3, #20]
 8002ede:	4b0c      	ldr	r3, [pc, #48]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	2380      	movs	r3, #128	; 0x80
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	4013      	ands	r3, r2
 8002eee:	d009      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ef0:	4b07      	ldr	r3, [pc, #28]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef4:	2240      	movs	r2, #64	; 0x40
 8002ef6:	4393      	bics	r3, r2
 8002ef8:	0019      	movs	r1, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691a      	ldr	r2, [r3, #16]
 8002efe:	4b04      	ldr	r3, [pc, #16]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f00:	430a      	orrs	r2, r1
 8002f02:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	0018      	movs	r0, r3
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	b006      	add	sp, #24
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	46c0      	nop			; (mov r8, r8)
 8002f10:	40021000 	.word	0x40021000
 8002f14:	40007000 	.word	0x40007000
 8002f18:	fffffcff 	.word	0xfffffcff
 8002f1c:	fffeffff 	.word	0xfffeffff
 8002f20:	00001388 	.word	0x00001388
 8002f24:	efffffff 	.word	0xefffffff

08002f28 <memset>:
 8002f28:	0003      	movs	r3, r0
 8002f2a:	1882      	adds	r2, r0, r2
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d100      	bne.n	8002f32 <memset+0xa>
 8002f30:	4770      	bx	lr
 8002f32:	7019      	strb	r1, [r3, #0]
 8002f34:	3301      	adds	r3, #1
 8002f36:	e7f9      	b.n	8002f2c <memset+0x4>

08002f38 <__libc_init_array>:
 8002f38:	b570      	push	{r4, r5, r6, lr}
 8002f3a:	2600      	movs	r6, #0
 8002f3c:	4c0c      	ldr	r4, [pc, #48]	; (8002f70 <__libc_init_array+0x38>)
 8002f3e:	4d0d      	ldr	r5, [pc, #52]	; (8002f74 <__libc_init_array+0x3c>)
 8002f40:	1b64      	subs	r4, r4, r5
 8002f42:	10a4      	asrs	r4, r4, #2
 8002f44:	42a6      	cmp	r6, r4
 8002f46:	d109      	bne.n	8002f5c <__libc_init_array+0x24>
 8002f48:	2600      	movs	r6, #0
 8002f4a:	f000 f819 	bl	8002f80 <_init>
 8002f4e:	4c0a      	ldr	r4, [pc, #40]	; (8002f78 <__libc_init_array+0x40>)
 8002f50:	4d0a      	ldr	r5, [pc, #40]	; (8002f7c <__libc_init_array+0x44>)
 8002f52:	1b64      	subs	r4, r4, r5
 8002f54:	10a4      	asrs	r4, r4, #2
 8002f56:	42a6      	cmp	r6, r4
 8002f58:	d105      	bne.n	8002f66 <__libc_init_array+0x2e>
 8002f5a:	bd70      	pop	{r4, r5, r6, pc}
 8002f5c:	00b3      	lsls	r3, r6, #2
 8002f5e:	58eb      	ldr	r3, [r5, r3]
 8002f60:	4798      	blx	r3
 8002f62:	3601      	adds	r6, #1
 8002f64:	e7ee      	b.n	8002f44 <__libc_init_array+0xc>
 8002f66:	00b3      	lsls	r3, r6, #2
 8002f68:	58eb      	ldr	r3, [r5, r3]
 8002f6a:	4798      	blx	r3
 8002f6c:	3601      	adds	r6, #1
 8002f6e:	e7f2      	b.n	8002f56 <__libc_init_array+0x1e>
 8002f70:	08002fc8 	.word	0x08002fc8
 8002f74:	08002fc8 	.word	0x08002fc8
 8002f78:	08002fcc 	.word	0x08002fcc
 8002f7c:	08002fc8 	.word	0x08002fc8

08002f80 <_init>:
 8002f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f82:	46c0      	nop			; (mov r8, r8)
 8002f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f86:	bc08      	pop	{r3}
 8002f88:	469e      	mov	lr, r3
 8002f8a:	4770      	bx	lr

08002f8c <_fini>:
 8002f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f8e:	46c0      	nop			; (mov r8, r8)
 8002f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f92:	bc08      	pop	{r3}
 8002f94:	469e      	mov	lr, r3
 8002f96:	4770      	bx	lr
